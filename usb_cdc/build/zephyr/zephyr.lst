
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	40 3d 00 20 cd 59 00 00 85 dc 00 00 85 59 00 00     @=. .Y.......Y..
  10:	85 59 00 00 85 59 00 00 85 59 00 00 00 00 00 00     .Y...Y...Y......
	...
  2c:	f9 4a 00 00 85 59 00 00 00 00 00 00 a1 4a 00 00     .J...Y.......J..
  3c:	85 59 00 00                                         .Y..

00000040 <_irq_vector_table>:
  40:	d1 4b 00 00 d1 4b 00 00 d1 4b 00 00 d1 4b 00 00     .K...K...K...K..
  50:	d1 4b 00 00 d1 4b 00 00 d1 4b 00 00 d1 4b 00 00     .K...K...K...K..
  60:	d1 4b 00 00 d1 4b 00 00 d1 4b 00 00 d1 4b 00 00     .K...K...K...K..
  70:	d1 4b 00 00 d1 4b 00 00 d1 4b 00 00 d1 4b 00 00     .K...K...K...K..
  80:	d1 4b 00 00 d1 4b 00 00 d1 4b 00 00 d1 4b 00 00     .K...K...K...K..
  90:	d1 4b 00 00 d1 4b 00 00 d1 4b 00 00 d1 4b 00 00     .K...K...K...K..
  a0:	d1 4b 00 00 d1 4b 00 00 d1 4b 00 00 d1 4b 00 00     .K...K...K...K..
  b0:	d1 4b 00 00 d1 4b 00 00 d1 4b 00 00 d1 4b 00 00     .K...K...K...K..
  c0:	d1 4b 00 00 d1 4b 00 00 d1 4b 00 00 d1 4b 00 00     .K...K...K...K..
  d0:	d1 4b 00 00 d1 4b 00 00 d1 4b 00 00 d1 4b 00 00     .K...K...K...K..
  e0:	d1 4b 00 00 d1 4b 00 00 d1 4b 00 00 d1 4b 00 00     .K...K...K...K..
  f0:	d1 4b 00 00 d1 4b 00 00 d1 4b 00 00 d1 4b 00 00     .K...K...K...K..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     138:	4686      	mov	lr, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e08      	ldr	r6, [sp, #32]
     140:	4615      	mov	r5, r2
     142:	4674      	mov	r4, lr
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c2 	bne.w	2d0 <CONFIG_FLASH_SIZE+0xd0>
     14c:	4285      	cmp	r5, r0
     14e:	fab2 f282 	clz	r2, r2
     152:	d945      	bls.n	1e0 <__data_size+0x17>
     154:	b14a      	cbz	r2, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c2 0320 	rsb	r3, r2, #32
     15a:	fa00 fc02 	lsl.w	ip, r0, r2
     15e:	fa2e f303 	lsr.w	r3, lr, r3
     162:	4095      	lsls	r5, r2
     164:	ea43 0c0c 	orr.w	ip, r3, ip
     168:	4094      	lsls	r4, r2
     16a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     16e:	b2a8      	uxth	r0, r5
     170:	fbbc f8fe 	udiv	r8, ip, lr
     174:	0c23      	lsrs	r3, r4, #16
     176:	fb0e cc18 	mls	ip, lr, r8, ip
     17a:	fb08 f900 	mul.w	r9, r8, r0
     17e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     182:	4599      	cmp	r9, r3
     184:	d928      	bls.n	1d8 <__data_size+0xf>
     186:	18eb      	adds	r3, r5, r3
     188:	f108 37ff 	add.w	r7, r8, #4294967295
     18c:	d204      	bcs.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     18e:	4599      	cmp	r9, r3
     190:	d902      	bls.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     192:	f1a8 0702 	sub.w	r7, r8, #2
     196:	442b      	add	r3, r5
     198:	eba3 0309 	sub.w	r3, r3, r9
     19c:	b2a4      	uxth	r4, r4
     19e:	fbb3 fcfe 	udiv	ip, r3, lr
     1a2:	fb0e 331c 	mls	r3, lr, ip, r3
     1a6:	fb0c f000 	mul.w	r0, ip, r0
     1aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1ae:	42a0      	cmp	r0, r4
     1b0:	d914      	bls.n	1dc <__data_size+0x13>
     1b2:	192c      	adds	r4, r5, r4
     1b4:	f10c 33ff 	add.w	r3, ip, #4294967295
     1b8:	d204      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1ba:	42a0      	cmp	r0, r4
     1bc:	d902      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1be:	f1ac 0302 	sub.w	r3, ip, #2
     1c2:	442c      	add	r4, r5
     1c4:	1a24      	subs	r4, r4, r0
     1c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     1ca:	b11e      	cbz	r6, 1d4 <__data_size+0xb>
     1cc:	40d4      	lsrs	r4, r2
     1ce:	2300      	movs	r3, #0
     1d0:	6034      	str	r4, [r6, #0]
     1d2:	6073      	str	r3, [r6, #4]
     1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d8:	4647      	mov	r7, r8
     1da:	e7dd      	b.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     1dc:	4663      	mov	r3, ip
     1de:	e7f1      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e0:	bb92      	cbnz	r2, 248 <CONFIG_FLASH_SIZE+0x48>
     1e2:	1b43      	subs	r3, r0, r5
     1e4:	2101      	movs	r1, #1
     1e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1ea:	b2af      	uxth	r7, r5
     1ec:	fbb3 fcfe 	udiv	ip, r3, lr
     1f0:	0c20      	lsrs	r0, r4, #16
     1f2:	fb0e 331c 	mls	r3, lr, ip, r3
     1f6:	fb0c f807 	mul.w	r8, ip, r7
     1fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1fe:	4598      	cmp	r8, r3
     200:	d962      	bls.n	2c8 <CONFIG_FLASH_SIZE+0xc8>
     202:	18eb      	adds	r3, r5, r3
     204:	f10c 30ff 	add.w	r0, ip, #4294967295
     208:	d204      	bcs.n	214 <CONFIG_FLASH_SIZE+0x14>
     20a:	4598      	cmp	r8, r3
     20c:	d902      	bls.n	214 <CONFIG_FLASH_SIZE+0x14>
     20e:	f1ac 0002 	sub.w	r0, ip, #2
     212:	442b      	add	r3, r5
     214:	eba3 0308 	sub.w	r3, r3, r8
     218:	b2a4      	uxth	r4, r4
     21a:	fbb3 fcfe 	udiv	ip, r3, lr
     21e:	fb0e 331c 	mls	r3, lr, ip, r3
     222:	fb0c f707 	mul.w	r7, ip, r7
     226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     22a:	42a7      	cmp	r7, r4
     22c:	d94e      	bls.n	2cc <CONFIG_FLASH_SIZE+0xcc>
     22e:	192c      	adds	r4, r5, r4
     230:	f10c 33ff 	add.w	r3, ip, #4294967295
     234:	d204      	bcs.n	240 <CONFIG_FLASH_SIZE+0x40>
     236:	42a7      	cmp	r7, r4
     238:	d902      	bls.n	240 <CONFIG_FLASH_SIZE+0x40>
     23a:	f1ac 0302 	sub.w	r3, ip, #2
     23e:	442c      	add	r4, r5
     240:	1be4      	subs	r4, r4, r7
     242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     246:	e7c0      	b.n	1ca <__data_size+0x1>
     248:	f1c2 0320 	rsb	r3, r2, #32
     24c:	fa20 f103 	lsr.w	r1, r0, r3
     250:	4095      	lsls	r5, r2
     252:	4090      	lsls	r0, r2
     254:	fa2e f303 	lsr.w	r3, lr, r3
     258:	4303      	orrs	r3, r0
     25a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     25e:	b2af      	uxth	r7, r5
     260:	fbb1 fcfe 	udiv	ip, r1, lr
     264:	fb0e 101c 	mls	r0, lr, ip, r1
     268:	0c19      	lsrs	r1, r3, #16
     26a:	fb0c f807 	mul.w	r8, ip, r7
     26e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     272:	4588      	cmp	r8, r1
     274:	fa04 f402 	lsl.w	r4, r4, r2
     278:	d922      	bls.n	2c0 <CONFIG_FLASH_SIZE+0xc0>
     27a:	1869      	adds	r1, r5, r1
     27c:	f10c 30ff 	add.w	r0, ip, #4294967295
     280:	d204      	bcs.n	28c <CONFIG_FLASH_SIZE+0x8c>
     282:	4588      	cmp	r8, r1
     284:	d902      	bls.n	28c <CONFIG_FLASH_SIZE+0x8c>
     286:	f1ac 0002 	sub.w	r0, ip, #2
     28a:	4429      	add	r1, r5
     28c:	eba1 0108 	sub.w	r1, r1, r8
     290:	b29b      	uxth	r3, r3
     292:	fbb1 fcfe 	udiv	ip, r1, lr
     296:	fb0e 111c 	mls	r1, lr, ip, r1
     29a:	fb0c f707 	mul.w	r7, ip, r7
     29e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2a2:	429f      	cmp	r7, r3
     2a4:	d90e      	bls.n	2c4 <CONFIG_FLASH_SIZE+0xc4>
     2a6:	18eb      	adds	r3, r5, r3
     2a8:	f10c 31ff 	add.w	r1, ip, #4294967295
     2ac:	d204      	bcs.n	2b8 <CONFIG_FLASH_SIZE+0xb8>
     2ae:	429f      	cmp	r7, r3
     2b0:	d902      	bls.n	2b8 <CONFIG_FLASH_SIZE+0xb8>
     2b2:	f1ac 0102 	sub.w	r1, ip, #2
     2b6:	442b      	add	r3, r5
     2b8:	1bdb      	subs	r3, r3, r7
     2ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2be:	e792      	b.n	1e6 <__data_size+0x1d>
     2c0:	4660      	mov	r0, ip
     2c2:	e7e3      	b.n	28c <CONFIG_FLASH_SIZE+0x8c>
     2c4:	4661      	mov	r1, ip
     2c6:	e7f7      	b.n	2b8 <CONFIG_FLASH_SIZE+0xb8>
     2c8:	4660      	mov	r0, ip
     2ca:	e7a3      	b.n	214 <CONFIG_FLASH_SIZE+0x14>
     2cc:	4663      	mov	r3, ip
     2ce:	e7b7      	b.n	240 <CONFIG_FLASH_SIZE+0x40>
     2d0:	4283      	cmp	r3, r0
     2d2:	d906      	bls.n	2e2 <CONFIG_FLASH_SIZE+0xe2>
     2d4:	b916      	cbnz	r6, 2dc <CONFIG_FLASH_SIZE+0xdc>
     2d6:	2100      	movs	r1, #0
     2d8:	4608      	mov	r0, r1
     2da:	e77b      	b.n	1d4 <__data_size+0xb>
     2dc:	e9c6 e000 	strd	lr, r0, [r6]
     2e0:	e7f9      	b.n	2d6 <CONFIG_FLASH_SIZE+0xd6>
     2e2:	fab3 f783 	clz	r7, r3
     2e6:	b98f      	cbnz	r7, 30c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc>
     2e8:	4283      	cmp	r3, r0
     2ea:	d301      	bcc.n	2f0 <CONFIG_FLASH_SIZE+0xf0>
     2ec:	4572      	cmp	r2, lr
     2ee:	d808      	bhi.n	302 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2>
     2f0:	ebbe 0402 	subs.w	r4, lr, r2
     2f4:	eb60 0303 	sbc.w	r3, r0, r3
     2f8:	2001      	movs	r0, #1
     2fa:	469c      	mov	ip, r3
     2fc:	b91e      	cbnz	r6, 306 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6>
     2fe:	2100      	movs	r1, #0
     300:	e768      	b.n	1d4 <__data_size+0xb>
     302:	4638      	mov	r0, r7
     304:	e7fa      	b.n	2fc <CONFIG_FLASH_SIZE+0xfc>
     306:	e9c6 4c00 	strd	r4, ip, [r6]
     30a:	e7f8      	b.n	2fe <CONFIG_FLASH_SIZE+0xfe>
     30c:	f1c7 0c20 	rsb	ip, r7, #32
     310:	40bb      	lsls	r3, r7
     312:	fa22 f40c 	lsr.w	r4, r2, ip
     316:	431c      	orrs	r4, r3
     318:	fa2e f10c 	lsr.w	r1, lr, ip
     31c:	fa20 f30c 	lsr.w	r3, r0, ip
     320:	40b8      	lsls	r0, r7
     322:	4301      	orrs	r1, r0
     324:	ea4f 4914 	mov.w	r9, r4, lsr #16
     328:	fa0e f507 	lsl.w	r5, lr, r7
     32c:	fbb3 f8f9 	udiv	r8, r3, r9
     330:	fa1f fe84 	uxth.w	lr, r4
     334:	fb09 3018 	mls	r0, r9, r8, r3
     338:	0c0b      	lsrs	r3, r1, #16
     33a:	fb08 fa0e 	mul.w	sl, r8, lr
     33e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     342:	459a      	cmp	sl, r3
     344:	fa02 f207 	lsl.w	r2, r2, r7
     348:	d940      	bls.n	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     34a:	18e3      	adds	r3, r4, r3
     34c:	f108 30ff 	add.w	r0, r8, #4294967295
     350:	d204      	bcs.n	35c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5c>
     352:	459a      	cmp	sl, r3
     354:	d902      	bls.n	35c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5c>
     356:	f1a8 0002 	sub.w	r0, r8, #2
     35a:	4423      	add	r3, r4
     35c:	eba3 030a 	sub.w	r3, r3, sl
     360:	b289      	uxth	r1, r1
     362:	fbb3 f8f9 	udiv	r8, r3, r9
     366:	fb09 3318 	mls	r3, r9, r8, r3
     36a:	fb08 fe0e 	mul.w	lr, r8, lr
     36e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     372:	458e      	cmp	lr, r1
     374:	d92c      	bls.n	3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     376:	1861      	adds	r1, r4, r1
     378:	f108 33ff 	add.w	r3, r8, #4294967295
     37c:	d204      	bcs.n	388 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x88>
     37e:	458e      	cmp	lr, r1
     380:	d902      	bls.n	388 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x88>
     382:	f1a8 0302 	sub.w	r3, r8, #2
     386:	4421      	add	r1, r4
     388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     38c:	fba0 9802 	umull	r9, r8, r0, r2
     390:	eba1 010e 	sub.w	r1, r1, lr
     394:	4541      	cmp	r1, r8
     396:	46ce      	mov	lr, r9
     398:	4643      	mov	r3, r8
     39a:	d302      	bcc.n	3a2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa2>
     39c:	d106      	bne.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     39e:	454d      	cmp	r5, r9
     3a0:	d204      	bcs.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     3a2:	ebb9 0e02 	subs.w	lr, r9, r2
     3a6:	eb68 0304 	sbc.w	r3, r8, r4
     3aa:	3801      	subs	r0, #1
     3ac:	2e00      	cmp	r6, #0
     3ae:	d0a6      	beq.n	2fe <CONFIG_FLASH_SIZE+0xfe>
     3b0:	ebb5 020e 	subs.w	r2, r5, lr
     3b4:	eb61 0103 	sbc.w	r1, r1, r3
     3b8:	fa01 fc0c 	lsl.w	ip, r1, ip
     3bc:	fa22 f307 	lsr.w	r3, r2, r7
     3c0:	ea4c 0303 	orr.w	r3, ip, r3
     3c4:	40f9      	lsrs	r1, r7
     3c6:	e9c6 3100 	strd	r3, r1, [r6]
     3ca:	e798      	b.n	2fe <CONFIG_FLASH_SIZE+0xfe>
     3cc:	4640      	mov	r0, r8
     3ce:	e7c5      	b.n	35c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5c>
     3d0:	4643      	mov	r3, r8
     3d2:	e7d9      	b.n	388 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x88>

000003d4 <interrupt_handler>:
	return 0;
}
#endif /* IS_ENABLED(CONFIG_USB_DEVICE_STACK_NEXT) */

static void interrupt_handler(const struct device *dev, void *user_data)
{
     3d4:	b570      	push	{r4, r5, r6, lr}
     3d6:	b090      	sub	sp, #64	; 0x40
     3d8:	4604      	mov	r4, r0
	ARG_UNUSED(user_data);

	while (uart_irq_update(dev) && uart_irq_is_pending(dev)) {
     3da:	e033      	b.n	444 <CONFIG_LOG_BUFFER_SIZE+0x44>
 */
static inline int uart_fifo_read(const struct device *dev, uint8_t *rx_data,
				 const int size)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
     3dc:	68a3      	ldr	r3, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->fifo_read == NULL) {
     3de:	699b      	ldr	r3, [r3, #24]
     3e0:	2b00      	cmp	r3, #0
     3e2:	d048      	beq.n	476 <CONFIG_LOG_BUFFER_SIZE+0x76>
		return -ENOSYS;
	}

	return api->fifo_read(dev, rx_data, size);
     3e4:	4669      	mov	r1, sp
     3e6:	4620      	mov	r0, r4
     3e8:	4798      	blx	r3
			uint8_t buffer[64];
			size_t len = MIN(ring_buf_space_get(&ringbuf),
					 sizeof(buffer));

			recv_len = uart_fifo_read(dev, buffer, len);
			if (recv_len < 0) {
     3ea:	1e05      	subs	r5, r0, #0
     3ec:	db43      	blt.n	476 <CONFIG_LOG_BUFFER_SIZE+0x76>
				printk("Failed to read UART FIFO");
				recv_len = 0;
			};

			rb_len = ring_buf_put(&ringbuf, buffer, recv_len);
     3ee:	462a      	mov	r2, r5
     3f0:	4669      	mov	r1, sp
     3f2:	4830      	ldr	r0, [pc, #192]	; (4b4 <CONFIG_LOG_BUFFER_SIZE+0xb4>)
     3f4:	f00c fc14 	bl	cc20 <ring_buf_put>
     3f8:	4606      	mov	r6, r0
			if (rb_len < recv_len) {
     3fa:	4285      	cmp	r5, r0
     3fc:	dc40      	bgt.n	480 <CONFIG_LOG_BUFFER_SIZE+0x80>
				printk("Drop %u bytes", recv_len - rb_len);
			}

			printk("tty fifo -> ringbuf %d bytes", rb_len);
     3fe:	4631      	mov	r1, r6
     400:	482d      	ldr	r0, [pc, #180]	; (4b8 <CONFIG_LOG_BUFFER_SIZE+0xb8>)
     402:	f00b fd8a 	bl	bf1a <printk>
			if (rb_len) {
     406:	2e00      	cmp	r6, #0
     408:	d13f      	bne.n	48a <CONFIG_LOG_BUFFER_SIZE+0x8a>
 * @retval -ENOTSUP If API is not enabled.
 */
static inline int uart_irq_tx_ready(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
     40a:	68a3      	ldr	r3, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->irq_tx_ready == NULL) {
     40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     40e:	b113      	cbz	r3, 416 <CONFIG_LOG_BUFFER_SIZE+0x16>
		return -ENOSYS;
	}

	return api->irq_tx_ready(dev);
     410:	4620      	mov	r0, r4
     412:	4798      	blx	r3
				uart_irq_tx_enable(dev);
			}
		}

		if (uart_irq_tx_ready(dev)) {
     414:	b1b0      	cbz	r0, 444 <CONFIG_LOG_BUFFER_SIZE+0x44>
			uint8_t buffer[64];
			int rb_len, send_len;

			rb_len = ring_buf_get(&ringbuf, buffer, sizeof(buffer));
     416:	2240      	movs	r2, #64	; 0x40
     418:	4669      	mov	r1, sp
     41a:	4826      	ldr	r0, [pc, #152]	; (4b4 <CONFIG_LOG_BUFFER_SIZE+0xb4>)
     41c:	f00c fc5b 	bl	ccd6 <ring_buf_get>
			if (!rb_len) {
     420:	4606      	mov	r6, r0
     422:	2800      	cmp	r0, #0
     424:	d035      	beq.n	492 <CONFIG_LOG_BUFFER_SIZE+0x92>
	const struct uart_driver_api *api =
     426:	68a3      	ldr	r3, [r4, #8]
	if (api->fifo_fill == NULL) {
     428:	695b      	ldr	r3, [r3, #20]
     42a:	2b00      	cmp	r3, #0
     42c:	d038      	beq.n	4a0 <CONFIG_LOG_BUFFER_SIZE+0xa0>
	return api->fifo_fill(dev, tx_data, size);
     42e:	4602      	mov	r2, r0
     430:	4669      	mov	r1, sp
     432:	4620      	mov	r0, r4
     434:	4798      	blx	r3
     436:	4605      	mov	r5, r0
				uart_irq_tx_disable(dev);
				continue;
			}

			send_len = uart_fifo_fill(dev, buffer, rb_len);
			if (send_len < rb_len) {
     438:	42ae      	cmp	r6, r5
     43a:	dc34      	bgt.n	4a6 <CONFIG_LOG_BUFFER_SIZE+0xa6>
				printk("Drop %d bytes", rb_len - send_len);
			}

			printk("ringbuf -> tty fifo %d bytes", send_len);
     43c:	4629      	mov	r1, r5
     43e:	481f      	ldr	r0, [pc, #124]	; (4bc <CONFIG_LOG_BUFFER_SIZE+0xbc>)
     440:	f00b fd6b 	bl	bf1a <printk>
	while (uart_irq_update(dev) && uart_irq_is_pending(dev)) {
     444:	4620      	mov	r0, r4
     446:	f00b fc88 	bl	bd5a <uart_irq_update>
     44a:	b388      	cbz	r0, 4b0 <CONFIG_LOG_BUFFER_SIZE+0xb0>
     44c:	4620      	mov	r0, r4
     44e:	f00b fc7b 	bl	bd48 <uart_irq_is_pending>
     452:	b368      	cbz	r0, 4b0 <CONFIG_LOG_BUFFER_SIZE+0xb0>
 * @retval -ENOTSUP If API is not enabled.
 */
static inline int uart_irq_rx_ready(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
     454:	68a3      	ldr	r3, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->irq_rx_ready == NULL) {
     456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     458:	b11b      	cbz	r3, 462 <CONFIG_LOG_BUFFER_SIZE+0x62>
		return -ENOSYS;
	}
	return api->irq_rx_ready(dev);
     45a:	4620      	mov	r0, r4
     45c:	4798      	blx	r3
		if (uart_irq_rx_ready(dev)) {
     45e:	2800      	cmp	r0, #0
     460:	d0d3      	beq.n	40a <CONFIG_LOG_BUFFER_SIZE+0xa>
 *
 * @return Ring buffer free space (in bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->put_head - buf->get_tail);
     462:	4914      	ldr	r1, [pc, #80]	; (4b4 <CONFIG_LOG_BUFFER_SIZE+0xb4>)
     464:	69ca      	ldr	r2, [r1, #28]
     466:	684b      	ldr	r3, [r1, #4]
     468:	6949      	ldr	r1, [r1, #20]
     46a:	1a5b      	subs	r3, r3, r1
     46c:	1ad2      	subs	r2, r2, r3
			size_t len = MIN(ring_buf_space_get(&ringbuf),
     46e:	2a3f      	cmp	r2, #63	; 0x3f
     470:	d9b4      	bls.n	3dc <interrupt_handler+0x8>
     472:	2240      	movs	r2, #64	; 0x40
     474:	e7b2      	b.n	3dc <interrupt_handler+0x8>
				printk("Failed to read UART FIFO");
     476:	4812      	ldr	r0, [pc, #72]	; (4c0 <CONFIG_LOG_BUFFER_SIZE+0xc0>)
     478:	f00b fd4f 	bl	bf1a <printk>
				recv_len = 0;
     47c:	2500      	movs	r5, #0
     47e:	e7b6      	b.n	3ee <CONFIG_LOG_FAILURE_REPORT_PERIOD+0x6>
				printk("Drop %u bytes", recv_len - rb_len);
     480:	1a29      	subs	r1, r5, r0
     482:	4810      	ldr	r0, [pc, #64]	; (4c4 <CONFIG_LOG_BUFFER_SIZE+0xc4>)
     484:	f00b fd49 	bl	bf1a <printk>
     488:	e7b9      	b.n	3fe <CONFIG_LOG_FAILURE_REPORT_PERIOD+0x16>
				uart_irq_tx_enable(dev);
     48a:	4620      	mov	r0, r4
     48c:	f00b fc4a 	bl	bd24 <uart_irq_tx_enable>
     490:	e7bb      	b.n	40a <CONFIG_LOG_BUFFER_SIZE+0xa>
				printk("Ring buffer empty, disable TX IRQ");
     492:	480d      	ldr	r0, [pc, #52]	; (4c8 <CONFIG_LOG_BUFFER_SIZE+0xc8>)
     494:	f00b fd41 	bl	bf1a <printk>
				uart_irq_tx_disable(dev);
     498:	4620      	mov	r0, r4
     49a:	f00b fc49 	bl	bd30 <uart_irq_tx_disable>
				continue;
     49e:	e7d1      	b.n	444 <CONFIG_LOG_BUFFER_SIZE+0x44>
		return -ENOSYS;
     4a0:	f06f 0557 	mvn.w	r5, #87	; 0x57
     4a4:	e7c8      	b.n	438 <CONFIG_LOG_BUFFER_SIZE+0x38>
				printk("Drop %d bytes", rb_len - send_len);
     4a6:	1b71      	subs	r1, r6, r5
     4a8:	4808      	ldr	r0, [pc, #32]	; (4cc <CONFIG_LOG_BUFFER_SIZE+0xcc>)
     4aa:	f00b fd36 	bl	bf1a <printk>
     4ae:	e7c5      	b.n	43c <CONFIG_LOG_BUFFER_SIZE+0x3c>
		}
	}
}
     4b0:	b010      	add	sp, #64	; 0x40
     4b2:	bd70      	pop	{r4, r5, r6, pc}
     4b4:	20000c50 	.word	0x20000c50
     4b8:	0000ff84 	.word	0x0000ff84
     4bc:	0000ffd8 	.word	0x0000ffd8
     4c0:	0000ff58 	.word	0x0000ff58
     4c4:	0000ff74 	.word	0x0000ff74
     4c8:	0000ffa4 	.word	0x0000ffa4
     4cc:	0000ffc8 	.word	0x0000ffc8

000004d0 <main>:

int main(void)
{
     4d0:	b510      	push	{r4, lr}
     4d2:	b082      	sub	sp, #8
	const struct device *dev;
	uint32_t baudrate, dtr = 0U;
     4d4:	2300      	movs	r3, #0
     4d6:	9300      	str	r3, [sp, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     4d8:	4832      	ldr	r0, [pc, #200]	; (5a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbc>)
     4da:	f00e fe19 	bl	f110 <z_device_is_ready>
	int ret;

	dev = DEVICE_DT_GET_ONE(zephyr_cdc_acm_uart);
	if (!device_is_ready(dev)) {
     4de:	b1a0      	cbz	r0, 50a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x22>
	}

#if defined(CONFIG_USB_DEVICE_STACK_NEXT)
		ret = enable_usb_device_next();
#else
		ret = usb_enable(NULL);
     4e0:	2000      	movs	r0, #0
     4e2:	f002 ff03 	bl	32ec <usb_enable>
#endif

	if (ret != 0) {
     4e6:	b9a0      	cbnz	r0, 512 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a>
	buf->size = size;
     4e8:	4b2f      	ldr	r3, [pc, #188]	; (5a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc0>)
     4ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
     4ee:	61da      	str	r2, [r3, #28]
	buf->buffer = data;
     4f0:	4a2e      	ldr	r2, [pc, #184]	; (5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>)
     4f2:	601a      	str	r2, [r3, #0]
	buf->put_head = buf->put_tail = buf->put_base = value;
     4f4:	2200      	movs	r2, #0
     4f6:	60da      	str	r2, [r3, #12]
     4f8:	609a      	str	r2, [r3, #8]
     4fa:	605a      	str	r2, [r3, #4]
	buf->get_head = buf->get_tail = buf->get_base = value;
     4fc:	619a      	str	r2, [r3, #24]
     4fe:	615a      	str	r2, [r3, #20]
     500:	611a      	str	r2, [r3, #16]
		return 0;
	}

	ring_buf_init(&ringbuf, sizeof(ring_buffer), ring_buffer);

	printk("Wait for DTR");
     502:	482b      	ldr	r0, [pc, #172]	; (5b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc8>)
     504:	f00b fd09 	bl	bf1a <printk>
     508:	e00c      	b.n	524 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3c>
		printk("CDC ACM device not ready");
     50a:	482a      	ldr	r0, [pc, #168]	; (5b4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xcc>)
     50c:	f00b fd05 	bl	bf1a <printk>
		return 0;
     510:	e037      	b.n	582 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9a>
		printk("Failed to enable USB");
     512:	4829      	ldr	r0, [pc, #164]	; (5b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd0>)
     514:	f00b fd01 	bl	bf1a <printk>
		return 0;
     518:	e033      	b.n	582 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     51a:	f640 40cd 	movw	r0, #3277	; 0xccd
     51e:	2100      	movs	r1, #0
     520:	f00b f908 	bl	b734 <z_impl_k_sleep>

	while (true) {
		uart_line_ctrl_get(dev, UART_LINE_CTRL_DTR, &dtr);
     524:	466a      	mov	r2, sp
     526:	2104      	movs	r1, #4
     528:	481e      	ldr	r0, [pc, #120]	; (5a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbc>)
     52a:	f00b fc28 	bl	bd7e <uart_line_ctrl_get>
		if (dtr) {
     52e:	9b00      	ldr	r3, [sp, #0]
     530:	2b00      	cmp	r3, #0
     532:	d0f2      	beq.n	51a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x32>
			/* Give CPU resources to low priority threads. */
			k_sleep(K_MSEC(100));
		}
	}

	printk("DTR set");
     534:	4821      	ldr	r0, [pc, #132]	; (5bc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd4>)
     536:	f00b fcf0 	bl	bf1a <printk>

	/* They are optional, we use them to test the interrupt endpoint */
	ret = uart_line_ctrl_set(dev, UART_LINE_CTRL_DCD, 1);
     53a:	2201      	movs	r2, #1
     53c:	2108      	movs	r1, #8
     53e:	4819      	ldr	r0, [pc, #100]	; (5a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbc>)
     540:	f00b fc14 	bl	bd6c <uart_line_ctrl_set>
	if (ret) {
     544:	4601      	mov	r1, r0
     546:	b9f8      	cbnz	r0, 588 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa0>
		printk("Failed to set DCD, ret code %d", ret);
	}

	ret = uart_line_ctrl_set(dev, UART_LINE_CTRL_DSR, 1);
     548:	2201      	movs	r2, #1
     54a:	2110      	movs	r1, #16
     54c:	4815      	ldr	r0, [pc, #84]	; (5a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbc>)
     54e:	f00b fc0d 	bl	bd6c <uart_line_ctrl_set>
	if (ret) {
     552:	4601      	mov	r1, r0
     554:	b9e0      	cbnz	r0, 590 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa8>
		printk("Failed to set DSR, ret code %d", ret);
	}

	/* Wait 100ms for the host to do all settings */
	k_msleep(100);
     556:	2064      	movs	r0, #100	; 0x64
     558:	f00b fc1a 	bl	bd90 <k_msleep>

	ret = uart_line_ctrl_get(dev, UART_LINE_CTRL_BAUD_RATE, &baudrate);
     55c:	aa01      	add	r2, sp, #4
     55e:	2101      	movs	r1, #1
     560:	4810      	ldr	r0, [pc, #64]	; (5a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbc>)
     562:	f00b fc0c 	bl	bd7e <uart_line_ctrl_get>
	if (ret) {
     566:	4601      	mov	r1, r0
     568:	b1b0      	cbz	r0, 598 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb0>
		printk("Failed to get baudrate, ret code %d", ret);
     56a:	4815      	ldr	r0, [pc, #84]	; (5c0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd8>)
     56c:	f00b fcd5 	bl	bf1a <printk>
 * @retval -ENOTSUP If API is not enabled.
 */
static inline int uart_irq_callback_set(const struct device *dev,
					 uart_irq_callback_user_data_t cb)
{
	return uart_irq_callback_user_data_set(dev, cb, NULL);
     570:	4c0c      	ldr	r4, [pc, #48]	; (5a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbc>)
     572:	2200      	movs	r2, #0
     574:	4913      	ldr	r1, [pc, #76]	; (5c4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xdc>)
     576:	4620      	mov	r0, r4
     578:	f00b fbc6 	bl	bd08 <uart_irq_callback_user_data_set>
	}

	uart_irq_callback_set(dev, interrupt_handler);

	/* Enable rx interrupts */
	uart_irq_rx_enable(dev);
     57c:	4620      	mov	r0, r4
     57e:	f00b fbdd 	bl	bd3c <uart_irq_rx_enable>
	return 0;
}
     582:	2000      	movs	r0, #0
     584:	b002      	add	sp, #8
     586:	bd10      	pop	{r4, pc}
		printk("Failed to set DCD, ret code %d", ret);
     588:	480f      	ldr	r0, [pc, #60]	; (5c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe0>)
     58a:	f00b fcc6 	bl	bf1a <printk>
     58e:	e7db      	b.n	548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>
		printk("Failed to set DSR, ret code %d", ret);
     590:	480e      	ldr	r0, [pc, #56]	; (5cc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe4>)
     592:	f00b fcc2 	bl	bf1a <printk>
     596:	e7de      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
		printk("Baudrate detected: %d", baudrate);
     598:	9901      	ldr	r1, [sp, #4]
     59a:	480d      	ldr	r0, [pc, #52]	; (5d0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe8>)
     59c:	f00b fcbd 	bl	bf1a <printk>
     5a0:	e7e6      	b.n	570 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x88>
     5a2:	bf00      	nop
     5a4:	0000fc64 	.word	0x0000fc64
     5a8:	20000c50 	.word	0x20000c50
     5ac:	20000c70 	.word	0x20000c70
     5b0:	0001002c 	.word	0x0001002c
     5b4:	0000fff8 	.word	0x0000fff8
     5b8:	00010014 	.word	0x00010014
     5bc:	0001003c 	.word	0x0001003c
     5c0:	00010084 	.word	0x00010084
     5c4:	000003d5 	.word	0x000003d5
     5c8:	00010044 	.word	0x00010044
     5cc:	00010064 	.word	0x00010064
     5d0:	000100a8 	.word	0x000100a8

000005d4 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5d8:	b091      	sub	sp, #68	; 0x44
     5da:	9205      	str	r2, [sp, #20]
     5dc:	9302      	str	r3, [sp, #8]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     5de:	4613      	mov	r3, r2
     5e0:	f002 0204 	and.w	r2, r2, #4
     5e4:	9200      	str	r2, [sp, #0]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     5e6:	f3c3 02c2 	ubfx	r2, r3, #3, #3
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     5ea:	f010 0303 	ands.w	r3, r0, #3
     5ee:	9301      	str	r3, [sp, #4]
     5f0:	f040 8223 	bne.w	a3a <__z_interrupt_stack_SIZEOF+0x1fa>
     5f4:	4607      	mov	r7, r0
     5f6:	468a      	mov	sl, r1
     5f8:	3201      	adds	r2, #1
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
     5fa:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     5fc:	2800      	cmp	r0, #0
     5fe:	d047      	beq.n	690 <cbvprintf_package+0xbc>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     600:	b127      	cbz	r7, 60c <cbvprintf_package+0x38>
     602:	1be3      	subs	r3, r4, r7
     604:	3304      	adds	r3, #4
     606:	4553      	cmp	r3, sl
     608:	f200 821a 	bhi.w	a40 <__z_interrupt_stack_SIZEOF+0x200>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
     60c:	9b02      	ldr	r3, [sp, #8]
     60e:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     610:	9b01      	ldr	r3, [sp, #4]
     612:	9304      	str	r3, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     614:	9306      	str	r3, [sp, #24]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
     616:	9303      	str	r3, [sp, #12]
	bool parsing = false;
     618:	2600      	movs	r6, #0
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
     61a:	f04f 3bff 	mov.w	fp, #4294967295
	align = VA_STACK_ALIGN(char *);
     61e:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
     622:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
     624:	b10f      	cbz	r7, 62a <cbvprintf_package+0x56>
				*(const char **)buf = s;
     626:	9b02      	ldr	r3, [sp, #8]
     628:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     62a:	1e53      	subs	r3, r2, #1
     62c:	9307      	str	r3, [sp, #28]
     62e:	2a00      	cmp	r2, #0
     630:	f340 815f 	ble.w	8f2 <__z_interrupt_stack_SIZEOF+0xb2>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
     634:	9b05      	ldr	r3, [sp, #20]
     636:	f013 0202 	ands.w	r2, r3, #2
     63a:	d026      	beq.n	68a <cbvprintf_package+0xb6>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     63c:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     63e:	1be1      	subs	r1, r4, r7
     640:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     642:	b11a      	cbz	r2, 64c <cbvprintf_package+0x78>
     644:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
     648:	f080 8200 	bcs.w	a4c <__z_interrupt_stack_SIZEOF+0x20c>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     64c:	9903      	ldr	r1, [sp, #12]
     64e:	290f      	cmp	r1, #15
     650:	f200 81ff 	bhi.w	a52 <__z_interrupt_stack_SIZEOF+0x212>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
     654:	2f00      	cmp	r7, #0
     656:	f000 8164 	beq.w	922 <__z_interrupt_stack_SIZEOF+0xe2>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
     65a:	b2db      	uxtb	r3, r3
     65c:	f101 0240 	add.w	r2, r1, #64	; 0x40
     660:	446a      	add	r2, sp
     662:	f802 3c10 	strb.w	r3, [r2, #-16]
					str_ptr_arg[s_idx] = arg_idx;
     666:	f802 bc20 	strb.w	fp, [r2, #-32]
					if (is_ro) {
     66a:	2800      	cmp	r0, #0
     66c:	f000 8155 	beq.w	91a <__z_interrupt_stack_SIZEOF+0xda>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     670:	f063 037f 	orn	r3, r3, #127	; 0x7f
     674:	f101 0240 	add.w	r2, r1, #64	; 0x40
     678:	446a      	add	r2, sp
     67a:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
     67e:	9b04      	ldr	r3, [sp, #16]
     680:	3301      	adds	r3, #1
     682:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
     684:	9b03      	ldr	r3, [sp, #12]
     686:	3301      	adds	r3, #1
     688:	9303      	str	r3, [sp, #12]
			}
			buf += sizeof(char *);
     68a:	3404      	adds	r4, #4

			is_str_arg = false;
     68c:	2200      	movs	r2, #0
     68e:	e03d      	b.n	70c <cbvprintf_package+0x138>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     690:	f001 0a07 	and.w	sl, r1, #7
     694:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     696:	f1ca 0a08 	rsb	sl, sl, #8
     69a:	e7b1      	b.n	600 <cbvprintf_package+0x2c>
				parsing = false;
     69c:	2600      	movs	r6, #0
     69e:	e034      	b.n	70a <cbvprintf_package+0x136>
     6a0:	2600      	movs	r6, #0
     6a2:	e032      	b.n	70a <cbvprintf_package+0x136>
     6a4:	2600      	movs	r6, #0
     6a6:	e030      	b.n	70a <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(intmax_t);
     6a8:	f04f 0808 	mov.w	r8, #8
				size = sizeof(intmax_t);
     6ac:	46c1      	mov	r9, r8
     6ae:	e02c      	b.n	70a <cbvprintf_package+0x136>
				if (*fmt == '%') {
     6b0:	2925      	cmp	r1, #37	; 0x25
     6b2:	d12a      	bne.n	70a <cbvprintf_package+0x136>
					arg_idx++;
     6b4:	f10b 0b01 	add.w	fp, fp, #1
					parsing = true;
     6b8:	2601      	movs	r6, #1
					align = VA_STACK_ALIGN(int);
     6ba:	f04f 0804 	mov.w	r8, #4
					size = sizeof(int);
     6be:	46c1      	mov	r9, r8
				continue;
     6c0:	e023      	b.n	70a <cbvprintf_package+0x136>
			switch (*fmt) {
     6c2:	2947      	cmp	r1, #71	; 0x47
     6c4:	d8ec      	bhi.n	6a0 <cbvprintf_package+0xcc>
     6c6:	292a      	cmp	r1, #42	; 0x2a
     6c8:	d312      	bcc.n	6f0 <cbvprintf_package+0x11c>
     6ca:	392a      	subs	r1, #42	; 0x2a
     6cc:	b2c9      	uxtb	r1, r1
     6ce:	2001      	movs	r0, #1
     6d0:	fa00 f101 	lsl.w	r1, r0, r1
     6d4:	f64f 70da 	movw	r0, #65498	; 0xffda
     6d8:	4201      	tst	r1, r0
     6da:	d116      	bne.n	70a <cbvprintf_package+0x136>
     6dc:	f011 5f62 	tst.w	r1, #947912704	; 0x38800000
     6e0:	f040 80c4 	bne.w	86c <__z_interrupt_stack_SIZEOF+0x2c>
     6e4:	f011 0f01 	tst.w	r1, #1
     6e8:	f040 808e 	bne.w	808 <CONFIG_ISR_STACK_SIZE+0x8>
				parsing = false;
     6ec:	2600      	movs	r6, #0
     6ee:	e00c      	b.n	70a <cbvprintf_package+0x136>
			switch (*fmt) {
     6f0:	2925      	cmp	r1, #37	; 0x25
     6f2:	d103      	bne.n	6fc <cbvprintf_package+0x128>
				arg_idx--;
     6f4:	f10b 3bff 	add.w	fp, fp, #4294967295
				parsing = false;
     6f8:	2600      	movs	r6, #0
				continue;
     6fa:	e006      	b.n	70a <cbvprintf_package+0x136>
			switch (*fmt) {
     6fc:	d901      	bls.n	702 <cbvprintf_package+0x12e>
				parsing = false;
     6fe:	2600      	movs	r6, #0
     700:	e003      	b.n	70a <cbvprintf_package+0x136>
			switch (*fmt) {
     702:	2920      	cmp	r1, #32
     704:	d001      	beq.n	70a <cbvprintf_package+0x136>
     706:	2923      	cmp	r1, #35	; 0x23
     708:	d1cc      	bne.n	6a4 <cbvprintf_package+0xd0>
				parsing = false;
     70a:	461d      	mov	r5, r3
			if (*++fmt == '\0') {
     70c:	1c6b      	adds	r3, r5, #1
     70e:	7869      	ldrb	r1, [r5, #1]
     710:	2900      	cmp	r1, #0
     712:	f000 811d 	beq.w	950 <__z_interrupt_stack_SIZEOF+0x110>
			if (!parsing) {
     716:	2e00      	cmp	r6, #0
     718:	d0ca      	beq.n	6b0 <cbvprintf_package+0xdc>
			switch (*fmt) {
     71a:	297a      	cmp	r1, #122	; 0x7a
     71c:	d8be      	bhi.n	69c <cbvprintf_package+0xc8>
     71e:	294c      	cmp	r1, #76	; 0x4c
     720:	d3cf      	bcc.n	6c2 <cbvprintf_package+0xee>
     722:	394c      	subs	r1, #76	; 0x4c
     724:	292e      	cmp	r1, #46	; 0x2e
     726:	d861      	bhi.n	7ec <cbvprintf_package+0x218>
     728:	a001      	add	r0, pc, #4	; (adr r0, 730 <cbvprintf_package+0x15c>)
     72a:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     72e:	bf00      	nop
     730:	0000070b 	.word	0x0000070b
     734:	000007ed 	.word	0x000007ed
     738:	000007ed 	.word	0x000007ed
     73c:	000007ed 	.word	0x000007ed
     740:	000007ed 	.word	0x000007ed
     744:	000007ed 	.word	0x000007ed
     748:	000007ed 	.word	0x000007ed
     74c:	000007ed 	.word	0x000007ed
     750:	000007ed 	.word	0x000007ed
     754:	000007ed 	.word	0x000007ed
     758:	000007ed 	.word	0x000007ed
     75c:	000007ed 	.word	0x000007ed
     760:	00000801 	.word	0x00000801
     764:	000007ed 	.word	0x000007ed
     768:	000007ed 	.word	0x000007ed
     76c:	000007ed 	.word	0x000007ed
     770:	000007ed 	.word	0x000007ed
     774:	000007ed 	.word	0x000007ed
     778:	000007ed 	.word	0x000007ed
     77c:	000007ed 	.word	0x000007ed
     780:	000007ed 	.word	0x000007ed
     784:	0000086d 	.word	0x0000086d
     788:	000007ed 	.word	0x000007ed
     78c:	00000801 	.word	0x00000801
     790:	00000801 	.word	0x00000801
     794:	0000086d 	.word	0x0000086d
     798:	0000086d 	.word	0x0000086d
     79c:	0000086d 	.word	0x0000086d
     7a0:	0000070b 	.word	0x0000070b
     7a4:	00000801 	.word	0x00000801
     7a8:	000006a9 	.word	0x000006a9
     7ac:	000007ed 	.word	0x000007ed
     7b0:	0000070b 	.word	0x0000070b
     7b4:	000007ed 	.word	0x000007ed
     7b8:	000008cb 	.word	0x000008cb
     7bc:	00000801 	.word	0x00000801
     7c0:	000008cb 	.word	0x000008cb
     7c4:	000007ed 	.word	0x000007ed
     7c8:	000007ed 	.word	0x000007ed
     7cc:	000008d5 	.word	0x000008d5
     7d0:	000007f9 	.word	0x000007f9
     7d4:	00000801 	.word	0x00000801
     7d8:	000007ed 	.word	0x000007ed
     7dc:	000007ed 	.word	0x000007ed
     7e0:	00000801 	.word	0x00000801
     7e4:	000007ed 	.word	0x000007ed
     7e8:	000007f1 	.word	0x000007f1
				parsing = false;
     7ec:	2600      	movs	r6, #0
     7ee:	e78c      	b.n	70a <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(size_t);
     7f0:	f04f 0804 	mov.w	r8, #4
				size = sizeof(size_t);
     7f4:	46c1      	mov	r9, r8
				continue;
     7f6:	e788      	b.n	70a <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(ptrdiff_t);
     7f8:	f04f 0804 	mov.w	r8, #4
				size = sizeof(ptrdiff_t);
     7fc:	46c1      	mov	r9, r8
				continue;
     7fe:	e784      	b.n	70a <cbvprintf_package+0x136>
				if (fmt[-1] == 'l') {
     800:	7829      	ldrb	r1, [r5, #0]
     802:	296c      	cmp	r1, #108	; 0x6c
     804:	d024      	beq.n	850 <__z_interrupt_stack_SIZEOF+0x10>
				parsing = false;
     806:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
     808:	4444      	add	r4, r8
     80a:	3c01      	subs	r4, #1
     80c:	f1c8 0100 	rsb	r1, r8, #0
     810:	400c      	ands	r4, r1
     812:	4620      	mov	r0, r4
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     814:	b127      	cbz	r7, 820 <CONFIG_ISR_STACK_SIZE+0x20>
     816:	1be1      	subs	r1, r4, r7
     818:	4449      	add	r1, r9
     81a:	4551      	cmp	r1, sl
     81c:	f200 8113 	bhi.w	a46 <__z_interrupt_stack_SIZEOF+0x206>
		if (is_str_arg) {
     820:	2a00      	cmp	r2, #0
     822:	d15d      	bne.n	8e0 <__z_interrupt_stack_SIZEOF+0xa0>
		} else if (size == sizeof(int)) {
     824:	f1b9 0f04 	cmp.w	r9, #4
     828:	f000 808a 	beq.w	940 <__z_interrupt_stack_SIZEOF+0x100>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     82c:	f1b9 0f08 	cmp.w	r9, #8
     830:	f040 8112 	bne.w	a58 <__z_interrupt_stack_SIZEOF+0x218>
			long long v = va_arg(ap, long long);
     834:	991a      	ldr	r1, [sp, #104]	; 0x68
     836:	3107      	adds	r1, #7
     838:	f021 0107 	bic.w	r1, r1, #7
     83c:	f101 0008 	add.w	r0, r1, #8
     840:	901a      	str	r0, [sp, #104]	; 0x68
     842:	e9d1 0100 	ldrd	r0, r1, [r1]

			if (buf0 != NULL) {
     846:	b10f      	cbz	r7, 84c <__z_interrupt_stack_SIZEOF+0xc>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     848:	e9c4 0100 	strd	r0, r1, [r4]
				}
			}
			buf += sizeof(long long);
     84c:	3408      	adds	r4, #8
     84e:	e75c      	b.n	70a <cbvprintf_package+0x136>
					if (fmt[-2] == 'l') {
     850:	f813 1c02 	ldrb.w	r1, [r3, #-2]
     854:	296c      	cmp	r1, #108	; 0x6c
     856:	d004      	beq.n	862 <__z_interrupt_stack_SIZEOF+0x22>
				parsing = false;
     858:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long);
     85a:	f04f 0804 	mov.w	r8, #4
						size = sizeof(long);
     85e:	46c1      	mov	r9, r8
     860:	e7d2      	b.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
				parsing = false;
     862:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long long);
     864:	f04f 0808 	mov.w	r8, #8
						size = sizeof(long long);
     868:	46c1      	mov	r9, r8
     86a:	e7cd      	b.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
				if (fmt[-1] == 'L') {
     86c:	7829      	ldrb	r1, [r5, #0]
     86e:	294c      	cmp	r1, #76	; 0x4c
     870:	d01b      	beq.n	8aa <__z_interrupt_stack_SIZEOF+0x6a>
					v.d = va_arg(ap, double);
     872:	991a      	ldr	r1, [sp, #104]	; 0x68
     874:	3107      	adds	r1, #7
     876:	f021 0107 	bic.w	r1, r1, #7
     87a:	f101 0008 	add.w	r0, r1, #8
     87e:	901a      	str	r0, [sp, #104]	; 0x68
     880:	e9d1 0100 	ldrd	r0, r1, [r1]
				buf = (void *) ROUND_UP(buf, align);
     884:	3407      	adds	r4, #7
     886:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
     88a:	b147      	cbz	r7, 89e <__z_interrupt_stack_SIZEOF+0x5e>
					if (BUF_OFFSET + size > len) {
     88c:	1be6      	subs	r6, r4, r7
     88e:	3608      	adds	r6, #8
     890:	4556      	cmp	r6, sl
     892:	d814      	bhi.n	8be <__z_interrupt_stack_SIZEOF+0x7e>
					} else if (fmt[-1] == 'L') {
     894:	782d      	ldrb	r5, [r5, #0]
     896:	2d4c      	cmp	r5, #76	; 0x4c
     898:	d014      	beq.n	8c4 <__z_interrupt_stack_SIZEOF+0x84>
						*(double *)buf = v.d;
     89a:	e9c4 0100 	strd	r0, r1, [r4]
				buf += size;
     89e:	3408      	adds	r4, #8
				parsing = false;
     8a0:	2600      	movs	r6, #0
				continue;
     8a2:	f04f 0808 	mov.w	r8, #8
     8a6:	46c1      	mov	r9, r8
     8a8:	e72f      	b.n	70a <cbvprintf_package+0x136>
					v.ld = va_arg(ap, long double);
     8aa:	991a      	ldr	r1, [sp, #104]	; 0x68
     8ac:	3107      	adds	r1, #7
     8ae:	f021 0107 	bic.w	r1, r1, #7
     8b2:	f101 0008 	add.w	r0, r1, #8
     8b6:	901a      	str	r0, [sp, #104]	; 0x68
     8b8:	e9d1 0100 	ldrd	r0, r1, [r1]
					size = sizeof(long double);
     8bc:	e7e2      	b.n	884 <__z_interrupt_stack_SIZEOF+0x44>
						return -ENOSPC;
     8be:	f06f 001b 	mvn.w	r0, #27
     8c2:	e0b7      	b.n	a34 <__z_interrupt_stack_SIZEOF+0x1f4>
						*(long double *)buf = v.ld;
     8c4:	e9c4 0100 	strd	r0, r1, [r4]
     8c8:	e7e9      	b.n	89e <__z_interrupt_stack_SIZEOF+0x5e>
				parsing = false;
     8ca:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
     8cc:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
     8d0:	46c1      	mov	r9, r8
     8d2:	e799      	b.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
				is_str_arg = true;
     8d4:	4632      	mov	r2, r6
				parsing = false;
     8d6:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
     8d8:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
     8dc:	46c1      	mov	r9, r8
     8de:	e793      	b.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
			s = va_arg(ap, char *);
     8e0:	4604      	mov	r4, r0
     8e2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
     8e4:	1d11      	adds	r1, r2, #4
     8e6:	911a      	str	r1, [sp, #104]	; 0x68
     8e8:	6812      	ldr	r2, [r2, #0]
     8ea:	9202      	str	r2, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     8ec:	9a07      	ldr	r2, [sp, #28]
			if (*++fmt == '\0') {
     8ee:	461d      	mov	r5, r3
     8f0:	e698      	b.n	624 <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     8f2:	4b5f      	ldr	r3, [pc, #380]	; (a70 <__z_interrupt_stack_SIZEOF+0x230>)
     8f4:	9a02      	ldr	r2, [sp, #8]
     8f6:	429a      	cmp	r2, r3
     8f8:	d304      	bcc.n	904 <__z_interrupt_stack_SIZEOF+0xc4>
     8fa:	4b5e      	ldr	r3, [pc, #376]	; (a74 <__z_interrupt_stack_SIZEOF+0x234>)
     8fc:	429a      	cmp	r2, r3
     8fe:	d30a      	bcc.n	916 <__z_interrupt_stack_SIZEOF+0xd6>
     900:	2300      	movs	r3, #0
     902:	e000      	b.n	906 <__z_interrupt_stack_SIZEOF+0xc6>
     904:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     906:	2b00      	cmp	r3, #0
     908:	f47f ae94 	bne.w	634 <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     90c:	9b05      	ldr	r3, [sp, #20]
     90e:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     912:	2000      	movs	r0, #0
     914:	e693      	b.n	63e <cbvprintf_package+0x6a>
     916:	2301      	movs	r3, #1
     918:	e7f5      	b.n	906 <__z_interrupt_stack_SIZEOF+0xc6>
						s_rw_cnt++;
     91a:	9b06      	ldr	r3, [sp, #24]
     91c:	3301      	adds	r3, #1
     91e:	9306      	str	r3, [sp, #24]
     920:	e6b0      	b.n	684 <cbvprintf_package+0xb0>
				} else if (is_ro) {
     922:	b110      	cbz	r0, 92a <__z_interrupt_stack_SIZEOF+0xea>
					len += 1;
     924:	f10a 0a01 	add.w	sl, sl, #1
     928:	e6ac      	b.n	684 <cbvprintf_package+0xb0>
				} else if (rws_pos_en) {
     92a:	9b00      	ldr	r3, [sp, #0]
     92c:	b113      	cbz	r3, 934 <__z_interrupt_stack_SIZEOF+0xf4>
					len += 2;
     92e:	f10a 0a02 	add.w	sl, sl, #2
     932:	e6a7      	b.n	684 <cbvprintf_package+0xb0>
					len += strlen(s) + 1 + 1;
     934:	9802      	ldr	r0, [sp, #8]
     936:	f00d fa2e 	bl	dd96 <strlen>
     93a:	1c83      	adds	r3, r0, #2
     93c:	449a      	add	sl, r3
     93e:	e6a1      	b.n	684 <cbvprintf_package+0xb0>
			int v = va_arg(ap, int);
     940:	991a      	ldr	r1, [sp, #104]	; 0x68
     942:	1d08      	adds	r0, r1, #4
     944:	901a      	str	r0, [sp, #104]	; 0x68
     946:	6809      	ldr	r1, [r1, #0]
			if (buf0 != NULL) {
     948:	b107      	cbz	r7, 94c <__z_interrupt_stack_SIZEOF+0x10c>
				*(int *)buf = v;
     94a:	6021      	str	r1, [r4, #0]
			buf += sizeof(int);
     94c:	3404      	adds	r4, #4
     94e:	e6dc      	b.n	70a <cbvprintf_package+0x136>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     950:	1be3      	subs	r3, r4, r7
     952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
     956:	f080 8082 	bcs.w	a5e <__z_interrupt_stack_SIZEOF+0x21e>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     95a:	b197      	cbz	r7, 982 <__z_interrupt_stack_SIZEOF+0x142>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
     95c:	2200      	movs	r2, #0
     95e:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     960:	089b      	lsrs	r3, r3, #2
     962:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
     964:	9b00      	ldr	r3, [sp, #0]
     966:	b183      	cbz	r3, 98a <__z_interrupt_stack_SIZEOF+0x14a>
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     968:	9b06      	ldr	r3, [sp, #24]
     96a:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     96c:	9b04      	ldr	r3, [sp, #16]
     96e:	70bb      	strb	r3, [r7, #2]
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     970:	bb1b      	cbnz	r3, 9ba <__z_interrupt_stack_SIZEOF+0x17a>
			/* retrieve the string pointer */
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
			/* clear the in-buffer pointer (less entropy if compressed) */
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
     972:	9d01      	ldr	r5, [sp, #4]
     974:	f8dd 900c 	ldr.w	r9, [sp, #12]
     978:	f8dd b010 	ldr.w	fp, [sp, #16]
     97c:	f8dd 8008 	ldr.w	r8, [sp, #8]
     980:	e03b      	b.n	9fa <__z_interrupt_stack_SIZEOF+0x1ba>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     982:	4453      	add	r3, sl
     984:	f1a3 0008 	sub.w	r0, r3, #8
     988:	e054      	b.n	a34 <__z_interrupt_stack_SIZEOF+0x1f4>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     98a:	9b06      	ldr	r3, [sp, #24]
     98c:	707b      	strb	r3, [r7, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
     98e:	e7ed      	b.n	96c <__z_interrupt_stack_SIZEOF+0x12c>
		for (i = 0; i < s_idx; i++) {
     990:	3301      	adds	r3, #1
     992:	4298      	cmp	r0, r3
     994:	d9ed      	bls.n	972 <__z_interrupt_stack_SIZEOF+0x132>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     996:	f103 0240 	add.w	r2, r3, #64	; 0x40
     99a:	446a      	add	r2, sp
     99c:	f812 1c10 	ldrb.w	r1, [r2, #-16]
     9a0:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
     9a4:	2a00      	cmp	r2, #0
     9a6:	daf3      	bge.n	990 <__z_interrupt_stack_SIZEOF+0x150>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     9a8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     9ac:	1be2      	subs	r2, r4, r7
     9ae:	3201      	adds	r2, #1
     9b0:	4552      	cmp	r2, sl
     9b2:	d857      	bhi.n	a64 <__z_interrupt_stack_SIZEOF+0x224>
			*buf++ = pos;
     9b4:	f804 1b01 	strb.w	r1, [r4], #1
     9b8:	e7ea      	b.n	990 <__z_interrupt_stack_SIZEOF+0x150>
		for (i = 0; i < s_idx; i++) {
     9ba:	9b01      	ldr	r3, [sp, #4]
     9bc:	9803      	ldr	r0, [sp, #12]
     9be:	e7e8      	b.n	992 <__z_interrupt_stack_SIZEOF+0x152>
		if (rws_pos_en) {
     9c0:	9b00      	ldr	r3, [sp, #0]
     9c2:	b33b      	cbz	r3, a14 <__z_interrupt_stack_SIZEOF+0x1d4>
			*buf++ = str_ptr_arg[i];
     9c4:	f105 0340 	add.w	r3, r5, #64	; 0x40
     9c8:	446b      	add	r3, sp
     9ca:	f813 3c20 	ldrb.w	r3, [r3, #-32]
     9ce:	f804 3b01 	strb.w	r3, [r4], #1
			size = 0;
     9d2:	9e01      	ldr	r6, [sp, #4]
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     9d4:	1be3      	subs	r3, r4, r7
     9d6:	4433      	add	r3, r6
     9d8:	3301      	adds	r3, #1
     9da:	4553      	cmp	r3, sl
     9dc:	d845      	bhi.n	a6a <__z_interrupt_stack_SIZEOF+0x22a>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
     9de:	f105 0340 	add.w	r3, r5, #64	; 0x40
     9e2:	446b      	add	r3, sp
     9e4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
     9e8:	f804 3b01 	strb.w	r3, [r4], #1
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
     9ec:	4632      	mov	r2, r6
     9ee:	4641      	mov	r1, r8
     9f0:	4620      	mov	r0, r4
     9f2:	f00d f9e3 	bl	ddbc <memcpy>
		buf += size;
     9f6:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
     9f8:	3501      	adds	r5, #1
     9fa:	45a9      	cmp	r9, r5
     9fc:	d919      	bls.n	a32 <__z_interrupt_stack_SIZEOF+0x1f2>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     9fe:	f1bb 0f00 	cmp.w	fp, #0
     a02:	d0dd      	beq.n	9c0 <__z_interrupt_stack_SIZEOF+0x180>
     a04:	f105 0340 	add.w	r3, r5, #64	; 0x40
     a08:	446b      	add	r3, sp
     a0a:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
     a0e:	2b00      	cmp	r3, #0
     a10:	dad6      	bge.n	9c0 <__z_interrupt_stack_SIZEOF+0x180>
     a12:	e7f1      	b.n	9f8 <__z_interrupt_stack_SIZEOF+0x1b8>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     a14:	f105 0340 	add.w	r3, r5, #64	; 0x40
     a18:	446b      	add	r3, sp
     a1a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
     a1e:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     a22:	2200      	movs	r2, #0
     a24:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
     a28:	4640      	mov	r0, r8
     a2a:	f00d f9b4 	bl	dd96 <strlen>
     a2e:	1c46      	adds	r6, r0, #1
     a30:	e7d0      	b.n	9d4 <__z_interrupt_stack_SIZEOF+0x194>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     a32:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     a34:	b011      	add	sp, #68	; 0x44
     a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
     a3a:	f06f 000d 	mvn.w	r0, #13
     a3e:	e7f9      	b.n	a34 <__z_interrupt_stack_SIZEOF+0x1f4>
		return -ENOSPC;
     a40:	f06f 001b 	mvn.w	r0, #27
     a44:	e7f6      	b.n	a34 <__z_interrupt_stack_SIZEOF+0x1f4>
			return -ENOSPC;
     a46:	f06f 001b 	mvn.w	r0, #27
     a4a:	e7f3      	b.n	a34 <__z_interrupt_stack_SIZEOF+0x1f4>
					return -EINVAL;
     a4c:	f06f 0015 	mvn.w	r0, #21
     a50:	e7f0      	b.n	a34 <__z_interrupt_stack_SIZEOF+0x1f4>
					return -EINVAL;
     a52:	f06f 0015 	mvn.w	r0, #21
     a56:	e7ed      	b.n	a34 <__z_interrupt_stack_SIZEOF+0x1f4>
			return -EINVAL;
     a58:	f06f 0015 	mvn.w	r0, #21
     a5c:	e7ea      	b.n	a34 <__z_interrupt_stack_SIZEOF+0x1f4>
		return -EINVAL;
     a5e:	f06f 0015 	mvn.w	r0, #21
     a62:	e7e7      	b.n	a34 <__z_interrupt_stack_SIZEOF+0x1f4>
				return -ENOSPC;
     a64:	f06f 001b 	mvn.w	r0, #27
     a68:	e7e4      	b.n	a34 <__z_interrupt_stack_SIZEOF+0x1f4>
			return -ENOSPC;
     a6a:	f06f 001b 	mvn.w	r0, #27
     a6e:	e7e1      	b.n	a34 <__z_interrupt_stack_SIZEOF+0x1f4>
     a70:	0000fb9c 	.word	0x0000fb9c
     a74:	000112ac 	.word	0x000112ac

00000a78 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
     a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a7c:	b097      	sub	sp, #92	; 0x5c
     a7e:	af00      	add	r7, sp, #0
     a80:	4683      	mov	fp, r0
     a82:	61ba      	str	r2, [r7, #24]
     a84:	613b      	str	r3, [r7, #16]
	__ASSERT_NO_MSG(in_packaged != NULL);

	uint8_t *buf = in_packaged;
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
     a86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     a8a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
     a8e:	623b      	str	r3, [r7, #32]
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
     a90:	60f9      	str	r1, [r7, #12]
     a92:	b151      	cbz	r1, aaa <cbprintf_package_convert+0x32>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
     a94:	f89b 6002 	ldrb.w	r6, [fp, #2]
     a98:	46b1      	mov	r9, r6
	ro_cpy = ros_nbr &&
     a9a:	b156      	cbz	r6, ab2 <cbprintf_package_convert+0x3a>
     a9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     aa0:	f013 0f01 	tst.w	r3, #1
     aa4:	d111      	bne.n	aca <cbprintf_package_convert+0x52>
     aa6:	2300      	movs	r3, #0
     aa8:	e004      	b.n	ab4 <cbprintf_package_convert+0x3c>
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
     aaa:	f00b f995 	bl	bdd8 <get_package_len>
     aae:	60f8      	str	r0, [r7, #12]
     ab0:	e7f0      	b.n	a94 <cbprintf_package_convert+0x1c>
	ro_cpy = ros_nbr &&
     ab2:	2300      	movs	r3, #0
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
     ab4:	f89b 2003 	ldrb.w	r2, [fp, #3]
     ab8:	627a      	str	r2, [r7, #36]	; 0x24
	rw_cpy = rws_nbr > 0 &&
     aba:	b142      	cbz	r2, ace <cbprintf_package_convert+0x56>
     abc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
     ac0:	f012 0f02 	tst.w	r2, #2
     ac4:	d122      	bne.n	b0c <cbprintf_package_convert+0x94>
     ac6:	2200      	movs	r2, #0
     ac8:	e002      	b.n	ad0 <cbprintf_package_convert+0x58>
	ro_cpy = ros_nbr &&
     aca:	2301      	movs	r3, #1
     acc:	e7f2      	b.n	ab4 <cbprintf_package_convert+0x3c>
	rw_cpy = rws_nbr > 0 &&
     ace:	2200      	movs	r2, #0

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
     ad0:	b902      	cbnz	r2, ad4 <cbprintf_package_convert+0x5c>
     ad2:	b1eb      	cbz	r3, b10 <cbprintf_package_convert+0x98>

	/* If we got here, it means that coping will be more complex and will be
	 * done with strings appending.
	 * Retrieve the size of the arg list.
	 */
	args_size = in_desc->len * sizeof(int);
     ad4:	f89b 5000 	ldrb.w	r5, [fp]
     ad8:	00aa      	lsls	r2, r5, #2
     ada:	60ba      	str	r2, [r7, #8]
	int out_len;

	/* Pointer to array with string locations. Array starts with read-only
	 * string locations.
	 */
	const char *fmt = *(const char **)(buf + sizeof(void *));
     adc:	f8db 2004 	ldr.w	r2, [fp, #4]
     ae0:	617a      	str	r2, [r7, #20]
	uint8_t *str_pos = &buf[args_size];
     ae2:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
	size_t strl_cnt = 0;

	/* If null destination, just calculate output length. */
	if (cb == NULL) {
     ae6:	69ba      	ldr	r2, [r7, #24]
     ae8:	b1f2      	cbz	r2, b28 <cbprintf_package_convert+0xb0>

	/* If read-only strings shall be appended to the output package copy
	 * their indexes to the local array, otherwise indicate that indexes
	 * shall remain in the output package.
	 */
	if (ro_cpy) {
     aea:	2b00      	cmp	r3, #0
     aec:	f040 8110 	bne.w	d10 <cbprintf_package_convert+0x298>
		scpy_cnt = ros_nbr;
		keep_cnt = 0;
		dst = cpy_str_pos;
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     af0:	f1b9 0f00 	cmp.w	r9, #0
     af4:	f000 811b 	beq.w	d2e <cbprintf_package_convert+0x2b6>
     af8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     afc:	f013 0f04 	tst.w	r3, #4
     b00:	f040 8119 	bne.w	d36 <cbprintf_package_convert+0x2be>
		keep_cnt = ros_nbr;
		dst = keep_str_pos;
	} else {
		scpy_cnt = 0;
		keep_cnt = 0;
		dst = NULL;
     b04:	2000      	movs	r0, #0
		keep_cnt = 0;
     b06:	61f8      	str	r0, [r7, #28]
		scpy_cnt = 0;
     b08:	4606      	mov	r6, r0
     b0a:	e105      	b.n	d18 <cbprintf_package_convert+0x2a0>
	rw_cpy = rws_nbr > 0 &&
     b0c:	2201      	movs	r2, #1
     b0e:	e7df      	b.n	ad0 <cbprintf_package_convert+0x58>
		if (cb) {
     b10:	69bb      	ldr	r3, [r7, #24]
     b12:	b11b      	cbz	r3, b1c <cbprintf_package_convert+0xa4>
			cb(in_packaged, in_len, ctx);
     b14:	693a      	ldr	r2, [r7, #16]
     b16:	68f9      	ldr	r1, [r7, #12]
     b18:	4658      	mov	r0, fp
     b1a:	4798      	blx	r3
		return in_len;
     b1c:	68fc      	ldr	r4, [r7, #12]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
     b1e:	4620      	mov	r0, r4
     b20:	375c      	adds	r7, #92	; 0x5c
     b22:	46bd      	mov	sp, r7
     b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_len = (int)in_len;
     b28:	68fc      	ldr	r4, [r7, #12]
		if (ro_cpy) {
     b2a:	bb2b      	cbnz	r3, b78 <cbprintf_package_convert+0x100>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     b2c:	f1b9 0f00 	cmp.w	r9, #0
     b30:	d038      	beq.n	ba4 <cbprintf_package_convert+0x12c>
     b32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     b36:	f013 0304 	ands.w	r3, r3, #4
     b3a:	613b      	str	r3, [r7, #16]
     b3c:	d027      	beq.n	b8e <cbprintf_package_convert+0x116>
				str_pos += ros_nbr;
     b3e:	444d      	add	r5, r9
	size_t strl_cnt = 0;
     b40:	2300      	movs	r3, #0
     b42:	613b      	str	r3, [r7, #16]
     b44:	e023      	b.n	b8e <cbprintf_package_convert+0x116>
				out_len += len;
     b46:	4404      	add	r4, r0
				str_pos++;
     b48:	3501      	adds	r5, #1
			for (unsigned int i = 0; i < ros_nbr; i++) {
     b4a:	3601      	adds	r6, #1
     b4c:	454e      	cmp	r6, r9
     b4e:	d21a      	bcs.n	b86 <cbprintf_package_convert+0x10e>
				const char *str = *(const char **)&buf32[*str_pos];
     b50:	782a      	ldrb	r2, [r5, #0]
				int len = append_string(cb, NULL, str, 0);
     b52:	2300      	movs	r3, #0
     b54:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
     b58:	4619      	mov	r1, r3
     b5a:	69b8      	ldr	r0, [r7, #24]
     b5c:	f00b f951 	bl	be02 <append_string>
				if (strl && strl_cnt < strl_len) {
     b60:	f1ba 0f00 	cmp.w	sl, #0
     b64:	d0ef      	beq.n	b46 <cbprintf_package_convert+0xce>
     b66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
     b6a:	4598      	cmp	r8, r3
     b6c:	d2eb      	bcs.n	b46 <cbprintf_package_convert+0xce>
					strl[strl_cnt++] = (uint16_t)len;
     b6e:	f82a 0018 	strh.w	r0, [sl, r8, lsl #1]
     b72:	f108 0801 	add.w	r8, r8, #1
     b76:	e7e6      	b.n	b46 <cbprintf_package_convert+0xce>
			for (unsigned int i = 0; i < ros_nbr; i++) {
     b78:	2600      	movs	r6, #0
	size_t strl_cnt = 0;
     b7a:	f8c7 801c 	str.w	r8, [r7, #28]
     b7e:	46b0      	mov	r8, r6
     b80:	f8d7 a084 	ldr.w	sl, [r7, #132]	; 0x84
     b84:	e7e2      	b.n	b4c <cbprintf_package_convert+0xd4>
     b86:	f8c7 8010 	str.w	r8, [r7, #16]
     b8a:	f8d7 801c 	ldr.w	r8, [r7, #28]
		bool drop_ro_str_pos = !(flags &
     b8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     b92:	f003 0305 	and.w	r3, r3, #5
     b96:	60fb      	str	r3, [r7, #12]
		for (unsigned int i = 0; i < rws_nbr; i++) {
     b98:	f04f 0a00 	mov.w	sl, #0
     b9c:	46a1      	mov	r9, r4
     b9e:	f8c7 b01c 	str.w	fp, [r7, #28]
     ba2:	e09f      	b.n	ce4 <cbprintf_package_convert+0x26c>
	size_t strl_cnt = 0;
     ba4:	f8c7 9010 	str.w	r9, [r7, #16]
     ba8:	e7f1      	b.n	b8e <cbprintf_package_convert+0x116>
     baa:	2500      	movs	r5, #0
			if (fmt_present && is_ptr(fmt, arg_idx)) {
     bac:	6a3b      	ldr	r3, [r7, #32]
     bae:	b97b      	cbnz	r3, bd0 <cbprintf_package_convert+0x158>
			if (is_ro) {
     bb0:	2d00      	cmp	r5, #0
     bb2:	d079      	beq.n	ca8 <cbprintf_package_convert+0x230>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
     bb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     bb8:	f013 0f01 	tst.w	r3, #1
     bbc:	d179      	bne.n	cb2 <cbprintf_package_convert+0x23a>
					out_len -= drop_ro_str_pos ? 2 : 1;
     bbe:	68fb      	ldr	r3, [r7, #12]
     bc0:	2b00      	cmp	r3, #0
     bc2:	d16f      	bne.n	ca4 <cbprintf_package_convert+0x22c>
     bc4:	2302      	movs	r3, #2
     bc6:	eba9 0903 	sub.w	r9, r9, r3
     bca:	e088      	b.n	cde <cbprintf_package_convert+0x266>
     bcc:	2501      	movs	r5, #1
     bce:	e7ed      	b.n	bac <cbprintf_package_convert+0x134>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
     bd0:	4659      	mov	r1, fp
     bd2:	6978      	ldr	r0, [r7, #20]
     bd4:	f00b f95c 	bl	be90 <is_ptr>
     bd8:	2800      	cmp	r0, #0
     bda:	d0e9      	beq.n	bb0 <cbprintf_package_convert+0x138>
				LOG_WRN("(unsigned) char * used for %%p argument. "
     bdc:	466c      	mov	r4, sp
     bde:	2300      	movs	r3, #0
     be0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
     be4:	2302      	movs	r3, #2
     be6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     bea:	b08a      	sub	sp, #40	; 0x28
     bec:	4669      	mov	r1, sp
     bee:	f111 0210 	adds.w	r2, r1, #16
     bf2:	d037      	beq.n	c64 <cbprintf_package_convert+0x1ec>
     bf4:	2512      	movs	r5, #18
     bf6:	b11a      	cbz	r2, c00 <cbprintf_package_convert+0x188>
     bf8:	2d04      	cmp	r5, #4
     bfa:	dd01      	ble.n	c00 <cbprintf_package_convert+0x188>
     bfc:	4bb2      	ldr	r3, [pc, #712]	; (ec8 <cbprintf_package_convert+0x450>)
     bfe:	614b      	str	r3, [r1, #20]
     c00:	2300      	movs	r3, #0
     c02:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
     c06:	2302      	movs	r3, #2
     c08:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
     c0c:	bb6a      	cbnz	r2, c6a <cbprintf_package_convert+0x1f2>
     c0e:	2d11      	cmp	r5, #17
     c10:	dd45      	ble.n	c9e <cbprintf_package_convert+0x226>
     c12:	2312      	movs	r3, #18
     c14:	b162      	cbz	r2, c30 <cbprintf_package_convert+0x1b8>
     c16:	2004      	movs	r0, #4
     c18:	f887 002c 	strb.w	r0, [r7, #44]	; 0x2c
     c1c:	2000      	movs	r0, #0
     c1e:	f887 002d 	strb.w	r0, [r7, #45]	; 0x2d
     c22:	f887 002e 	strb.w	r0, [r7, #46]	; 0x2e
     c26:	2001      	movs	r0, #1
     c28:	f887 002f 	strb.w	r0, [r7, #47]	; 0x2f
     c2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
     c2e:	6108      	str	r0, [r1, #16]
     c30:	f36f 0800 	bfc	r8, #0, #1
     c34:	f36f 0841 	bfc	r8, #1, #1
     c38:	f36f 0882 	bfc	r8, #2, #1
     c3c:	f36f 08c5 	bfc	r8, #3, #3
     c40:	2102      	movs	r1, #2
     c42:	f361 1888 	bfi	r8, r1, #6, #3
     c46:	f3c3 030a 	ubfx	r3, r3, #0, #11
     c4a:	f363 2853 	bfi	r8, r3, #9, #11
     c4e:	f36f 581f 	bfc	r8, #20, #12
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
     c52:	2300      	movs	r3, #0
     c54:	4641      	mov	r1, r8
     c56:	489d      	ldr	r0, [pc, #628]	; (ecc <cbprintf_package_convert+0x454>)
     c58:	f001 f896 	bl	1d88 <z_impl_z_log_msg_static_create>
     c5c:	46a5      	mov	sp, r4
				out_len -= 2;
     c5e:	f1a9 0902 	sub.w	r9, r9, #2
				continue;
     c62:	e03c      	b.n	cde <cbprintf_package_convert+0x266>
				LOG_WRN("(unsigned) char * used for %%p argument. "
     c64:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
     c68:	e7c5      	b.n	bf6 <cbprintf_package_convert+0x17e>
     c6a:	462b      	mov	r3, r5
     c6c:	2d08      	cmp	r5, #8
     c6e:	dd01      	ble.n	c74 <cbprintf_package_convert+0x1fc>
     c70:	6978      	ldr	r0, [r7, #20]
     c72:	6188      	str	r0, [r1, #24]
     c74:	2b0c      	cmp	r3, #12
     c76:	dd01      	ble.n	c7c <cbprintf_package_convert+0x204>
     c78:	f8c1 b01c 	str.w	fp, [r1, #28]
     c7c:	f101 0320 	add.w	r3, r1, #32
     c80:	2000      	movs	r0, #0
     c82:	e009      	b.n	c98 <cbprintf_package_convert+0x220>
     c84:	f100 0c30 	add.w	ip, r0, #48	; 0x30
     c88:	f107 0e28 	add.w	lr, r7, #40	; 0x28
     c8c:	44f4      	add	ip, lr
     c8e:	f81c cc30 	ldrb.w	ip, [ip, #-48]
     c92:	f803 cb01 	strb.w	ip, [r3], #1
     c96:	3001      	adds	r0, #1
     c98:	2801      	cmp	r0, #1
     c9a:	d9f3      	bls.n	c84 <cbprintf_package_convert+0x20c>
     c9c:	e7b7      	b.n	c0e <cbprintf_package_convert+0x196>
     c9e:	f06f 031b 	mvn.w	r3, #27
     ca2:	e7b7      	b.n	c14 <cbprintf_package_convert+0x19c>
					out_len -= drop_ro_str_pos ? 2 : 1;
     ca4:	2301      	movs	r3, #1
     ca6:	e78e      	b.n	bc6 <cbprintf_package_convert+0x14e>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     ca8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     cac:	f013 0f02 	tst.w	r3, #2
     cb0:	d015      	beq.n	cde <cbprintf_package_convert+0x266>
				len = append_string(cb, NULL, str, 0);
     cb2:	2300      	movs	r3, #0
     cb4:	4622      	mov	r2, r4
     cb6:	4619      	mov	r1, r3
     cb8:	69b8      	ldr	r0, [r7, #24]
     cba:	f00b f8a2 	bl	be02 <append_string>
				if (strl && strl_cnt < strl_len) {
     cbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
     cc2:	b153      	cbz	r3, cda <cbprintf_package_convert+0x262>
     cc4:	693b      	ldr	r3, [r7, #16]
     cc6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
     cca:	4293      	cmp	r3, r2
     ccc:	d205      	bcs.n	cda <cbprintf_package_convert+0x262>
					strl[strl_cnt++] = (uint16_t)len;
     cce:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
     cd2:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
     cd6:	3301      	adds	r3, #1
     cd8:	613b      	str	r3, [r7, #16]
				out_len += (len - 1);
     cda:	3801      	subs	r0, #1
     cdc:	4481      	add	r9, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
     cde:	f10a 0a01 	add.w	sl, sl, #1
			uint8_t arg_pos = *str_pos++;
     ce2:	4635      	mov	r5, r6
		for (unsigned int i = 0; i < rws_nbr; i++) {
     ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ce6:	459a      	cmp	sl, r3
     ce8:	d210      	bcs.n	d0c <cbprintf_package_convert+0x294>
			uint8_t arg_idx = *str_pos++;
     cea:	462e      	mov	r6, r5
     cec:	f816 bb02 	ldrb.w	fp, [r6], #2
			uint8_t arg_pos = *str_pos++;
     cf0:	786b      	ldrb	r3, [r5, #1]
			const char *str = *(const char **)&buf32[arg_pos];
     cf2:	69fa      	ldr	r2, [r7, #28]
     cf4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
     cf8:	4b75      	ldr	r3, [pc, #468]	; (ed0 <cbprintf_package_convert+0x458>)
     cfa:	429c      	cmp	r4, r3
     cfc:	f4ff af55 	bcc.w	baa <cbprintf_package_convert+0x132>
     d00:	4b74      	ldr	r3, [pc, #464]	; (ed4 <cbprintf_package_convert+0x45c>)
     d02:	429c      	cmp	r4, r3
     d04:	f4ff af62 	bcc.w	bcc <cbprintf_package_convert+0x154>
     d08:	2500      	movs	r5, #0
     d0a:	e74f      	b.n	bac <cbprintf_package_convert+0x134>
     d0c:	464c      	mov	r4, r9
     d0e:	e706      	b.n	b1e <cbprintf_package_convert+0xa6>
		dst = cpy_str_pos;
     d10:	f107 0044 	add.w	r0, r7, #68	; 0x44
		keep_cnt = 0;
     d14:	2300      	movs	r3, #0
     d16:	61fb      	str	r3, [r7, #28]
	if (dst) {
     d18:	b118      	cbz	r0, d22 <cbprintf_package_convert+0x2aa>
		memcpy(dst, str_pos, ros_nbr);
     d1a:	464a      	mov	r2, r9
     d1c:	4629      	mov	r1, r5
     d1e:	f00d f84d 	bl	ddbc <memcpy>
	str_pos += ros_nbr;
     d22:	444d      	add	r5, r9
	for (unsigned int i = 0; i < rws_nbr; i++) {
     d24:	f04f 0800 	mov.w	r8, #0
     d28:	f8c7 9004 	str.w	r9, [r7, #4]
     d2c:	e01e      	b.n	d6c <cbprintf_package_convert+0x2f4>
		dst = NULL;
     d2e:	2000      	movs	r0, #0
		keep_cnt = 0;
     d30:	61f8      	str	r0, [r7, #28]
		scpy_cnt = 0;
     d32:	4606      	mov	r6, r0
     d34:	e7f0      	b.n	d18 <cbprintf_package_convert+0x2a0>
		keep_cnt = ros_nbr;
     d36:	61fe      	str	r6, [r7, #28]
		dst = keep_str_pos;
     d38:	f107 0034 	add.w	r0, r7, #52	; 0x34
		scpy_cnt = 0;
     d3c:	2600      	movs	r6, #0
     d3e:	e7eb      	b.n	d18 <cbprintf_package_convert+0x2a0>
     d40:	2500      	movs	r5, #0
		if (fmt_present && is_ptr(fmt, arg_idx)) {
     d42:	6a3b      	ldr	r3, [r7, #32]
     d44:	bb33      	cbnz	r3, d94 <cbprintf_package_convert+0x31c>
		if (is_ro) {
     d46:	2d00      	cmp	r5, #0
     d48:	d03b      	beq.n	dc2 <cbprintf_package_convert+0x34a>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
     d4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     d4e:	f013 0f01 	tst.w	r3, #1
     d52:	d026      	beq.n	da2 <cbprintf_package_convert+0x32a>
				cpy_str_pos[scpy_cnt++] = arg_pos;
     d54:	1c73      	adds	r3, r6, #1
     d56:	f106 0230 	add.w	r2, r6, #48	; 0x30
     d5a:	f107 0128 	add.w	r1, r7, #40	; 0x28
     d5e:	1856      	adds	r6, r2, r1
     d60:	f806 9c14 	strb.w	r9, [r6, #-20]
     d64:	b2de      	uxtb	r6, r3
	for (unsigned int i = 0; i < rws_nbr; i++) {
     d66:	f108 0801 	add.w	r8, r8, #1
		uint8_t arg_pos = *str_pos++;
     d6a:	4625      	mov	r5, r4
	for (unsigned int i = 0; i < rws_nbr; i++) {
     d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d6e:	4598      	cmp	r8, r3
     d70:	d24a      	bcs.n	e08 <cbprintf_package_convert+0x390>
		uint8_t arg_idx = *str_pos++;
     d72:	462c      	mov	r4, r5
     d74:	f814 ab02 	ldrb.w	sl, [r4], #2
		uint8_t arg_pos = *str_pos++;
     d78:	f895 9001 	ldrb.w	r9, [r5, #1]
		const char *str = *(const char **)&buf32[arg_pos];
     d7c:	f85b 3029 	ldr.w	r3, [fp, r9, lsl #2]
     d80:	4a53      	ldr	r2, [pc, #332]	; (ed0 <cbprintf_package_convert+0x458>)
     d82:	4293      	cmp	r3, r2
     d84:	d3dc      	bcc.n	d40 <cbprintf_package_convert+0x2c8>
     d86:	4a53      	ldr	r2, [pc, #332]	; (ed4 <cbprintf_package_convert+0x45c>)
     d88:	4293      	cmp	r3, r2
     d8a:	d301      	bcc.n	d90 <cbprintf_package_convert+0x318>
     d8c:	2500      	movs	r5, #0
     d8e:	e7d8      	b.n	d42 <cbprintf_package_convert+0x2ca>
     d90:	2501      	movs	r5, #1
     d92:	e7d6      	b.n	d42 <cbprintf_package_convert+0x2ca>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
     d94:	4651      	mov	r1, sl
     d96:	6978      	ldr	r0, [r7, #20]
     d98:	f00b f87a 	bl	be90 <is_ptr>
     d9c:	2800      	cmp	r0, #0
     d9e:	d0d2      	beq.n	d46 <cbprintf_package_convert+0x2ce>
     da0:	e7e1      	b.n	d66 <cbprintf_package_convert+0x2ee>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     da2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     da6:	f013 0f04 	tst.w	r3, #4
     daa:	d0dc      	beq.n	d66 <cbprintf_package_convert+0x2ee>
				keep_str_pos[keep_cnt++] = arg_pos;
     dac:	69fa      	ldr	r2, [r7, #28]
     dae:	1c53      	adds	r3, r2, #1
     db0:	3230      	adds	r2, #48	; 0x30
     db2:	f107 0128 	add.w	r1, r7, #40	; 0x28
     db6:	440a      	add	r2, r1
     db8:	f802 9c24 	strb.w	r9, [r2, #-36]
     dbc:	b2db      	uxtb	r3, r3
     dbe:	61fb      	str	r3, [r7, #28]
     dc0:	e7d1      	b.n	d66 <cbprintf_package_convert+0x2ee>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     dc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     dc6:	f013 0f02 	tst.w	r3, #2
     dca:	d009      	beq.n	de0 <cbprintf_package_convert+0x368>
				cpy_str_pos[scpy_cnt++] = arg_pos;
     dcc:	1c73      	adds	r3, r6, #1
     dce:	f106 0230 	add.w	r2, r6, #48	; 0x30
     dd2:	f107 0128 	add.w	r1, r7, #40	; 0x28
     dd6:	1856      	adds	r6, r2, r1
     dd8:	f806 9c14 	strb.w	r9, [r6, #-20]
     ddc:	b2de      	uxtb	r6, r3
     dde:	e7c2      	b.n	d66 <cbprintf_package_convert+0x2ee>
				keep_str_pos[keep_cnt++] = arg_idx;
     de0:	69f8      	ldr	r0, [r7, #28]
     de2:	1c43      	adds	r3, r0, #1
     de4:	f100 0130 	add.w	r1, r0, #48	; 0x30
     de8:	f107 0228 	add.w	r2, r7, #40	; 0x28
     dec:	188a      	adds	r2, r1, r2
     dee:	f802 ac24 	strb.w	sl, [r2, #-36]
				keep_str_pos[keep_cnt++] = arg_pos;
     df2:	4602      	mov	r2, r0
     df4:	3202      	adds	r2, #2
     df6:	b2d2      	uxtb	r2, r2
     df8:	61fa      	str	r2, [r7, #28]
     dfa:	f107 0258 	add.w	r2, r7, #88	; 0x58
     dfe:	fa52 f383 	uxtab	r3, r2, r3
     e02:	f803 9c24 	strb.w	r9, [r3, #-36]
     e06:	e7ae      	b.n	d66 <cbprintf_package_convert+0x2ee>
	out_desc.len = in_desc->len;
     e08:	f8d7 9004 	ldr.w	r9, [r7, #4]
     e0c:	f89b 3000 	ldrb.w	r3, [fp]
     e10:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
     e14:	f89b 3001 	ldrb.w	r3, [fp, #1]
     e18:	4433      	add	r3, r6
     e1a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
     e1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     e22:	f013 0f02 	tst.w	r3, #2
     e26:	d10e      	bne.n	e46 <cbprintf_package_convert+0x3ce>
     e28:	69fb      	ldr	r3, [r7, #28]
     e2a:	f3c3 0347 	ubfx	r3, r3, #1, #8
     e2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
     e32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     e36:	f013 0f01 	tst.w	r3, #1
     e3a:	d106      	bne.n	e4a <cbprintf_package_convert+0x3d2>
     e3c:	f013 0f04 	tst.w	r3, #4
     e40:	d13f      	bne.n	ec2 <cbprintf_package_convert+0x44a>
     e42:	2300      	movs	r3, #0
     e44:	e002      	b.n	e4c <cbprintf_package_convert+0x3d4>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
     e46:	2300      	movs	r3, #0
     e48:	e7f1      	b.n	e2e <cbprintf_package_convert+0x3b6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
     e4a:	2300      	movs	r3, #0
     e4c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	struct cbprintf_package_desc in_desc_backup = *in_desc;
     e50:	f8db 0000 	ldr.w	r0, [fp]
     e54:	6338      	str	r0, [r7, #48]	; 0x30
	*in_desc = out_desc;
     e56:	6d78      	ldr	r0, [r7, #84]	; 0x54
     e58:	f8cb 0000 	str.w	r0, [fp]
	rv = cb(in_packaged, args_size, ctx);
     e5c:	f8d7 8010 	ldr.w	r8, [r7, #16]
     e60:	4642      	mov	r2, r8
     e62:	68b9      	ldr	r1, [r7, #8]
     e64:	4658      	mov	r0, fp
     e66:	f8d7 a018 	ldr.w	sl, [r7, #24]
     e6a:	47d0      	blx	sl
	if (rv < 0) {
     e6c:	1e04      	subs	r4, r0, #0
     e6e:	f6ff ae56 	blt.w	b1e <cbprintf_package_convert+0xa6>
	*in_desc = in_desc_backup;
     e72:	6b38      	ldr	r0, [r7, #48]	; 0x30
     e74:	f8cb 0000 	str.w	r0, [fp]
	rv = cb(keep_str_pos, keep_cnt, ctx);
     e78:	f8c7 8010 	str.w	r8, [r7, #16]
     e7c:	4642      	mov	r2, r8
     e7e:	69f9      	ldr	r1, [r7, #28]
     e80:	f107 0034 	add.w	r0, r7, #52	; 0x34
     e84:	47d0      	blx	sl
	if (rv < 0) {
     e86:	2800      	cmp	r0, #0
     e88:	db57      	blt.n	f3a <cbprintf_package_convert+0x4c2>
	out_len += rv;
     e8a:	eb04 0800 	add.w	r8, r4, r0
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
     e8e:	68b9      	ldr	r1, [r7, #8]
     e90:	4449      	add	r1, r9
     e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e94:	eb01 0143 	add.w	r1, r1, r3, lsl #1
	rv = cb(str_pos, strs_len, ctx);
     e98:	f8d7 9010 	ldr.w	r9, [r7, #16]
     e9c:	464a      	mov	r2, r9
     e9e:	68fb      	ldr	r3, [r7, #12]
     ea0:	1a59      	subs	r1, r3, r1
     ea2:	4628      	mov	r0, r5
     ea4:	47d0      	blx	sl
	if (rv < 0) {
     ea6:	1e04      	subs	r4, r0, #0
     ea8:	f6ff ae39 	blt.w	b1e <cbprintf_package_convert+0xa6>
	out_len += rv;
     eac:	eb08 0504 	add.w	r5, r8, r4
	for (unsigned int i = 0; i < scpy_cnt; i++) {
     eb0:	f04f 0800 	mov.w	r8, #0
     eb4:	627e      	str	r6, [r7, #36]	; 0x24
     eb6:	f8c7 b020 	str.w	fp, [r7, #32]
     eba:	4656      	mov	r6, sl
     ebc:	f8d7 b084 	ldr.w	fp, [r7, #132]	; 0x84
     ec0:	e01f      	b.n	f02 <cbprintf_package_convert+0x48a>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
     ec2:	69fb      	ldr	r3, [r7, #28]
     ec4:	e7c2      	b.n	e4c <cbprintf_package_convert+0x3d4>
     ec6:	bf00      	nop
     ec8:	000100c0 	.word	0x000100c0
     ecc:	0000fe54 	.word	0x0000fe54
     ed0:	0000fb9c 	.word	0x0000fb9c
     ed4:	000112ac 	.word	0x000112ac
		uint16_t str_len = strl ? strl[i] : 0;
     ed8:	f04f 0a00 	mov.w	sl, #0
		rv = cb(&loc, 1, ctx);
     edc:	464a      	mov	r2, r9
     ede:	2101      	movs	r1, #1
     ee0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
     ee4:	47b0      	blx	r6
		if (rv < 0) {
     ee6:	2800      	cmp	r0, #0
     ee8:	db29      	blt.n	f3e <cbprintf_package_convert+0x4c6>
		out_len += rv;
     eea:	4405      	add	r5, r0
		rv = append_string(cb, ctx, str, str_len);
     eec:	4653      	mov	r3, sl
     eee:	4622      	mov	r2, r4
     ef0:	4649      	mov	r1, r9
     ef2:	4630      	mov	r0, r6
     ef4:	f00a ff85 	bl	be02 <append_string>
		if (rv < 0) {
     ef8:	2800      	cmp	r0, #0
     efa:	db22      	blt.n	f42 <cbprintf_package_convert+0x4ca>
		out_len += rv;
     efc:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
     efe:	f108 0801 	add.w	r8, r8, #1
     f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f04:	4598      	cmp	r8, r3
     f06:	d211      	bcs.n	f2c <cbprintf_package_convert+0x4b4>
		uint8_t loc = cpy_str_pos[i];
     f08:	f108 0330 	add.w	r3, r8, #48	; 0x30
     f0c:	f107 0228 	add.w	r2, r7, #40	; 0x28
     f10:	4413      	add	r3, r2
     f12:	f813 3c14 	ldrb.w	r3, [r3, #-20]
     f16:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		const char *str = *(const char **)&buf32[loc];
     f1a:	6a3a      	ldr	r2, [r7, #32]
     f1c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
     f20:	f1bb 0f00 	cmp.w	fp, #0
     f24:	d0d8      	beq.n	ed8 <cbprintf_package_convert+0x460>
     f26:	f83b a018 	ldrh.w	sl, [fp, r8, lsl #1]
     f2a:	e7d7      	b.n	edc <cbprintf_package_convert+0x464>
	(void)cb(NULL, 0, ctx);
     f2c:	693a      	ldr	r2, [r7, #16]
     f2e:	2100      	movs	r1, #0
     f30:	4608      	mov	r0, r1
     f32:	69bb      	ldr	r3, [r7, #24]
     f34:	4798      	blx	r3
	return out_len;
     f36:	462c      	mov	r4, r5
     f38:	e5f1      	b.n	b1e <cbprintf_package_convert+0xa6>
		return rv;
     f3a:	4604      	mov	r4, r0
     f3c:	e5ef      	b.n	b1e <cbprintf_package_convert+0xa6>
     f3e:	4604      	mov	r4, r0
     f40:	e5ed      	b.n	b1e <cbprintf_package_convert+0xa6>
     f42:	4604      	mov	r4, r0
     f44:	e5eb      	b.n	b1e <cbprintf_package_convert+0xa6>
     f46:	bf00      	nop

00000f48 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
     f48:	4b01      	ldr	r3, [pc, #4]	; (f50 <__printk_hook_install+0x8>)
     f4a:	6018      	str	r0, [r3, #0]
}
     f4c:	4770      	bx	lr
     f4e:	bf00      	nop
     f50:	200000b0 	.word	0x200000b0

00000f54 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     f54:	b510      	push	{r4, lr}
     f56:	b086      	sub	sp, #24
     f58:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     f5a:	9003      	str	r0, [sp, #12]
     f5c:	9104      	str	r1, [sp, #16]
     f5e:	2100      	movs	r1, #0
     f60:	9105      	str	r1, [sp, #20]
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     f62:	9100      	str	r1, [sp, #0]
     f64:	a903      	add	r1, sp, #12
     f66:	4806      	ldr	r0, [pc, #24]	; (f80 <vsnprintk+0x2c>)
     f68:	f000 f924 	bl	11b4 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
     f6c:	9b05      	ldr	r3, [sp, #20]
     f6e:	9a04      	ldr	r2, [sp, #16]
     f70:	4293      	cmp	r3, r2
     f72:	da01      	bge.n	f78 <vsnprintk+0x24>
		str[ctx.count] = '\0';
     f74:	2200      	movs	r2, #0
     f76:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
     f78:	9805      	ldr	r0, [sp, #20]
     f7a:	b006      	add	sp, #24
     f7c:	bd10      	pop	{r4, pc}
     f7e:	bf00      	nop
     f80:	0000bee3 	.word	0x0000bee3

00000f84 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     f84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     f88:	b083      	sub	sp, #12
     f8a:	4604      	mov	r4, r0
     f8c:	4608      	mov	r0, r1
     f8e:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     f90:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     f92:	f013 0f08 	tst.w	r3, #8
     f96:	d105      	bne.n	fa4 <process_event+0x20>
     f98:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     f9c:	2300      	movs	r3, #0
     f9e:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     fa0:	9301      	str	r3, [sp, #4]
}
     fa2:	e055      	b.n	1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>
		if (evt == EVT_COMPLETE) {
     fa4:	2901      	cmp	r1, #1
     fa6:	d009      	beq.n	fbc <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     fa8:	f043 0320 	orr.w	r3, r3, #32
     fac:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     fae:	f385 8811 	msr	BASEPRI, r5
     fb2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     fb6:	b003      	add	sp, #12
     fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     fbc:	f043 0310 	orr.w	r3, r3, #16
     fc0:	8323      	strh	r3, [r4, #24]
     fc2:	e7f4      	b.n	fae <process_event+0x2a>
			evt = process_recheck(mgr);
     fc4:	4620      	mov	r0, r4
     fc6:	f00b fa20 	bl	c40a <process_recheck>
     fca:	e043      	b.n	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
			res = mgr->last_res;
     fcc:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     fd0:	464a      	mov	r2, r9
     fd2:	4669      	mov	r1, sp
     fd4:	4620      	mov	r0, r4
     fd6:	f00b fa31 	bl	c43c <process_complete>
		onoff_transition_fn transit = NULL;
     fda:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     fde:	8b23      	ldrh	r3, [r4, #24]
     fe0:	f003 0707 	and.w	r7, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     fe4:	42b7      	cmp	r7, r6
     fe6:	d069      	beq.n	10bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     fe8:	68a2      	ldr	r2, [r4, #8]
     fea:	2a00      	cmp	r2, #0
     fec:	d066      	beq.n	10bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     fee:	2201      	movs	r2, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     ff0:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     ff4:	8323      	strh	r3, [r4, #24]
     ff6:	f385 8811 	msr	BASEPRI, r5
     ffa:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     ffe:	2a00      	cmp	r2, #0
    1000:	d164      	bne.n	10cc <CONFIG_FPROTECT_BLOCK_SIZE+0xcc>
    1002:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    1004:	b12b      	cbz	r3, 1012 <CONFIG_FPROTECT_BLOCK_SIZE+0x12>
				notify_all(mgr, &clients, state, res);
    1006:	464b      	mov	r3, r9
    1008:	463a      	mov	r2, r7
    100a:	4669      	mov	r1, sp
    100c:	4620      	mov	r0, r4
    100e:	f00b fa8e 	bl	c52e <notify_all>
			if (transit != NULL) {
    1012:	f1b8 0f00 	cmp.w	r8, #0
    1016:	d002      	beq.n	101e <CONFIG_FPROTECT_BLOCK_SIZE+0x1e>
				transit(mgr, transition_complete);
    1018:	4934      	ldr	r1, [pc, #208]	; (10ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>)
    101a:	4620      	mov	r0, r4
    101c:	47c0      	blx	r8
	__asm__ volatile(
    101e:	f04f 0320 	mov.w	r3, #32
    1022:	f3ef 8511 	mrs	r5, BASEPRI
    1026:	f383 8812 	msr	BASEPRI_MAX, r3
    102a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    102e:	8b23      	ldrh	r3, [r4, #24]
    1030:	f023 0308 	bic.w	r3, r3, #8
    1034:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1036:	8b23      	ldrh	r3, [r4, #24]
    1038:	f013 0f10 	tst.w	r3, #16
    103c:	d04c      	beq.n	10d8 <CONFIG_FPROTECT_BLOCK_SIZE+0xd8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    103e:	f023 0310 	bic.w	r3, r3, #16
    1042:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    1044:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1046:	8b26      	ldrh	r6, [r4, #24]
    1048:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    104c:	2800      	cmp	r0, #0
    104e:	d0ae      	beq.n	fae <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    1050:	2802      	cmp	r0, #2
    1052:	d0b7      	beq.n	fc4 <process_event+0x40>
		if (evt == EVT_NOP) {
    1054:	2800      	cmp	r0, #0
    1056:	d0aa      	beq.n	fae <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    1058:	3801      	subs	r0, #1
    105a:	2804      	cmp	r0, #4
    105c:	d82a      	bhi.n	10b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>
    105e:	a301      	add	r3, pc, #4	; (adr r3, 1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>)
    1060:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
    1064:	00000fcd 	.word	0x00000fcd
    1068:	000010b5 	.word	0x000010b5
    106c:	00001079 	.word	0x00001079
    1070:	0000108d 	.word	0x0000108d
    1074:	000010a1 	.word	0x000010a1
			transit = mgr->transitions->start;
    1078:	6923      	ldr	r3, [r4, #16]
    107a:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
    107e:	2106      	movs	r1, #6
    1080:	4620      	mov	r0, r4
    1082:	f00b f998 	bl	c3b6 <set_state>
		res = 0;
    1086:	f04f 0900 	mov.w	r9, #0
    108a:	e7a8      	b.n	fde <process_event+0x5a>
			transit = mgr->transitions->stop;
    108c:	6923      	ldr	r3, [r4, #16]
    108e:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    1092:	2104      	movs	r1, #4
    1094:	4620      	mov	r0, r4
    1096:	f00b f98e 	bl	c3b6 <set_state>
		res = 0;
    109a:	f04f 0900 	mov.w	r9, #0
    109e:	e79e      	b.n	fde <process_event+0x5a>
			transit = mgr->transitions->reset;
    10a0:	6923      	ldr	r3, [r4, #16]
    10a2:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    10a6:	2105      	movs	r1, #5
    10a8:	4620      	mov	r0, r4
    10aa:	f00b f984 	bl	c3b6 <set_state>
		res = 0;
    10ae:	f04f 0900 	mov.w	r9, #0
    10b2:	e794      	b.n	fde <process_event+0x5a>
		if (evt == EVT_NOP) {
    10b4:	f04f 0800 	mov.w	r8, #0
    10b8:	46c1      	mov	r9, r8
    10ba:	e790      	b.n	fde <process_event+0x5a>
    10bc:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    10be:	b10a      	cbz	r2, 10c4 <CONFIG_FPROTECT_BLOCK_SIZE+0xc4>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    10c0:	2200      	movs	r2, #0
    10c2:	e795      	b.n	ff0 <process_event+0x6c>
		    || (transit != NULL)) {
    10c4:	f1b8 0f00 	cmp.w	r8, #0
    10c8:	d192      	bne.n	ff0 <process_event+0x6c>
    10ca:	e7b4      	b.n	1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
				notify_monitors(mgr, state, res);
    10cc:	464a      	mov	r2, r9
    10ce:	4639      	mov	r1, r7
    10d0:	4620      	mov	r0, r4
    10d2:	f00b f978 	bl	c3c6 <notify_monitors>
    10d6:	e794      	b.n	1002 <CONFIG_FPROTECT_BLOCK_SIZE+0x2>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    10d8:	f013 0f20 	tst.w	r3, #32
    10dc:	d004      	beq.n	10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    10de:	f023 0320 	bic.w	r3, r3, #32
    10e2:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
    10e4:	2002      	movs	r0, #2
    10e6:	e7ae      	b.n	1046 <CONFIG_FPROTECT_BLOCK_SIZE+0x46>
		evt = EVT_NOP;
    10e8:	2000      	movs	r0, #0
    10ea:	e7ac      	b.n	1046 <CONFIG_FPROTECT_BLOCK_SIZE+0x46>
    10ec:	0000c55d 	.word	0x0000c55d

000010f0 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
    10f0:	4684      	mov	ip, r0
    10f2:	4608      	mov	r0, r1
	bool loop = true;
    10f4:	2201      	movs	r2, #1
    10f6:	e026      	b.n	1146 <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
    10f8:	f89c 3000 	ldrb.w	r3, [ip]
    10fc:	f043 0304 	orr.w	r3, r3, #4
    1100:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
    1104:	b1f2      	cbz	r2, 1144 <extract_flags+0x54>
			++sp;
    1106:	3001      	adds	r0, #1
    1108:	e01c      	b.n	1144 <extract_flags+0x54>
			conv->flag_plus = true;
    110a:	f89c 3000 	ldrb.w	r3, [ip]
    110e:	f043 0308 	orr.w	r3, r3, #8
    1112:	f88c 3000 	strb.w	r3, [ip]
			break;
    1116:	e7f5      	b.n	1104 <extract_flags+0x14>
			conv->flag_space = true;
    1118:	f89c 3000 	ldrb.w	r3, [ip]
    111c:	f043 0310 	orr.w	r3, r3, #16
    1120:	f88c 3000 	strb.w	r3, [ip]
			break;
    1124:	e7ee      	b.n	1104 <extract_flags+0x14>
			conv->flag_hash = true;
    1126:	f89c 3000 	ldrb.w	r3, [ip]
    112a:	f043 0320 	orr.w	r3, r3, #32
    112e:	f88c 3000 	strb.w	r3, [ip]
			break;
    1132:	e7e7      	b.n	1104 <extract_flags+0x14>
			conv->flag_zero = true;
    1134:	f89c 3000 	ldrb.w	r3, [ip]
    1138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    113c:	f88c 3000 	strb.w	r3, [ip]
			break;
    1140:	e7e0      	b.n	1104 <extract_flags+0x14>
		switch (*sp) {
    1142:	2200      	movs	r2, #0
		}
	} while (loop);
    1144:	b342      	cbz	r2, 1198 <extract_flags+0xa8>
		switch (*sp) {
    1146:	7803      	ldrb	r3, [r0, #0]
    1148:	3b20      	subs	r3, #32
    114a:	2b10      	cmp	r3, #16
    114c:	d8f9      	bhi.n	1142 <extract_flags+0x52>
    114e:	a101      	add	r1, pc, #4	; (adr r1, 1154 <extract_flags+0x64>)
    1150:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    1154:	00001119 	.word	0x00001119
    1158:	00001143 	.word	0x00001143
    115c:	00001143 	.word	0x00001143
    1160:	00001127 	.word	0x00001127
    1164:	00001143 	.word	0x00001143
    1168:	00001143 	.word	0x00001143
    116c:	00001143 	.word	0x00001143
    1170:	00001143 	.word	0x00001143
    1174:	00001143 	.word	0x00001143
    1178:	00001143 	.word	0x00001143
    117c:	00001143 	.word	0x00001143
    1180:	0000110b 	.word	0x0000110b
    1184:	00001143 	.word	0x00001143
    1188:	000010f9 	.word	0x000010f9
    118c:	00001143 	.word	0x00001143
    1190:	00001143 	.word	0x00001143
    1194:	00001135 	.word	0x00001135

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
    1198:	f89c 3000 	ldrb.w	r3, [ip]
    119c:	f003 0344 	and.w	r3, r3, #68	; 0x44
    11a0:	2b44      	cmp	r3, #68	; 0x44
    11a2:	d000      	beq.n	11a6 <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
    11a4:	4770      	bx	lr
		conv->flag_zero = false;
    11a6:	f89c 3000 	ldrb.w	r3, [ip]
    11aa:	f36f 1386 	bfc	r3, #6, #1
    11ae:	f88c 3000 	strb.w	r3, [ip]
    11b2:	e7f7      	b.n	11a4 <extract_flags+0xb4>

000011b4 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    11b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11b8:	b091      	sub	sp, #68	; 0x44
    11ba:	4606      	mov	r6, r0
    11bc:	460d      	mov	r5, r1
    11be:	4691      	mov	r9, r2
    11c0:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    11c2:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    11c4:	f899 0000 	ldrb.w	r0, [r9]
    11c8:	2800      	cmp	r0, #0
    11ca:	f000 82b9 	beq.w	1740 <z_cbvprintf_impl+0x58c>
		if (*fp != '%') {
    11ce:	2825      	cmp	r0, #37	; 0x25
    11d0:	d008      	beq.n	11e4 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
    11d2:	f109 0901 	add.w	r9, r9, #1
    11d6:	4629      	mov	r1, r5
    11d8:	47b0      	blx	r6
    11da:	2800      	cmp	r0, #0
    11dc:	f2c0 82b1 	blt.w	1742 <z_cbvprintf_impl+0x58e>
    11e0:	3401      	adds	r4, #1
			continue;
    11e2:	e7ef      	b.n	11c4 <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    11e4:	2300      	movs	r3, #0
    11e6:	9304      	str	r3, [sp, #16]
    11e8:	9305      	str	r3, [sp, #20]
    11ea:	9306      	str	r3, [sp, #24]
    11ec:	9307      	str	r3, [sp, #28]
    11ee:	9308      	str	r3, [sp, #32]
    11f0:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
    11f2:	4649      	mov	r1, r9
    11f4:	a806      	add	r0, sp, #24
    11f6:	f00b fc14 	bl	ca22 <extract_conversion>
    11fa:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    11fc:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1200:	f013 0f01 	tst.w	r3, #1
    1204:	f000 8097 	beq.w	1336 <z_cbvprintf_impl+0x182>
			width = va_arg(ap, int);
    1208:	9b03      	ldr	r3, [sp, #12]
    120a:	1d1a      	adds	r2, r3, #4
    120c:	9203      	str	r2, [sp, #12]
    120e:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    1210:	2f00      	cmp	r7, #0
    1212:	f2c0 8088 	blt.w	1326 <z_cbvprintf_impl+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    1216:	f89d 3019 	ldrb.w	r3, [sp, #25]
    121a:	f013 0f04 	tst.w	r3, #4
    121e:	f000 809c 	beq.w	135a <z_cbvprintf_impl+0x1a6>
			int arg = va_arg(ap, int);
    1222:	9b03      	ldr	r3, [sp, #12]
    1224:	1d1a      	adds	r2, r3, #4
    1226:	9203      	str	r2, [sp, #12]
    1228:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    122c:	f1ba 0f00 	cmp.w	sl, #0
    1230:	f2c0 808a 	blt.w	1348 <z_cbvprintf_impl+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    1234:	2300      	movs	r3, #0
    1236:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
    1238:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    123a:	f89d 301a 	ldrb.w	r3, [sp, #26]
    123e:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    1242:	f89d 1019 	ldrb.w	r1, [sp, #25]
    1246:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    124a:	2b01      	cmp	r3, #1
    124c:	f000 808e 	beq.w	136c <z_cbvprintf_impl+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    1250:	2b02      	cmp	r3, #2
    1252:	f000 80d3 	beq.w	13fc <z_cbvprintf_impl+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    1256:	2b04      	cmp	r3, #4
    1258:	f000 8124 	beq.w	14a4 <z_cbvprintf_impl+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    125c:	2b03      	cmp	r3, #3
    125e:	f000 813b 	beq.w	14d8 <z_cbvprintf_impl+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    1262:	f89d 8018 	ldrb.w	r8, [sp, #24]
    1266:	f018 0b03 	ands.w	fp, r8, #3
    126a:	f040 813b 	bne.w	14e4 <z_cbvprintf_impl+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    126e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1272:	3b25      	subs	r3, #37	; 0x25
    1274:	2b53      	cmp	r3, #83	; 0x53
    1276:	f200 81ca 	bhi.w	160e <z_cbvprintf_impl+0x45a>
    127a:	e8df f013 	tbh	[pc, r3, lsl #1]
    127e:	0140      	.short	0x0140
    1280:	01c801c8 	.word	0x01c801c8
    1284:	01c801c8 	.word	0x01c801c8
    1288:	01c801c8 	.word	0x01c801c8
    128c:	01c801c8 	.word	0x01c801c8
    1290:	01c801c8 	.word	0x01c801c8
    1294:	01c801c8 	.word	0x01c801c8
    1298:	01c801c8 	.word	0x01c801c8
    129c:	01c801c8 	.word	0x01c801c8
    12a0:	01c801c8 	.word	0x01c801c8
    12a4:	01c801c8 	.word	0x01c801c8
    12a8:	01c801c8 	.word	0x01c801c8
    12ac:	01c801c8 	.word	0x01c801c8
    12b0:	01c801c8 	.word	0x01c801c8
    12b4:	01c801c8 	.word	0x01c801c8
    12b8:	01c801c8 	.word	0x01c801c8
    12bc:	01c801c8 	.word	0x01c801c8
    12c0:	01c801c8 	.word	0x01c801c8
    12c4:	01c801c8 	.word	0x01c801c8
    12c8:	01c801c8 	.word	0x01c801c8
    12cc:	01c801c8 	.word	0x01c801c8
    12d0:	01c801c8 	.word	0x01c801c8
    12d4:	01c801c8 	.word	0x01c801c8
    12d8:	01c801c8 	.word	0x01c801c8
    12dc:	01c801c8 	.word	0x01c801c8
    12e0:	01c801c8 	.word	0x01c801c8
    12e4:	01c80181 	.word	0x01c80181
    12e8:	01c801c8 	.word	0x01c801c8
    12ec:	01c801c8 	.word	0x01c801c8
    12f0:	01c801c8 	.word	0x01c801c8
    12f4:	01c801c8 	.word	0x01c801c8
    12f8:	015e01c8 	.word	0x015e01c8
    12fc:	01c80167 	.word	0x01c80167
    1300:	01c801c8 	.word	0x01c801c8
    1304:	016701c8 	.word	0x016701c8
    1308:	01c801c8 	.word	0x01c801c8
    130c:	01c801c8 	.word	0x01c801c8
    1310:	018101bd 	.word	0x018101bd
    1314:	01c801a1 	.word	0x01c801a1
    1318:	014d01c8 	.word	0x014d01c8
    131c:	018101c8 	.word	0x018101c8
    1320:	01c801c8 	.word	0x01c801c8
    1324:	0181      	.short	0x0181
				conv->flag_dash = true;
    1326:	f89d 3018 	ldrb.w	r3, [sp, #24]
    132a:	f043 0304 	orr.w	r3, r3, #4
    132e:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    1332:	427f      	negs	r7, r7
    1334:	e76f      	b.n	1216 <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
    1336:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    133a:	2b00      	cmp	r3, #0
    133c:	db02      	blt.n	1344 <z_cbvprintf_impl+0x190>
		int width = -1;
    133e:	f04f 37ff 	mov.w	r7, #4294967295
    1342:	e768      	b.n	1216 <z_cbvprintf_impl+0x62>
			width = conv->width_value;
    1344:	9f07      	ldr	r7, [sp, #28]
    1346:	e766      	b.n	1216 <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
    1348:	f89d 3019 	ldrb.w	r3, [sp, #25]
    134c:	f36f 0341 	bfc	r3, #1, #1
    1350:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    1354:	f04f 3aff 	mov.w	sl, #4294967295
    1358:	e76c      	b.n	1234 <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
    135a:	f013 0f02 	tst.w	r3, #2
    135e:	d002      	beq.n	1366 <z_cbvprintf_impl+0x1b2>
			precision = conv->prec_value;
    1360:	f8dd a020 	ldr.w	sl, [sp, #32]
    1364:	e766      	b.n	1234 <z_cbvprintf_impl+0x80>
		int precision = -1;
    1366:	f04f 3aff 	mov.w	sl, #4294967295
    136a:	e763      	b.n	1234 <z_cbvprintf_impl+0x80>
			switch (length_mod) {
    136c:	1ecb      	subs	r3, r1, #3
    136e:	2b04      	cmp	r3, #4
    1370:	d804      	bhi.n	137c <z_cbvprintf_impl+0x1c8>
    1372:	e8df f003 	tbb	[pc, r3]
    1376:	1d0b      	.short	0x1d0b
    1378:	3529      	.short	0x3529
    137a:	35          	.byte	0x35
    137b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    137c:	9b03      	ldr	r3, [sp, #12]
    137e:	1d1a      	adds	r2, r3, #4
    1380:	9203      	str	r2, [sp, #12]
    1382:	681b      	ldr	r3, [r3, #0]
    1384:	17da      	asrs	r2, r3, #31
    1386:	9304      	str	r3, [sp, #16]
    1388:	9205      	str	r2, [sp, #20]
				break;
    138a:	e006      	b.n	139a <z_cbvprintf_impl+0x1e6>
					value->sint = va_arg(ap, long);
    138c:	9b03      	ldr	r3, [sp, #12]
    138e:	1d1a      	adds	r2, r3, #4
    1390:	9203      	str	r2, [sp, #12]
    1392:	681b      	ldr	r3, [r3, #0]
    1394:	17da      	asrs	r2, r3, #31
    1396:	9304      	str	r3, [sp, #16]
    1398:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    139a:	2901      	cmp	r1, #1
    139c:	d028      	beq.n	13f0 <z_cbvprintf_impl+0x23c>
			} else if (length_mod == LENGTH_H) {
    139e:	2902      	cmp	r1, #2
    13a0:	f47f af5f 	bne.w	1262 <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
    13a4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    13a8:	17da      	asrs	r2, r3, #31
    13aa:	9304      	str	r3, [sp, #16]
    13ac:	9205      	str	r2, [sp, #20]
    13ae:	e758      	b.n	1262 <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
    13b0:	9b03      	ldr	r3, [sp, #12]
    13b2:	3307      	adds	r3, #7
    13b4:	f023 0307 	bic.w	r3, r3, #7
    13b8:	f103 0208 	add.w	r2, r3, #8
    13bc:	9203      	str	r2, [sp, #12]
    13be:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    13c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    13c6:	e7e8      	b.n	139a <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
    13c8:	9b03      	ldr	r3, [sp, #12]
    13ca:	3307      	adds	r3, #7
    13cc:	f023 0307 	bic.w	r3, r3, #7
    13d0:	f103 0208 	add.w	r2, r3, #8
    13d4:	9203      	str	r2, [sp, #12]
    13d6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    13da:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    13de:	e7dc      	b.n	139a <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    13e0:	9b03      	ldr	r3, [sp, #12]
    13e2:	1d1a      	adds	r2, r3, #4
    13e4:	9203      	str	r2, [sp, #12]
    13e6:	681b      	ldr	r3, [r3, #0]
    13e8:	17da      	asrs	r2, r3, #31
				value->sint =
    13ea:	9304      	str	r3, [sp, #16]
    13ec:	9205      	str	r2, [sp, #20]
				break;
    13ee:	e7d4      	b.n	139a <z_cbvprintf_impl+0x1e6>
				value->sint = (signed char)value->sint;
    13f0:	f99d 3010 	ldrsb.w	r3, [sp, #16]
    13f4:	17da      	asrs	r2, r3, #31
    13f6:	9304      	str	r3, [sp, #16]
    13f8:	9205      	str	r2, [sp, #20]
    13fa:	e732      	b.n	1262 <z_cbvprintf_impl+0xae>
			switch (length_mod) {
    13fc:	1ecb      	subs	r3, r1, #3
    13fe:	2b04      	cmp	r3, #4
    1400:	d804      	bhi.n	140c <z_cbvprintf_impl+0x258>
    1402:	e8df f003 	tbb	[pc, r3]
    1406:	1f0b      	.short	0x1f0b
    1408:	4135      	.short	0x4135
    140a:	41          	.byte	0x41
    140b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    140c:	9b03      	ldr	r3, [sp, #12]
    140e:	1d1a      	adds	r2, r3, #4
    1410:	9203      	str	r2, [sp, #12]
    1412:	681b      	ldr	r3, [r3, #0]
    1414:	9304      	str	r3, [sp, #16]
    1416:	2300      	movs	r3, #0
    1418:	9305      	str	r3, [sp, #20]
				break;
    141a:	e01e      	b.n	145a <z_cbvprintf_impl+0x2a6>
				    && (conv->specifier == 'c')) {
    141c:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    1420:	2b63      	cmp	r3, #99	; 0x63
    1422:	d007      	beq.n	1434 <z_cbvprintf_impl+0x280>
					value->uint = va_arg(ap, unsigned long);
    1424:	9b03      	ldr	r3, [sp, #12]
    1426:	1d1a      	adds	r2, r3, #4
    1428:	9203      	str	r2, [sp, #12]
    142a:	681b      	ldr	r3, [r3, #0]
    142c:	9304      	str	r3, [sp, #16]
    142e:	2300      	movs	r3, #0
    1430:	9305      	str	r3, [sp, #20]
    1432:	e012      	b.n	145a <z_cbvprintf_impl+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
    1434:	9b03      	ldr	r3, [sp, #12]
    1436:	1d1a      	adds	r2, r3, #4
    1438:	9203      	str	r2, [sp, #12]
    143a:	681b      	ldr	r3, [r3, #0]
    143c:	9304      	str	r3, [sp, #16]
    143e:	2300      	movs	r3, #0
    1440:	9305      	str	r3, [sp, #20]
    1442:	e00a      	b.n	145a <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap,
    1444:	9b03      	ldr	r3, [sp, #12]
    1446:	3307      	adds	r3, #7
    1448:	f023 0307 	bic.w	r3, r3, #7
    144c:	f103 0208 	add.w	r2, r3, #8
    1450:	9203      	str	r2, [sp, #12]
    1452:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    1456:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    145a:	2901      	cmp	r1, #1
    145c:	d01c      	beq.n	1498 <z_cbvprintf_impl+0x2e4>
			} else if (length_mod == LENGTH_H) {
    145e:	2902      	cmp	r1, #2
    1460:	f47f aeff 	bne.w	1262 <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
    1464:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    1468:	9304      	str	r3, [sp, #16]
    146a:	2300      	movs	r3, #0
    146c:	9305      	str	r3, [sp, #20]
    146e:	e6f8      	b.n	1262 <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
    1470:	9b03      	ldr	r3, [sp, #12]
    1472:	3307      	adds	r3, #7
    1474:	f023 0307 	bic.w	r3, r3, #7
    1478:	f103 0208 	add.w	r2, r3, #8
    147c:	9203      	str	r2, [sp, #12]
    147e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    1482:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    1486:	e7e8      	b.n	145a <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
    1488:	9b03      	ldr	r3, [sp, #12]
    148a:	1d1a      	adds	r2, r3, #4
    148c:	9203      	str	r2, [sp, #12]
    148e:	681b      	ldr	r3, [r3, #0]
				value->uint =
    1490:	9304      	str	r3, [sp, #16]
    1492:	2300      	movs	r3, #0
    1494:	9305      	str	r3, [sp, #20]
				break;
    1496:	e7e0      	b.n	145a <z_cbvprintf_impl+0x2a6>
				value->uint = (unsigned char)value->uint;
    1498:	f89d 3010 	ldrb.w	r3, [sp, #16]
    149c:	9304      	str	r3, [sp, #16]
    149e:	2300      	movs	r3, #0
    14a0:	9305      	str	r3, [sp, #20]
    14a2:	e6de      	b.n	1262 <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    14a4:	2908      	cmp	r1, #8
    14a6:	d00b      	beq.n	14c0 <z_cbvprintf_impl+0x30c>
				value->dbl = va_arg(ap, double);
    14a8:	9b03      	ldr	r3, [sp, #12]
    14aa:	3307      	adds	r3, #7
    14ac:	f023 0307 	bic.w	r3, r3, #7
    14b0:	f103 0208 	add.w	r2, r3, #8
    14b4:	9203      	str	r2, [sp, #12]
    14b6:	e9d3 2300 	ldrd	r2, r3, [r3]
    14ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
    14be:	e6d0      	b.n	1262 <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
    14c0:	9b03      	ldr	r3, [sp, #12]
    14c2:	3307      	adds	r3, #7
    14c4:	f023 0307 	bic.w	r3, r3, #7
    14c8:	f103 0208 	add.w	r2, r3, #8
    14cc:	9203      	str	r2, [sp, #12]
    14ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    14d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    14d6:	e6c4      	b.n	1262 <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
    14d8:	9b03      	ldr	r3, [sp, #12]
    14da:	1d1a      	adds	r2, r3, #4
    14dc:	9203      	str	r2, [sp, #12]
    14de:	681b      	ldr	r3, [r3, #0]
    14e0:	9304      	str	r3, [sp, #16]
    14e2:	e6be      	b.n	1262 <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
    14e4:	9f02      	ldr	r7, [sp, #8]
    14e6:	463b      	mov	r3, r7
    14e8:	464a      	mov	r2, r9
    14ea:	4629      	mov	r1, r5
    14ec:	4630      	mov	r0, r6
    14ee:	f00b fb3e 	bl	cb6e <outs>
    14f2:	2800      	cmp	r0, #0
    14f4:	f2c0 8125 	blt.w	1742 <z_cbvprintf_impl+0x58e>
    14f8:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    14fa:	46b9      	mov	r9, r7
			continue;
    14fc:	e662      	b.n	11c4 <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
    14fe:	4629      	mov	r1, r5
    1500:	2025      	movs	r0, #37	; 0x25
    1502:	47b0      	blx	r6
    1504:	2800      	cmp	r0, #0
    1506:	f2c0 811c 	blt.w	1742 <z_cbvprintf_impl+0x58e>
    150a:	3401      	adds	r4, #1
		char sign = 0;
    150c:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    150e:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    1512:	f04f 0900 	mov.w	r9, #0
			break;
    1516:	e07f      	b.n	1618 <z_cbvprintf_impl+0x464>
		case 's': {
			bps = (const char *)value->ptr;
    1518:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    151c:	f1ba 0f00 	cmp.w	sl, #0
    1520:	db07      	blt.n	1532 <z_cbvprintf_impl+0x37e>
				len = strnlen(bps, precision);
    1522:	4651      	mov	r1, sl
    1524:	4648      	mov	r0, r9
    1526:	f00c fc3f 	bl	dda8 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    152a:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    152e:	46d8      	mov	r8, fp
			precision = -1;

			break;
    1530:	e072      	b.n	1618 <z_cbvprintf_impl+0x464>
				len = strlen(bps);
    1532:	4648      	mov	r0, r9
    1534:	f00c fc2f 	bl	dd96 <strlen>
    1538:	e7f7      	b.n	152a <z_cbvprintf_impl+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    153a:	9b04      	ldr	r3, [sp, #16]
    153c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    1540:	46d8      	mov	r8, fp
			bpe = buf + 1;
    1542:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    1546:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    154a:	e065      	b.n	1618 <z_cbvprintf_impl+0x464>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    154c:	f018 0f08 	tst.w	r8, #8
    1550:	d105      	bne.n	155e <z_cbvprintf_impl+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
    1552:	f018 0810 	ands.w	r8, r8, #16
    1556:	d004      	beq.n	1562 <z_cbvprintf_impl+0x3ae>
				sign = ' ';
    1558:	f04f 0820 	mov.w	r8, #32
    155c:	e001      	b.n	1562 <z_cbvprintf_impl+0x3ae>
				sign = '+';
    155e:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    1562:	9a04      	ldr	r2, [sp, #16]
    1564:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    1566:	2b00      	cmp	r3, #0
    1568:	db02      	blt.n	1570 <z_cbvprintf_impl+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    156a:	9204      	str	r2, [sp, #16]
    156c:	9305      	str	r3, [sp, #20]
    156e:	e008      	b.n	1582 <z_cbvprintf_impl+0x3ce>
				value->uint = (uint_value_type)-sint;
    1570:	4252      	negs	r2, r2
    1572:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1576:	9204      	str	r2, [sp, #16]
    1578:	9305      	str	r3, [sp, #20]
				sign = '-';
    157a:	f04f 082d 	mov.w	r8, #45	; 0x2d
    157e:	e000      	b.n	1582 <z_cbvprintf_impl+0x3ce>
		switch (conv->specifier) {
    1580:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    1582:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    1586:	9300      	str	r3, [sp, #0]
    1588:	ab0a      	add	r3, sp, #40	; 0x28
    158a:	aa06      	add	r2, sp, #24
    158c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1590:	f00b fa7e 	bl	ca90 <encode_uint>
    1594:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    1596:	f1ba 0f00 	cmp.w	sl, #0
    159a:	db6c      	blt.n	1676 <z_cbvprintf_impl+0x4c2>
				size_t len = bpe - bps;
    159c:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    15a0:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    15a4:	f89d 2018 	ldrb.w	r2, [sp, #24]
    15a8:	f36f 1286 	bfc	r2, #6, #1
    15ac:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    15b0:	459a      	cmp	sl, r3
    15b2:	d963      	bls.n	167c <z_cbvprintf_impl+0x4c8>
					conv->pad0_value = precision - (int)len;
    15b4:	ebaa 0303 	sub.w	r3, sl, r3
    15b8:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    15ba:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    15be:	e02b      	b.n	1618 <z_cbvprintf_impl+0x464>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    15c0:	9804      	ldr	r0, [sp, #16]
    15c2:	b928      	cbnz	r0, 15d0 <z_cbvprintf_impl+0x41c>
		char sign = 0;
    15c4:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    15c6:	f8df a180 	ldr.w	sl, [pc, #384]	; 1748 <z_cbvprintf_impl+0x594>
			bps = "(nil)";
    15ca:	f1aa 0905 	sub.w	r9, sl, #5
    15ce:	e023      	b.n	1618 <z_cbvprintf_impl+0x464>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    15d0:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    15d4:	9300      	str	r3, [sp, #0]
    15d6:	ab0a      	add	r3, sp, #40	; 0x28
    15d8:	aa06      	add	r2, sp, #24
    15da:	2100      	movs	r1, #0
    15dc:	f00b fa58 	bl	ca90 <encode_uint>
    15e0:	4681      	mov	r9, r0
				conv->altform_0c = true;
    15e2:	f89d 301a 	ldrb.w	r3, [sp, #26]
    15e6:	f043 0310 	orr.w	r3, r3, #16
    15ea:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    15ee:	2378      	movs	r3, #120	; 0x78
    15f0:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    15f4:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    15f6:	e7ce      	b.n	1596 <z_cbvprintf_impl+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    15f8:	4622      	mov	r2, r4
    15fa:	9904      	ldr	r1, [sp, #16]
    15fc:	a806      	add	r0, sp, #24
    15fe:	f00b fa97 	bl	cb30 <store_count>
		char sign = 0;
    1602:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    1604:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    1608:	f04f 0900 	mov.w	r9, #0
			}

			break;
    160c:	e004      	b.n	1618 <z_cbvprintf_impl+0x464>
		switch (conv->specifier) {
    160e:	46d8      	mov	r8, fp
    1610:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1614:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    1618:	f1b9 0f00 	cmp.w	r9, #0
    161c:	f000 808d 	beq.w	173a <z_cbvprintf_impl+0x586>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    1620:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    1624:	f1b8 0f00 	cmp.w	r8, #0
    1628:	d000      	beq.n	162c <z_cbvprintf_impl+0x478>
			nj_len += 1U;
    162a:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
    162c:	f89d 201a 	ldrb.w	r2, [sp, #26]
    1630:	f012 0f10 	tst.w	r2, #16
    1634:	d025      	beq.n	1682 <z_cbvprintf_impl+0x4ce>
			nj_len += 2U;
    1636:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    1638:	9907      	ldr	r1, [sp, #28]
    163a:	440b      	add	r3, r1
		if (conv->pad_fp) {
    163c:	f012 0f40 	tst.w	r2, #64	; 0x40
    1640:	d001      	beq.n	1646 <z_cbvprintf_impl+0x492>
			nj_len += conv->pad0_pre_exp;
    1642:	9a08      	ldr	r2, [sp, #32]
    1644:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    1646:	2f00      	cmp	r7, #0
    1648:	dd31      	ble.n	16ae <z_cbvprintf_impl+0x4fa>
			width -= (int)nj_len;
    164a:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    164c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    1650:	f013 0f04 	tst.w	r3, #4
    1654:	d12b      	bne.n	16ae <z_cbvprintf_impl+0x4fa>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    1656:	f013 0f40 	tst.w	r3, #64	; 0x40
    165a:	d017      	beq.n	168c <z_cbvprintf_impl+0x4d8>
					if (sign != 0) {
    165c:	f1b8 0f00 	cmp.w	r8, #0
    1660:	d017      	beq.n	1692 <z_cbvprintf_impl+0x4de>
						OUTC(sign);
    1662:	4629      	mov	r1, r5
    1664:	4640      	mov	r0, r8
    1666:	47b0      	blx	r6
    1668:	2800      	cmp	r0, #0
    166a:	db6a      	blt.n	1742 <z_cbvprintf_impl+0x58e>
    166c:	3401      	adds	r4, #1
						sign = 0;
    166e:	46d8      	mov	r8, fp
					}
					pad = '0';
    1670:	f04f 0b30 	mov.w	fp, #48	; 0x30
    1674:	e00f      	b.n	1696 <z_cbvprintf_impl+0x4e2>
		const char *bpe = buf + sizeof(buf);
    1676:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    167a:	e7cd      	b.n	1618 <z_cbvprintf_impl+0x464>
    167c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1680:	e7ca      	b.n	1618 <z_cbvprintf_impl+0x464>
		} else if (conv->altform_0) {
    1682:	f012 0f08 	tst.w	r2, #8
    1686:	d0d7      	beq.n	1638 <z_cbvprintf_impl+0x484>
			nj_len += 1U;
    1688:	3301      	adds	r3, #1
    168a:	e7d5      	b.n	1638 <z_cbvprintf_impl+0x484>
				char pad = ' ';
    168c:	f04f 0b20 	mov.w	fp, #32
    1690:	e001      	b.n	1696 <z_cbvprintf_impl+0x4e2>
					pad = '0';
    1692:	f04f 0b30 	mov.w	fp, #48	; 0x30
    1696:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    1698:	1e5f      	subs	r7, r3, #1
    169a:	2b00      	cmp	r3, #0
    169c:	dd07      	ble.n	16ae <z_cbvprintf_impl+0x4fa>
					OUTC(pad);
    169e:	4629      	mov	r1, r5
    16a0:	4658      	mov	r0, fp
    16a2:	47b0      	blx	r6
    16a4:	2800      	cmp	r0, #0
    16a6:	db4c      	blt.n	1742 <z_cbvprintf_impl+0x58e>
    16a8:	3401      	adds	r4, #1
				while (width-- > 0) {
    16aa:	463b      	mov	r3, r7
    16ac:	e7f4      	b.n	1698 <z_cbvprintf_impl+0x4e4>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    16ae:	f1b8 0f00 	cmp.w	r8, #0
    16b2:	d005      	beq.n	16c0 <z_cbvprintf_impl+0x50c>
			OUTC(sign);
    16b4:	4629      	mov	r1, r5
    16b6:	4640      	mov	r0, r8
    16b8:	47b0      	blx	r6
    16ba:	2800      	cmp	r0, #0
    16bc:	db41      	blt.n	1742 <z_cbvprintf_impl+0x58e>
    16be:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    16c0:	f89d 301a 	ldrb.w	r3, [sp, #26]
    16c4:	f3c3 1200 	ubfx	r2, r3, #4, #1
    16c8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    16cc:	431a      	orrs	r2, r3
    16ce:	d005      	beq.n	16dc <z_cbvprintf_impl+0x528>
				OUTC('0');
    16d0:	4629      	mov	r1, r5
    16d2:	2030      	movs	r0, #48	; 0x30
    16d4:	47b0      	blx	r6
    16d6:	2800      	cmp	r0, #0
    16d8:	db33      	blt.n	1742 <z_cbvprintf_impl+0x58e>
    16da:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    16dc:	f89d 301a 	ldrb.w	r3, [sp, #26]
    16e0:	f013 0f10 	tst.w	r3, #16
    16e4:	d006      	beq.n	16f4 <z_cbvprintf_impl+0x540>
				OUTC(conv->specifier);
    16e6:	4629      	mov	r1, r5
    16e8:	f89d 001b 	ldrb.w	r0, [sp, #27]
    16ec:	47b0      	blx	r6
    16ee:	2800      	cmp	r0, #0
    16f0:	db27      	blt.n	1742 <z_cbvprintf_impl+0x58e>
    16f2:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    16f4:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    16f6:	f103 38ff 	add.w	r8, r3, #4294967295
    16fa:	2b00      	cmp	r3, #0
    16fc:	dd07      	ble.n	170e <z_cbvprintf_impl+0x55a>
				OUTC('0');
    16fe:	4629      	mov	r1, r5
    1700:	2030      	movs	r0, #48	; 0x30
    1702:	47b0      	blx	r6
    1704:	2800      	cmp	r0, #0
    1706:	db1c      	blt.n	1742 <z_cbvprintf_impl+0x58e>
    1708:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    170a:	4643      	mov	r3, r8
    170c:	e7f3      	b.n	16f6 <z_cbvprintf_impl+0x542>
			}

			OUTS(bps, bpe);
    170e:	4653      	mov	r3, sl
    1710:	464a      	mov	r2, r9
    1712:	4629      	mov	r1, r5
    1714:	4630      	mov	r0, r6
    1716:	f00b fa2a 	bl	cb6e <outs>
    171a:	2800      	cmp	r0, #0
    171c:	db11      	blt.n	1742 <z_cbvprintf_impl+0x58e>
    171e:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    1720:	2f00      	cmp	r7, #0
    1722:	dd07      	ble.n	1734 <z_cbvprintf_impl+0x580>
			OUTC(' ');
    1724:	4629      	mov	r1, r5
    1726:	2020      	movs	r0, #32
    1728:	47b0      	blx	r6
    172a:	2800      	cmp	r0, #0
    172c:	db09      	blt.n	1742 <z_cbvprintf_impl+0x58e>
    172e:	3401      	adds	r4, #1
			--width;
    1730:	3f01      	subs	r7, #1
    1732:	e7f5      	b.n	1720 <z_cbvprintf_impl+0x56c>
		fp = extract_conversion(conv, sp);
    1734:	f8dd 9008 	ldr.w	r9, [sp, #8]
    1738:	e544      	b.n	11c4 <z_cbvprintf_impl+0x10>
    173a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    173e:	e541      	b.n	11c4 <z_cbvprintf_impl+0x10>
		}
	}

	return count;
    1740:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    1742:	b011      	add	sp, #68	; 0x44
    1744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1748:	0001017d 	.word	0x0001017d

0000174c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    174c:	f006 be1c 	b.w	8388 <SystemInit>

00001750 <msg_process>:
		return true;
	}
}

static void msg_process(union log_msg_generic *msg)
{
    1750:	b538      	push	{r3, r4, r5, lr}
    1752:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1754:	4c0b      	ldr	r4, [pc, #44]	; (1784 <msg_process+0x34>)
    1756:	e000      	b.n	175a <msg_process+0xa>
    1758:	3410      	adds	r4, #16
    175a:	4b0b      	ldr	r3, [pc, #44]	; (1788 <msg_process+0x38>)
    175c:	429c      	cmp	r4, r3
    175e:	d20f      	bcs.n	1780 <msg_process+0x30>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    1760:	6863      	ldr	r3, [r4, #4]
    1762:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend) &&
    1764:	2b00      	cmp	r3, #0
    1766:	d0f7      	beq.n	1758 <msg_process+0x8>
		    msg_filter_check(backend, msg)) {
    1768:	4629      	mov	r1, r5
    176a:	4620      	mov	r0, r4
    176c:	f00b fdde 	bl	d32c <msg_filter_check>
		if (log_backend_is_active(backend) &&
    1770:	2800      	cmp	r0, #0
    1772:	d0f1      	beq.n	1758 <msg_process+0x8>
	backend->api->process(backend, msg);
    1774:	6823      	ldr	r3, [r4, #0]
    1776:	681b      	ldr	r3, [r3, #0]
    1778:	4629      	mov	r1, r5
    177a:	4620      	mov	r0, r4
    177c:	4798      	blx	r3
}
    177e:	e7eb      	b.n	1758 <msg_process+0x8>
			log_backend_msg_process(backend, msg);
		}
	}
}
    1780:	bd38      	pop	{r3, r4, r5, pc}
    1782:	bf00      	nop
    1784:	0000fed4 	.word	0x0000fed4
    1788:	0000fef4 	.word	0x0000fef4

0000178c <log_backend_notify_all>:
	return mpsc_pbuf_get_max_utilization(&log_buffer, max);
}

static void log_backend_notify_all(enum log_backend_evt event,
				   union log_backend_evt_arg *arg)
{
    178c:	b570      	push	{r4, r5, r6, lr}
    178e:	4606      	mov	r6, r0
    1790:	460d      	mov	r5, r1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1792:	4c08      	ldr	r4, [pc, #32]	; (17b4 <log_backend_notify_all+0x28>)
    1794:	e004      	b.n	17a0 <log_backend_notify_all+0x14>
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
		backend->api->notify(backend, event, arg);
    1796:	462a      	mov	r2, r5
    1798:	4631      	mov	r1, r6
    179a:	4620      	mov	r0, r4
    179c:	4798      	blx	r3
    179e:	3410      	adds	r4, #16
    17a0:	4b05      	ldr	r3, [pc, #20]	; (17b8 <log_backend_notify_all+0x2c>)
    17a2:	429c      	cmp	r4, r3
    17a4:	d204      	bcs.n	17b0 <log_backend_notify_all+0x24>
	if (backend->api->notify) {
    17a6:	6823      	ldr	r3, [r4, #0]
    17a8:	699b      	ldr	r3, [r3, #24]
    17aa:	2b00      	cmp	r3, #0
    17ac:	d1f3      	bne.n	1796 <log_backend_notify_all+0xa>
    17ae:	e7f6      	b.n	179e <log_backend_notify_all+0x12>
		log_backend_notify(backend, event, arg);
	}
}
    17b0:	bd70      	pop	{r4, r5, r6, pc}
    17b2:	bf00      	nop
    17b4:	0000fed4 	.word	0x0000fed4
    17b8:	0000fef4 	.word	0x0000fef4

000017bc <activate_foreach_backend>:
{
    17bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    17c0:	4607      	mov	r7, r0
	uint32_t mask_cpy = mask;
    17c2:	4605      	mov	r5, r0
	while (mask_cpy) {
    17c4:	e00a      	b.n	17dc <activate_foreach_backend+0x20>
			mask &= ~BIT(i);
    17c6:	ea07 0708 	and.w	r7, r7, r8
					   backend->cb->ctx,
    17ca:	4b14      	ldr	r3, [pc, #80]	; (181c <activate_foreach_backend+0x60>)
    17cc:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    17d0:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    17d2:	2204      	movs	r2, #4
    17d4:	6819      	ldr	r1, [r3, #0]
    17d6:	4620      	mov	r0, r4
    17d8:	f000 faa8 	bl	1d2c <log_backend_enable>
	while (mask_cpy) {
    17dc:	b1d5      	cbz	r5, 1814 <activate_foreach_backend+0x58>
		uint32_t i = __builtin_ctz(mask_cpy);
    17de:	fa95 f6a5 	rbit	r6, r5
    17e2:	fab6 f686 	clz	r6, r6
	STRUCT_SECTION_GET(log_backend, idx, &backend);
    17e6:	4c0d      	ldr	r4, [pc, #52]	; (181c <activate_foreach_backend+0x60>)
    17e8:	eb04 1406 	add.w	r4, r4, r6, lsl #4
		mask_cpy &= ~BIT(i);
    17ec:	2301      	movs	r3, #1
    17ee:	40b3      	lsls	r3, r6
    17f0:	ea6f 0803 	mvn.w	r8, r3
    17f4:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    17f8:	7b23      	ldrb	r3, [r4, #12]
    17fa:	2b00      	cmp	r3, #0
    17fc:	d0ee      	beq.n	17dc <activate_foreach_backend+0x20>
	if (backend->api->is_ready != NULL) {
    17fe:	0133      	lsls	r3, r6, #4
    1800:	4a06      	ldr	r2, [pc, #24]	; (181c <activate_foreach_backend+0x60>)
    1802:	58d3      	ldr	r3, [r2, r3]
    1804:	691b      	ldr	r3, [r3, #16]
    1806:	2b00      	cmp	r3, #0
    1808:	d0dd      	beq.n	17c6 <activate_foreach_backend+0xa>
		return backend->api->is_ready(backend);
    180a:	4620      	mov	r0, r4
    180c:	4798      	blx	r3
    180e:	2800      	cmp	r0, #0
    1810:	d1e4      	bne.n	17dc <activate_foreach_backend+0x20>
    1812:	e7d8      	b.n	17c6 <activate_foreach_backend+0xa>
}
    1814:	4638      	mov	r0, r7
    1816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    181a:	bf00      	nop
    181c:	0000fed4 	.word	0x0000fed4

00001820 <z_log_init>:
{
    1820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1824:	4680      	mov	r8, r0
    1826:	460f      	mov	r7, r1
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1828:	4b20      	ldr	r3, [pc, #128]	; (18ac <z_log_init+0x8c>)
    182a:	f3bf 8f5b 	dmb	ish
    182e:	e853 5f00 	ldrex	r5, [r3]
    1832:	1c6a      	adds	r2, r5, #1
    1834:	e843 2100 	strex	r1, r2, [r3]
    1838:	2900      	cmp	r1, #0
    183a:	d1f8      	bne.n	182e <z_log_init+0xe>
    183c:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    1840:	2d00      	cmp	r5, #0
    1842:	d12f      	bne.n	18a4 <z_log_init+0x84>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1844:	4c1a      	ldr	r4, [pc, #104]	; (18b0 <z_log_init+0x90>)
	int i = 0;
    1846:	2600      	movs	r6, #0
    1848:	e007      	b.n	185a <z_log_init+0x3a>
						   backend->cb->ctx,
    184a:	6863      	ldr	r3, [r4, #4]
				log_backend_enable(backend,
    184c:	2204      	movs	r2, #4
    184e:	6819      	ldr	r1, [r3, #0]
    1850:	4620      	mov	r0, r4
    1852:	f000 fa6b 	bl	1d2c <log_backend_enable>
			i++;
    1856:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1858:	3410      	adds	r4, #16
    185a:	4b16      	ldr	r3, [pc, #88]	; (18b4 <z_log_init+0x94>)
    185c:	429c      	cmp	r4, r3
    185e:	d213      	bcs.n	1888 <z_log_init+0x68>
		if (backend->autostart) {
    1860:	7b23      	ldrb	r3, [r4, #12]
    1862:	2b00      	cmp	r3, #0
    1864:	d0f8      	beq.n	1858 <z_log_init+0x38>
	if (backend->api->init) {
    1866:	6823      	ldr	r3, [r4, #0]
    1868:	68db      	ldr	r3, [r3, #12]
    186a:	b10b      	cbz	r3, 1870 <z_log_init+0x50>
		backend->api->init(backend);
    186c:	4620      	mov	r0, r4
    186e:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    1870:	6823      	ldr	r3, [r4, #0]
    1872:	691b      	ldr	r3, [r3, #16]
    1874:	2b00      	cmp	r3, #0
    1876:	d0e8      	beq.n	184a <z_log_init+0x2a>
		return backend->api->is_ready(backend);
    1878:	4620      	mov	r0, r4
    187a:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    187c:	2800      	cmp	r0, #0
    187e:	d0e4      	beq.n	184a <z_log_init+0x2a>
				mask |= BIT(i);
    1880:	2301      	movs	r3, #1
    1882:	40b3      	lsls	r3, r6
    1884:	431d      	orrs	r5, r3
    1886:	e7e6      	b.n	1856 <z_log_init+0x36>
	if (blocking) {
    1888:	f1b8 0f00 	cmp.w	r8, #0
    188c:	d00b      	beq.n	18a6 <z_log_init+0x86>
		while (mask) {
    188e:	b155      	cbz	r5, 18a6 <z_log_init+0x86>
			mask = activate_foreach_backend(mask);
    1890:	4628      	mov	r0, r5
    1892:	f7ff ff93 	bl	17bc <activate_foreach_backend>
    1896:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    1898:	2f00      	cmp	r7, #0
    189a:	d0f8      	beq.n	188e <z_log_init+0x6e>
				k_msleep(10);
    189c:	200a      	movs	r0, #10
    189e:	f00b fd4b 	bl	d338 <k_msleep>
    18a2:	e7f4      	b.n	188e <z_log_init+0x6e>
		return 0;
    18a4:	2500      	movs	r5, #0
}
    18a6:	4628      	mov	r0, r5
    18a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    18ac:	20001084 	.word	0x20001084
    18b0:	0000fed4 	.word	0x0000fed4
    18b4:	0000fef4 	.word	0x0000fef4

000018b8 <thread_set>:
{
    18b8:	b508      	push	{r3, lr}
	proc_tid = process_tid;
    18ba:	4b06      	ldr	r3, [pc, #24]	; (18d4 <thread_set+0x1c>)
    18bc:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    18be:	b118      	cbz	r0, 18c8 <thread_set+0x10>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    18c0:	4b05      	ldr	r3, [pc, #20]	; (18d8 <thread_set+0x20>)
    18c2:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
    18c4:	2b09      	cmp	r3, #9
    18c6:	dc00      	bgt.n	18ca <thread_set+0x12>
}
    18c8:	bd08      	pop	{r3, pc}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    18ca:	4804      	ldr	r0, [pc, #16]	; (18dc <thread_set+0x24>)
    18cc:	f009 fa4c 	bl	ad68 <z_impl_k_sem_give>
}
    18d0:	e7fa      	b.n	18c8 <thread_set+0x10>
    18d2:	bf00      	nop
    18d4:	20001078 	.word	0x20001078
    18d8:	20001080 	.word	0x20001080
    18dc:	20000254 	.word	0x20000254

000018e0 <log_process_thread_timer_expiry_fn>:

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
    18e0:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    18e2:	4802      	ldr	r0, [pc, #8]	; (18ec <log_process_thread_timer_expiry_fn+0xc>)
    18e4:	f009 fa40 	bl	ad68 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
    18e8:	bd08      	pop	{r3, pc}
    18ea:	bf00      	nop
    18ec:	20000254 	.word	0x20000254

000018f0 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
    18f0:	b530      	push	{r4, r5, lr}
    18f2:	b089      	sub	sp, #36	; 0x24
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    18f4:	2200      	movs	r2, #0
    18f6:	490f      	ldr	r1, [pc, #60]	; (1934 <enable_logger+0x44>)
    18f8:	480f      	ldr	r0, [pc, #60]	; (1938 <enable_logger+0x48>)
    18fa:	f00e f88e 	bl	fa1a <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    18fe:	4d0f      	ldr	r5, [pc, #60]	; (193c <enable_logger+0x4c>)
    1900:	2200      	movs	r2, #0
    1902:	2300      	movs	r3, #0
    1904:	e9cd 2306 	strd	r2, r3, [sp, #24]
    1908:	2400      	movs	r4, #0
    190a:	9404      	str	r4, [sp, #16]
    190c:	230e      	movs	r3, #14
    190e:	9303      	str	r3, [sp, #12]
    1910:	9402      	str	r4, [sp, #8]
    1912:	9401      	str	r4, [sp, #4]
    1914:	9400      	str	r4, [sp, #0]
    1916:	4b0a      	ldr	r3, [pc, #40]	; (1940 <enable_logger+0x50>)
    1918:	f44f 7240 	mov.w	r2, #768	; 0x300
    191c:	4909      	ldr	r1, [pc, #36]	; (1944 <enable_logger+0x54>)
    191e:	4628      	mov	r0, r5
    1920:	f00d fc7e 	bl	f220 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    1924:	4908      	ldr	r1, [pc, #32]	; (1948 <enable_logger+0x58>)
    1926:	4628      	mov	r0, r5
    1928:	f009 f832 	bl	a990 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    192c:	4620      	mov	r0, r4
    192e:	b009      	add	sp, #36	; 0x24
    1930:	bd30      	pop	{r4, r5, pc}
    1932:	bf00      	nop
    1934:	000018e1 	.word	0x000018e1
    1938:	20000808 	.word	0x20000808
    193c:	20000350 	.word	0x20000350
    1940:	00001c8d 	.word	0x00001c8d
    1944:	200023c0 	.word	0x200023c0
    1948:	00010180 	.word	0x00010180

0000194c <log_format_func_t_get>:
}
    194c:	4b01      	ldr	r3, [pc, #4]	; (1954 <log_format_func_t_get+0x8>)
    194e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1952:	4770      	bx	lr
    1954:	0001019c 	.word	0x0001019c

00001958 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    1958:	b148      	cbz	r0, 196e <log_set_timestamp_func+0x16>
{
    195a:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    195c:	4a05      	ldr	r2, [pc, #20]	; (1974 <log_set_timestamp_func+0x1c>)
    195e:	6010      	str	r0, [r2, #0]
	timestamp_freq = freq;
    1960:	4b05      	ldr	r3, [pc, #20]	; (1978 <log_set_timestamp_func+0x20>)
    1962:	6019      	str	r1, [r3, #0]
		log_output_timestamp_freq_set(freq);
    1964:	4608      	mov	r0, r1
    1966:	f000 fcaf 	bl	22c8 <log_output_timestamp_freq_set>
	return 0;
    196a:	2000      	movs	r0, #0
}
    196c:	bd08      	pop	{r3, pc}
		return -EINVAL;
    196e:	f06f 0015 	mvn.w	r0, #21
}
    1972:	4770      	bx	lr
    1974:	200000b4 	.word	0x200000b4
    1978:	20001074 	.word	0x20001074

0000197c <z_log_notify_backend_enabled>:
{
    197c:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    197e:	4b05      	ldr	r3, [pc, #20]	; (1994 <z_log_notify_backend_enabled+0x18>)
    1980:	781b      	ldrb	r3, [r3, #0]
    1982:	b11b      	cbz	r3, 198c <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
    1984:	4b03      	ldr	r3, [pc, #12]	; (1994 <z_log_notify_backend_enabled+0x18>)
    1986:	2201      	movs	r2, #1
    1988:	701a      	strb	r2, [r3, #0]
}
    198a:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
    198c:	4802      	ldr	r0, [pc, #8]	; (1998 <z_log_notify_backend_enabled+0x1c>)
    198e:	f009 f9eb 	bl	ad68 <z_impl_k_sem_give>
}
    1992:	e7f7      	b.n	1984 <z_log_notify_backend_enabled+0x8>
    1994:	20002394 	.word	0x20002394
    1998:	20000254 	.word	0x20000254

0000199c <z_log_dropped>:
    199c:	4b0d      	ldr	r3, [pc, #52]	; (19d4 <z_log_dropped+0x38>)
    199e:	f3bf 8f5b 	dmb	ish
    19a2:	e853 1f00 	ldrex	r1, [r3]
    19a6:	3101      	adds	r1, #1
    19a8:	e843 1200 	strex	r2, r1, [r3]
    19ac:	2a00      	cmp	r2, #0
    19ae:	d1f8      	bne.n	19a2 <z_log_dropped+0x6>
    19b0:	f3bf 8f5b 	dmb	ish
	if (buffered) {
    19b4:	b900      	cbnz	r0, 19b8 <z_log_dropped+0x1c>
}
    19b6:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    19b8:	4b07      	ldr	r3, [pc, #28]	; (19d8 <z_log_dropped+0x3c>)
    19ba:	f3bf 8f5b 	dmb	ish
    19be:	e853 1f00 	ldrex	r1, [r3]
    19c2:	3901      	subs	r1, #1
    19c4:	e843 1200 	strex	r2, r1, [r3]
    19c8:	2a00      	cmp	r2, #0
    19ca:	d1f8      	bne.n	19be <z_log_dropped+0x22>
    19cc:	f3bf 8f5b 	dmb	ish
    19d0:	e7f1      	b.n	19b6 <z_log_dropped+0x1a>
    19d2:	bf00      	nop
    19d4:	2000107c 	.word	0x2000107c
    19d8:	20001080 	.word	0x20001080

000019dc <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    19dc:	4b06      	ldr	r3, [pc, #24]	; (19f8 <z_log_dropped_read_and_clear+0x1c>)
}
    19de:	2000      	movs	r0, #0
    19e0:	4601      	mov	r1, r0
    19e2:	f3bf 8f5b 	dmb	ish
    19e6:	e853 0f00 	ldrex	r0, [r3]
    19ea:	e843 1200 	strex	r2, r1, [r3]
    19ee:	2a00      	cmp	r2, #0
    19f0:	d1f9      	bne.n	19e6 <z_log_dropped_read_and_clear+0xa>
    19f2:	f3bf 8f5b 	dmb	ish
    19f6:	4770      	bx	lr
    19f8:	2000107c 	.word	0x2000107c

000019fc <dropped_notify>:
{
    19fc:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    19fe:	f7ff ffed 	bl	19dc <z_log_dropped_read_and_clear>
    1a02:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1a04:	4c09      	ldr	r4, [pc, #36]	; (1a2c <dropped_notify+0x30>)
    1a06:	e000      	b.n	1a0a <dropped_notify+0xe>
    1a08:	3410      	adds	r4, #16
    1a0a:	4b09      	ldr	r3, [pc, #36]	; (1a30 <dropped_notify+0x34>)
    1a0c:	429c      	cmp	r4, r3
    1a0e:	d20b      	bcs.n	1a28 <dropped_notify+0x2c>
	return backend->cb->active;
    1a10:	6863      	ldr	r3, [r4, #4]
    1a12:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    1a14:	2b00      	cmp	r3, #0
    1a16:	d0f7      	beq.n	1a08 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
    1a18:	6823      	ldr	r3, [r4, #0]
    1a1a:	685b      	ldr	r3, [r3, #4]
    1a1c:	2b00      	cmp	r3, #0
    1a1e:	d0f3      	beq.n	1a08 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
    1a20:	4629      	mov	r1, r5
    1a22:	4620      	mov	r0, r4
    1a24:	4798      	blx	r3
    1a26:	e7ef      	b.n	1a08 <dropped_notify+0xc>
}
    1a28:	bd38      	pop	{r3, r4, r5, pc}
    1a2a:	bf00      	nop
    1a2c:	0000fed4 	.word	0x0000fed4
    1a30:	0000fef4 	.word	0x0000fef4

00001a34 <z_log_dropped_pending>:
	return dropped_cnt > 0;
    1a34:	4b03      	ldr	r3, [pc, #12]	; (1a44 <z_log_dropped_pending+0x10>)
    1a36:	6818      	ldr	r0, [r3, #0]
}
    1a38:	2800      	cmp	r0, #0
    1a3a:	bfd4      	ite	le
    1a3c:	2000      	movle	r0, #0
    1a3e:	2001      	movgt	r0, #1
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop
    1a44:	2000107c 	.word	0x2000107c

00001a48 <z_log_msg_init>:
{
    1a48:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    1a4a:	4c04      	ldr	r4, [pc, #16]	; (1a5c <z_log_msg_init+0x14>)
    1a4c:	4904      	ldr	r1, [pc, #16]	; (1a60 <z_log_msg_init+0x18>)
    1a4e:	4620      	mov	r0, r4
    1a50:	f00b fabb 	bl	cfca <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    1a54:	4b03      	ldr	r3, [pc, #12]	; (1a64 <z_log_msg_init+0x1c>)
    1a56:	601c      	str	r4, [r3, #0]
}
    1a58:	bd10      	pop	{r4, pc}
    1a5a:	bf00      	nop
    1a5c:	200001d4 	.word	0x200001d4
    1a60:	00010188 	.word	0x00010188
    1a64:	20001070 	.word	0x20001070

00001a68 <log_core_init>:
{
    1a68:	b508      	push	{r3, lr}
	panic_mode = false;
    1a6a:	2300      	movs	r3, #0
    1a6c:	4a06      	ldr	r2, [pc, #24]	; (1a88 <log_core_init+0x20>)
    1a6e:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    1a70:	4a06      	ldr	r2, [pc, #24]	; (1a8c <log_core_init+0x24>)
    1a72:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    1a74:	4a06      	ldr	r2, [pc, #24]	; (1a90 <log_core_init+0x28>)
    1a76:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    1a78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1a7c:	4805      	ldr	r0, [pc, #20]	; (1a94 <log_core_init+0x2c>)
    1a7e:	f7ff ff6b 	bl	1958 <log_set_timestamp_func>
		z_log_msg_init();
    1a82:	f7ff ffe1 	bl	1a48 <z_log_msg_init>
}
    1a86:	bd08      	pop	{r3, pc}
    1a88:	20002395 	.word	0x20002395
    1a8c:	2000107c 	.word	0x2000107c
    1a90:	20001080 	.word	0x20001080
    1a94:	0000d331 	.word	0x0000d331

00001a98 <z_log_msg_alloc>:
{
    1a98:	b508      	push	{r3, lr}
    1a9a:	4601      	mov	r1, r0
	return msg_alloc(&log_buffer, wlen);
    1a9c:	4801      	ldr	r0, [pc, #4]	; (1aa4 <z_log_msg_alloc+0xc>)
    1a9e:	f00b fc61 	bl	d364 <msg_alloc>
}
    1aa2:	bd08      	pop	{r3, pc}
    1aa4:	200001d4 	.word	0x200001d4

00001aa8 <z_log_msg_local_claim>:
{
    1aa8:	b508      	push	{r3, lr}
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    1aaa:	4802      	ldr	r0, [pc, #8]	; (1ab4 <z_log_msg_local_claim+0xc>)
    1aac:	f00b fb71 	bl	d192 <mpsc_pbuf_claim>
}
    1ab0:	bd08      	pop	{r3, pc}
    1ab2:	bf00      	nop
    1ab4:	200001d4 	.word	0x200001d4

00001ab8 <z_log_msg_free>:
{
    1ab8:	b508      	push	{r3, lr}
    1aba:	4601      	mov	r1, r0
	msg_free(curr_log_buffer, msg);
    1abc:	4b02      	ldr	r3, [pc, #8]	; (1ac8 <z_log_msg_free+0x10>)
    1abe:	6818      	ldr	r0, [r3, #0]
    1ac0:	f00b fc56 	bl	d370 <msg_free>
}
    1ac4:	bd08      	pop	{r3, pc}
    1ac6:	bf00      	nop
    1ac8:	20001070 	.word	0x20001070

00001acc <z_log_msg_pending>:
{
    1acc:	b508      	push	{r3, lr}
		return msg_pending(&log_buffer);
    1ace:	4802      	ldr	r0, [pc, #8]	; (1ad8 <z_log_msg_pending+0xc>)
    1ad0:	f00b fc52 	bl	d378 <msg_pending>
}
    1ad4:	bd08      	pop	{r3, pc}
    1ad6:	bf00      	nop
    1ad8:	200001d4 	.word	0x200001d4

00001adc <z_impl_log_process>:
{
    1adc:	b510      	push	{r4, lr}
    1ade:	b082      	sub	sp, #8
	k_timeout_t backoff = K_NO_WAIT;
    1ae0:	2200      	movs	r2, #0
    1ae2:	2300      	movs	r3, #0
    1ae4:	e9cd 2300 	strd	r2, r3, [sp]
	if (!backend_attached) {
    1ae8:	4b28      	ldr	r3, [pc, #160]	; (1b8c <z_impl_log_process+0xb0>)
    1aea:	7818      	ldrb	r0, [r3, #0]
    1aec:	b908      	cbnz	r0, 1af2 <z_impl_log_process+0x16>
}
    1aee:	b002      	add	sp, #8
    1af0:	bd10      	pop	{r4, pc}
	msg = z_log_msg_claim(&backoff);
    1af2:	4668      	mov	r0, sp
    1af4:	f00b fc58 	bl	d3a8 <z_log_msg_claim>
	if (msg) {
    1af8:	4604      	mov	r4, r0
    1afa:	b188      	cbz	r0, 1b20 <z_impl_log_process+0x44>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1afc:	4b24      	ldr	r3, [pc, #144]	; (1b90 <z_impl_log_process+0xb4>)
    1afe:	f3bf 8f5b 	dmb	ish
    1b02:	e853 1f00 	ldrex	r1, [r3]
    1b06:	3901      	subs	r1, #1
    1b08:	e843 1200 	strex	r2, r1, [r3]
    1b0c:	2a00      	cmp	r2, #0
    1b0e:	d1f8      	bne.n	1b02 <z_impl_log_process+0x26>
    1b10:	f3bf 8f5b 	dmb	ish
		msg_process(msg);
    1b14:	4620      	mov	r0, r4
    1b16:	f7ff fe1b 	bl	1750 <msg_process>
		z_log_msg_free(msg);
    1b1a:	4620      	mov	r0, r4
    1b1c:	f7ff ffcc 	bl	1ab8 <z_log_msg_free>
		bool dropped_pend = z_log_dropped_pending();
    1b20:	f7ff ff88 	bl	1a34 <z_log_dropped_pending>
		if ((dropped_pend || unordered_pend) &&
    1b24:	b958      	cbnz	r0, 1b3e <z_impl_log_process+0x62>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    1b26:	4a1b      	ldr	r2, [pc, #108]	; (1b94 <z_impl_log_process+0xb8>)
    1b28:	6813      	ldr	r3, [r2, #0]
    1b2a:	6851      	ldr	r1, [r2, #4]
    1b2c:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    1b30:	f141 0100 	adc.w	r1, r1, #0
    1b34:	6013      	str	r3, [r2, #0]
    1b36:	6051      	str	r1, [r2, #4]
	return z_log_msg_pending();
    1b38:	f7ff ffc8 	bl	1acc <z_log_msg_pending>
    1b3c:	e7d7      	b.n	1aee <z_impl_log_process+0x12>
	return z_impl_k_uptime_ticks();
    1b3e:	f00d ff29 	bl	f994 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    1b42:	014a      	lsls	r2, r1, #5
    1b44:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    1b48:	0143      	lsls	r3, r0, #5
    1b4a:	1a1b      	subs	r3, r3, r0
    1b4c:	eb62 0201 	sbc.w	r2, r2, r1
    1b50:	0092      	lsls	r2, r2, #2
    1b52:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    1b56:	009b      	lsls	r3, r3, #2
    1b58:	181b      	adds	r3, r3, r0
    1b5a:	eb42 0201 	adc.w	r2, r2, r1
    1b5e:	00d2      	lsls	r2, r2, #3
    1b60:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    1b64:	f3c3 3310 	ubfx	r3, r3, #12, #17
    1b68:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
    1b6c:	0bd2      	lsrs	r2, r2, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    1b6e:	4809      	ldr	r0, [pc, #36]	; (1b94 <z_impl_log_process+0xb8>)
    1b70:	6801      	ldr	r1, [r0, #0]
    1b72:	6840      	ldr	r0, [r0, #4]
    1b74:	1a5b      	subs	r3, r3, r1
    1b76:	eb62 0200 	sbc.w	r2, r2, r0
		if ((dropped_pend || unordered_pend) &&
    1b7a:	f240 31e9 	movw	r1, #1001	; 0x3e9
    1b7e:	428b      	cmp	r3, r1
    1b80:	f172 0200 	sbcs.w	r2, r2, #0
    1b84:	d3cf      	bcc.n	1b26 <z_impl_log_process+0x4a>
				dropped_notify();
    1b86:	f7ff ff39 	bl	19fc <dropped_notify>
			if (unordered_pend) {
    1b8a:	e7cc      	b.n	1b26 <z_impl_log_process+0x4a>
    1b8c:	20002394 	.word	0x20002394
    1b90:	20001080 	.word	0x20001080
    1b94:	20000800 	.word	0x20000800

00001b98 <z_impl_log_panic>:
	if (panic_mode) {
    1b98:	4b0f      	ldr	r3, [pc, #60]	; (1bd8 <z_impl_log_panic+0x40>)
    1b9a:	781b      	ldrb	r3, [r3, #0]
    1b9c:	b103      	cbz	r3, 1ba0 <z_impl_log_panic+0x8>
    1b9e:	4770      	bx	lr
{
    1ba0:	b510      	push	{r4, lr}
	(void)z_log_init(true, false);
    1ba2:	2100      	movs	r1, #0
    1ba4:	2001      	movs	r0, #1
    1ba6:	f7ff fe3b 	bl	1820 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1baa:	4c0c      	ldr	r4, [pc, #48]	; (1bdc <z_impl_log_panic+0x44>)
    1bac:	e000      	b.n	1bb0 <z_impl_log_panic+0x18>
    1bae:	3410      	adds	r4, #16
    1bb0:	4b0b      	ldr	r3, [pc, #44]	; (1be0 <z_impl_log_panic+0x48>)
    1bb2:	429c      	cmp	r4, r3
    1bb4:	d208      	bcs.n	1bc8 <z_impl_log_panic+0x30>
	return backend->cb->active;
    1bb6:	6863      	ldr	r3, [r4, #4]
    1bb8:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    1bba:	2b00      	cmp	r3, #0
    1bbc:	d0f7      	beq.n	1bae <z_impl_log_panic+0x16>
	backend->api->panic(backend);
    1bbe:	6823      	ldr	r3, [r4, #0]
    1bc0:	689b      	ldr	r3, [r3, #8]
    1bc2:	4620      	mov	r0, r4
    1bc4:	4798      	blx	r3
}
    1bc6:	e7f2      	b.n	1bae <z_impl_log_panic+0x16>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    1bc8:	f7ff ff88 	bl	1adc <z_impl_log_process>
		while (log_process() == true) {
    1bcc:	2800      	cmp	r0, #0
    1bce:	d1fb      	bne.n	1bc8 <z_impl_log_panic+0x30>
	panic_mode = true;
    1bd0:	4b01      	ldr	r3, [pc, #4]	; (1bd8 <z_impl_log_panic+0x40>)
    1bd2:	2201      	movs	r2, #1
    1bd4:	701a      	strb	r2, [r3, #0]
}
    1bd6:	bd10      	pop	{r4, pc}
    1bd8:	20002395 	.word	0x20002395
    1bdc:	0000fed4 	.word	0x0000fed4
    1be0:	0000fef4 	.word	0x0000fef4

00001be4 <z_log_msg_post_finalize>:
{
    1be4:	b510      	push	{r4, lr}
    1be6:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1be8:	4b1b      	ldr	r3, [pc, #108]	; (1c58 <z_log_msg_post_finalize+0x74>)
    1bea:	f3bf 8f5b 	dmb	ish
    1bee:	e853 2f00 	ldrex	r2, [r3]
    1bf2:	1c51      	adds	r1, r2, #1
    1bf4:	e843 1000 	strex	r0, r1, [r3]
    1bf8:	2800      	cmp	r0, #0
    1bfa:	d1f8      	bne.n	1bee <z_log_msg_post_finalize+0xa>
    1bfc:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    1c00:	4b16      	ldr	r3, [pc, #88]	; (1c5c <z_log_msg_post_finalize+0x78>)
    1c02:	781b      	ldrb	r3, [r3, #0]
    1c04:	b963      	cbnz	r3, 1c20 <z_log_msg_post_finalize+0x3c>
	} else if (proc_tid != NULL) {
    1c06:	4b16      	ldr	r3, [pc, #88]	; (1c60 <z_log_msg_post_finalize+0x7c>)
    1c08:	681b      	ldr	r3, [r3, #0]
    1c0a:	b1bb      	cbz	r3, 1c3c <z_log_msg_post_finalize+0x58>
		if (cnt == 0) {
    1c0c:	b1c2      	cbz	r2, 1c40 <z_log_msg_post_finalize+0x5c>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1c0e:	2a0a      	cmp	r2, #10
    1c10:	d114      	bne.n	1c3c <z_log_msg_post_finalize+0x58>
	z_impl_k_timer_stop(timer);
    1c12:	4814      	ldr	r0, [pc, #80]	; (1c64 <z_log_msg_post_finalize+0x80>)
    1c14:	f00d ff0d 	bl	fa32 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    1c18:	4813      	ldr	r0, [pc, #76]	; (1c68 <z_log_msg_post_finalize+0x84>)
    1c1a:	f009 f8a5 	bl	ad68 <z_impl_k_sem_give>
}
    1c1e:	e00d      	b.n	1c3c <z_log_msg_post_finalize+0x58>
    1c20:	f04f 0320 	mov.w	r3, #32
    1c24:	f3ef 8411 	mrs	r4, BASEPRI
    1c28:	f383 8812 	msr	BASEPRI_MAX, r3
    1c2c:	f3bf 8f6f 	isb	sy
    1c30:	f7ff ff54 	bl	1adc <z_impl_log_process>
	__asm__ volatile(
    1c34:	f384 8811 	msr	BASEPRI, r4
    1c38:	f3bf 8f6f 	isb	sy
    1c3c:	b002      	add	sp, #8
    1c3e:	bd10      	pop	{r4, pc}
	z_impl_k_timer_start(timer, duration, period);
    1c40:	2200      	movs	r2, #0
    1c42:	2300      	movs	r3, #0
    1c44:	e9cd 2300 	strd	r2, r3, [sp]
    1c48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1c4c:	2300      	movs	r3, #0
    1c4e:	4805      	ldr	r0, [pc, #20]	; (1c64 <z_log_msg_post_finalize+0x80>)
    1c50:	f009 ffe2 	bl	bc18 <z_impl_k_timer_start>
    1c54:	e7f2      	b.n	1c3c <z_log_msg_post_finalize+0x58>
    1c56:	bf00      	nop
    1c58:	20001080 	.word	0x20001080
    1c5c:	20002395 	.word	0x20002395
    1c60:	20001078 	.word	0x20001078
    1c64:	20000808 	.word	0x20000808
    1c68:	20000254 	.word	0x20000254

00001c6c <z_log_msg_commit>:
{
    1c6c:	b510      	push	{r4, lr}
    1c6e:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1c70:	4b04      	ldr	r3, [pc, #16]	; (1c84 <z_log_msg_commit+0x18>)
    1c72:	681b      	ldr	r3, [r3, #0]
    1c74:	4798      	blx	r3
    1c76:	60a0      	str	r0, [r4, #8]
	msg_commit(&log_buffer, msg);
    1c78:	4621      	mov	r1, r4
    1c7a:	4803      	ldr	r0, [pc, #12]	; (1c88 <z_log_msg_commit+0x1c>)
    1c7c:	f00b fb98 	bl	d3b0 <msg_commit>
}
    1c80:	bd10      	pop	{r4, pc}
    1c82:	bf00      	nop
    1c84:	200000b4 	.word	0x200000b4
    1c88:	200001d4 	.word	0x200001d4

00001c8c <log_process_thread_func>:
{
    1c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t activate_mask = z_log_init(false, false);
    1c90:	2100      	movs	r1, #0
    1c92:	4608      	mov	r0, r1
    1c94:	f7ff fdc4 	bl	1820 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    1c98:	4680      	mov	r8, r0
    1c9a:	b140      	cbz	r0, 1cae <log_process_thread_func+0x22>
    1c9c:	f240 6667 	movw	r6, #1639	; 0x667
    1ca0:	2700      	movs	r7, #0
	return z_impl_z_current_get();
    1ca2:	f009 fda7 	bl	b7f4 <z_impl_z_current_get>
	thread_set(k_current_get());
    1ca6:	f7ff fe07 	bl	18b8 <thread_set>
	bool processed_any = false;
    1caa:	2500      	movs	r5, #0
    1cac:	e015      	b.n	1cda <log_process_thread_func+0x4e>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    1cae:	f04f 36ff 	mov.w	r6, #4294967295
    1cb2:	f04f 37ff 	mov.w	r7, #4294967295
    1cb6:	e7f4      	b.n	1ca2 <log_process_thread_func+0x16>
			activate_mask = activate_foreach_backend(activate_mask);
    1cb8:	4640      	mov	r0, r8
    1cba:	f7ff fd7f 	bl	17bc <activate_foreach_backend>
			if (!activate_mask) {
    1cbe:	4680      	mov	r8, r0
    1cc0:	b970      	cbnz	r0, 1ce0 <log_process_thread_func+0x54>
				timeout = K_FOREVER;
    1cc2:	f04f 36ff 	mov.w	r6, #4294967295
    1cc6:	f04f 37ff 	mov.w	r7, #4294967295
    1cca:	e009      	b.n	1ce0 <log_process_thread_func+0x54>
    1ccc:	462c      	mov	r4, r5
	return z_impl_k_sem_take(sem, timeout);
    1cce:	4632      	mov	r2, r6
    1cd0:	463b      	mov	r3, r7
    1cd2:	4809      	ldr	r0, [pc, #36]	; (1cf8 <log_process_thread_func+0x6c>)
    1cd4:	f009 f86c 	bl	adb0 <z_impl_k_sem_take>
{
    1cd8:	4625      	mov	r5, r4
		if (activate_mask) {
    1cda:	f1b8 0f00 	cmp.w	r8, #0
    1cde:	d1eb      	bne.n	1cb8 <log_process_thread_func+0x2c>
    1ce0:	f7ff fefc 	bl	1adc <z_impl_log_process>
		if (log_process() == false) {
    1ce4:	4604      	mov	r4, r0
    1ce6:	2800      	cmp	r0, #0
    1ce8:	d1f6      	bne.n	1cd8 <log_process_thread_func+0x4c>
			if (processed_any) {
    1cea:	2d00      	cmp	r5, #0
    1cec:	d0ee      	beq.n	1ccc <log_process_thread_func+0x40>
				log_backend_notify_all(LOG_BACKEND_EVT_PROCESS_THREAD_DONE, NULL);
    1cee:	2100      	movs	r1, #0
    1cf0:	4608      	mov	r0, r1
    1cf2:	f7ff fd4b 	bl	178c <log_backend_notify_all>
    1cf6:	e7ea      	b.n	1cce <log_process_thread_func+0x42>
    1cf8:	20000254 	.word	0x20000254

00001cfc <log_src_cnt_get>:
	if (z_log_is_local_domain(domain_id)) {
		return log_const_source_id(__log_const_end);
	}

	return link_source_count(domain_id);
}
    1cfc:	4802      	ldr	r0, [pc, #8]	; (1d08 <log_src_cnt_get+0xc>)
    1cfe:	4b03      	ldr	r3, [pc, #12]	; (1d0c <log_src_cnt_get+0x10>)
    1d00:	1ac0      	subs	r0, r0, r3
    1d02:	08c0      	lsrs	r0, r0, #3
    1d04:	4770      	bx	lr
    1d06:	bf00      	nop
    1d08:	0000fed4 	.word	0x0000fed4
    1d0c:	0000fe34 	.word	0x0000fe34

00001d10 <log_source_name_get>:

	return (const char *)cached;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
    1d10:	b510      	push	{r4, lr}
    1d12:	460c      	mov	r4, r1
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    1d14:	f7ff fff2 	bl	1cfc <log_src_cnt_get>
    1d18:	42a0      	cmp	r0, r4
    1d1a:	d903      	bls.n	1d24 <log_source_name_get+0x14>
			return __log_const_start[source_id].name;
    1d1c:	4b02      	ldr	r3, [pc, #8]	; (1d28 <log_source_name_get+0x18>)
    1d1e:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			return NULL;
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    1d22:	bd10      	pop	{r4, pc}
			return NULL;
    1d24:	2000      	movs	r0, #0
    1d26:	e7fc      	b.n	1d22 <log_source_name_get+0x12>
    1d28:	0000fe34 	.word	0x0000fe34

00001d2c <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    1d2c:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1d2e:	4b09      	ldr	r3, [pc, #36]	; (1d54 <log_backend_enable+0x28>)
    1d30:	1ac3      	subs	r3, r0, r3
    1d32:	111b      	asrs	r3, r3, #4
    1d34:	3301      	adds	r3, #1
	backend->cb->id = id;
    1d36:	f8d0 c004 	ldr.w	ip, [r0, #4]
    1d3a:	f88c 3004 	strb.w	r3, [ip, #4]

	log_backend_id_set(backend, id);
	backend->cb->level = level;
    1d3e:	6843      	ldr	r3, [r0, #4]
    1d40:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
    1d42:	6843      	ldr	r3, [r0, #4]
    1d44:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1d46:	6843      	ldr	r3, [r0, #4]
    1d48:	2201      	movs	r2, #1
    1d4a:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    1d4c:	f7ff fe16 	bl	197c <z_log_notify_backend_enabled>
}
    1d50:	bd08      	pop	{r3, pc}
    1d52:	bf00      	nop
    1d54:	0000fed4 	.word	0x0000fed4

00001d58 <cbprintf_package_copy>:
{
    1d58:	b500      	push	{lr}
    1d5a:	b089      	sub	sp, #36	; 0x24
	struct z_cbprintf_buf_desc buf_desc = {
    1d5c:	9205      	str	r2, [sp, #20]
    1d5e:	9306      	str	r3, [sp, #24]
    1d60:	2300      	movs	r3, #0
    1d62:	9307      	str	r3, [sp, #28]
	return cbprintf_package_convert(in_packaged, in_len,
    1d64:	b162      	cbz	r2, 1d80 <cbprintf_package_copy+0x28>
    1d66:	4a07      	ldr	r2, [pc, #28]	; (1d84 <cbprintf_package_copy+0x2c>)
    1d68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1d6a:	9302      	str	r3, [sp, #8]
    1d6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d6e:	9301      	str	r3, [sp, #4]
    1d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d72:	9300      	str	r3, [sp, #0]
    1d74:	ab05      	add	r3, sp, #20
    1d76:	f7fe fe7f 	bl	a78 <cbprintf_package_convert>
}
    1d7a:	b009      	add	sp, #36	; 0x24
    1d7c:	f85d fb04 	ldr.w	pc, [sp], #4
	return cbprintf_package_convert(in_packaged, in_len,
    1d80:	2200      	movs	r2, #0
    1d82:	e7f1      	b.n	1d68 <cbprintf_package_copy+0x10>
    1d84:	0000d3c1 	.word	0x0000d3c1

00001d88 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    1d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d8c:	b08b      	sub	sp, #44	; 0x2c
    1d8e:	af04      	add	r7, sp, #16
    1d90:	4605      	mov	r5, r0
    1d92:	461e      	mov	r6, r3

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
    1d94:	4688      	mov	r8, r1
	int inlen = desc.package_len;
    1d96:	f3c1 244a 	ubfx	r4, r1, #9, #11
	struct log_msg *msg;

	if (inlen > 0) {
    1d9a:	2c00      	cmp	r4, #0
    1d9c:	f000 8089 	beq.w	1eb2 <z_impl_z_log_msg_static_create+0x12a>
    1da0:	4691      	mov	r9, r2
	struct z_cbprintf_buf_desc buf_desc = {
    1da2:	2200      	movs	r2, #0
    1da4:	60fa      	str	r2, [r7, #12]
    1da6:	613a      	str	r2, [r7, #16]
    1da8:	617a      	str	r2, [r7, #20]
	return cbprintf_package_convert(in_packaged, in_len,
    1daa:	2304      	movs	r3, #4
    1dac:	9302      	str	r3, [sp, #8]
    1dae:	18fb      	adds	r3, r7, r3
    1db0:	9301      	str	r3, [sp, #4]
    1db2:	230a      	movs	r3, #10
    1db4:	9300      	str	r3, [sp, #0]
    1db6:	f107 030c 	add.w	r3, r7, #12
    1dba:	4621      	mov	r1, r4
    1dbc:	4648      	mov	r0, r9
    1dbe:	f7fe fe5b 	bl	a78 <cbprintf_package_convert>

		len = cbprintf_package_copy(package, inlen,
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
    1dc2:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    1dc6:	d358      	bcc.n	1e7a <z_impl_z_log_msg_static_create+0xf2>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
    1dc8:	f8d9 1004 	ldr.w	r1, [r9, #4]
    1dcc:	466d      	mov	r5, sp
    1dce:	2300      	movs	r3, #0
    1dd0:	733b      	strb	r3, [r7, #12]
    1dd2:	2302      	movs	r3, #2
    1dd4:	737b      	strb	r3, [r7, #13]
    1dd6:	b08a      	sub	sp, #40	; 0x28
    1dd8:	ac04      	add	r4, sp, #16
    1dda:	f114 0210 	adds.w	r2, r4, #16
    1dde:	d017      	beq.n	1e10 <z_impl_z_log_msg_static_create+0x88>
    1de0:	2012      	movs	r0, #18
    1de2:	b11a      	cbz	r2, 1dec <z_impl_z_log_msg_static_create+0x64>
    1de4:	2804      	cmp	r0, #4
    1de6:	dd01      	ble.n	1dec <z_impl_z_log_msg_static_create+0x64>
    1de8:	4b3b      	ldr	r3, [pc, #236]	; (1ed8 <z_impl_z_log_msg_static_create+0x150>)
    1dea:	6163      	str	r3, [r4, #20]
    1dec:	2300      	movs	r3, #0
    1dee:	703b      	strb	r3, [r7, #0]
    1df0:	2302      	movs	r3, #2
    1df2:	707b      	strb	r3, [r7, #1]
    1df4:	b1ca      	cbz	r2, 1e2a <z_impl_z_log_msg_static_create+0xa2>
    1df6:	4603      	mov	r3, r0
    1df8:	2808      	cmp	r0, #8
    1dfa:	dd00      	ble.n	1dfe <z_impl_z_log_msg_static_create+0x76>
    1dfc:	61a1      	str	r1, [r4, #24]
    1dfe:	2b0c      	cmp	r3, #12
    1e00:	dd02      	ble.n	1e08 <z_impl_z_log_msg_static_create+0x80>
    1e02:	f240 73ff 	movw	r3, #2047	; 0x7ff
    1e06:	61e3      	str	r3, [r4, #28]
    1e08:	f104 0320 	add.w	r3, r4, #32
    1e0c:	2100      	movs	r1, #0
    1e0e:	e00a      	b.n	1e26 <z_impl_z_log_msg_static_create+0x9e>
    1e10:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    1e14:	e7e5      	b.n	1de2 <z_impl_z_log_msg_static_create+0x5a>
    1e16:	f101 0618 	add.w	r6, r1, #24
    1e1a:	443e      	add	r6, r7
    1e1c:	f816 6c18 	ldrb.w	r6, [r6, #-24]
    1e20:	f803 6b01 	strb.w	r6, [r3], #1
    1e24:	3101      	adds	r1, #1
    1e26:	2901      	cmp	r1, #1
    1e28:	d9f5      	bls.n	1e16 <z_impl_z_log_msg_static_create+0x8e>
    1e2a:	2811      	cmp	r0, #17
    1e2c:	dd22      	ble.n	1e74 <z_impl_z_log_msg_static_create+0xec>
    1e2e:	2312      	movs	r3, #18
    1e30:	b142      	cbz	r2, 1e44 <z_impl_z_log_msg_static_create+0xbc>
    1e32:	2104      	movs	r1, #4
    1e34:	7339      	strb	r1, [r7, #12]
    1e36:	2100      	movs	r1, #0
    1e38:	7379      	strb	r1, [r7, #13]
    1e3a:	73b9      	strb	r1, [r7, #14]
    1e3c:	2101      	movs	r1, #1
    1e3e:	73f9      	strb	r1, [r7, #15]
    1e40:	68f8      	ldr	r0, [r7, #12]
    1e42:	6120      	str	r0, [r4, #16]
    1e44:	2100      	movs	r1, #0
    1e46:	f36f 0100 	bfc	r1, #0, #1
    1e4a:	f36f 0141 	bfc	r1, #1, #1
    1e4e:	f36f 0182 	bfc	r1, #2, #1
    1e52:	f36f 01c5 	bfc	r1, #3, #3
    1e56:	2002      	movs	r0, #2
    1e58:	f360 1188 	bfi	r1, r0, #6, #3
    1e5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
    1e60:	f363 2153 	bfi	r1, r3, #9, #11
    1e64:	2300      	movs	r3, #0
    1e66:	f3c1 0113 	ubfx	r1, r1, #0, #20
    1e6a:	481c      	ldr	r0, [pc, #112]	; (1edc <z_impl_z_log_msg_static_create+0x154>)
    1e6c:	f00b fad5 	bl	d41a <z_log_msg_static_create>
    1e70:	46ad      	mov	sp, r5
				pkg->fmt, (uint32_t)Z_LOG_MSG_MAX_PACKAGE);
			return;
    1e72:	e02d      	b.n	1ed0 <z_impl_z_log_msg_static_create+0x148>
			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
    1e74:	f06f 031b 	mvn.w	r3, #27
    1e78:	e7da      	b.n	1e30 <z_impl_z_log_msg_static_create+0xa8>
		}
		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    1e7a:	f360 2853 	bfi	r8, r0, #9, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    1e7e:	f3c0 0a0a 	ubfx	sl, r0, #0, #11
    1e82:	eb0a 5018 	add.w	r0, sl, r8, lsr #20
    1e86:	3017      	adds	r0, #23
    1e88:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    1e8c:	0880      	lsrs	r0, r0, #2
    1e8e:	f7ff fe03 	bl	1a98 <z_log_msg_alloc>
		if (msg) {
    1e92:	4683      	mov	fp, r0
    1e94:	b1b0      	cbz	r0, 1ec4 <z_impl_z_log_msg_static_create+0x13c>
			len = cbprintf_package_copy(package, inlen,
    1e96:	2304      	movs	r3, #4
    1e98:	9302      	str	r3, [sp, #8]
    1e9a:	18fb      	adds	r3, r7, r3
    1e9c:	9301      	str	r3, [sp, #4]
    1e9e:	230a      	movs	r3, #10
    1ea0:	9300      	str	r3, [sp, #0]
    1ea2:	4653      	mov	r3, sl
    1ea4:	f100 0210 	add.w	r2, r0, #16
    1ea8:	4621      	mov	r1, r4
    1eaa:	4648      	mov	r0, r9
    1eac:	f7ff ff54 	bl	1d58 <cbprintf_package_copy>
						    msg->data, out_desc.package_len,
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
    1eb0:	e008      	b.n	1ec4 <z_impl_z_log_msg_static_create+0x13c>
    1eb2:	eb04 5411 	add.w	r4, r4, r1, lsr #20
    1eb6:	3417      	adds	r4, #23
    1eb8:	f024 0407 	bic.w	r4, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    1ebc:	08a0      	lsrs	r0, r4, #2
    1ebe:	f7ff fdeb 	bl	1a98 <z_log_msg_alloc>
    1ec2:	4683      	mov	fp, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
    1ec4:	4633      	mov	r3, r6
    1ec6:	4642      	mov	r2, r8
    1ec8:	4629      	mov	r1, r5
    1eca:	4658      	mov	r0, fp
    1ecc:	f00b fa8e 	bl	d3ec <z_log_msg_finalize>
}
    1ed0:	371c      	adds	r7, #28
    1ed2:	46bd      	mov	sp, r7
    1ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ed8:	000101bc 	.word	0x000101bc
    1edc:	0000fe6c 	.word	0x0000fe6c

00001ee0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1ee0:	b40e      	push	{r1, r2, r3}
    1ee2:	b500      	push	{lr}
    1ee4:	b084      	sub	sp, #16
    1ee6:	4601      	mov	r1, r0
    1ee8:	ab05      	add	r3, sp, #20
    1eea:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    1eee:	9303      	str	r3, [sp, #12]
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    1ef0:	2000      	movs	r0, #0
    1ef2:	9000      	str	r0, [sp, #0]
    1ef4:	4803      	ldr	r0, [pc, #12]	; (1f04 <print_formatted+0x24>)
    1ef6:	f7ff f95d 	bl	11b4 <z_cbvprintf_impl>
	length = cbvprintf(out_func, (void *)output, fmt, args);
	va_end(args);

	return length;
}
    1efa:	b004      	add	sp, #16
    1efc:	f85d eb04 	ldr.w	lr, [sp], #4
    1f00:	b003      	add	sp, #12
    1f02:	4770      	bx	lr
    1f04:	0000d551 	.word	0x0000d551

00001f08 <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
    1f08:	b530      	push	{r4, r5, lr}
    1f0a:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_CUSTOM_TIMESTAMP);


	if (!format) {
    1f0c:	f011 0f44 	tst.w	r1, #68	; 0x44
    1f10:	d005      	beq.n	1f1e <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
    1f12:	4b1a      	ldr	r3, [pc, #104]	; (1f7c <timestamp_print+0x74>)
    1f14:	681c      	ldr	r4, [r3, #0]
    1f16:	b934      	cbnz	r4, 1f26 <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
    1f18:	2000      	movs	r0, #0
	}

	return length;
}
    1f1a:	b005      	add	sp, #20
    1f1c:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    1f1e:	4918      	ldr	r1, [pc, #96]	; (1f80 <timestamp_print+0x78>)
    1f20:	f7ff ffde 	bl	1ee0 <print_formatted>
    1f24:	e7f9      	b.n	1f1a <timestamp_print+0x12>
		timestamp /= timestamp_div;
    1f26:	4b17      	ldr	r3, [pc, #92]	; (1f84 <timestamp_print+0x7c>)
    1f28:	6819      	ldr	r1, [r3, #0]
    1f2a:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    1f2e:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
    1f32:	4a15      	ldr	r2, [pc, #84]	; (1f88 <timestamp_print+0x80>)
    1f34:	fba2 320c 	umull	r3, r2, r2, ip
    1f38:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    1f3a:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    1f3e:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
    1f42:	4b12      	ldr	r3, [pc, #72]	; (1f8c <timestamp_print+0x84>)
    1f44:	fba3 530e 	umull	r5, r3, r3, lr
    1f48:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    1f4a:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
    1f4e:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    1f52:	fb0c f101 	mul.w	r1, ip, r1
    1f56:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1f5a:	fb04 1115 	mls	r1, r4, r5, r1
    1f5e:	fb0c f101 	mul.w	r1, ip, r1
    1f62:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
    1f66:	9102      	str	r1, [sp, #8]
    1f68:	9501      	str	r5, [sp, #4]
    1f6a:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    1f6e:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
    1f72:	9100      	str	r1, [sp, #0]
    1f74:	4906      	ldr	r1, [pc, #24]	; (1f90 <timestamp_print+0x88>)
    1f76:	f7ff ffb3 	bl	1ee0 <print_formatted>
    1f7a:	e7ce      	b.n	1f1a <timestamp_print+0x12>
    1f7c:	2000108c 	.word	0x2000108c
    1f80:	000101fc 	.word	0x000101fc
    1f84:	20001088 	.word	0x20001088
    1f88:	91a2b3c5 	.word	0x91a2b3c5
    1f8c:	88888889 	.word	0x88888889
    1f90:	00010208 	.word	0x00010208

00001f94 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    1f94:	b161      	cbz	r1, 1fb0 <color_print+0x1c>
{
    1f96:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    1f98:	b12a      	cbz	r2, 1fa6 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    1f9a:	4a06      	ldr	r2, [pc, #24]	; (1fb4 <color_print+0x20>)
    1f9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1fa0:	b912      	cbnz	r2, 1fa8 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    1fa2:	4a05      	ldr	r2, [pc, #20]	; (1fb8 <color_print+0x24>)
    1fa4:	e000      	b.n	1fa8 <color_print+0x14>
    1fa6:	4a04      	ldr	r2, [pc, #16]	; (1fb8 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    1fa8:	4904      	ldr	r1, [pc, #16]	; (1fbc <color_print+0x28>)
    1faa:	f7ff ff99 	bl	1ee0 <print_formatted>
	}
}
    1fae:	bd08      	pop	{r3, pc}
    1fb0:	4770      	bx	lr
    1fb2:	bf00      	nop
    1fb4:	000102ac 	.word	0x000102ac
    1fb8:	00010224 	.word	0x00010224
    1fbc:	0001022c 	.word	0x0001022c

00001fc0 <ids_print>:
		     bool level_on,
		     bool func_on,
		     const char *domain,
		     const char *source,
		     uint32_t level)
{
    1fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1fc4:	4605      	mov	r5, r0
    1fc6:	4690      	mov	r8, r2
    1fc8:	461e      	mov	r6, r3
    1fca:	9f06      	ldr	r7, [sp, #24]
	int total = 0;

	if (level_on) {
    1fcc:	b981      	cbnz	r1, 1ff0 <ids_print+0x30>
	int total = 0;
    1fce:	2400      	movs	r4, #0
		total += print_formatted(output, "<%s> ", severity[level]);
	}

	if (domain) {
    1fd0:	b12e      	cbz	r6, 1fde <ids_print+0x1e>
		total += print_formatted(output, "%s/", domain);
    1fd2:	4632      	mov	r2, r6
    1fd4:	4910      	ldr	r1, [pc, #64]	; (2018 <ids_print+0x58>)
    1fd6:	4628      	mov	r0, r5
    1fd8:	f7ff ff82 	bl	1ee0 <print_formatted>
    1fdc:	4404      	add	r4, r0
	}

	if (source) {
    1fde:	b1b7      	cbz	r7, 200e <ids_print+0x4e>
		total += print_formatted(output,
    1fe0:	f1b8 0f00 	cmp.w	r8, #0
    1fe4:	d00d      	beq.n	2002 <ids_print+0x42>
				(func_on &&
    1fe6:	9b07      	ldr	r3, [sp, #28]
    1fe8:	2b04      	cmp	r3, #4
    1fea:	d013      	beq.n	2014 <ids_print+0x54>
		total += print_formatted(output,
    1fec:	490b      	ldr	r1, [pc, #44]	; (201c <ids_print+0x5c>)
    1fee:	e009      	b.n	2004 <ids_print+0x44>
		total += print_formatted(output, "<%s> ", severity[level]);
    1ff0:	4b0b      	ldr	r3, [pc, #44]	; (2020 <ids_print+0x60>)
    1ff2:	9a07      	ldr	r2, [sp, #28]
    1ff4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1ff8:	490a      	ldr	r1, [pc, #40]	; (2024 <ids_print+0x64>)
    1ffa:	f7ff ff71 	bl	1ee0 <print_formatted>
    1ffe:	4604      	mov	r4, r0
    2000:	e7e6      	b.n	1fd0 <ids_print+0x10>
		total += print_formatted(output,
    2002:	4906      	ldr	r1, [pc, #24]	; (201c <ids_print+0x5c>)
    2004:	463a      	mov	r2, r7
    2006:	4628      	mov	r0, r5
    2008:	f7ff ff6a 	bl	1ee0 <print_formatted>
    200c:	4404      	add	r4, r0
				"%s." : "%s: ",
				source);
	}

	return total;
}
    200e:	4620      	mov	r0, r4
    2010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    2014:	4904      	ldr	r1, [pc, #16]	; (2028 <ids_print+0x68>)
    2016:	e7f5      	b.n	2004 <ids_print+0x44>
    2018:	00010244 	.word	0x00010244
    201c:	00010234 	.word	0x00010234
    2020:	000102c0 	.word	0x000102c0
    2024:	0001023c 	.word	0x0001023c
    2028:	00010230 	.word	0x00010230

0000202c <prefix_print>:
			     bool func_on,
			     log_timestamp_t timestamp,
			     const char *domain,
			     const char *source,
			     uint8_t level)
{
    202c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2030:	b085      	sub	sp, #20
    2032:	4605      	mov	r5, r0
    2034:	460c      	mov	r4, r1
    2036:	4616      	mov	r6, r2
    2038:	9303      	str	r3, [sp, #12]
    203a:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    203e:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    2042:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    2046:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    204a:	f00b f9b7 	bl	d3bc <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    204e:	b1d8      	cbz	r0, 2088 <prefix_print+0x5c>
    2050:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    2052:	4912      	ldr	r1, [pc, #72]	; (209c <prefix_print+0x70>)
    2054:	4628      	mov	r0, r5
    2056:	f7ff ff43 	bl	1ee0 <print_formatted>
    205a:	4607      	mov	r7, r0
	}

	if (stamp) {
    205c:	f1bb 0f00 	cmp.w	fp, #0
    2060:	d114      	bne.n	208c <prefix_print+0x60>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    2062:	4642      	mov	r2, r8
    2064:	4651      	mov	r1, sl
    2066:	4628      	mov	r0, r5
    2068:	f00b fa32 	bl	d4d0 <color_prefix>
	}

	length += ids_print(output, level_on, func_on, domain, source, level);
    206c:	f8cd 8004 	str.w	r8, [sp, #4]
    2070:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2072:	9300      	str	r3, [sp, #0]
    2074:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2076:	4632      	mov	r2, r6
    2078:	4649      	mov	r1, r9
    207a:	4628      	mov	r0, r5
    207c:	f7ff ffa0 	bl	1fc0 <ids_print>

	return length;
}
    2080:	4438      	add	r0, r7
    2082:	b005      	add	sp, #20
    2084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    2088:	2700      	movs	r7, #0
    208a:	e7e7      	b.n	205c <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    208c:	9a03      	ldr	r2, [sp, #12]
    208e:	4621      	mov	r1, r4
    2090:	4628      	mov	r0, r5
    2092:	f7ff ff39 	bl	1f08 <timestamp_print>
    2096:	4407      	add	r7, r0
    2098:	e7e3      	b.n	2062 <prefix_print+0x36>
    209a:	bf00      	nop
    209c:	00010248 	.word	0x00010248

000020a0 <newline_print>:
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    20a0:	f011 0f10 	tst.w	r1, #16
    20a4:	d10b      	bne.n	20be <newline_print+0x1e>
{
    20a6:	b508      	push	{r3, lr}
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    20a8:	f011 0f20 	tst.w	r1, #32
    20ac:	d003      	beq.n	20b6 <newline_print+0x16>
		print_formatted(ctx, "\n");
    20ae:	4904      	ldr	r1, [pc, #16]	; (20c0 <newline_print+0x20>)
    20b0:	f7ff ff16 	bl	1ee0 <print_formatted>
}
    20b4:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    20b6:	4903      	ldr	r1, [pc, #12]	; (20c4 <newline_print+0x24>)
    20b8:	f7ff ff12 	bl	1ee0 <print_formatted>
    20bc:	e7fa      	b.n	20b4 <newline_print+0x14>
    20be:	4770      	bx	lr
    20c0:	00010c3c 	.word	0x00010c3c
    20c4:	0001024c 	.word	0x0001024c

000020c8 <hexdump_line_print>:
{
    20c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    20cc:	4605      	mov	r5, r0
    20ce:	460f      	mov	r7, r1
    20d0:	4616      	mov	r6, r2
    20d2:	4698      	mov	r8, r3
	newline_print(output, flags);
    20d4:	9906      	ldr	r1, [sp, #24]
    20d6:	f7ff ffe3 	bl	20a0 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    20da:	2400      	movs	r4, #0
    20dc:	4544      	cmp	r4, r8
    20de:	da05      	bge.n	20ec <hexdump_line_print+0x24>
		print_formatted(output, " ");
    20e0:	4923      	ldr	r1, [pc, #140]	; (2170 <hexdump_line_print+0xa8>)
    20e2:	4628      	mov	r0, r5
    20e4:	f7ff fefc 	bl	1ee0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    20e8:	3401      	adds	r4, #1
    20ea:	e7f7      	b.n	20dc <hexdump_line_print+0x14>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    20ec:	2400      	movs	r4, #0
    20ee:	e009      	b.n	2104 <hexdump_line_print+0x3c>
			print_formatted(output, " ");
    20f0:	491f      	ldr	r1, [pc, #124]	; (2170 <hexdump_line_print+0xa8>)
    20f2:	4628      	mov	r0, r5
    20f4:	f7ff fef4 	bl	1ee0 <print_formatted>
    20f8:	e00b      	b.n	2112 <hexdump_line_print+0x4a>
			print_formatted(output, "   ");
    20fa:	491e      	ldr	r1, [pc, #120]	; (2174 <hexdump_line_print+0xac>)
    20fc:	4628      	mov	r0, r5
    20fe:	f7ff feef 	bl	1ee0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2102:	3401      	adds	r4, #1
    2104:	2c0f      	cmp	r4, #15
    2106:	dc0c      	bgt.n	2122 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    2108:	2c00      	cmp	r4, #0
    210a:	dd02      	ble.n	2112 <hexdump_line_print+0x4a>
    210c:	f014 0f07 	tst.w	r4, #7
    2110:	d0ee      	beq.n	20f0 <hexdump_line_print+0x28>
		if (i < length) {
    2112:	42b4      	cmp	r4, r6
    2114:	d2f1      	bcs.n	20fa <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    2116:	5d3a      	ldrb	r2, [r7, r4]
    2118:	4917      	ldr	r1, [pc, #92]	; (2178 <hexdump_line_print+0xb0>)
    211a:	4628      	mov	r0, r5
    211c:	f7ff fee0 	bl	1ee0 <print_formatted>
    2120:	e7ef      	b.n	2102 <hexdump_line_print+0x3a>
	print_formatted(output, "|");
    2122:	4916      	ldr	r1, [pc, #88]	; (217c <hexdump_line_print+0xb4>)
    2124:	4628      	mov	r0, r5
    2126:	f7ff fedb 	bl	1ee0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    212a:	2400      	movs	r4, #0
    212c:	e009      	b.n	2142 <hexdump_line_print+0x7a>
			print_formatted(output, " ");
    212e:	4910      	ldr	r1, [pc, #64]	; (2170 <hexdump_line_print+0xa8>)
    2130:	4628      	mov	r0, r5
    2132:	f7ff fed5 	bl	1ee0 <print_formatted>
    2136:	e00b      	b.n	2150 <hexdump_line_print+0x88>
			print_formatted(output, "%c",
    2138:	4911      	ldr	r1, [pc, #68]	; (2180 <hexdump_line_print+0xb8>)
    213a:	4628      	mov	r0, r5
    213c:	f7ff fed0 	bl	1ee0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2140:	3401      	adds	r4, #1
    2142:	2c0f      	cmp	r4, #15
    2144:	dc12      	bgt.n	216c <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    2146:	2c00      	cmp	r4, #0
    2148:	dd02      	ble.n	2150 <hexdump_line_print+0x88>
    214a:	f014 0f07 	tst.w	r4, #7
    214e:	d0ee      	beq.n	212e <hexdump_line_print+0x66>
		if (i < length) {
    2150:	42b4      	cmp	r4, r6
    2152:	d206      	bcs.n	2162 <hexdump_line_print+0x9a>
			unsigned char c = (unsigned char)data[i];
    2154:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    2156:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    215a:	2b5e      	cmp	r3, #94	; 0x5e
    215c:	d9ec      	bls.n	2138 <hexdump_line_print+0x70>
    215e:	222e      	movs	r2, #46	; 0x2e
    2160:	e7ea      	b.n	2138 <hexdump_line_print+0x70>
			print_formatted(output, " ");
    2162:	4903      	ldr	r1, [pc, #12]	; (2170 <hexdump_line_print+0xa8>)
    2164:	4628      	mov	r0, r5
    2166:	f7ff febb 	bl	1ee0 <print_formatted>
    216a:	e7e9      	b.n	2140 <hexdump_line_print+0x78>
}
    216c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2170:	00010240 	.word	0x00010240
    2174:	00010258 	.word	0x00010258
    2178:	00010250 	.word	0x00010250
    217c:	0001025c 	.word	0x0001025c
    2180:	00010260 	.word	0x00010260

00002184 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    2184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2188:	b084      	sub	sp, #16
    218a:	4604      	mov	r4, r0
    218c:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
    2190:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2192:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    2194:	b995      	cbnz	r5, 21bc <log_output_process+0x38>
		prefix_offset = 0;
		/* source set to 1 indicates raw string and contrary to printk
		 * case it should not append anything to the output (printk is
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    2196:	2b01      	cmp	r3, #1
    2198:	d01b      	beq.n	21d2 <log_output_process+0x4e>
    219a:	4817      	ldr	r0, [pc, #92]	; (21f8 <log_output_process+0x74>)
		prefix_offset = 0;
    219c:	f04f 0800 	mov.w	r8, #0
	}

	if (package) {
    21a0:	b127      	cbz	r7, 21ac <log_output_process+0x28>
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    21a2:	463b      	mov	r3, r7
    21a4:	4622      	mov	r2, r4
    21a6:	4915      	ldr	r1, [pc, #84]	; (21fc <log_output_process+0x78>)
    21a8:	f009 fe42 	bl	be30 <cbpprintf_external>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    21ac:	b9ae      	cbnz	r6, 21da <log_output_process+0x56>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    21ae:	b9ed      	cbnz	r5, 21ec <log_output_process+0x68>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    21b0:	4620      	mov	r0, r4
    21b2:	f00b f9c0 	bl	d536 <log_output_flush>
}
    21b6:	b004      	add	sp, #16
    21b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
    21bc:	9502      	str	r5, [sp, #8]
    21be:	9301      	str	r3, [sp, #4]
    21c0:	9200      	str	r2, [sp, #0]
    21c2:	460b      	mov	r3, r1
    21c4:	2200      	movs	r2, #0
    21c6:	990e      	ldr	r1, [sp, #56]	; 0x38
    21c8:	f7ff ff30 	bl	202c <prefix_print>
    21cc:	4680      	mov	r8, r0
		cb = out_func;
    21ce:	480c      	ldr	r0, [pc, #48]	; (2200 <log_output_process+0x7c>)
    21d0:	e7e6      	b.n	21a0 <log_output_process+0x1c>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    21d2:	480b      	ldr	r0, [pc, #44]	; (2200 <log_output_process+0x7c>)
		prefix_offset = 0;
    21d4:	f04f 0800 	mov.w	r8, #0
    21d8:	e7e2      	b.n	21a0 <log_output_process+0x1c>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
    21da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    21dc:	9300      	str	r3, [sp, #0]
    21de:	4643      	mov	r3, r8
    21e0:	4632      	mov	r2, r6
    21e2:	990c      	ldr	r1, [sp, #48]	; 0x30
    21e4:	4620      	mov	r0, r4
    21e6:	f00b f98b 	bl	d500 <log_msg_hexdump>
    21ea:	e7e0      	b.n	21ae <log_output_process+0x2a>
		postfix_print(output, flags, level);
    21ec:	462a      	mov	r2, r5
    21ee:	990e      	ldr	r1, [sp, #56]	; 0x38
    21f0:	4620      	mov	r0, r4
    21f2:	f00b f979 	bl	d4e8 <postfix_print>
    21f6:	e7db      	b.n	21b0 <log_output_process+0x2c>
    21f8:	0000d589 	.word	0x0000d589
    21fc:	0000d4c1 	.word	0x0000d4c1
    2200:	0000d551 	.word	0x0000d551

00002204 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    2204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2208:	b086      	sub	sp, #24
    220a:	4605      	mov	r5, r0
    220c:	460c      	mov	r4, r1
    220e:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    2210:	f8d1 8008 	ldr.w	r8, [r1, #8]
	return msg->hdr.desc.level;
    2214:	880e      	ldrh	r6, [r1, #0]
    2216:	f3c6 1682 	ubfx	r6, r6, #6, #3
	return msg->hdr.desc.domain;
    221a:	7808      	ldrb	r0, [r1, #0]
    221c:	f3c0 00c2 	ubfx	r0, r0, #3, #3
	return msg->hdr.source;
    2220:	684b      	ldr	r3, [r1, #4]
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    2222:	b133      	cbz	r3, 2232 <log_output_msg_process+0x2e>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    2224:	4a11      	ldr	r2, [pc, #68]	; (226c <log_output_msg_process+0x68>)
    2226:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    2228:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    222c:	2900      	cmp	r1, #0
    222e:	da18      	bge.n	2262 <log_output_msg_process+0x5e>
    2230:	2300      	movs	r3, #0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    2232:	4622      	mov	r2, r4
    2234:	f852 1b10 	ldr.w	r1, [r2], #16
    2238:	f3c1 214a 	ubfx	r1, r1, #9, #11
	*len = msg->hdr.desc.data_len;
    223c:	8860      	ldrh	r0, [r4, #2]
    223e:	f3c0 100b 	ubfx	r0, r0, #4, #12
	return msg->data + msg->hdr.desc.package_len;
    2242:	1854      	adds	r4, r2, r1
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    2244:	b901      	cbnz	r1, 2248 <log_output_msg_process+0x44>
    2246:	2200      	movs	r2, #0
    2248:	9704      	str	r7, [sp, #16]
    224a:	9003      	str	r0, [sp, #12]
    224c:	9402      	str	r4, [sp, #8]
    224e:	9201      	str	r2, [sp, #4]
    2250:	9600      	str	r6, [sp, #0]
    2252:	2200      	movs	r2, #0
    2254:	4641      	mov	r1, r8
    2256:	4628      	mov	r0, r5
    2258:	f7ff ff94 	bl	2184 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    225c:	b006      	add	sp, #24
    225e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    2262:	f7ff fd55 	bl	1d10 <log_source_name_get>
    2266:	4603      	mov	r3, r0
    2268:	e7e3      	b.n	2232 <log_output_msg_process+0x2e>
    226a:	bf00      	nop
    226c:	0000fe34 	.word	0x0000fe34

00002270 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    2270:	b570      	push	{r4, r5, r6, lr}
    2272:	b082      	sub	sp, #8
    2274:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
    2276:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2278:	f242 730f 	movw	r3, #9999	; 0x270f
    227c:	428b      	cmp	r3, r1
    227e:	bf28      	it	cs
    2280:	460b      	movcs	r3, r1
    2282:	4a0e      	ldr	r2, [pc, #56]	; (22bc <log_output_dropped_process+0x4c>)
    2284:	2105      	movs	r1, #5
    2286:	4668      	mov	r0, sp
    2288:	f009 fe55 	bl	bf36 <snprintk>
    228c:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
    228e:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    2290:	685b      	ldr	r3, [r3, #4]
    2292:	220b      	movs	r2, #11
    2294:	490a      	ldr	r1, [pc, #40]	; (22c0 <log_output_dropped_process+0x50>)
    2296:	4628      	mov	r0, r5
    2298:	f00b f905 	bl	d4a6 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
    229c:	6863      	ldr	r3, [r4, #4]
    229e:	685b      	ldr	r3, [r3, #4]
    22a0:	4632      	mov	r2, r6
    22a2:	4669      	mov	r1, sp
    22a4:	4628      	mov	r0, r5
    22a6:	f00b f8fe 	bl	d4a6 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
    22aa:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    22ac:	685b      	ldr	r3, [r3, #4]
    22ae:	221b      	movs	r2, #27
    22b0:	4904      	ldr	r1, [pc, #16]	; (22c4 <log_output_dropped_process+0x54>)
    22b2:	4628      	mov	r0, r5
    22b4:	f00b f8f7 	bl	d4a6 <buffer_write>
}
    22b8:	b002      	add	sp, #8
    22ba:	bd70      	pop	{r4, r5, r6, pc}
    22bc:	00010dc0 	.word	0x00010dc0
    22c0:	00010280 	.word	0x00010280
    22c4:	00010264 	.word	0x00010264

000022c8 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    22c8:	4b07      	ldr	r3, [pc, #28]	; (22e8 <log_output_timestamp_freq_set+0x20>)
    22ca:	2201      	movs	r2, #1
    22cc:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    22ce:	e004      	b.n	22da <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
    22d0:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    22d2:	4a05      	ldr	r2, [pc, #20]	; (22e8 <log_output_timestamp_freq_set+0x20>)
    22d4:	6813      	ldr	r3, [r2, #0]
    22d6:	005b      	lsls	r3, r3, #1
    22d8:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    22da:	4b04      	ldr	r3, [pc, #16]	; (22ec <log_output_timestamp_freq_set+0x24>)
    22dc:	4298      	cmp	r0, r3
    22de:	d8f7      	bhi.n	22d0 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
    22e0:	4b03      	ldr	r3, [pc, #12]	; (22f0 <log_output_timestamp_freq_set+0x28>)
    22e2:	6018      	str	r0, [r3, #0]
}
    22e4:	4770      	bx	lr
    22e6:	bf00      	nop
    22e8:	20001088 	.word	0x20001088
    22ec:	000f4240 	.word	0x000f4240
    22f0:	2000108c 	.word	0x2000108c

000022f4 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    22f4:	4b03      	ldr	r3, [pc, #12]	; (2304 <log_backend_rtt_init+0x10>)
    22f6:	2201      	movs	r2, #1
    22f8:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
    22fa:	4b03      	ldr	r3, [pc, #12]	; (2308 <log_backend_rtt_init+0x14>)
    22fc:	4a03      	ldr	r2, [pc, #12]	; (230c <log_backend_rtt_init+0x18>)
    22fe:	601a      	str	r2, [r3, #0]
}
    2300:	4770      	bx	lr
    2302:	bf00      	nop
    2304:	20002396 	.word	0x20002396
    2308:	200010b8 	.word	0x200010b8
    230c:	200010bc 	.word	0x200010bc

00002310 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    2310:	4b01      	ldr	r3, [pc, #4]	; (2318 <format_set+0x8>)
    2312:	6019      	str	r1, [r3, #0]
	return 0;
}
    2314:	2000      	movs	r0, #0
    2316:	4770      	bx	lr
    2318:	200010a4 	.word	0x200010a4

0000231c <on_failed_write>:
{
    231c:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    231e:	b918      	cbnz	r0, 2328 <on_failed_write+0xc>
		host_present = false;
    2320:	4b07      	ldr	r3, [pc, #28]	; (2340 <on_failed_write+0x24>)
    2322:	2200      	movs	r2, #0
    2324:	701a      	strb	r2, [r3, #0]
}
    2326:	bd08      	pop	{r3, pc}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    2328:	4b06      	ldr	r3, [pc, #24]	; (2344 <on_failed_write+0x28>)
    232a:	781b      	ldrb	r3, [r3, #0]
	} else if (is_sync_mode()) {
    232c:	b123      	cbz	r3, 2338 <on_failed_write+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
    232e:	f241 3088 	movw	r0, #5000	; 0x1388
    2332:	f00d fb33 	bl	f99c <z_impl_k_busy_wait>
}
    2336:	e7f6      	b.n	2326 <on_failed_write+0xa>
		k_msleep(CONFIG_LOG_BACKEND_RTT_RETRY_DELAY_MS);
    2338:	2005      	movs	r0, #5
    233a:	f00b f934 	bl	d5a6 <k_msleep>
}
    233e:	e7f2      	b.n	2326 <on_failed_write+0xa>
    2340:	20002396 	.word	0x20002396
    2344:	20002397 	.word	0x20002397

00002348 <on_write>:
{
    2348:	b538      	push	{r3, r4, r5, lr}
    234a:	4604      	mov	r4, r0
	host_present = true;
    234c:	4b0a      	ldr	r3, [pc, #40]	; (2378 <on_write+0x30>)
    234e:	2201      	movs	r2, #1
    2350:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    2352:	4b0a      	ldr	r3, [pc, #40]	; (237c <on_write+0x34>)
    2354:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    2356:	b92b      	cbnz	r3, 2364 <on_write+0x1c>
}
    2358:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
    235a:	1e65      	subs	r5, r4, #1
    235c:	4620      	mov	r0, r4
    235e:	f7ff ffdd 	bl	231c <on_failed_write>
    2362:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    2364:	2000      	movs	r0, #0
    2366:	f008 f817 	bl	a398 <SEGGER_RTT_HasDataUp>
    236a:	2800      	cmp	r0, #0
    236c:	d0f4      	beq.n	2358 <on_write+0x10>
    236e:	4b02      	ldr	r3, [pc, #8]	; (2378 <on_write+0x30>)
    2370:	781b      	ldrb	r3, [r3, #0]
    2372:	2b00      	cmp	r3, #0
    2374:	d1f1      	bne.n	235a <on_write+0x12>
    2376:	e7ef      	b.n	2358 <on_write+0x10>
    2378:	20002396 	.word	0x20002396
    237c:	20002397 	.word	0x20002397

00002380 <data_out_block_mode>:
{
    2380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2382:	4606      	mov	r6, r0
    2384:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    2386:	2704      	movs	r7, #4
    2388:	e00d      	b.n	23a6 <data_out_block_mode+0x26>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    238a:	462a      	mov	r2, r5
    238c:	4631      	mov	r1, r6
    238e:	2000      	movs	r0, #0
    2390:	f007 ff9e 	bl	a2d0 <SEGGER_RTT_WriteSkipNoLock>
    2394:	4604      	mov	r4, r0
    2396:	e014      	b.n	23c2 <data_out_block_mode+0x42>
			on_write(retry_cnt);
    2398:	4638      	mov	r0, r7
    239a:	f7ff ffd5 	bl	2348 <on_write>
	} while ((ret == 0) && host_present);
    239e:	b9dc      	cbnz	r4, 23d8 <data_out_block_mode+0x58>
    23a0:	4b11      	ldr	r3, [pc, #68]	; (23e8 <data_out_block_mode+0x68>)
    23a2:	781b      	ldrb	r3, [r3, #0]
    23a4:	b1c3      	cbz	r3, 23d8 <data_out_block_mode+0x58>
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    23a6:	4b11      	ldr	r3, [pc, #68]	; (23ec <data_out_block_mode+0x6c>)
    23a8:	781b      	ldrb	r3, [r3, #0]
		if (!is_sync_mode()) {
    23aa:	2b00      	cmp	r3, #0
    23ac:	d1ed      	bne.n	238a <data_out_block_mode+0xa>
			RTT_LOCK();
    23ae:	f008 f803 	bl	a3b8 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    23b2:	462a      	mov	r2, r5
    23b4:	4631      	mov	r1, r6
    23b6:	2000      	movs	r0, #0
    23b8:	f007 ff8a 	bl	a2d0 <SEGGER_RTT_WriteSkipNoLock>
    23bc:	4604      	mov	r4, r0
			RTT_UNLOCK();
    23be:	f008 f807 	bl	a3d0 <zephyr_rtt_mutex_unlock>
		if (ret) {
    23c2:	2c00      	cmp	r4, #0
    23c4:	d1e8      	bne.n	2398 <data_out_block_mode+0x18>
		} else if (host_present) {
    23c6:	4b08      	ldr	r3, [pc, #32]	; (23e8 <data_out_block_mode+0x68>)
    23c8:	781b      	ldrb	r3, [r3, #0]
    23ca:	2b00      	cmp	r3, #0
    23cc:	d0e7      	beq.n	239e <data_out_block_mode+0x1e>
			retry_cnt--;
    23ce:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    23d0:	4638      	mov	r0, r7
    23d2:	f7ff ffa3 	bl	231c <on_failed_write>
    23d6:	e7e2      	b.n	239e <data_out_block_mode+0x1e>
	return ((ret == 0) && host_present) ? 0 : length;
    23d8:	b914      	cbnz	r4, 23e0 <data_out_block_mode+0x60>
    23da:	4b03      	ldr	r3, [pc, #12]	; (23e8 <data_out_block_mode+0x68>)
    23dc:	781b      	ldrb	r3, [r3, #0]
    23de:	b903      	cbnz	r3, 23e2 <data_out_block_mode+0x62>
    23e0:	462c      	mov	r4, r5
}
    23e2:	4620      	mov	r0, r4
    23e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    23e6:	bf00      	nop
    23e8:	20002396 	.word	0x20002396
    23ec:	20002397 	.word	0x20002397

000023f0 <panic>:
{
    23f0:	b508      	push	{r3, lr}
	panic_mode = true;
    23f2:	4b03      	ldr	r3, [pc, #12]	; (2400 <panic+0x10>)
    23f4:	2201      	movs	r2, #1
    23f6:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    23f8:	4802      	ldr	r0, [pc, #8]	; (2404 <panic+0x14>)
    23fa:	f00b f89c 	bl	d536 <log_output_flush>
}
    23fe:	bd08      	pop	{r3, pc}
    2400:	20002397 	.word	0x20002397
    2404:	00010300 	.word	0x00010300

00002408 <dropped>:
{
    2408:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    240a:	4802      	ldr	r0, [pc, #8]	; (2414 <dropped+0xc>)
    240c:	f7ff ff30 	bl	2270 <log_output_dropped_process>
}
    2410:	bd08      	pop	{r3, pc}
    2412:	bf00      	nop
    2414:	00010300 	.word	0x00010300

00002418 <process>:
{
    2418:	b510      	push	{r4, lr}
    241a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    241c:	4b04      	ldr	r3, [pc, #16]	; (2430 <process+0x18>)
    241e:	6818      	ldr	r0, [r3, #0]
    2420:	f7ff fa94 	bl	194c <log_format_func_t_get>
    2424:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    2426:	220f      	movs	r2, #15
    2428:	4621      	mov	r1, r4
    242a:	4802      	ldr	r0, [pc, #8]	; (2434 <process+0x1c>)
    242c:	4798      	blx	r3
}
    242e:	bd10      	pop	{r4, pc}
    2430:	200010a4 	.word	0x200010a4
    2434:	00010300 	.word	0x00010300

00002438 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    2438:	b570      	push	{r4, r5, r6, lr}
    243a:	4606      	mov	r6, r0
    243c:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		goto cleanup;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
    243e:	2400      	movs	r4, #0
    2440:	e005      	b.n	244e <char_out+0x16>
			uart_poll_out(uart_dev, data[i]);
    2442:	5d31      	ldrb	r1, [r6, r4]
	const struct uart_driver_api *api =
    2444:	4804      	ldr	r0, [pc, #16]	; (2458 <char_out+0x20>)
    2446:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    2448:	685b      	ldr	r3, [r3, #4]
    244a:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    244c:	3401      	adds	r4, #1
    244e:	42ac      	cmp	r4, r5
    2450:	d3f7      	bcc.n	2442 <char_out+0xa>
		/* As errors cannot be returned, ignore the return value */
		(void)pm_device_runtime_put(uart_dev);
	}

	return length;
}
    2452:	4628      	mov	r0, r5
    2454:	bd70      	pop	{r4, r5, r6, pc}
    2456:	bf00      	nop
    2458:	0000fc7c 	.word	0x0000fc7c

0000245c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    245c:	4b01      	ldr	r3, [pc, #4]	; (2464 <format_set+0x8>)
    245e:	6019      	str	r1, [r3, #0]
	return 0;
}
    2460:	2000      	movs	r0, #0
    2462:	4770      	bx	lr
    2464:	200010ec 	.word	0x200010ec

00002468 <panic>:
		}
	}
}

static void panic(struct log_backend const *const backend)
{
    2468:	b508      	push	{r3, lr}
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
    246a:	4b03      	ldr	r3, [pc, #12]	; (2478 <panic+0x10>)
    246c:	2201      	movs	r2, #1
    246e:	701a      	strb	r2, [r3, #0]
	log_output_flush(output);
    2470:	4802      	ldr	r0, [pc, #8]	; (247c <panic+0x14>)
    2472:	f00b f860 	bl	d536 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    2476:	bd08      	pop	{r3, pc}
    2478:	20002398 	.word	0x20002398
    247c:	0001034c 	.word	0x0001034c

00002480 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    2480:	b508      	push	{r3, lr}
	log_output_dropped_process(output, cnt);
    2482:	4802      	ldr	r0, [pc, #8]	; (248c <dropped+0xc>)
    2484:	f7ff fef4 	bl	2270 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
    2488:	bd08      	pop	{r3, pc}
    248a:	bf00      	nop
    248c:	0001034c 	.word	0x0001034c

00002490 <process>:
{
    2490:	b510      	push	{r4, lr}
    2492:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2494:	4b04      	ldr	r3, [pc, #16]	; (24a8 <process+0x18>)
    2496:	6818      	ldr	r0, [r3, #0]
    2498:	f7ff fa58 	bl	194c <log_format_func_t_get>
    249c:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    249e:	220f      	movs	r2, #15
    24a0:	4621      	mov	r1, r4
    24a2:	4802      	ldr	r0, [pc, #8]	; (24ac <process+0x1c>)
    24a4:	4798      	blx	r3
}
    24a6:	bd10      	pop	{r4, pc}
    24a8:	200010ec 	.word	0x200010ec
    24ac:	0001034c 	.word	0x0001034c

000024b0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    24b0:	b570      	push	{r4, r5, r6, lr}
    24b2:	4605      	mov	r5, r0
	__asm__ volatile(
    24b4:	f04f 0320 	mov.w	r3, #32
    24b8:	f3ef 8611 	mrs	r6, BASEPRI
    24bc:	f383 8812 	msr	BASEPRI_MAX, r3
    24c0:	f3bf 8f6f 	isb	sy
    24c4:	4b0e      	ldr	r3, [pc, #56]	; (2500 <pm_state_notify+0x50>)
    24c6:	681c      	ldr	r4, [r3, #0]
    24c8:	e00d      	b.n	24e6 <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
    24ca:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
    24cc:	b13a      	cbz	r2, 24de <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    24ce:	4b0d      	ldr	r3, [pc, #52]	; (2504 <pm_state_notify+0x54>)
    24d0:	7c1b      	ldrb	r3, [r3, #16]
    24d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    24d6:	490c      	ldr	r1, [pc, #48]	; (2508 <pm_state_notify+0x58>)
    24d8:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    24dc:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    24de:	4623      	mov	r3, r4
	return node->next;
    24e0:	6824      	ldr	r4, [r4, #0]
    24e2:	b104      	cbz	r4, 24e6 <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    24e4:	b123      	cbz	r3, 24f0 <pm_state_notify+0x40>
    24e6:	b12c      	cbz	r4, 24f4 <pm_state_notify+0x44>
		if (entering_state) {
    24e8:	2d00      	cmp	r5, #0
    24ea:	d0ee      	beq.n	24ca <pm_state_notify+0x1a>
			callback = notifier->state_entry;
    24ec:	6862      	ldr	r2, [r4, #4]
    24ee:	e7ed      	b.n	24cc <pm_state_notify+0x1c>
    24f0:	461c      	mov	r4, r3
    24f2:	e7f8      	b.n	24e6 <pm_state_notify+0x36>
	__asm__ volatile(
    24f4:	f386 8811 	msr	BASEPRI, r6
    24f8:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    24fc:	bd70      	pop	{r4, r5, r6, pc}
    24fe:	bf00      	nop
    2500:	20001108 	.word	0x20001108
    2504:	20002350 	.word	0x20002350
    2508:	200010fc 	.word	0x200010fc

0000250c <pm_exit_pos_ops>:
{
    250c:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
    250e:	4b06      	ldr	r3, [pc, #24]	; (2528 <pm_exit_pos_ops+0x1c>)
    2510:	b123      	cbz	r3, 251c <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
    2512:	7841      	ldrb	r1, [r0, #1]
    2514:	7800      	ldrb	r0, [r0, #0]
    2516:	f00b fcb8 	bl	de8a <pm_state_exit_post_ops>
}
    251a:	bd08      	pop	{r3, pc}
    251c:	2300      	movs	r3, #0
    251e:	f383 8811 	msr	BASEPRI, r3
    2522:	f3bf 8f6f 	isb	sy
    2526:	e7f8      	b.n	251a <pm_exit_pos_ops+0xe>
    2528:	0000de8b 	.word	0x0000de8b

0000252c <pm_system_resume>:

void pm_system_resume(void)
{
    252c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    252e:	4b0e      	ldr	r3, [pc, #56]	; (2568 <pm_system_resume+0x3c>)
    2530:	7c1c      	ldrb	r4, [r3, #16]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    2532:	4621      	mov	r1, r4
    2534:	480d      	ldr	r0, [pc, #52]	; (256c <pm_system_resume+0x40>)
    2536:	f00b f84d 	bl	d5d4 <atomic_test_and_clear_bit>
    253a:	b900      	cbnz	r0, 253e <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    253c:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    253e:	0065      	lsls	r5, r4, #1
    2540:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    2544:	4e0a      	ldr	r6, [pc, #40]	; (2570 <pm_system_resume+0x44>)
    2546:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    254a:	f7ff ffdf 	bl	250c <pm_exit_pos_ops>
		pm_state_notify(false);
    254e:	2000      	movs	r0, #0
    2550:	f7ff ffae 	bl	24b0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    2554:	192b      	adds	r3, r5, r4
    2556:	0099      	lsls	r1, r3, #2
    2558:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    255c:	2200      	movs	r2, #0
    255e:	5072      	str	r2, [r6, r1]
    2560:	605a      	str	r2, [r3, #4]
    2562:	609a      	str	r2, [r3, #8]
}
    2564:	e7ea      	b.n	253c <pm_system_resume+0x10>
    2566:	bf00      	nop
    2568:	20002350 	.word	0x20002350
    256c:	20001110 	.word	0x20001110
    2570:	200010fc 	.word	0x200010fc

00002574 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    2574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2576:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
    2578:	4b38      	ldr	r3, [pc, #224]	; (265c <pm_system_suspend+0xe8>)
    257a:	7c1c      	ldrb	r4, [r3, #16]
	__asm__ volatile(
    257c:	f04f 0320 	mov.w	r3, #32
    2580:	f3ef 8611 	mrs	r6, BASEPRI
    2584:	f383 8812 	msr	BASEPRI_MAX, r3
    2588:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    258c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    2590:	4b33      	ldr	r3, [pc, #204]	; (2660 <pm_system_suspend+0xec>)
    2592:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
    2596:	2b00      	cmp	r3, #0
    2598:	d039      	beq.n	260e <pm_system_suspend+0x9a>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    259a:	4b32      	ldr	r3, [pc, #200]	; (2664 <pm_system_suspend+0xf0>)
    259c:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
    25a0:	4f2f      	ldr	r7, [pc, #188]	; (2660 <pm_system_suspend+0xec>)
    25a2:	ea4f 0e82 	mov.w	lr, r2, lsl #2
    25a6:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    25aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    25ae:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    25b2:	2300      	movs	r3, #0
    25b4:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
    25b8:	f386 8811 	msr	BASEPRI, r6
    25bc:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    25c0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    25c4:	4a27      	ldr	r2, [pc, #156]	; (2664 <pm_system_suspend+0xf0>)
    25c6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    25ca:	2b00      	cmp	r3, #0
    25cc:	d044      	beq.n	2658 <pm_system_suspend+0xe4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    25ce:	f1b5 3fff 	cmp.w	r5, #4294967295
    25d2:	d12b      	bne.n	262c <pm_system_suspend+0xb8>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    25d4:	f008 fdd6 	bl	b184 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    25d8:	2001      	movs	r0, #1
    25da:	f7ff ff69 	bl	24b0 <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
    25de:	4621      	mov	r1, r4
    25e0:	4821      	ldr	r0, [pc, #132]	; (2668 <pm_system_suspend+0xf4>)
    25e2:	f00b f813 	bl	d60c <atomic_set_bit>
	if (pm_state_set != NULL) {
    25e6:	4b21      	ldr	r3, [pc, #132]	; (266c <pm_system_suspend+0xf8>)
    25e8:	b15b      	cbz	r3, 2602 <pm_system_suspend+0x8e>
		pm_state_set(info->state, info->substate_id);
    25ea:	4a1e      	ldr	r2, [pc, #120]	; (2664 <pm_system_suspend+0xf0>)
    25ec:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    25f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    25f4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    25f8:	7859      	ldrb	r1, [r3, #1]
    25fa:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
    25fe:	f00b fc3c 	bl	de7a <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    2602:	f7ff ff93 	bl	252c <pm_system_resume>
	k_sched_unlock();
    2606:	f008 ffa9 	bl	b55c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    260a:	2001      	movs	r0, #1
}
    260c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
    260e:	4601      	mov	r1, r0
    2610:	4620      	mov	r0, r4
    2612:	f000 f831 	bl	2678 <pm_policy_next_state>
		if (info != NULL) {
    2616:	2800      	cmp	r0, #0
    2618:	d0ce      	beq.n	25b8 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    261a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    261e:	4b11      	ldr	r3, [pc, #68]	; (2664 <pm_system_suspend+0xf0>)
    2620:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2624:	c807      	ldmia	r0, {r0, r1, r2}
    2626:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    262a:	e7c5      	b.n	25b8 <pm_system_suspend+0x44>
		     k_us_to_ticks_ceil32(
    262c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    2630:	4b0c      	ldr	r3, [pc, #48]	; (2664 <pm_system_suspend+0xf0>)
    2632:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2636:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
    2638:	0c41      	lsrs	r1, r0, #17
    263a:	03c0      	lsls	r0, r0, #15
    263c:	4b0c      	ldr	r3, [pc, #48]	; (2670 <pm_system_suspend+0xfc>)
    263e:	18c0      	adds	r0, r0, r3
    2640:	4a0c      	ldr	r2, [pc, #48]	; (2674 <pm_system_suspend+0x100>)
    2642:	f04f 0300 	mov.w	r3, #0
    2646:	f141 0100 	adc.w	r1, r1, #0
    264a:	f7fd fd59 	bl	100 <__aeabi_uldivmod>
		sys_clock_set_timeout(ticks -
    264e:	2101      	movs	r1, #1
    2650:	1a28      	subs	r0, r5, r0
    2652:	f005 fdff 	bl	8254 <sys_clock_set_timeout>
    2656:	e7bd      	b.n	25d4 <pm_system_suspend+0x60>
		return false;
    2658:	2000      	movs	r0, #0
    265a:	e7d7      	b.n	260c <pm_system_suspend+0x98>
    265c:	20002350 	.word	0x20002350
    2660:	200010f0 	.word	0x200010f0
    2664:	200010fc 	.word	0x200010fc
    2668:	20001110 	.word	0x20001110
    266c:	0000de7b 	.word	0x0000de7b
    2670:	000f423f 	.word	0x000f423f
    2674:	000f4240 	.word	0x000f4240

00002678 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    2678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    267c:	b082      	sub	sp, #8
    267e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2680:	a901      	add	r1, sp, #4
    2682:	f000 f845 	bl	2710 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2686:	1e44      	subs	r4, r0, #1
    2688:	b224      	sxth	r4, r4
    268a:	e007      	b.n	269c <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
    268c:	f1b6 3fff 	cmp.w	r6, #4294967295
    2690:	d033      	beq.n	26fa <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
    2692:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
    2694:	45b0      	cmp	r8, r6
    2696:	d930      	bls.n	26fa <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2698:	3c01      	subs	r4, #1
    269a:	b224      	sxth	r4, r4
    269c:	2c00      	cmp	r4, #0
    269e:	db2b      	blt.n	26f8 <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
    26a0:	9b01      	ldr	r3, [sp, #4]
    26a2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    26a6:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
    26aa:	7869      	ldrb	r1, [r5, #1]
    26ac:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    26b0:	f00a ffbf 	bl	d632 <pm_policy_state_lock_is_active>
    26b4:	2800      	cmp	r0, #0
    26b6:	d1ef      	bne.n	2698 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    26b8:	6868      	ldr	r0, [r5, #4]
    26ba:	0c41      	lsrs	r1, r0, #17
    26bc:	03c0      	lsls	r0, r0, #15
    26be:	4f11      	ldr	r7, [pc, #68]	; (2704 <pm_policy_next_state+0x8c>)
    26c0:	19c0      	adds	r0, r0, r7
    26c2:	4a11      	ldr	r2, [pc, #68]	; (2708 <pm_policy_next_state+0x90>)
    26c4:	f04f 0300 	mov.w	r3, #0
    26c8:	f141 0100 	adc.w	r1, r1, #0
    26cc:	f7fd fd18 	bl	100 <__aeabi_uldivmod>
    26d0:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    26d2:	68ab      	ldr	r3, [r5, #8]
    26d4:	0c59      	lsrs	r1, r3, #17
    26d6:	03db      	lsls	r3, r3, #15
    26d8:	19d8      	adds	r0, r3, r7
    26da:	4a0b      	ldr	r2, [pc, #44]	; (2708 <pm_policy_next_state+0x90>)
    26dc:	f04f 0300 	mov.w	r3, #0
    26e0:	f141 0100 	adc.w	r1, r1, #0
    26e4:	f7fd fd0c 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    26e8:	4b08      	ldr	r3, [pc, #32]	; (270c <pm_policy_next_state+0x94>)
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	f1b3 3fff 	cmp.w	r3, #4294967295
    26f0:	d0cc      	beq.n	268c <pm_policy_next_state+0x14>
    26f2:	4283      	cmp	r3, r0
    26f4:	d8ca      	bhi.n	268c <pm_policy_next_state+0x14>
    26f6:	e7cf      	b.n	2698 <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
    26f8:	2500      	movs	r5, #0
}
    26fa:	4628      	mov	r0, r5
    26fc:	b002      	add	sp, #8
    26fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2702:	bf00      	nop
    2704:	000f423f 	.word	0x000f423f
    2708:	000f4240 	.word	0x000f4240
    270c:	200000b8 	.word	0x200000b8

00002710 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    2710:	b908      	cbnz	r0, 2716 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    2712:	4b02      	ldr	r3, [pc, #8]	; (271c <pm_state_cpu_get_all+0xc>)
    2714:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    2716:	2000      	movs	r0, #0
    2718:	4770      	bx	lr
    271a:	bf00      	nop
    271c:	00010360 	.word	0x00010360

00002720 <usb_set_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
}

static bool usb_set_alt_setting(uint8_t iface, uint8_t alt_setting)
{
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    2720:	2807      	cmp	r0, #7
    2722:	d901      	bls.n	2728 <usb_set_alt_setting+0x8>
		usb_dev.alt_setting[iface] = alt_setting;
		return true;
	}

	return false;
    2724:	2000      	movs	r0, #0
}
    2726:	4770      	bx	lr
		usb_dev.alt_setting[iface] = alt_setting;
    2728:	4b02      	ldr	r3, [pc, #8]	; (2734 <usb_set_alt_setting+0x14>)
    272a:	4403      	add	r3, r0
    272c:	f883 10bb 	strb.w	r1, [r3, #187]	; 0xbb
		return true;
    2730:	2001      	movs	r0, #1
    2732:	4770      	bx	lr
    2734:	20001114 	.word	0x20001114

00002738 <usb_get_alt_setting>:

static uint8_t usb_get_alt_setting(uint8_t iface)
{
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    2738:	2807      	cmp	r0, #7
    273a:	d901      	bls.n	2740 <usb_get_alt_setting+0x8>
		return usb_dev.alt_setting[iface];
	}

	return 0;
    273c:	2000      	movs	r0, #0
}
    273e:	4770      	bx	lr
		return usb_dev.alt_setting[iface];
    2740:	4b02      	ldr	r3, [pc, #8]	; (274c <usb_get_alt_setting+0x14>)
    2742:	4403      	add	r3, r0
    2744:	f893 00bb 	ldrb.w	r0, [r3, #187]	; 0xbb
    2748:	4770      	bx	lr
    274a:	bf00      	nop
    274c:	20001114 	.word	0x20001114

00002750 <usb_handle_request>:
 *
 * @return true if the request was handles successfully
 */
static bool usb_handle_request(struct usb_setup_packet *setup,
			       int32_t *len, uint8_t **data)
{
    2750:	b510      	push	{r4, lr}
	uint32_t type = setup->RequestType.type;
    2752:	7803      	ldrb	r3, [r0, #0]
    2754:	f3c3 1341 	ubfx	r3, r3, #5, #2
	if (type >= MAX_NUM_REQ_HANDLERS) {
		LOG_DBG("Error Incorrect iType %d", type);
		return false;
	}

	handler = usb_dev.req_handlers[type];
    2758:	330a      	adds	r3, #10
    275a:	4c06      	ldr	r4, [pc, #24]	; (2774 <usb_handle_request+0x24>)
    275c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	if (handler == NULL) {
    2760:	b123      	cbz	r3, 276c <usb_handle_request+0x1c>
		LOG_DBG("No handler for reqtype %d", type);
		return false;
	}

	if ((*handler)(setup, len, data) < 0) {
    2762:	4798      	blx	r3
    2764:	2800      	cmp	r0, #0
    2766:	db03      	blt.n	2770 <usb_handle_request+0x20>
		LOG_DBG("Handler Error %d", type);
		usb_print_setup(setup);
		return false;
	}

	return true;
    2768:	2001      	movs	r0, #1
}
    276a:	bd10      	pop	{r4, pc}
		return false;
    276c:	2000      	movs	r0, #0
    276e:	e7fc      	b.n	276a <usb_handle_request+0x1a>
		return false;
    2770:	2000      	movs	r0, #0
    2772:	e7fa      	b.n	276a <usb_handle_request+0x1a>
    2774:	20001114 	.word	0x20001114

00002778 <usb_register_request_handler>:
 * @param [in] handler    Callback function pointer
 */
static void usb_register_request_handler(int32_t type,
					 usb_request_handler handler)
{
	usb_dev.req_handlers[type] = handler;
    2778:	300a      	adds	r0, #10
    277a:	4b02      	ldr	r3, [pc, #8]	; (2784 <usb_register_request_handler+0xc>)
    277c:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    2780:	4770      	bx	lr
    2782:	bf00      	nop
    2784:	20001114 	.word	0x20001114

00002788 <usb_register_descriptors>:
 *
 * @param [in] usb_descriptors The descriptor byte array
 */
static void usb_register_descriptors(const uint8_t *usb_descriptors)
{
	usb_dev.descriptors = usb_descriptors;
    2788:	4b01      	ldr	r3, [pc, #4]	; (2790 <usb_register_descriptors+0x8>)
    278a:	6258      	str	r0, [r3, #36]	; 0x24
}
    278c:	4770      	bx	lr
    278e:	bf00      	nop
    2790:	20001114 	.word	0x20001114

00002794 <usb_get_status>:

static bool usb_get_status(struct usb_setup_packet *setup,
			   int32_t *len, uint8_t **data_buf)
{
	uint8_t *data = *data_buf;
    2794:	6813      	ldr	r3, [r2, #0]

	LOG_DBG("Get Status request");
	data[0] = 0U;
    2796:	2200      	movs	r2, #0
    2798:	701a      	strb	r2, [r3, #0]
	data[1] = 0U;
    279a:	705a      	strb	r2, [r3, #1]

	if (IS_ENABLED(CONFIG_USB_SELF_POWERED)) {
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    279c:	2201      	movs	r2, #1
    279e:	701a      	strb	r2, [r3, #0]
	}

	if (IS_ENABLED(CONFIG_USB_DEVICE_REMOTE_WAKEUP)) {
		data[0] |= (usb_dev.remote_wakeup ?
    27a0:	4a06      	ldr	r2, [pc, #24]	; (27bc <usb_get_status+0x28>)
    27a2:	f892 20c3 	ldrb.w	r2, [r2, #195]	; 0xc3
    27a6:	b13a      	cbz	r2, 27b8 <usb_get_status+0x24>
    27a8:	2202      	movs	r2, #2
    27aa:	f042 0201 	orr.w	r2, r2, #1
    27ae:	701a      	strb	r2, [r3, #0]
			    USB_GET_STATUS_REMOTE_WAKEUP : 0);
	}

	*len = 2;
    27b0:	2302      	movs	r3, #2
    27b2:	600b      	str	r3, [r1, #0]

	return true;
}
    27b4:	2001      	movs	r0, #1
    27b6:	4770      	bx	lr
		data[0] |= (usb_dev.remote_wakeup ?
    27b8:	2200      	movs	r2, #0
    27ba:	e7f6      	b.n	27aa <usb_get_status+0x16>
    27bc:	20001114 	.word	0x20001114

000027c0 <usb_get_descriptor>:
 *
 * @return true if the descriptor was found, false otherwise
 */
static bool usb_get_descriptor(struct usb_setup_packet *setup,
			       int32_t *len, uint8_t **data)
{
    27c0:	b530      	push	{r4, r5, lr}
	uint8_t *p = NULL;
	uint32_t cur_index = 0U;
	bool found = false;

	LOG_DBG("Get Descriptor request");
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    27c2:	8845      	ldrh	r5, [r0, #2]
    27c4:	ea4f 2e15 	mov.w	lr, r5, lsr #8

	/*
	 * Invalid types of descriptors,
	 * see USB Spec. Revision 2.0, 9.4.3 Get Descriptor
	 */
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    27c8:	f1ae 0304 	sub.w	r3, lr, #4
    27cc:	b2db      	uxtb	r3, r3
    27ce:	2b01      	cmp	r3, #1
    27d0:	d921      	bls.n	2816 <usb_get_descriptor+0x56>
    27d2:	b2ed      	uxtb	r5, r5
    27d4:	f1be 0f07 	cmp.w	lr, #7
    27d8:	d81f      	bhi.n	281a <usb_get_descriptor+0x5a>
	    (type > USB_DESC_OTHER_SPEED)) {
		return false;
	}

	p = (uint8_t *)usb_dev.descriptors;
    27da:	4b11      	ldr	r3, [pc, #68]	; (2820 <usb_get_descriptor+0x60>)
    27dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	cur_index = 0U;
    27de:	2400      	movs	r4, #0

	while (p[DESC_bLength] != 0U) {
    27e0:	e000      	b.n	27e4 <usb_get_descriptor+0x24>
				break;
			}
			cur_index++;
		}
		/* skip to next descriptor */
		p += p[DESC_bLength];
    27e2:	4403      	add	r3, r0
	while (p[DESC_bLength] != 0U) {
    27e4:	7818      	ldrb	r0, [r3, #0]
    27e6:	b140      	cbz	r0, 27fa <usb_get_descriptor+0x3a>
		if (p[DESC_bDescriptorType] == type) {
    27e8:	f893 c001 	ldrb.w	ip, [r3, #1]
    27ec:	45f4      	cmp	ip, lr
    27ee:	d1f8      	bne.n	27e2 <usb_get_descriptor+0x22>
			if (cur_index == index) {
    27f0:	42a5      	cmp	r5, r4
    27f2:	d001      	beq.n	27f8 <usb_get_descriptor+0x38>
			cur_index++;
    27f4:	3401      	adds	r4, #1
    27f6:	e7f4      	b.n	27e2 <usb_get_descriptor+0x22>
				found = true;
    27f8:	2001      	movs	r0, #1
	}

	if (found) {
    27fa:	b168      	cbz	r0, 2818 <usb_get_descriptor+0x58>
		/* set data pointer */
		*data = p;
    27fc:	6013      	str	r3, [r2, #0]
		/* get length from structure */
		if (type == USB_DESC_CONFIGURATION) {
    27fe:	f1be 0f02 	cmp.w	lr, #2
    2802:	d002      	beq.n	280a <usb_get_descriptor+0x4a>
			 */
			*len = (p[CONF_DESC_wTotalLength]) |
			    (p[CONF_DESC_wTotalLength + 1] << 8);
		} else {
			/* normally length is at offset 0 */
			*len = p[DESC_bLength];
    2804:	781b      	ldrb	r3, [r3, #0]
    2806:	600b      	str	r3, [r1, #0]
    2808:	e006      	b.n	2818 <usb_get_descriptor+0x58>
			*len = (p[CONF_DESC_wTotalLength]) |
    280a:	789a      	ldrb	r2, [r3, #2]
			    (p[CONF_DESC_wTotalLength + 1] << 8);
    280c:	78db      	ldrb	r3, [r3, #3]
			*len = (p[CONF_DESC_wTotalLength]) |
    280e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    2812:	600b      	str	r3, [r1, #0]
    2814:	e000      	b.n	2818 <usb_get_descriptor+0x58>
		return false;
    2816:	2000      	movs	r0, #0
	} else {
		/* nothing found */
		LOG_DBG("Desc %x not found!", setup->wValue);
	}
	return found;
}
    2818:	bd30      	pop	{r4, r5, pc}
		return false;
    281a:	2000      	movs	r0, #0
    281c:	e7fc      	b.n	2818 <usb_get_descriptor+0x58>
    281e:	bf00      	nop
    2820:	20001114 	.word	0x20001114

00002824 <usb_get_interface>:
	return ret;
}

static bool usb_get_interface(struct usb_setup_packet *setup,
			      int32_t *len, uint8_t **data_buf)
{
    2824:	b538      	push	{r3, r4, r5, lr}
    2826:	460c      	mov	r4, r1
	const uint8_t *p = usb_dev.descriptors;
    2828:	4b0d      	ldr	r3, [pc, #52]	; (2860 <usb_get_interface+0x3c>)
    282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	uint8_t *data = *data_buf;
    282c:	6815      	ldr	r5, [r2, #0]
	uint8_t cur_iface;

	while (p[DESC_bLength] != 0U) {
    282e:	e000      	b.n	2832 <usb_get_interface+0xe>
				return true;
			}
		}

		/* skip to next descriptor */
		p += p[DESC_bLength];
    2830:	4413      	add	r3, r2
	while (p[DESC_bLength] != 0U) {
    2832:	781a      	ldrb	r2, [r3, #0]
    2834:	b18a      	cbz	r2, 285a <usb_get_interface+0x36>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    2836:	f893 c001 	ldrb.w	ip, [r3, #1]
    283a:	f1bc 0f04 	cmp.w	ip, #4
    283e:	d1f7      	bne.n	2830 <usb_get_interface+0xc>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    2840:	f893 c002 	ldrb.w	ip, [r3, #2]
			if (cur_iface == setup->wIndex) {
    2844:	f8b0 e004 	ldrh.w	lr, [r0, #4]
    2848:	45f4      	cmp	ip, lr
    284a:	d1f1      	bne.n	2830 <usb_get_interface+0xc>
				data[0] = usb_get_alt_setting(cur_iface);
    284c:	4660      	mov	r0, ip
    284e:	f7ff ff73 	bl	2738 <usb_get_alt_setting>
    2852:	7028      	strb	r0, [r5, #0]
				*len = 1;
    2854:	2001      	movs	r0, #1
    2856:	6020      	str	r0, [r4, #0]
				return true;
    2858:	e000      	b.n	285c <usb_get_interface+0x38>
	}

	return false;
    285a:	2000      	movs	r0, #0
}
    285c:	bd38      	pop	{r3, r4, r5, pc}
    285e:	bf00      	nop
    2860:	20001114 	.word	0x20001114

00002864 <is_device_configured>:
 *
 * @return true if Configured, false otherwise.
 */
static bool is_device_configured(void)
{
	return (usb_dev.configuration != 0);
    2864:	4b03      	ldr	r3, [pc, #12]	; (2874 <is_device_configured+0x10>)
    2866:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
}
    286a:	3800      	subs	r0, #0
    286c:	bf18      	it	ne
    286e:	2001      	movne	r0, #1
    2870:	4770      	bx	lr
    2872:	bf00      	nop
    2874:	20001114 	.word	0x20001114

00002878 <is_interface_valid>:
 *
 * @return true if interface exists - valid
 */
static bool is_interface_valid(uint8_t interface)
{
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    2878:	4b07      	ldr	r3, [pc, #28]	; (2898 <is_interface_valid+0x20>)
    287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	const struct usb_cfg_descriptor *cfg_descr;

	/* Search through descriptor for matching interface */
	while (p[DESC_bLength] != 0U) {
    287c:	e000      	b.n	2880 <is_interface_valid+0x8>
			cfg_descr = (const struct usb_cfg_descriptor *)p;
			if (interface < cfg_descr->bNumInterfaces) {
				return true;
			}
		}
		p += p[DESC_bLength];
    287e:	4413      	add	r3, r2
	while (p[DESC_bLength] != 0U) {
    2880:	781a      	ldrb	r2, [r3, #0]
    2882:	b13a      	cbz	r2, 2894 <is_interface_valid+0x1c>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    2884:	7859      	ldrb	r1, [r3, #1]
    2886:	2902      	cmp	r1, #2
    2888:	d1f9      	bne.n	287e <is_interface_valid+0x6>
			if (interface < cfg_descr->bNumInterfaces) {
    288a:	7919      	ldrb	r1, [r3, #4]
    288c:	4281      	cmp	r1, r0
    288e:	d9f6      	bls.n	287e <is_interface_valid+0x6>
				return true;
    2890:	2001      	movs	r0, #1
	}

	return false;
}
    2892:	4770      	bx	lr
	return false;
    2894:	2000      	movs	r0, #0
    2896:	4770      	bx	lr
    2898:	20001114 	.word	0x20001114

0000289c <is_ep_valid>:
static bool is_ep_valid(uint8_t ep)
{
	const struct usb_ep_cfg_data *ep_data;

	/* Check if its Endpoint 0 */
	if (USB_EP_GET_IDX(ep) == 0) {
    289c:	f030 0380 	bics.w	r3, r0, #128	; 0x80
    28a0:	d018      	beq.n	28d4 <is_ep_valid+0x38>
		return true;
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    28a2:	4910      	ldr	r1, [pc, #64]	; (28e4 <is_ep_valid+0x48>)
    28a4:	4b10      	ldr	r3, [pc, #64]	; (28e8 <is_ep_valid+0x4c>)
    28a6:	4299      	cmp	r1, r3
    28a8:	d219      	bcs.n	28de <is_ep_valid+0x42>
{
    28aa:	b410      	push	{r4}
    28ac:	e003      	b.n	28b6 <is_ep_valid+0x1a>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    28ae:	3124      	adds	r1, #36	; 0x24
    28b0:	4b0d      	ldr	r3, [pc, #52]	; (28e8 <is_ep_valid+0x4c>)
    28b2:	4299      	cmp	r1, r3
    28b4:	d20c      	bcs.n	28d0 <is_ep_valid+0x34>
		ep_data = cfg_data->endpoint;
    28b6:	6a0c      	ldr	r4, [r1, #32]

		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    28b8:	2300      	movs	r3, #0
    28ba:	7f0a      	ldrb	r2, [r1, #28]
    28bc:	429a      	cmp	r2, r3
    28be:	d9f6      	bls.n	28ae <is_ep_valid+0x12>
			if (ep_data[n].ep_addr == ep) {
    28c0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    28c4:	7912      	ldrb	r2, [r2, #4]
    28c6:	4282      	cmp	r2, r0
    28c8:	d006      	beq.n	28d8 <is_ep_valid+0x3c>
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    28ca:	3301      	adds	r3, #1
    28cc:	b2db      	uxtb	r3, r3
    28ce:	e7f4      	b.n	28ba <is_ep_valid+0x1e>
				return true;
			}
		}
	}

	return false;
    28d0:	2000      	movs	r0, #0
    28d2:	e002      	b.n	28da <is_ep_valid+0x3e>
		return true;
    28d4:	2001      	movs	r0, #1
    28d6:	4770      	bx	lr
				return true;
    28d8:	2001      	movs	r0, #1
}
    28da:	bc10      	pop	{r4}
    28dc:	4770      	bx	lr
	return false;
    28de:	2000      	movs	r0, #0
}
    28e0:	4770      	bx	lr
    28e2:	bf00      	nop
    28e4:	2000032c 	.word	0x2000032c
    28e8:	20000350 	.word	0x20000350

000028ec <usb_register_custom_req_handler>:
 *
 * @param [in] handler Callback function pointer
 */
static void usb_register_custom_req_handler(usb_request_handler handler)
{
	usb_dev.custom_req_handler = handler;
    28ec:	4b01      	ldr	r3, [pc, #4]	; (28f4 <usb_register_custom_req_handler+0x8>)
    28ee:	6198      	str	r0, [r3, #24]
}
    28f0:	4770      	bx	lr
    28f2:	bf00      	nop
    28f4:	20001114 	.word	0x20001114

000028f8 <usb_register_status_callback>:
 *
 * @param [in] cb Callback function pointer
 */
static void usb_register_status_callback(usb_dc_status_callback cb)
{
	usb_dev.status_callback = cb;
    28f8:	4b01      	ldr	r3, [pc, #4]	; (2900 <usb_register_status_callback+0x8>)
    28fa:	61d8      	str	r0, [r3, #28]
}
    28fc:	4770      	bx	lr
    28fe:	bf00      	nop
    2900:	20001114 	.word	0x20001114

00002904 <foreach_ep>:

static int foreach_ep(int (* endpoint_callback)(const struct usb_ep_cfg_data *))
{
    2904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2906:	4606      	mov	r6, r0
	struct usb_ep_cfg_data *ep_data;

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2908:	4d0a      	ldr	r5, [pc, #40]	; (2934 <foreach_ep+0x30>)
    290a:	4b0b      	ldr	r3, [pc, #44]	; (2938 <foreach_ep+0x34>)
    290c:	429d      	cmp	r5, r3
    290e:	d20f      	bcs.n	2930 <foreach_ep+0x2c>
		ep_data = cfg_data->endpoint;
    2910:	6a2f      	ldr	r7, [r5, #32]

		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    2912:	2400      	movs	r4, #0
    2914:	e001      	b.n	291a <foreach_ep+0x16>
    2916:	3401      	adds	r4, #1
    2918:	b2e4      	uxtb	r4, r4
    291a:	7f2b      	ldrb	r3, [r5, #28]
    291c:	42a3      	cmp	r3, r4
    291e:	d905      	bls.n	292c <foreach_ep+0x28>
			int ret;

			ret = endpoint_callback(&ep_data[n]);
    2920:	eb07 00c4 	add.w	r0, r7, r4, lsl #3
    2924:	47b0      	blx	r6
			if (ret < 0) {
    2926:	2800      	cmp	r0, #0
    2928:	daf5      	bge.n	2916 <foreach_ep+0x12>
			}
		}
	}

	return 0;
}
    292a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    292c:	3524      	adds	r5, #36	; 0x24
    292e:	e7ec      	b.n	290a <foreach_ep+0x6>
	return 0;
    2930:	2000      	movs	r0, #0
    2932:	e7fa      	b.n	292a <foreach_ep+0x26>
    2934:	2000032c 	.word	0x2000032c
    2938:	20000350 	.word	0x20000350

0000293c <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
    293c:	b538      	push	{r3, r4, r5, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    293e:	4b0c      	ldr	r3, [pc, #48]	; (2970 <class_handler+0x34>)
    2940:	e000      	b.n	2944 <class_handler+0x8>
    2942:	3324      	adds	r3, #36	; 0x24
    2944:	4c0b      	ldr	r4, [pc, #44]	; (2974 <class_handler+0x38>)
    2946:	42a3      	cmp	r3, r4
    2948:	d20e      	bcs.n	2968 <class_handler+0x2c>
		iface = &cfg_data->interface;
		if_descr = cfg_data->interface_descriptor;
    294a:	685c      	ldr	r4, [r3, #4]
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    294c:	4d0a      	ldr	r5, [pc, #40]	; (2978 <class_handler+0x3c>)
    294e:	6a6d      	ldr	r5, [r5, #36]	; 0x24
    2950:	42ac      	cmp	r4, r5
    2952:	d3f6      	bcc.n	2942 <class_handler+0x6>
			continue;
		}

		if (iface->class_handler &&
    2954:	691d      	ldr	r5, [r3, #16]
    2956:	2d00      	cmp	r5, #0
    2958:	d0f3      	beq.n	2942 <class_handler+0x6>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    295a:	f894 c002 	ldrb.w	ip, [r4, #2]
    295e:	7904      	ldrb	r4, [r0, #4]
		if (iface->class_handler &&
    2960:	45a4      	cmp	ip, r4
    2962:	d1ee      	bne.n	2942 <class_handler+0x6>
			return iface->class_handler(pSetup, len, data);
    2964:	47a8      	blx	r5
    2966:	e001      	b.n	296c <class_handler+0x30>
		}
	}

	return -ENOTSUP;
    2968:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    296c:	bd38      	pop	{r3, r4, r5, pc}
    296e:	bf00      	nop
    2970:	2000032c 	.word	0x2000032c
    2974:	20000350 	.word	0x20000350
    2978:	20001114 	.word	0x20001114

0000297c <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    297c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2980:	4606      	mov	r6, r0
    2982:	460f      	mov	r7, r1
    2984:	4690      	mov	r8, r2
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2986:	4c11      	ldr	r4, [pc, #68]	; (29cc <custom_handler+0x50>)
    2988:	e005      	b.n	2996 <custom_handler+0x1a>
		if (iface->custom_handler == NULL) {
			continue;
		}

		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
			return iface->custom_handler(pSetup, len, data);
    298a:	4642      	mov	r2, r8
    298c:	4639      	mov	r1, r7
    298e:	4630      	mov	r0, r6
    2990:	47a8      	blx	r5
    2992:	e019      	b.n	29c8 <custom_handler+0x4c>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2994:	3424      	adds	r4, #36	; 0x24
    2996:	4b0e      	ldr	r3, [pc, #56]	; (29d0 <custom_handler+0x54>)
    2998:	429c      	cmp	r4, r3
    299a:	d213      	bcs.n	29c4 <custom_handler+0x48>
		if_descr = cfg_data->interface_descriptor;
    299c:	6863      	ldr	r3, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    299e:	4d0d      	ldr	r5, [pc, #52]	; (29d4 <custom_handler+0x58>)
    29a0:	6a6d      	ldr	r5, [r5, #36]	; 0x24
    29a2:	42ab      	cmp	r3, r5
    29a4:	d3f6      	bcc.n	2994 <custom_handler+0x18>
		if (iface->custom_handler == NULL) {
    29a6:	69a5      	ldr	r5, [r4, #24]
    29a8:	2d00      	cmp	r5, #0
    29aa:	d0f3      	beq.n	2994 <custom_handler+0x18>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    29ac:	7899      	ldrb	r1, [r3, #2]
    29ae:	7932      	ldrb	r2, [r6, #4]
    29b0:	4291      	cmp	r1, r2
    29b2:	d0ea      	beq.n	298a <custom_handler+0xe>
			 * the first interface, but the request may be for
			 * subsequent ones, so forward each request to audio.
			 * The class does not actively engage in request
			 * handling and therefore we can ignore return value.
			 */
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    29b4:	795b      	ldrb	r3, [r3, #5]
    29b6:	2b01      	cmp	r3, #1
    29b8:	d1ec      	bne.n	2994 <custom_handler+0x18>
				(void)iface->custom_handler(pSetup, len, data);
    29ba:	4642      	mov	r2, r8
    29bc:	4639      	mov	r1, r7
    29be:	4630      	mov	r0, r6
    29c0:	47a8      	blx	r5
    29c2:	e7e7      	b.n	2994 <custom_handler+0x18>
			}
		}
	}

	return -ENOTSUP;
    29c4:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    29c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    29cc:	2000032c 	.word	0x2000032c
    29d0:	20000350 	.word	0x20000350
    29d4:	20001114 	.word	0x20001114

000029d8 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    29d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29da:	4607      	mov	r7, r0
    29dc:	460e      	mov	r6, r1
    29de:	4615      	mov	r5, r2
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    29e0:	4c0a      	ldr	r4, [pc, #40]	; (2a0c <vendor_handler+0x34>)
    29e2:	e000      	b.n	29e6 <vendor_handler+0xe>
    29e4:	3424      	adds	r4, #36	; 0x24
    29e6:	4b0a      	ldr	r3, [pc, #40]	; (2a10 <vendor_handler+0x38>)
    29e8:	429c      	cmp	r4, r3
    29ea:	d20a      	bcs.n	2a02 <vendor_handler+0x2a>
		iface = &cfg_data->interface;
		if (iface->vendor_handler) {
    29ec:	6963      	ldr	r3, [r4, #20]
    29ee:	2b00      	cmp	r3, #0
    29f0:	d0f8      	beq.n	29e4 <vendor_handler+0xc>
			if (!iface->vendor_handler(pSetup, len, data)) {
    29f2:	462a      	mov	r2, r5
    29f4:	4631      	mov	r1, r6
    29f6:	4638      	mov	r0, r7
    29f8:	4798      	blx	r3
    29fa:	4603      	mov	r3, r0
    29fc:	2800      	cmp	r0, #0
    29fe:	d1f1      	bne.n	29e4 <vendor_handler+0xc>
    2a00:	e001      	b.n	2a06 <vendor_handler+0x2e>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    2a02:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    2a06:	4618      	mov	r0, r3
    2a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a0a:	bf00      	nop
    2a0c:	2000032c 	.word	0x2000032c
    2a10:	20000350 	.word	0x20000350

00002a14 <get_ep_bm_from_addr>:
	if (ep_idx > 15) {
    2a14:	f010 0f70 	tst.w	r0, #112	; 0x70
    2a18:	d107      	bne.n	2a2a <get_ep_bm_from_addr+0x16>
    2a1a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (ep & USB_EP_DIR_IN) {
    2a1e:	f010 0f80 	tst.w	r0, #128	; 0x80
    2a22:	d144      	bne.n	2aae <get_ep_bm_from_addr+0x9a>
		ep_bm = BIT(ep_idx);
    2a24:	2001      	movs	r0, #1
    2a26:	4098      	lsls	r0, r3
}
    2a28:	4770      	bx	lr
{
    2a2a:	b5b0      	push	{r4, r5, r7, lr}
    2a2c:	b082      	sub	sp, #8
    2a2e:	af00      	add	r7, sp, #0
		LOG_ERR("Endpoint 0x%02x is invalid", ep);
    2a30:	466c      	mov	r4, sp
    2a32:	b088      	sub	sp, #32
    2a34:	466b      	mov	r3, sp
    2a36:	f113 0210 	adds.w	r2, r3, #16
    2a3a:	d032      	beq.n	2aa2 <get_ep_bm_from_addr+0x8e>
    2a3c:	210c      	movs	r1, #12
    2a3e:	b142      	cbz	r2, 2a52 <get_ep_bm_from_addr+0x3e>
    2a40:	468c      	mov	ip, r1
    2a42:	2904      	cmp	r1, #4
    2a44:	dd01      	ble.n	2a4a <get_ep_bm_from_addr+0x36>
    2a46:	4d1c      	ldr	r5, [pc, #112]	; (2ab8 <get_ep_bm_from_addr+0xa4>)
    2a48:	615d      	str	r5, [r3, #20]
    2a4a:	f1bc 0f08 	cmp.w	ip, #8
    2a4e:	dd00      	ble.n	2a52 <get_ep_bm_from_addr+0x3e>
    2a50:	6198      	str	r0, [r3, #24]
    2a52:	290b      	cmp	r1, #11
    2a54:	dd28      	ble.n	2aa8 <get_ep_bm_from_addr+0x94>
    2a56:	f04f 0c0c 	mov.w	ip, #12
    2a5a:	b13a      	cbz	r2, 2a6c <get_ep_bm_from_addr+0x58>
    2a5c:	2103      	movs	r1, #3
    2a5e:	7139      	strb	r1, [r7, #4]
    2a60:	2100      	movs	r1, #0
    2a62:	7179      	strb	r1, [r7, #5]
    2a64:	71b9      	strb	r1, [r7, #6]
    2a66:	71f9      	strb	r1, [r7, #7]
    2a68:	6878      	ldr	r0, [r7, #4]
    2a6a:	6118      	str	r0, [r3, #16]
    2a6c:	2100      	movs	r1, #0
    2a6e:	f36f 0100 	bfc	r1, #0, #1
    2a72:	f36f 0141 	bfc	r1, #1, #1
    2a76:	f36f 0182 	bfc	r1, #2, #1
    2a7a:	f36f 01c5 	bfc	r1, #3, #3
    2a7e:	2301      	movs	r3, #1
    2a80:	f363 1188 	bfi	r1, r3, #6, #3
    2a84:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    2a88:	f36c 2153 	bfi	r1, ip, #9, #11
    2a8c:	f36f 511f 	bfc	r1, #20, #12
    2a90:	2300      	movs	r3, #0
    2a92:	480a      	ldr	r0, [pc, #40]	; (2abc <get_ep_bm_from_addr+0xa8>)
    2a94:	f7ff f978 	bl	1d88 <z_impl_z_log_msg_static_create>
    2a98:	46a5      	mov	sp, r4
	uint32_t ep_bm = 0;
    2a9a:	2000      	movs	r0, #0
}
    2a9c:	3708      	adds	r7, #8
    2a9e:	46bd      	mov	sp, r7
    2aa0:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Endpoint 0x%02x is invalid", ep);
    2aa2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    2aa6:	e7ca      	b.n	2a3e <get_ep_bm_from_addr+0x2a>
    2aa8:	f06f 0c1b 	mvn.w	ip, #27
    2aac:	e7d5      	b.n	2a5a <get_ep_bm_from_addr+0x46>
		ep_bm = BIT(ep_idx + 16);
    2aae:	3310      	adds	r3, #16
    2ab0:	2001      	movs	r0, #1
    2ab2:	4098      	lsls	r0, r3
    2ab4:	4770      	bx	lr
    2ab6:	bf00      	nop
    2ab8:	00010360 	.word	0x00010360
    2abc:	0000febc 	.word	0x0000febc

00002ac0 <disable_interface_ep>:
{
    2ac0:	b538      	push	{r3, r4, r5, lr}
    2ac2:	4604      	mov	r4, r0
	ret = usb_dc_ep_disable(ep_data->ep_addr);
    2ac4:	7900      	ldrb	r0, [r0, #4]
    2ac6:	f00b fab8 	bl	e03a <usb_dc_ep_disable>
    2aca:	4605      	mov	r5, r0
	ep_bm = get_ep_bm_from_addr(ep_data->ep_addr);
    2acc:	7920      	ldrb	r0, [r4, #4]
    2ace:	f7ff ffa1 	bl	2a14 <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    2ad2:	4a04      	ldr	r2, [pc, #16]	; (2ae4 <disable_interface_ep+0x24>)
    2ad4:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
    2ad8:	ea23 0300 	bic.w	r3, r3, r0
    2adc:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
}
    2ae0:	4628      	mov	r0, r5
    2ae2:	bd38      	pop	{r3, r4, r5, pc}
    2ae4:	20001114 	.word	0x20001114

00002ae8 <disable_endpoint>:
{
    2ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2aea:	b083      	sub	sp, #12
    2aec:	af00      	add	r7, sp, #0
    2aee:	4605      	mov	r5, r0
	ret = usb_dc_ep_disable(ep_addr);
    2af0:	f00b faa3 	bl	e03a <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    2af4:	f110 0f78 	cmn.w	r0, #120	; 0x78
    2af8:	d001      	beq.n	2afe <disable_endpoint+0x16>
    2afa:	4604      	mov	r4, r0
	} else if (ret) {
    2afc:	b970      	cbnz	r0, 2b1c <disable_endpoint+0x34>
	ep_bm = get_ep_bm_from_addr(ep_addr);
    2afe:	4628      	mov	r0, r5
    2b00:	f7ff ff88 	bl	2a14 <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    2b04:	4a23      	ldr	r2, [pc, #140]	; (2b94 <disable_endpoint+0xac>)
    2b06:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
    2b0a:	ea23 0300 	bic.w	r3, r3, r0
    2b0e:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	return 0;
    2b12:	2400      	movs	r4, #0
}
    2b14:	4620      	mov	r0, r4
    2b16:	370c      	adds	r7, #12
    2b18:	46bd      	mov	sp, r7
    2b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_addr);
    2b1c:	466e      	mov	r6, sp
    2b1e:	b088      	sub	sp, #32
    2b20:	466b      	mov	r3, sp
    2b22:	f113 0210 	adds.w	r2, r3, #16
    2b26:	d02f      	beq.n	2b88 <disable_endpoint+0xa0>
    2b28:	210c      	movs	r1, #12
    2b2a:	b14a      	cbz	r2, 2b40 <disable_endpoint+0x58>
    2b2c:	4608      	mov	r0, r1
    2b2e:	2904      	cmp	r1, #4
    2b30:	dd03      	ble.n	2b3a <disable_endpoint+0x52>
    2b32:	f8df c064 	ldr.w	ip, [pc, #100]	; 2b98 <disable_endpoint+0xb0>
    2b36:	f8c3 c014 	str.w	ip, [r3, #20]
    2b3a:	2808      	cmp	r0, #8
    2b3c:	dd00      	ble.n	2b40 <disable_endpoint+0x58>
    2b3e:	619d      	str	r5, [r3, #24]
    2b40:	290b      	cmp	r1, #11
    2b42:	dd24      	ble.n	2b8e <disable_endpoint+0xa6>
    2b44:	250c      	movs	r5, #12
    2b46:	b13a      	cbz	r2, 2b58 <disable_endpoint+0x70>
    2b48:	2103      	movs	r1, #3
    2b4a:	7139      	strb	r1, [r7, #4]
    2b4c:	2100      	movs	r1, #0
    2b4e:	7179      	strb	r1, [r7, #5]
    2b50:	71b9      	strb	r1, [r7, #6]
    2b52:	71f9      	strb	r1, [r7, #7]
    2b54:	6878      	ldr	r0, [r7, #4]
    2b56:	6118      	str	r0, [r3, #16]
    2b58:	2100      	movs	r1, #0
    2b5a:	f36f 0100 	bfc	r1, #0, #1
    2b5e:	f36f 0141 	bfc	r1, #1, #1
    2b62:	f36f 0182 	bfc	r1, #2, #1
    2b66:	f36f 01c5 	bfc	r1, #3, #3
    2b6a:	2301      	movs	r3, #1
    2b6c:	f363 1188 	bfi	r1, r3, #6, #3
    2b70:	f3c5 030a 	ubfx	r3, r5, #0, #11
    2b74:	f363 2153 	bfi	r1, r3, #9, #11
    2b78:	f36f 511f 	bfc	r1, #20, #12
    2b7c:	2300      	movs	r3, #0
    2b7e:	4807      	ldr	r0, [pc, #28]	; (2b9c <disable_endpoint+0xb4>)
    2b80:	f7ff f902 	bl	1d88 <z_impl_z_log_msg_static_create>
    2b84:	46b5      	mov	sp, r6
		return ret;
    2b86:	e7c5      	b.n	2b14 <disable_endpoint+0x2c>
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_addr);
    2b88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    2b8c:	e7cd      	b.n	2b2a <disable_endpoint+0x42>
    2b8e:	f06f 051b 	mvn.w	r5, #27
    2b92:	e7d8      	b.n	2b46 <disable_endpoint+0x5e>
    2b94:	20001114 	.word	0x20001114
    2b98:	0001037c 	.word	0x0001037c
    2b9c:	0000febc 	.word	0x0000febc

00002ba0 <usb_halt_endpoint_req>:
{
    2ba0:	b570      	push	{r4, r5, r6, lr}
    2ba2:	b082      	sub	sp, #8
    2ba4:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    2ba6:	7904      	ldrb	r4, [r0, #4]
    2ba8:	f88d 4007 	strb.w	r4, [sp, #7]
	if (!is_ep_valid(ep)) {
    2bac:	4620      	mov	r0, r4
    2bae:	f7ff fe75 	bl	289c <is_ep_valid>
    2bb2:	4606      	mov	r6, r0
    2bb4:	b130      	cbz	r0, 2bc4 <usb_halt_endpoint_req+0x24>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    2bb6:	f034 0380 	bics.w	r3, r4, #128	; 0x80
    2bba:	d006      	beq.n	2bca <usb_halt_endpoint_req+0x2a>
    2bbc:	f7ff fe52 	bl	2864 <is_device_configured>
    2bc0:	b918      	cbnz	r0, 2bca <usb_halt_endpoint_req+0x2a>
	return false;
    2bc2:	4606      	mov	r6, r0
}
    2bc4:	4630      	mov	r0, r6
    2bc6:	b002      	add	sp, #8
    2bc8:	bd70      	pop	{r4, r5, r6, pc}
		if (halt) {
    2bca:	b15d      	cbz	r5, 2be4 <usb_halt_endpoint_req+0x44>
			usb_dc_ep_set_stall(ep);
    2bcc:	4620      	mov	r0, r4
    2bce:	f004 f8ff 	bl	6dd0 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    2bd2:	4b0a      	ldr	r3, [pc, #40]	; (2bfc <usb_halt_endpoint_req+0x5c>)
    2bd4:	69db      	ldr	r3, [r3, #28]
    2bd6:	2b00      	cmp	r3, #0
    2bd8:	d0f4      	beq.n	2bc4 <usb_halt_endpoint_req+0x24>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    2bda:	f10d 0107 	add.w	r1, sp, #7
    2bde:	2008      	movs	r0, #8
    2be0:	4798      	blx	r3
    2be2:	e7ef      	b.n	2bc4 <usb_halt_endpoint_req+0x24>
			usb_dc_ep_clear_stall(ep);
    2be4:	4620      	mov	r0, r4
    2be6:	f004 f94f 	bl	6e88 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    2bea:	4b04      	ldr	r3, [pc, #16]	; (2bfc <usb_halt_endpoint_req+0x5c>)
    2bec:	69db      	ldr	r3, [r3, #28]
    2bee:	2b00      	cmp	r3, #0
    2bf0:	d0e8      	beq.n	2bc4 <usb_halt_endpoint_req+0x24>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    2bf2:	f10d 0107 	add.w	r1, sp, #7
    2bf6:	2009      	movs	r0, #9
    2bf8:	4798      	blx	r3
		return true;
    2bfa:	e7e3      	b.n	2bc4 <usb_halt_endpoint_req+0x24>
    2bfc:	20001114 	.word	0x20001114

00002c00 <set_endpoint>:
{
    2c00:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c02:	b085      	sub	sp, #20
    2c04:	af00      	add	r7, sp, #0
    2c06:	4604      	mov	r4, r0
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    2c08:	7880      	ldrb	r0, [r0, #2]
    2c0a:	7238      	strb	r0, [r7, #8]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    2c0c:	88a3      	ldrh	r3, [r4, #4]
    2c0e:	817b      	strh	r3, [r7, #10]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    2c10:	78e3      	ldrb	r3, [r4, #3]
    2c12:	f003 0303 	and.w	r3, r3, #3
    2c16:	733b      	strb	r3, [r7, #12]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    2c18:	f7ff fefc 	bl	2a14 <get_ep_bm_from_addr>
    2c1c:	4605      	mov	r5, r0
	if (ep_bm & usb_dev.ep_bm) {
    2c1e:	4b52      	ldr	r3, [pc, #328]	; (2d68 <set_endpoint+0x168>)
    2c20:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    2c24:	4203      	tst	r3, r0
    2c26:	d11b      	bne.n	2c60 <set_endpoint+0x60>
	ret = usb_dc_ep_configure(&ep_cfg);
    2c28:	f107 0008 	add.w	r0, r7, #8
    2c2c:	f004 f87c 	bl	6d28 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    2c30:	f110 0f78 	cmn.w	r0, #120	; 0x78
    2c34:	d000      	beq.n	2c38 <set_endpoint+0x38>
	} else if (ret) {
    2c36:	b9f0      	cbnz	r0, 2c76 <set_endpoint+0x76>
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    2c38:	7a38      	ldrb	r0, [r7, #8]
    2c3a:	f004 f96f 	bl	6f1c <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    2c3e:	f110 0f78 	cmn.w	r0, #120	; 0x78
    2c42:	d001      	beq.n	2c48 <set_endpoint+0x48>
	} else if (ret) {
    2c44:	2800      	cmp	r0, #0
    2c46:	d152      	bne.n	2cee <set_endpoint+0xee>
	usb_dev.configured = true;
    2c48:	4b47      	ldr	r3, [pc, #284]	; (2d68 <set_endpoint+0x168>)
    2c4a:	2001      	movs	r0, #1
    2c4c:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	usb_dev.ep_bm |= ep_bm;
    2c50:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    2c54:	4315      	orrs	r5, r2
    2c56:	f8c3 50c4 	str.w	r5, [r3, #196]	; 0xc4
}
    2c5a:	3714      	adds	r7, #20
    2c5c:	46bd      	mov	sp, r7
    2c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		reset_endpoint(ep_desc);
    2c60:	4620      	mov	r0, r4
    2c62:	f00a fcea 	bl	d63a <reset_endpoint>
		if (!k_is_in_isr()) {
    2c66:	f00c fac4 	bl	f1f2 <k_is_in_isr>
    2c6a:	2800      	cmp	r0, #0
    2c6c:	d1dc      	bne.n	2c28 <set_endpoint+0x28>
	return z_impl_k_usleep(us);
    2c6e:	2096      	movs	r0, #150	; 0x96
    2c70:	f008 fd8a 	bl	b788 <z_impl_k_usleep>
    2c74:	e7d8      	b.n	2c28 <set_endpoint+0x28>
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    2c76:	7a3c      	ldrb	r4, [r7, #8]
    2c78:	466d      	mov	r5, sp
    2c7a:	b088      	sub	sp, #32
    2c7c:	466b      	mov	r3, sp
    2c7e:	f113 0210 	adds.w	r2, r3, #16
    2c82:	d02e      	beq.n	2ce2 <set_endpoint+0xe2>
    2c84:	210c      	movs	r1, #12
    2c86:	b13a      	cbz	r2, 2c98 <set_endpoint+0x98>
    2c88:	4608      	mov	r0, r1
    2c8a:	2904      	cmp	r1, #4
    2c8c:	dd01      	ble.n	2c92 <set_endpoint+0x92>
    2c8e:	4e37      	ldr	r6, [pc, #220]	; (2d6c <set_endpoint+0x16c>)
    2c90:	615e      	str	r6, [r3, #20]
    2c92:	2808      	cmp	r0, #8
    2c94:	dd00      	ble.n	2c98 <set_endpoint+0x98>
    2c96:	619c      	str	r4, [r3, #24]
    2c98:	290b      	cmp	r1, #11
    2c9a:	dd25      	ble.n	2ce8 <set_endpoint+0xe8>
    2c9c:	240c      	movs	r4, #12
    2c9e:	b13a      	cbz	r2, 2cb0 <set_endpoint+0xb0>
    2ca0:	2103      	movs	r1, #3
    2ca2:	7139      	strb	r1, [r7, #4]
    2ca4:	2100      	movs	r1, #0
    2ca6:	7179      	strb	r1, [r7, #5]
    2ca8:	71b9      	strb	r1, [r7, #6]
    2caa:	71f9      	strb	r1, [r7, #7]
    2cac:	6878      	ldr	r0, [r7, #4]
    2cae:	6118      	str	r0, [r3, #16]
    2cb0:	2100      	movs	r1, #0
    2cb2:	f36f 0100 	bfc	r1, #0, #1
    2cb6:	f36f 0141 	bfc	r1, #1, #1
    2cba:	f36f 0182 	bfc	r1, #2, #1
    2cbe:	f36f 01c5 	bfc	r1, #3, #3
    2cc2:	2301      	movs	r3, #1
    2cc4:	f363 1188 	bfi	r1, r3, #6, #3
    2cc8:	f3c4 030a 	ubfx	r3, r4, #0, #11
    2ccc:	f363 2153 	bfi	r1, r3, #9, #11
    2cd0:	f36f 511f 	bfc	r1, #20, #12
    2cd4:	2300      	movs	r3, #0
    2cd6:	4826      	ldr	r0, [pc, #152]	; (2d70 <set_endpoint+0x170>)
    2cd8:	f7ff f856 	bl	1d88 <z_impl_z_log_msg_static_create>
    2cdc:	46ad      	mov	sp, r5
		return false;
    2cde:	2000      	movs	r0, #0
    2ce0:	e7bb      	b.n	2c5a <set_endpoint+0x5a>
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    2ce2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    2ce6:	e7ce      	b.n	2c86 <set_endpoint+0x86>
    2ce8:	f06f 041b 	mvn.w	r4, #27
    2cec:	e7d7      	b.n	2c9e <set_endpoint+0x9e>
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    2cee:	7a3c      	ldrb	r4, [r7, #8]
    2cf0:	466d      	mov	r5, sp
    2cf2:	b088      	sub	sp, #32
    2cf4:	466b      	mov	r3, sp
    2cf6:	f113 0210 	adds.w	r2, r3, #16
    2cfa:	d02e      	beq.n	2d5a <set_endpoint+0x15a>
    2cfc:	210c      	movs	r1, #12
    2cfe:	b13a      	cbz	r2, 2d10 <set_endpoint+0x110>
    2d00:	4608      	mov	r0, r1
    2d02:	2904      	cmp	r1, #4
    2d04:	dd01      	ble.n	2d0a <set_endpoint+0x10a>
    2d06:	4e1b      	ldr	r6, [pc, #108]	; (2d74 <set_endpoint+0x174>)
    2d08:	615e      	str	r6, [r3, #20]
    2d0a:	2808      	cmp	r0, #8
    2d0c:	dd00      	ble.n	2d10 <set_endpoint+0x110>
    2d0e:	619c      	str	r4, [r3, #24]
    2d10:	290b      	cmp	r1, #11
    2d12:	dd25      	ble.n	2d60 <set_endpoint+0x160>
    2d14:	240c      	movs	r4, #12
    2d16:	b13a      	cbz	r2, 2d28 <set_endpoint+0x128>
    2d18:	2103      	movs	r1, #3
    2d1a:	7139      	strb	r1, [r7, #4]
    2d1c:	2100      	movs	r1, #0
    2d1e:	7179      	strb	r1, [r7, #5]
    2d20:	71b9      	strb	r1, [r7, #6]
    2d22:	71f9      	strb	r1, [r7, #7]
    2d24:	6878      	ldr	r0, [r7, #4]
    2d26:	6118      	str	r0, [r3, #16]
    2d28:	2100      	movs	r1, #0
    2d2a:	f36f 0100 	bfc	r1, #0, #1
    2d2e:	f36f 0141 	bfc	r1, #1, #1
    2d32:	f36f 0182 	bfc	r1, #2, #1
    2d36:	f36f 01c5 	bfc	r1, #3, #3
    2d3a:	2301      	movs	r3, #1
    2d3c:	f363 1188 	bfi	r1, r3, #6, #3
    2d40:	f3c4 030a 	ubfx	r3, r4, #0, #11
    2d44:	f363 2153 	bfi	r1, r3, #9, #11
    2d48:	f36f 511f 	bfc	r1, #20, #12
    2d4c:	2300      	movs	r3, #0
    2d4e:	4808      	ldr	r0, [pc, #32]	; (2d70 <set_endpoint+0x170>)
    2d50:	f7ff f81a 	bl	1d88 <z_impl_z_log_msg_static_create>
    2d54:	46ad      	mov	sp, r5
		return false;
    2d56:	2000      	movs	r0, #0
    2d58:	e77f      	b.n	2c5a <set_endpoint+0x5a>
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    2d5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    2d5e:	e7ce      	b.n	2cfe <set_endpoint+0xfe>
    2d60:	f06f 041b 	mvn.w	r4, #27
    2d64:	e7d7      	b.n	2d16 <set_endpoint+0x116>
    2d66:	bf00      	nop
    2d68:	20001114 	.word	0x20001114
    2d6c:	000103a0 	.word	0x000103a0
    2d70:	0000febc 	.word	0x0000febc
    2d74:	000103c4 	.word	0x000103c4

00002d78 <usb_set_interface>:
{
    2d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2d7c:	4606      	mov	r6, r0
	const uint8_t *p = usb_dev.descriptors;
    2d7e:	4b19      	ldr	r3, [pc, #100]	; (2de4 <usb_set_interface+0x6c>)
    2d80:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	bool ret = false;
    2d82:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
    2d84:	25ff      	movs	r5, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    2d86:	46a8      	mov	r8, r5
	const uint8_t *if_desc = NULL;
    2d88:	46b9      	mov	r9, r7
    2d8a:	e007      	b.n	2d9c <usb_set_interface+0x24>
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    2d8c:	f894 8003 	ldrb.w	r8, [r4, #3]
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    2d90:	78a5      	ldrb	r5, [r4, #2]
			if (cur_iface == setup->wIndex &&
    2d92:	88b0      	ldrh	r0, [r6, #4]
    2d94:	4285      	cmp	r5, r0
    2d96:	d012      	beq.n	2dbe <usb_set_interface+0x46>
		p += p[DESC_bLength];
    2d98:	7823      	ldrb	r3, [r4, #0]
    2d9a:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
    2d9c:	7823      	ldrb	r3, [r4, #0]
    2d9e:	b1c3      	cbz	r3, 2dd2 <usb_set_interface+0x5a>
		switch (p[DESC_bDescriptorType]) {
    2da0:	7863      	ldrb	r3, [r4, #1]
    2da2:	2b04      	cmp	r3, #4
    2da4:	d0f2      	beq.n	2d8c <usb_set_interface+0x14>
    2da6:	2b05      	cmp	r3, #5
    2da8:	d1f6      	bne.n	2d98 <usb_set_interface+0x20>
			if (cur_iface == setup->wIndex) {
    2daa:	88b3      	ldrh	r3, [r6, #4]
    2dac:	429d      	cmp	r5, r3
    2dae:	d1f3      	bne.n	2d98 <usb_set_interface+0x20>
				ret = usb_eps_reconfigure(ep, cur_alt_setting,
    2db0:	78b2      	ldrb	r2, [r6, #2]
    2db2:	4641      	mov	r1, r8
    2db4:	4620      	mov	r0, r4
    2db6:	f00a fc55 	bl	d664 <usb_eps_reconfigure>
    2dba:	4607      	mov	r7, r0
    2dbc:	e7ec      	b.n	2d98 <usb_set_interface+0x20>
			    cur_alt_setting == setup->wValue) {
    2dbe:	8871      	ldrh	r1, [r6, #2]
			if (cur_iface == setup->wIndex &&
    2dc0:	4588      	cmp	r8, r1
    2dc2:	d1e9      	bne.n	2d98 <usb_set_interface+0x20>
				ret = usb_set_alt_setting(setup->wIndex,
    2dc4:	b2c9      	uxtb	r1, r1
    2dc6:	b2c0      	uxtb	r0, r0
    2dc8:	f7ff fcaa 	bl	2720 <usb_set_alt_setting>
    2dcc:	4607      	mov	r7, r0
				if_desc = (void *)p;
    2dce:	46a1      	mov	r9, r4
    2dd0:	e7e2      	b.n	2d98 <usb_set_interface+0x20>
	if (usb_dev.status_callback) {
    2dd2:	4b04      	ldr	r3, [pc, #16]	; (2de4 <usb_set_interface+0x6c>)
    2dd4:	69db      	ldr	r3, [r3, #28]
    2dd6:	b113      	cbz	r3, 2dde <usb_set_interface+0x66>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    2dd8:	4649      	mov	r1, r9
    2dda:	2007      	movs	r0, #7
    2ddc:	4798      	blx	r3
}
    2dde:	4638      	mov	r0, r7
    2de0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2de4:	20001114 	.word	0x20001114

00002de8 <usb_reset_alt_setting>:
{
    2de8:	b508      	push	{r3, lr}
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    2dea:	2208      	movs	r2, #8
    2dec:	2100      	movs	r1, #0
    2dee:	4802      	ldr	r0, [pc, #8]	; (2df8 <usb_reset_alt_setting+0x10>)
    2df0:	f00b f813 	bl	de1a <memset>
}
    2df4:	bd08      	pop	{r3, pc}
    2df6:	bf00      	nop
    2df8:	200011cf 	.word	0x200011cf

00002dfc <usb_set_configuration>:
{
    2dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2e00:	4605      	mov	r5, r0
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    2e02:	4b22      	ldr	r3, [pc, #136]	; (2e8c <usb_set_configuration+0x90>)
    2e04:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	if (setup->wValue == 0U) {
    2e06:	8843      	ldrh	r3, [r0, #2]
    2e08:	b11b      	cbz	r3, 2e12 <usb_set_configuration+0x16>
	bool found = false;
    2e0a:	2700      	movs	r7, #0
	uint8_t cur_config = 0xFF;
    2e0c:	26ff      	movs	r6, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    2e0e:	46b0      	mov	r8, r6
    2e10:	e010      	b.n	2e34 <usb_set_configuration+0x38>
		usb_reset_alt_setting();
    2e12:	f7ff ffe9 	bl	2de8 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    2e16:	886a      	ldrh	r2, [r5, #2]
    2e18:	4b1c      	ldr	r3, [pc, #112]	; (2e8c <usb_set_configuration+0x90>)
    2e1a:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (usb_dev.status_callback) {
    2e1e:	69db      	ldr	r3, [r3, #28]
    2e20:	b113      	cbz	r3, 2e28 <usb_set_configuration+0x2c>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    2e22:	491b      	ldr	r1, [pc, #108]	; (2e90 <usb_set_configuration+0x94>)
    2e24:	2003      	movs	r0, #3
    2e26:	4798      	blx	r3
		return true;
    2e28:	2701      	movs	r7, #1
    2e2a:	e01e      	b.n	2e6a <usb_set_configuration+0x6e>
			cur_alt_setting =
    2e2c:	f894 8003 	ldrb.w	r8, [r4, #3]
		p += p[DESC_bLength];
    2e30:	7823      	ldrb	r3, [r4, #0]
    2e32:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
    2e34:	7823      	ldrb	r3, [r4, #0]
    2e36:	b1bb      	cbz	r3, 2e68 <usb_set_configuration+0x6c>
		switch (p[DESC_bDescriptorType]) {
    2e38:	7863      	ldrb	r3, [r4, #1]
    2e3a:	2b04      	cmp	r3, #4
    2e3c:	d0f6      	beq.n	2e2c <usb_set_configuration+0x30>
    2e3e:	2b05      	cmp	r3, #5
    2e40:	d007      	beq.n	2e52 <usb_set_configuration+0x56>
    2e42:	2b02      	cmp	r3, #2
    2e44:	d1f4      	bne.n	2e30 <usb_set_configuration+0x34>
			cur_config = p[CONF_DESC_bConfigurationValue];
    2e46:	7966      	ldrb	r6, [r4, #5]
			if (cur_config == setup->wValue) {
    2e48:	886b      	ldrh	r3, [r5, #2]
    2e4a:	429e      	cmp	r6, r3
    2e4c:	d1f0      	bne.n	2e30 <usb_set_configuration+0x34>
				found = true;
    2e4e:	2701      	movs	r7, #1
    2e50:	e7ee      	b.n	2e30 <usb_set_configuration+0x34>
			if ((cur_config != setup->wValue) ||
    2e52:	886b      	ldrh	r3, [r5, #2]
    2e54:	429e      	cmp	r6, r3
    2e56:	d1eb      	bne.n	2e30 <usb_set_configuration+0x34>
    2e58:	f1b8 0f00 	cmp.w	r8, #0
    2e5c:	d1e8      	bne.n	2e30 <usb_set_configuration+0x34>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    2e5e:	4620      	mov	r0, r4
    2e60:	f7ff fece 	bl	2c00 <set_endpoint>
    2e64:	4607      	mov	r7, r0
			break;
    2e66:	e7e3      	b.n	2e30 <usb_set_configuration+0x34>
	if (found) {
    2e68:	b917      	cbnz	r7, 2e70 <usb_set_configuration+0x74>
}
    2e6a:	4638      	mov	r0, r7
    2e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		usb_reset_alt_setting();
    2e70:	f7ff ffba 	bl	2de8 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    2e74:	886a      	ldrh	r2, [r5, #2]
    2e76:	4b05      	ldr	r3, [pc, #20]	; (2e8c <usb_set_configuration+0x90>)
    2e78:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (usb_dev.status_callback) {
    2e7c:	69db      	ldr	r3, [r3, #28]
    2e7e:	2b00      	cmp	r3, #0
    2e80:	d0f3      	beq.n	2e6a <usb_set_configuration+0x6e>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    2e82:	4903      	ldr	r1, [pc, #12]	; (2e90 <usb_set_configuration+0x94>)
    2e84:	2003      	movs	r0, #3
    2e86:	4798      	blx	r3
    2e88:	e7ef      	b.n	2e6a <usb_set_configuration+0x6e>
    2e8a:	bf00      	nop
    2e8c:	20001114 	.word	0x20001114
    2e90:	200011ce 	.word	0x200011ce

00002e94 <usb_handle_std_device_req>:
{
    2e94:	b510      	push	{r4, lr}
	uint8_t *data = *data_buf;
    2e96:	6814      	ldr	r4, [r2, #0]
	if (usb_reqtype_is_to_host(setup)) {
    2e98:	f990 3000 	ldrsb.w	r3, [r0]
    2e9c:	2b00      	cmp	r3, #0
    2e9e:	db0a      	blt.n	2eb6 <usb_handle_std_device_req+0x22>
		switch (setup->bRequest) {
    2ea0:	7843      	ldrb	r3, [r0, #1]
    2ea2:	3b01      	subs	r3, #1
    2ea4:	2b08      	cmp	r3, #8
    2ea6:	d83a      	bhi.n	2f1e <usb_handle_std_device_req+0x8a>
    2ea8:	e8df f003 	tbb	[pc, r3]
    2eac:	392f3924 	.word	0x392f3924
    2eb0:	3939391a 	.word	0x3939391a
    2eb4:	21          	.byte	0x21
    2eb5:	00          	.byte	0x00
		switch (setup->bRequest) {
    2eb6:	7843      	ldrb	r3, [r0, #1]
    2eb8:	2b06      	cmp	r3, #6
    2eba:	d007      	beq.n	2ecc <usb_handle_std_device_req+0x38>
    2ebc:	2b08      	cmp	r3, #8
    2ebe:	d008      	beq.n	2ed2 <usb_handle_std_device_req+0x3e>
    2ec0:	b10b      	cbz	r3, 2ec6 <usb_handle_std_device_req+0x32>
    2ec2:	2000      	movs	r0, #0
}
    2ec4:	bd10      	pop	{r4, pc}
			return usb_get_status(setup, len, data_buf);
    2ec6:	f7ff fc65 	bl	2794 <usb_get_status>
    2eca:	e7fb      	b.n	2ec4 <usb_handle_std_device_req+0x30>
			return usb_get_descriptor(setup, len, data_buf);
    2ecc:	f7ff fc78 	bl	27c0 <usb_get_descriptor>
    2ed0:	e7f8      	b.n	2ec4 <usb_handle_std_device_req+0x30>
			data[0] = usb_dev.configuration;
    2ed2:	4b14      	ldr	r3, [pc, #80]	; (2f24 <usb_handle_std_device_req+0x90>)
    2ed4:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
    2ed8:	7023      	strb	r3, [r4, #0]
			*len = 1;
    2eda:	2001      	movs	r0, #1
    2edc:	6008      	str	r0, [r1, #0]
			return true;
    2ede:	e7f1      	b.n	2ec4 <usb_handle_std_device_req+0x30>
			return !usb_dc_set_address(setup->wValue);
    2ee0:	7880      	ldrb	r0, [r0, #2]
    2ee2:	f003 fea5 	bl	6c30 <usb_dc_set_address>
    2ee6:	fab0 f080 	clz	r0, r0
    2eea:	0940      	lsrs	r0, r0, #5
    2eec:	e7ea      	b.n	2ec4 <usb_handle_std_device_req+0x30>
			return usb_set_configuration(setup);
    2eee:	f7ff ff85 	bl	2dfc <usb_set_configuration>
    2ef2:	e7e7      	b.n	2ec4 <usb_handle_std_device_req+0x30>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    2ef4:	8843      	ldrh	r3, [r0, #2]
    2ef6:	2b01      	cmp	r3, #1
    2ef8:	d001      	beq.n	2efe <usb_handle_std_device_req+0x6a>
	return false;
    2efa:	2000      	movs	r0, #0
    2efc:	e7e2      	b.n	2ec4 <usb_handle_std_device_req+0x30>
					usb_dev.remote_wakeup = false;
    2efe:	4b09      	ldr	r3, [pc, #36]	; (2f24 <usb_handle_std_device_req+0x90>)
    2f00:	2200      	movs	r2, #0
    2f02:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
					return true;
    2f06:	2001      	movs	r0, #1
    2f08:	e7dc      	b.n	2ec4 <usb_handle_std_device_req+0x30>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    2f0a:	8843      	ldrh	r3, [r0, #2]
    2f0c:	2b01      	cmp	r3, #1
    2f0e:	d001      	beq.n	2f14 <usb_handle_std_device_req+0x80>
	return false;
    2f10:	2000      	movs	r0, #0
    2f12:	e7d7      	b.n	2ec4 <usb_handle_std_device_req+0x30>
					usb_dev.remote_wakeup = true;
    2f14:	2001      	movs	r0, #1
    2f16:	4b03      	ldr	r3, [pc, #12]	; (2f24 <usb_handle_std_device_req+0x90>)
    2f18:	f883 00c3 	strb.w	r0, [r3, #195]	; 0xc3
					return true;
    2f1c:	e7d2      	b.n	2ec4 <usb_handle_std_device_req+0x30>
		switch (setup->bRequest) {
    2f1e:	2000      	movs	r0, #0
    2f20:	e7d0      	b.n	2ec4 <usb_handle_std_device_req+0x30>
    2f22:	bf00      	nop
    2f24:	20001114 	.word	0x20001114

00002f28 <forward_status_cb>:
{
    2f28:	b570      	push	{r4, r5, r6, lr}
    2f2a:	4605      	mov	r5, r0
    2f2c:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
    2f2e:	2804      	cmp	r0, #4
    2f30:	d003      	beq.n	2f3a <forward_status_cb+0x12>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    2f32:	2801      	cmp	r0, #1
    2f34:	d003      	beq.n	2f3e <forward_status_cb+0x16>
{
    2f36:	4c13      	ldr	r4, [pc, #76]	; (2f84 <forward_status_cb+0x5c>)
    2f38:	e011      	b.n	2f5e <forward_status_cb+0x36>
		usb_reset_alt_setting();
    2f3a:	f7ff ff55 	bl	2de8 <usb_reset_alt_setting>
		if (usb_dev.configured) {
    2f3e:	4b12      	ldr	r3, [pc, #72]	; (2f88 <forward_status_cb+0x60>)
    2f40:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
    2f44:	2b00      	cmp	r3, #0
    2f46:	d0f6      	beq.n	2f36 <forward_status_cb+0xe>
			usb_cancel_transfers();
    2f48:	f000 feba 	bl	3cc0 <usb_cancel_transfers>
			foreach_ep(disable_interface_ep);
    2f4c:	480f      	ldr	r0, [pc, #60]	; (2f8c <forward_status_cb+0x64>)
    2f4e:	f7ff fcd9 	bl	2904 <foreach_ep>
			usb_dev.configured = false;
    2f52:	4b0d      	ldr	r3, [pc, #52]	; (2f88 <forward_status_cb+0x60>)
    2f54:	2200      	movs	r2, #0
    2f56:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
    2f5a:	e7ec      	b.n	2f36 <forward_status_cb+0xe>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2f5c:	3424      	adds	r4, #36	; 0x24
    2f5e:	4b0c      	ldr	r3, [pc, #48]	; (2f90 <forward_status_cb+0x68>)
    2f60:	429c      	cmp	r4, r3
    2f62:	d207      	bcs.n	2f74 <forward_status_cb+0x4c>
		if (cfg_data->cb_usb_status) {
    2f64:	68e3      	ldr	r3, [r4, #12]
    2f66:	2b00      	cmp	r3, #0
    2f68:	d0f8      	beq.n	2f5c <forward_status_cb+0x34>
			cfg_data->cb_usb_status(cfg_data, status, param);
    2f6a:	4632      	mov	r2, r6
    2f6c:	4629      	mov	r1, r5
    2f6e:	4620      	mov	r0, r4
    2f70:	4798      	blx	r3
    2f72:	e7f3      	b.n	2f5c <forward_status_cb+0x34>
	if (usb_dev.user_status_callback) {
    2f74:	4b04      	ldr	r3, [pc, #16]	; (2f88 <forward_status_cb+0x60>)
    2f76:	6a1b      	ldr	r3, [r3, #32]
    2f78:	b113      	cbz	r3, 2f80 <forward_status_cb+0x58>
		usb_dev.user_status_callback(status, param);
    2f7a:	4631      	mov	r1, r6
    2f7c:	4628      	mov	r0, r5
    2f7e:	4798      	blx	r3
}
    2f80:	bd70      	pop	{r4, r5, r6, pc}
    2f82:	bf00      	nop
    2f84:	2000032c 	.word	0x2000032c
    2f88:	20001114 	.word	0x20001114
    2f8c:	00002ac1 	.word	0x00002ac1
    2f90:	20000350 	.word	0x20000350

00002f94 <usb_handle_standard_request>:
{
    2f94:	b570      	push	{r4, r5, r6, lr}
    2f96:	4604      	mov	r4, r0
    2f98:	460d      	mov	r5, r1
    2f9a:	4616      	mov	r6, r2
	if (usb_dev.custom_req_handler &&
    2f9c:	4b18      	ldr	r3, [pc, #96]	; (3000 <CONFIG_USB_DEVICE_VID+0x1d>)
    2f9e:	699b      	ldr	r3, [r3, #24]
    2fa0:	b10b      	cbz	r3, 2fa6 <usb_handle_standard_request+0x12>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    2fa2:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    2fa4:	b148      	cbz	r0, 2fba <usb_handle_standard_request+0x26>
	switch (setup->RequestType.recipient) {
    2fa6:	7823      	ldrb	r3, [r4, #0]
    2fa8:	f003 031f 	and.w	r3, r3, #31
    2fac:	2b01      	cmp	r3, #1
    2fae:	d00d      	beq.n	2fcc <usb_handle_standard_request+0x38>
    2fb0:	2b02      	cmp	r3, #2
    2fb2:	d013      	beq.n	2fdc <usb_handle_standard_request+0x48>
    2fb4:	b113      	cbz	r3, 2fbc <usb_handle_standard_request+0x28>
    2fb6:	f06f 0015 	mvn.w	r0, #21
}
    2fba:	bd70      	pop	{r4, r5, r6, pc}
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    2fbc:	4632      	mov	r2, r6
    2fbe:	4629      	mov	r1, r5
    2fc0:	4620      	mov	r0, r4
    2fc2:	f7ff ff67 	bl	2e94 <usb_handle_std_device_req>
    2fc6:	b188      	cbz	r0, 2fec <CONFIG_USB_DEVICE_VID+0x9>
	int rc = 0;
    2fc8:	2000      	movs	r0, #0
    2fca:	e7f6      	b.n	2fba <usb_handle_standard_request+0x26>
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    2fcc:	4632      	mov	r2, r6
    2fce:	4629      	mov	r1, r5
    2fd0:	4620      	mov	r0, r4
    2fd2:	f00a fb50 	bl	d676 <usb_handle_std_interface_req>
    2fd6:	b160      	cbz	r0, 2ff2 <CONFIG_USB_DEVICE_VID+0xf>
	int rc = 0;
    2fd8:	2000      	movs	r0, #0
    2fda:	e7ee      	b.n	2fba <usb_handle_standard_request+0x26>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    2fdc:	4632      	mov	r2, r6
    2fde:	4629      	mov	r1, r5
    2fe0:	4620      	mov	r0, r4
    2fe2:	f00a fb90 	bl	d706 <usb_handle_std_endpoint_req>
    2fe6:	b138      	cbz	r0, 2ff8 <CONFIG_USB_DEVICE_VID+0x15>
	int rc = 0;
    2fe8:	2000      	movs	r0, #0
    2fea:	e7e6      	b.n	2fba <usb_handle_standard_request+0x26>
			rc = -EINVAL;
    2fec:	f06f 0015 	mvn.w	r0, #21
    2ff0:	e7e3      	b.n	2fba <usb_handle_standard_request+0x26>
			rc = -EINVAL;
    2ff2:	f06f 0015 	mvn.w	r0, #21
    2ff6:	e7e0      	b.n	2fba <usb_handle_standard_request+0x26>
			rc = -EINVAL;
    2ff8:	f06f 0015 	mvn.w	r0, #21
    2ffc:	e7dd      	b.n	2fba <usb_handle_standard_request+0x26>
    2ffe:	bf00      	nop
    3000:	20001114 	.word	0x20001114

00003004 <composite_setup_ep_cb>:

static int composite_setup_ep_cb(void)
{
    3004:	b570      	push	{r4, r5, r6, lr}
	struct usb_ep_cfg_data *ep_data;

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3006:	4e0e      	ldr	r6, [pc, #56]	; (3040 <composite_setup_ep_cb+0x3c>)
    3008:	4b0e      	ldr	r3, [pc, #56]	; (3044 <composite_setup_ep_cb+0x40>)
    300a:	429e      	cmp	r6, r3
    300c:	d215      	bcs.n	303a <composite_setup_ep_cb+0x36>
		ep_data = cfg_data->endpoint;
    300e:	6a35      	ldr	r5, [r6, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    3010:	2400      	movs	r4, #0
    3012:	e001      	b.n	3018 <composite_setup_ep_cb+0x14>
    3014:	3401      	adds	r4, #1
    3016:	b2e4      	uxtb	r4, r4
    3018:	7f33      	ldrb	r3, [r6, #28]
    301a:	429c      	cmp	r4, r3
    301c:	d20b      	bcs.n	3036 <composite_setup_ep_cb+0x32>
			LOG_DBG("set cb, ep: 0x%x", ep_data[n].ep_addr);
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    301e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
    3022:	f855 1034 	ldr.w	r1, [r5, r4, lsl #3]
    3026:	7918      	ldrb	r0, [r3, #4]
    3028:	f004 f9f6 	bl	7418 <usb_dc_ep_set_callback>
    302c:	2800      	cmp	r0, #0
    302e:	d0f1      	beq.n	3014 <composite_setup_ep_cb+0x10>
						   ep_data[n].ep_cb)) {
				return -1;
    3030:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return 0;
}
    3034:	bd70      	pop	{r4, r5, r6, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3036:	3624      	adds	r6, #36	; 0x24
    3038:	e7e6      	b.n	3008 <composite_setup_ep_cb+0x4>
	return 0;
    303a:	2000      	movs	r0, #0
    303c:	e7fa      	b.n	3034 <composite_setup_ep_cb+0x30>
    303e:	bf00      	nop
    3040:	2000032c 	.word	0x2000032c
    3044:	20000350 	.word	0x20000350

00003048 <usb_data_to_host>:
{
    3048:	b510      	push	{r4, lr}
    304a:	b082      	sub	sp, #8
	if (usb_dev.zlp_flag == false) {
    304c:	4b13      	ldr	r3, [pc, #76]	; (309c <usb_data_to_host+0x54>)
    304e:	7d1b      	ldrb	r3, [r3, #20]
    3050:	b9d3      	cbnz	r3, 3088 <usb_data_to_host+0x40>
		uint32_t chunk = usb_dev.data_buf_residue;
    3052:	4c12      	ldr	r4, [pc, #72]	; (309c <usb_data_to_host+0x54>)
    3054:	68e2      	ldr	r2, [r4, #12]
    3056:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    3058:	ab01      	add	r3, sp, #4
    305a:	68a1      	ldr	r1, [r4, #8]
    305c:	2080      	movs	r0, #128	; 0x80
    305e:	f00a fb75 	bl	d74c <usb_write>
		usb_dev.data_buf += chunk;
    3062:	68a3      	ldr	r3, [r4, #8]
    3064:	9a01      	ldr	r2, [sp, #4]
    3066:	4413      	add	r3, r2
    3068:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    306a:	68e3      	ldr	r3, [r4, #12]
    306c:	1a9b      	subs	r3, r3, r2
    306e:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
    3070:	b993      	cbnz	r3, 3098 <usb_data_to_host+0x50>
    3072:	b18a      	cbz	r2, 3098 <usb_data_to_host+0x50>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    3074:	88e2      	ldrh	r2, [r4, #6]
    3076:	6923      	ldr	r3, [r4, #16]
		if (!usb_dev.data_buf_residue && chunk &&
    3078:	429a      	cmp	r2, r3
    307a:	dd0d      	ble.n	3098 <usb_data_to_host+0x50>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    307c:	f013 0f3f 	tst.w	r3, #63	; 0x3f
    3080:	d10a      	bne.n	3098 <usb_data_to_host+0x50>
				usb_dev.zlp_flag = true;
    3082:	2201      	movs	r2, #1
    3084:	7522      	strb	r2, [r4, #20]
    3086:	e007      	b.n	3098 <usb_data_to_host+0x50>
		usb_dev.zlp_flag = false;
    3088:	2100      	movs	r1, #0
    308a:	4b04      	ldr	r3, [pc, #16]	; (309c <usb_data_to_host+0x54>)
    308c:	7519      	strb	r1, [r3, #20]
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    308e:	460b      	mov	r3, r1
    3090:	460a      	mov	r2, r1
    3092:	2080      	movs	r0, #128	; 0x80
    3094:	f003 ff70 	bl	6f78 <usb_dc_ep_write>
}
    3098:	b002      	add	sp, #8
    309a:	bd10      	pop	{r4, pc}
    309c:	20001114 	.word	0x20001114

000030a0 <usb_handle_control_transfer>:
{
    30a0:	b510      	push	{r4, lr}
    30a2:	b08a      	sub	sp, #40	; 0x28
	uint32_t chunk = 0U;
    30a4:	2300      	movs	r3, #0
    30a6:	9303      	str	r3, [sp, #12]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    30a8:	2800      	cmp	r0, #0
    30aa:	f040 80af 	bne.w	320c <usb_handle_control_transfer+0x16c>
    30ae:	b339      	cbz	r1, 3100 <usb_handle_control_transfer+0x60>
		if (usb_dev.data_buf_residue <= 0) {
    30b0:	4b5d      	ldr	r3, [pc, #372]	; (3228 <usb_handle_control_transfer+0x188>)
    30b2:	68da      	ldr	r2, [r3, #12]
    30b4:	2a00      	cmp	r2, #0
    30b6:	f340 8091 	ble.w	31dc <usb_handle_control_transfer+0x13c>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    30ba:	ab03      	add	r3, sp, #12
    30bc:	495a      	ldr	r1, [pc, #360]	; (3228 <usb_handle_control_transfer+0x188>)
    30be:	6889      	ldr	r1, [r1, #8]
    30c0:	2000      	movs	r0, #0
    30c2:	f00a ffd3 	bl	e06c <usb_dc_ep_read>
    30c6:	2800      	cmp	r0, #0
    30c8:	f2c0 8095 	blt.w	31f6 <usb_handle_control_transfer+0x156>
		usb_dev.data_buf += chunk;
    30cc:	4a56      	ldr	r2, [pc, #344]	; (3228 <usb_handle_control_transfer+0x188>)
    30ce:	6893      	ldr	r3, [r2, #8]
    30d0:	9903      	ldr	r1, [sp, #12]
    30d2:	440b      	add	r3, r1
    30d4:	6093      	str	r3, [r2, #8]
		usb_dev.data_buf_residue -= chunk;
    30d6:	68d3      	ldr	r3, [r2, #12]
    30d8:	1a5b      	subs	r3, r3, r1
    30da:	60d3      	str	r3, [r2, #12]
		if (usb_dev.data_buf_residue == 0) {
    30dc:	2b00      	cmp	r3, #0
    30de:	f040 8097 	bne.w	3210 <usb_handle_control_transfer+0x170>
			usb_dev.data_buf = usb_dev.req_data;
    30e2:	4610      	mov	r0, r2
    30e4:	f102 0338 	add.w	r3, r2, #56	; 0x38
    30e8:	f842 3f08 	str.w	r3, [r2, #8]!
			if (!usb_handle_request(setup,
    30ec:	f100 0110 	add.w	r1, r0, #16
    30f0:	f7ff fb2e 	bl	2750 <usb_handle_request>
    30f4:	2800      	cmp	r0, #0
    30f6:	f000 8085 	beq.w	3204 <usb_handle_control_transfer+0x164>
			usb_data_to_host();
    30fa:	f7ff ffa5 	bl	3048 <usb_data_to_host>
    30fe:	e087      	b.n	3210 <usb_handle_control_transfer+0x170>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    3100:	2208      	movs	r2, #8
    3102:	a901      	add	r1, sp, #4
    3104:	f00a ffb2 	bl	e06c <usb_dc_ep_read>
    3108:	2800      	cmp	r0, #0
    310a:	db30      	blt.n	316e <usb_handle_control_transfer+0xce>
		setup->bmRequestType = setup_raw.bmRequestType;
    310c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    3110:	4b45      	ldr	r3, [pc, #276]	; (3228 <usb_handle_control_transfer+0x188>)
    3112:	7018      	strb	r0, [r3, #0]
		setup->bRequest = setup_raw.bRequest;
    3114:	f89d 2005 	ldrb.w	r2, [sp, #5]
    3118:	705a      	strb	r2, [r3, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
    311a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    311e:	805a      	strh	r2, [r3, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    3120:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    3124:	809a      	strh	r2, [r3, #4]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    3126:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    312a:	80d9      	strh	r1, [r3, #6]
		usb_dev.data_buf = usb_dev.req_data;
    312c:	f103 0238 	add.w	r2, r3, #56	; 0x38
    3130:	609a      	str	r2, [r3, #8]
		usb_dev.zlp_flag = false;
    3132:	2200      	movs	r2, #0
    3134:	751a      	strb	r2, [r3, #20]
		usb_dev.data_buf_len = 0;
    3136:	611a      	str	r2, [r3, #16]
		usb_dev.data_buf_residue = 0;
    3138:	60da      	str	r2, [r3, #12]
		if (usb_reqtype_is_to_device(setup)) {
    313a:	f010 0f80 	tst.w	r0, #128	; 0x80
    313e:	d103      	bne.n	3148 <usb_handle_control_transfer+0xa8>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    3140:	2980      	cmp	r1, #128	; 0x80
    3142:	d818      	bhi.n	3176 <usb_handle_control_transfer+0xd6>
			if (setup->wLength) {
    3144:	2900      	cmp	r1, #0
    3146:	d141      	bne.n	31cc <usb_handle_control_transfer+0x12c>
		if (!usb_handle_request(setup,
    3148:	4a38      	ldr	r2, [pc, #224]	; (322c <usb_handle_control_transfer+0x18c>)
    314a:	f102 0108 	add.w	r1, r2, #8
    314e:	f1a2 0008 	sub.w	r0, r2, #8
    3152:	f7ff fafd 	bl	2750 <usb_handle_request>
    3156:	2800      	cmp	r0, #0
    3158:	d03c      	beq.n	31d4 <usb_handle_control_transfer+0x134>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    315a:	4b33      	ldr	r3, [pc, #204]	; (3228 <usb_handle_control_transfer+0x188>)
    315c:	88da      	ldrh	r2, [r3, #6]
    315e:	6919      	ldr	r1, [r3, #16]
    3160:	428a      	cmp	r2, r1
    3162:	bfa8      	it	ge
    3164:	460a      	movge	r2, r1
    3166:	60da      	str	r2, [r3, #12]
		usb_data_to_host();
    3168:	f7ff ff6e 	bl	3048 <usb_data_to_host>
    316c:	e050      	b.n	3210 <usb_handle_control_transfer+0x170>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    316e:	2080      	movs	r0, #128	; 0x80
    3170:	f003 fe2e 	bl	6dd0 <usb_dc_ep_set_stall>
			return;
    3174:	e04c      	b.n	3210 <usb_handle_control_transfer+0x170>
				LOG_ERR("Request buffer too small");
    3176:	4b2e      	ldr	r3, [pc, #184]	; (3230 <usb_handle_control_transfer+0x190>)
    3178:	9309      	str	r3, [sp, #36]	; 0x24
    317a:	2302      	movs	r3, #2
    317c:	f88d 3000 	strb.w	r3, [sp]
    3180:	4614      	mov	r4, r2
    3182:	f88d 2001 	strb.w	r2, [sp, #1]
    3186:	f88d 2002 	strb.w	r2, [sp, #2]
    318a:	f88d 2003 	strb.w	r2, [sp, #3]
    318e:	9b00      	ldr	r3, [sp, #0]
    3190:	9308      	str	r3, [sp, #32]
    3192:	4611      	mov	r1, r2
    3194:	f362 0100 	bfi	r1, r2, #0, #1
    3198:	f362 0141 	bfi	r1, r2, #1, #1
    319c:	f362 0182 	bfi	r1, r2, #2, #1
    31a0:	f362 01c5 	bfi	r1, r2, #3, #3
    31a4:	2301      	movs	r3, #1
    31a6:	f363 1188 	bfi	r1, r3, #6, #3
    31aa:	2308      	movs	r3, #8
    31ac:	f363 2153 	bfi	r1, r3, #9, #11
    31b0:	f362 511f 	bfi	r1, r2, #20, #12
    31b4:	4613      	mov	r3, r2
    31b6:	aa08      	add	r2, sp, #32
    31b8:	481e      	ldr	r0, [pc, #120]	; (3234 <usb_handle_control_transfer+0x194>)
    31ba:	f7fe fde5 	bl	1d88 <z_impl_z_log_msg_static_create>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    31be:	2080      	movs	r0, #128	; 0x80
    31c0:	f003 fe06 	bl	6dd0 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    31c4:	4620      	mov	r0, r4
    31c6:	f003 fe03 	bl	6dd0 <usb_dc_ep_set_stall>
				return;
    31ca:	e021      	b.n	3210 <usb_handle_control_transfer+0x170>
				usb_dev.data_buf_len = setup->wLength;
    31cc:	4b16      	ldr	r3, [pc, #88]	; (3228 <usb_handle_control_transfer+0x188>)
    31ce:	6119      	str	r1, [r3, #16]
				usb_dev.data_buf_residue = setup->wLength;
    31d0:	60d9      	str	r1, [r3, #12]
				return;
    31d2:	e01d      	b.n	3210 <usb_handle_control_transfer+0x170>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    31d4:	2080      	movs	r0, #128	; 0x80
    31d6:	f003 fdfb 	bl	6dd0 <usb_dc_ep_set_stall>
			return;
    31da:	e019      	b.n	3210 <usb_handle_control_transfer+0x170>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    31dc:	ab03      	add	r3, sp, #12
    31de:	2200      	movs	r2, #0
    31e0:	4911      	ldr	r1, [pc, #68]	; (3228 <usb_handle_control_transfer+0x188>)
    31e2:	6889      	ldr	r1, [r1, #8]
    31e4:	4610      	mov	r0, r2
    31e6:	f00a ff41 	bl	e06c <usb_dc_ep_read>
    31ea:	2800      	cmp	r0, #0
    31ec:	da10      	bge.n	3210 <usb_handle_control_transfer+0x170>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    31ee:	2080      	movs	r0, #128	; 0x80
    31f0:	f003 fdee 	bl	6dd0 <usb_dc_ep_set_stall>
			return;
    31f4:	e00c      	b.n	3210 <usb_handle_control_transfer+0x170>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    31f6:	2080      	movs	r0, #128	; 0x80
    31f8:	f003 fdea 	bl	6dd0 <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    31fc:	2000      	movs	r0, #0
    31fe:	f003 fde7 	bl	6dd0 <usb_dc_ep_set_stall>
			return;
    3202:	e005      	b.n	3210 <usb_handle_control_transfer+0x170>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    3204:	2080      	movs	r0, #128	; 0x80
    3206:	f003 fde3 	bl	6dd0 <usb_dc_ep_set_stall>
				return;
    320a:	e001      	b.n	3210 <usb_handle_control_transfer+0x170>
	} else if (ep == USB_CONTROL_EP_IN) {
    320c:	2880      	cmp	r0, #128	; 0x80
    320e:	d001      	beq.n	3214 <usb_handle_control_transfer+0x174>
}
    3210:	b00a      	add	sp, #40	; 0x28
    3212:	bd10      	pop	{r4, pc}
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    3214:	4b04      	ldr	r3, [pc, #16]	; (3228 <usb_handle_control_transfer+0x188>)
    3216:	68db      	ldr	r3, [r3, #12]
    3218:	b91b      	cbnz	r3, 3222 <usb_handle_control_transfer+0x182>
    321a:	4b03      	ldr	r3, [pc, #12]	; (3228 <usb_handle_control_transfer+0x188>)
    321c:	7d1b      	ldrb	r3, [r3, #20]
    321e:	2b00      	cmp	r3, #0
    3220:	d0f6      	beq.n	3210 <usb_handle_control_transfer+0x170>
			usb_data_to_host();
    3222:	f7ff ff11 	bl	3048 <usb_data_to_host>
		__ASSERT_NO_MSG(false);
    3226:	e7f3      	b.n	3210 <usb_handle_control_transfer+0x170>
    3228:	20001114 	.word	0x20001114
    322c:	2000111c 	.word	0x2000111c
    3230:	000103e8 	.word	0x000103e8
    3234:	0000febc 	.word	0x0000febc

00003238 <usb_set_config>:

int usb_set_config(const uint8_t *device_descriptor)
{
    3238:	b508      	push	{r3, lr}
	/* register descriptors */
	usb_register_descriptors(device_descriptor);
    323a:	f7ff faa5 	bl	2788 <usb_register_descriptors>

	/* register standard request handler */
	usb_register_request_handler(USB_REQTYPE_TYPE_STANDARD,
    323e:	4908      	ldr	r1, [pc, #32]	; (3260 <usb_set_config+0x28>)
    3240:	2000      	movs	r0, #0
    3242:	f7ff fa99 	bl	2778 <usb_register_request_handler>
				     usb_handle_standard_request);

	/* register class request handlers for each interface*/
	usb_register_request_handler(USB_REQTYPE_TYPE_CLASS, class_handler);
    3246:	4907      	ldr	r1, [pc, #28]	; (3264 <usb_set_config+0x2c>)
    3248:	2001      	movs	r0, #1
    324a:	f7ff fa95 	bl	2778 <usb_register_request_handler>

	/* register vendor request handler */
	usb_register_request_handler(USB_REQTYPE_TYPE_VENDOR, vendor_handler);
    324e:	4906      	ldr	r1, [pc, #24]	; (3268 <usb_set_config+0x30>)
    3250:	2002      	movs	r0, #2
    3252:	f7ff fa91 	bl	2778 <usb_register_request_handler>

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);
    3256:	4805      	ldr	r0, [pc, #20]	; (326c <usb_set_config+0x34>)
    3258:	f7ff fb48 	bl	28ec <usb_register_custom_req_handler>

	return 0;
}
    325c:	2000      	movs	r0, #0
    325e:	bd08      	pop	{r3, pc}
    3260:	00002f95 	.word	0x00002f95
    3264:	0000293d 	.word	0x0000293d
    3268:	000029d9 	.word	0x000029d9
    326c:	0000297d 	.word	0x0000297d

00003270 <usb_device_init>:
 */
static int usb_device_init(void)
{
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    3270:	4b1b      	ldr	r3, [pc, #108]	; (32e0 <usb_device_init+0x70>)
    3272:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
    3276:	bb83      	cbnz	r3, 32da <usb_device_init+0x6a>
{
    3278:	b500      	push	{lr}
    327a:	b089      	sub	sp, #36	; 0x24
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
    327c:	f000 fa66 	bl	374c <usb_get_device_descriptor>
	if (!device_descriptor) {
    3280:	b128      	cbz	r0, 328e <usb_device_init+0x1e>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
    3282:	f7ff ffd9 	bl	3238 <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
    3286:	2000      	movs	r0, #0
}
    3288:	b009      	add	sp, #36	; 0x24
    328a:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_ERR("Failed to configure USB device stack");
    328e:	4b15      	ldr	r3, [pc, #84]	; (32e4 <usb_device_init+0x74>)
    3290:	9307      	str	r3, [sp, #28]
    3292:	2302      	movs	r3, #2
    3294:	f88d 3004 	strb.w	r3, [sp, #4]
    3298:	2300      	movs	r3, #0
    329a:	f88d 3005 	strb.w	r3, [sp, #5]
    329e:	f88d 3006 	strb.w	r3, [sp, #6]
    32a2:	f88d 3007 	strb.w	r3, [sp, #7]
    32a6:	9a01      	ldr	r2, [sp, #4]
    32a8:	9206      	str	r2, [sp, #24]
    32aa:	4619      	mov	r1, r3
    32ac:	f363 0100 	bfi	r1, r3, #0, #1
    32b0:	f363 0141 	bfi	r1, r3, #1, #1
    32b4:	f363 0182 	bfi	r1, r3, #2, #1
    32b8:	f363 01c5 	bfi	r1, r3, #3, #3
    32bc:	2201      	movs	r2, #1
    32be:	f362 1188 	bfi	r1, r2, #6, #3
    32c2:	2208      	movs	r2, #8
    32c4:	f362 2153 	bfi	r1, r2, #9, #11
    32c8:	f363 511f 	bfi	r1, r3, #20, #12
    32cc:	aa06      	add	r2, sp, #24
    32ce:	4806      	ldr	r0, [pc, #24]	; (32e8 <usb_device_init+0x78>)
    32d0:	f7fe fd5a 	bl	1d88 <z_impl_z_log_msg_static_create>
		return -1;
    32d4:	f04f 30ff 	mov.w	r0, #4294967295
    32d8:	e7d6      	b.n	3288 <usb_device_init+0x18>
		return -EALREADY;
    32da:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    32de:	4770      	bx	lr
    32e0:	20001114 	.word	0x20001114
    32e4:	00010404 	.word	0x00010404
    32e8:	0000febc 	.word	0x0000febc

000032ec <usb_enable>:
{
    32ec:	b530      	push	{r4, r5, lr}
    32ee:	b083      	sub	sp, #12
    32f0:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
    32f2:	f04f 32ff 	mov.w	r2, #4294967295
    32f6:	f04f 33ff 	mov.w	r3, #4294967295
    32fa:	4836      	ldr	r0, [pc, #216]	; (33d4 <usb_enable+0xe8>)
    32fc:	f007 fc34 	bl	ab68 <z_impl_k_mutex_lock>
	if (usb_dev.enabled == true) {
    3300:	4b35      	ldr	r3, [pc, #212]	; (33d8 <usb_enable+0xec>)
    3302:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
    3306:	2b00      	cmp	r3, #0
    3308:	d15b      	bne.n	33c2 <usb_enable+0xd6>
	ret = usb_vbus_set(true);
    330a:	2001      	movs	r0, #1
    330c:	f00a f993 	bl	d636 <usb_vbus_set>
	if (ret < 0) {
    3310:	1e04      	subs	r4, r0, #0
    3312:	db58      	blt.n	33c6 <usb_enable+0xda>
	usb_dev.user_status_callback = status_cb;
    3314:	4b30      	ldr	r3, [pc, #192]	; (33d8 <usb_enable+0xec>)
    3316:	621d      	str	r5, [r3, #32]
	usb_register_status_callback(forward_status_cb);
    3318:	4c30      	ldr	r4, [pc, #192]	; (33dc <usb_enable+0xf0>)
    331a:	4620      	mov	r0, r4
    331c:	f7ff faec 	bl	28f8 <usb_register_status_callback>
	usb_dc_set_status_callback(forward_status_cb);
    3320:	4620      	mov	r0, r4
    3322:	f004 f88d 	bl	7440 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    3326:	f003 fc47 	bl	6bb8 <usb_dc_attach>
	if (ret < 0) {
    332a:	1e04      	subs	r4, r0, #0
    332c:	db4b      	blt.n	33c6 <usb_enable+0xda>
	ret = usb_transfer_init();
    332e:	f000 fcf3 	bl	3d18 <usb_transfer_init>
	if (ret < 0) {
    3332:	1e04      	subs	r4, r0, #0
    3334:	db47      	blt.n	33c6 <usb_enable+0xda>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    3336:	2340      	movs	r3, #64	; 0x40
    3338:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    333c:	2300      	movs	r3, #0
    333e:	f88d 3004 	strb.w	r3, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    3342:	f88d 3000 	strb.w	r3, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    3346:	4668      	mov	r0, sp
    3348:	f003 fcee 	bl	6d28 <usb_dc_ep_configure>
	if (ret < 0) {
    334c:	1e04      	subs	r4, r0, #0
    334e:	db3a      	blt.n	33c6 <usb_enable+0xda>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    3350:	2380      	movs	r3, #128	; 0x80
    3352:	f88d 3000 	strb.w	r3, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    3356:	4668      	mov	r0, sp
    3358:	f003 fce6 	bl	6d28 <usb_dc_ep_configure>
	if (ret < 0) {
    335c:	1e04      	subs	r4, r0, #0
    335e:	db32      	blt.n	33c6 <usb_enable+0xda>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    3360:	491f      	ldr	r1, [pc, #124]	; (33e0 <usb_enable+0xf4>)
    3362:	2000      	movs	r0, #0
    3364:	f004 f858 	bl	7418 <usb_dc_ep_set_callback>
	if (ret < 0) {
    3368:	1e04      	subs	r4, r0, #0
    336a:	db2c      	blt.n	33c6 <usb_enable+0xda>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    336c:	491c      	ldr	r1, [pc, #112]	; (33e0 <usb_enable+0xf4>)
    336e:	2080      	movs	r0, #128	; 0x80
    3370:	f004 f852 	bl	7418 <usb_dc_ep_set_callback>
	if (ret < 0) {
    3374:	1e04      	subs	r4, r0, #0
    3376:	db26      	blt.n	33c6 <usb_enable+0xda>
	ret = composite_setup_ep_cb();
    3378:	f7ff fe44 	bl	3004 <composite_setup_ep_cb>
	if (ret < 0) {
    337c:	1e04      	subs	r4, r0, #0
    337e:	db22      	blt.n	33c6 <usb_enable+0xda>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    3380:	2000      	movs	r0, #0
    3382:	f003 fdcb 	bl	6f1c <usb_dc_ep_enable>
	if (ret < 0) {
    3386:	1e04      	subs	r4, r0, #0
    3388:	db1d      	blt.n	33c6 <usb_enable+0xda>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    338a:	2000      	movs	r0, #0
    338c:	f7ff fb42 	bl	2a14 <get_ep_bm_from_addr>
    3390:	4a11      	ldr	r2, [pc, #68]	; (33d8 <usb_enable+0xec>)
    3392:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
    3396:	4303      	orrs	r3, r0
    3398:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    339c:	2080      	movs	r0, #128	; 0x80
    339e:	f003 fdbd 	bl	6f1c <usb_dc_ep_enable>
	if (ret < 0) {
    33a2:	1e04      	subs	r4, r0, #0
    33a4:	db0f      	blt.n	33c6 <usb_enable+0xda>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_IN);
    33a6:	2080      	movs	r0, #128	; 0x80
    33a8:	f7ff fb34 	bl	2a14 <get_ep_bm_from_addr>
    33ac:	4b0a      	ldr	r3, [pc, #40]	; (33d8 <usb_enable+0xec>)
    33ae:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    33b2:	4302      	orrs	r2, r0
    33b4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	usb_dev.enabled = true;
    33b8:	2201      	movs	r2, #1
    33ba:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	ret = 0;
    33be:	2400      	movs	r4, #0
    33c0:	e001      	b.n	33c6 <usb_enable+0xda>
		ret = -EALREADY;
    33c2:	f06f 0477 	mvn.w	r4, #119	; 0x77
	return z_impl_k_mutex_unlock(mutex);
    33c6:	4803      	ldr	r0, [pc, #12]	; (33d4 <usb_enable+0xe8>)
    33c8:	f007 fc52 	bl	ac70 <z_impl_k_mutex_unlock>
}
    33cc:	4620      	mov	r0, r4
    33ce:	b003      	add	sp, #12
    33d0:	bd30      	pop	{r4, r5, pc}
    33d2:	bf00      	nop
    33d4:	20000240 	.word	0x20000240
    33d8:	20001114 	.word	0x20001114
    33dc:	00002f29 	.word	0x00002f29
    33e0:	000030a1 	.word	0x000030a1

000033e4 <usb_get_cfg_data>:
 * The interface descriptor of a USB function must be assigned to the
 * usb_cfg_data so that usb_ep_cfg_data and matching endpoint descriptor
 * can be found.
 */
static struct usb_cfg_data *usb_get_cfg_data(struct usb_if_descriptor *iface)
{
    33e4:	4602      	mov	r2, r0
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    33e6:	4806      	ldr	r0, [pc, #24]	; (3400 <usb_get_cfg_data+0x1c>)
    33e8:	e000      	b.n	33ec <usb_get_cfg_data+0x8>
    33ea:	3024      	adds	r0, #36	; 0x24
    33ec:	4b05      	ldr	r3, [pc, #20]	; (3404 <usb_get_cfg_data+0x20>)
    33ee:	4298      	cmp	r0, r3
    33f0:	d203      	bcs.n	33fa <usb_get_cfg_data+0x16>
		if (cfg_data->interface_descriptor == iface) {
    33f2:	6843      	ldr	r3, [r0, #4]
    33f4:	4293      	cmp	r3, r2
    33f6:	d1f8      	bne.n	33ea <usb_get_cfg_data+0x6>
    33f8:	e000      	b.n	33fc <usb_get_cfg_data+0x18>
			return cfg_data;
		}
	}

	return NULL;
    33fa:	2000      	movs	r0, #0
}
    33fc:	4770      	bx	lr
    33fe:	bf00      	nop
    3400:	2000032c 	.word	0x2000032c
    3404:	20000350 	.word	0x20000350

00003408 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    3408:	b510      	push	{r4, lr}
    340a:	b08a      	sub	sp, #40	; 0x28
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    340c:	f10d 0c04 	add.w	ip, sp, #4
    3410:	4c1d      	ldr	r4, [pc, #116]	; (3488 <usb_update_sn_string_descriptor+0x80>)
    3412:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    3414:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3418:	6823      	ldr	r3, [r4, #0]
    341a:	f88c 3000 	strb.w	r3, [ip]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    341e:	2210      	movs	r2, #16
    3420:	2100      	movs	r1, #0
    3422:	a806      	add	r0, sp, #24
    3424:	f00a fcf9 	bl	de1a <memset>
	memset(sn, 0, sizeof(sn));
    3428:	2212      	movs	r2, #18
    342a:	2100      	movs	r1, #0
    342c:	4817      	ldr	r0, [pc, #92]	; (348c <usb_update_sn_string_descriptor+0x84>)
    342e:	f00a fcf4 	bl	de1a <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    3432:	2110      	movs	r1, #16
    3434:	a806      	add	r0, sp, #24
    3436:	f00b f83f 	bl	e4b8 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    343a:	2800      	cmp	r0, #0
    343c:	dd20      	ble.n	3480 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    343e:	2808      	cmp	r0, #8
    3440:	bfb8      	it	lt
    3442:	2008      	movlt	r0, #8
    3444:	f1a0 0c08 	sub.w	ip, r0, #8
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    3448:	2200      	movs	r2, #0
    344a:	e017      	b.n	347c <usb_update_sn_string_descriptor+0x74>
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    344c:	eb0c 0302 	add.w	r3, ip, r2
    3450:	3328      	adds	r3, #40	; 0x28
    3452:	446b      	add	r3, sp
    3454:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    3458:	0051      	lsls	r1, r2, #1
    345a:	a80a      	add	r0, sp, #40	; 0x28
    345c:	eb00 1013 	add.w	r0, r0, r3, lsr #4
    3460:	f810 ec24 	ldrb.w	lr, [r0, #-36]
    3464:	4809      	ldr	r0, [pc, #36]	; (348c <usb_update_sn_string_descriptor+0x84>)
    3466:	f800 e012 	strb.w	lr, [r0, r2, lsl #1]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    346a:	f003 030f 	and.w	r3, r3, #15
    346e:	3101      	adds	r1, #1
    3470:	3328      	adds	r3, #40	; 0x28
    3472:	446b      	add	r3, sp
    3474:	f813 3c24 	ldrb.w	r3, [r3, #-36]
    3478:	5443      	strb	r3, [r0, r1]
		for (int i = 0; i < usblen; i++) {
    347a:	3201      	adds	r2, #1
    347c:	2a07      	cmp	r2, #7
    347e:	dde5      	ble.n	344c <usb_update_sn_string_descriptor+0x44>
		}
	}

	return sn;
}
    3480:	4802      	ldr	r0, [pc, #8]	; (348c <usb_update_sn_string_descriptor+0x84>)
    3482:	b00a      	add	sp, #40	; 0x28
    3484:	bd10      	pop	{r4, pc}
    3486:	bf00      	nop
    3488:	00010438 	.word	0x00010438
    348c:	200011dc 	.word	0x200011dc

00003490 <usb_fix_ascii_sn_string_descriptor>:

static void usb_fix_ascii_sn_string_descriptor(struct usb_sn_descriptor *sn)
{
    3490:	b570      	push	{r4, r5, r6, lr}
    3492:	b088      	sub	sp, #32
    3494:	4604      	mov	r4, r0
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    3496:	f7ff ffb7 	bl	3408 <usb_update_sn_string_descriptor>
	int runtime_sn_len, default_sn_len;

	if (!runtime_sn) {
    349a:	b120      	cbz	r0, 34a6 <usb_fix_ascii_sn_string_descriptor+0x16>
    349c:	4605      	mov	r5, r0
		return;
	}

	runtime_sn_len = strlen(runtime_sn);
    349e:	f00a fc7a 	bl	dd96 <strlen>
	if (!runtime_sn_len) {
    34a2:	4606      	mov	r6, r0
    34a4:	b908      	cbnz	r0, 34aa <usb_fix_ascii_sn_string_descriptor+0x1a>
			"length as CONFIG_USB_DEVICE_SN");
		return;
	}

	memcpy(sn->bString, runtime_sn, runtime_sn_len);
}
    34a6:	b008      	add	sp, #32
    34a8:	bd70      	pop	{r4, r5, r6, pc}
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    34aa:	4817      	ldr	r0, [pc, #92]	; (3508 <usb_fix_ascii_sn_string_descriptor+0x78>)
    34ac:	f00a fc73 	bl	dd96 <strlen>
	if (runtime_sn_len != default_sn_len) {
    34b0:	4286      	cmp	r6, r0
    34b2:	d023      	beq.n	34fc <usb_fix_ascii_sn_string_descriptor+0x6c>
		LOG_ERR("the new SN descriptor doesn't have the same "
    34b4:	4b15      	ldr	r3, [pc, #84]	; (350c <usb_fix_ascii_sn_string_descriptor+0x7c>)
    34b6:	9307      	str	r3, [sp, #28]
    34b8:	2302      	movs	r3, #2
    34ba:	f88d 3004 	strb.w	r3, [sp, #4]
    34be:	2300      	movs	r3, #0
    34c0:	f88d 3005 	strb.w	r3, [sp, #5]
    34c4:	f88d 3006 	strb.w	r3, [sp, #6]
    34c8:	f88d 3007 	strb.w	r3, [sp, #7]
    34cc:	9a01      	ldr	r2, [sp, #4]
    34ce:	9206      	str	r2, [sp, #24]
    34d0:	4619      	mov	r1, r3
    34d2:	f363 0100 	bfi	r1, r3, #0, #1
    34d6:	f363 0141 	bfi	r1, r3, #1, #1
    34da:	f363 0182 	bfi	r1, r3, #2, #1
    34de:	f363 01c5 	bfi	r1, r3, #3, #3
    34e2:	2201      	movs	r2, #1
    34e4:	f362 1188 	bfi	r1, r2, #6, #3
    34e8:	2208      	movs	r2, #8
    34ea:	f362 2153 	bfi	r1, r2, #9, #11
    34ee:	f363 511f 	bfi	r1, r3, #20, #12
    34f2:	aa06      	add	r2, sp, #24
    34f4:	4806      	ldr	r0, [pc, #24]	; (3510 <usb_fix_ascii_sn_string_descriptor+0x80>)
    34f6:	f7fe fc47 	bl	1d88 <z_impl_z_log_msg_static_create>
		return;
    34fa:	e7d4      	b.n	34a6 <usb_fix_ascii_sn_string_descriptor+0x16>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    34fc:	4632      	mov	r2, r6
    34fe:	4629      	mov	r1, r5
    3500:	1ca0      	adds	r0, r4, #2
    3502:	f00a fc5b 	bl	ddbc <memcpy>
    3506:	e7ce      	b.n	34a6 <usb_fix_ascii_sn_string_descriptor+0x16>
    3508:	00010438 	.word	0x00010438
    350c:	0001044c 	.word	0x0001044c
    3510:	0000feb4 	.word	0x0000feb4

00003514 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    3514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3518:	b095      	sub	sp, #84	; 0x54
    351a:	af00      	add	r7, sp, #0
    351c:	4604      	mov	r4, r0
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
	uint32_t requested_ep = BIT(16) | BIT(0);
    351e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    3522:	607b      	str	r3, [r7, #4]
	uint8_t str_descr_idx = 0U;
    3524:	2500      	movs	r5, #0
	uint8_t numof_ifaces = 0U;
    3526:	46a8      	mov	r8, r5
	struct usb_cfg_data *cfg_data = NULL;
    3528:	46a9      	mov	r9, r5
	struct usb_cfg_descriptor *cfg_descr = NULL;
    352a:	462e      	mov	r6, r5

	while (head->bLength != 0U) {
    352c:	e0b2      	b.n	3694 <usb_fix_descriptor+0x180>
			LOG_DBG("Association descriptor %p", head);
			break;
		case USB_DESC_INTERFACE:
			if_descr = (struct usb_if_descriptor *)head;
			LOG_DBG("Interface descriptor %p", head);
			if (if_descr->bAlternateSetting) {
    352e:	78e3      	ldrb	r3, [r4, #3]
    3530:	2b00      	cmp	r3, #0
    3532:	f040 80ad 	bne.w	3690 <usb_fix_descriptor+0x17c>
				LOG_DBG("Skip alternate interface");
				break;
			}

			if (if_descr->bInterfaceNumber == 0U) {
    3536:	78a3      	ldrb	r3, [r4, #2]
    3538:	b94b      	cbnz	r3, 354e <usb_fix_descriptor+0x3a>
				cfg_data = usb_get_cfg_data(if_descr);
    353a:	4620      	mov	r0, r4
    353c:	f7ff ff52 	bl	33e4 <usb_get_cfg_data>
				if (!cfg_data) {
    3540:	4681      	mov	r9, r0
    3542:	b148      	cbz	r0, 3558 <usb_fix_descriptor+0x44>
					LOG_ERR("There is no usb_cfg_data "
						"for %p", head);
					return -1;
				}

				if (cfg_data->interface_config) {
    3544:	6883      	ldr	r3, [r0, #8]
    3546:	b113      	cbz	r3, 354e <usb_fix_descriptor+0x3a>
					cfg_data->interface_config(head,
    3548:	4641      	mov	r1, r8
    354a:	4620      	mov	r0, r4
    354c:	4798      	blx	r3
							numof_ifaces);
				}
			}

			numof_ifaces++;
    354e:	f108 0801 	add.w	r8, r8, #1
    3552:	fa5f f888 	uxtb.w	r8, r8
			break;
    3556:	e09b      	b.n	3690 <usb_fix_descriptor+0x17c>
					LOG_ERR("There is no usb_cfg_data "
    3558:	466d      	mov	r5, sp
    355a:	b088      	sub	sp, #32
    355c:	4669      	mov	r1, sp
    355e:	f111 0210 	adds.w	r2, r1, #16
    3562:	d00d      	beq.n	3580 <usb_fix_descriptor+0x6c>
    3564:	230c      	movs	r3, #12
    3566:	b13a      	cbz	r2, 3578 <usb_fix_descriptor+0x64>
    3568:	4618      	mov	r0, r3
    356a:	2b04      	cmp	r3, #4
    356c:	dd01      	ble.n	3572 <usb_fix_descriptor+0x5e>
    356e:	4e71      	ldr	r6, [pc, #452]	; (3734 <usb_fix_descriptor+0x220>)
    3570:	614e      	str	r6, [r1, #20]
    3572:	2808      	cmp	r0, #8
    3574:	dd07      	ble.n	3586 <usb_fix_descriptor+0x72>
    3576:	618c      	str	r4, [r1, #24]
    3578:	2b0b      	cmp	r3, #11
    357a:	dd29      	ble.n	35d0 <usb_fix_descriptor+0xbc>
    357c:	230c      	movs	r3, #12
    357e:	e004      	b.n	358a <usb_fix_descriptor+0x76>
    3580:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    3584:	e7ef      	b.n	3566 <usb_fix_descriptor+0x52>
    3586:	f06f 031b 	mvn.w	r3, #27
    358a:	b13a      	cbz	r2, 359c <usb_fix_descriptor+0x88>
    358c:	2003      	movs	r0, #3
    358e:	7038      	strb	r0, [r7, #0]
    3590:	2000      	movs	r0, #0
    3592:	7078      	strb	r0, [r7, #1]
    3594:	70b8      	strb	r0, [r7, #2]
    3596:	70f8      	strb	r0, [r7, #3]
    3598:	6838      	ldr	r0, [r7, #0]
    359a:	6108      	str	r0, [r1, #16]
    359c:	2100      	movs	r1, #0
    359e:	f36f 0100 	bfc	r1, #0, #1
    35a2:	f36f 0141 	bfc	r1, #1, #1
    35a6:	f36f 0182 	bfc	r1, #2, #1
    35aa:	f36f 01c5 	bfc	r1, #3, #3
    35ae:	2001      	movs	r0, #1
    35b0:	f360 1188 	bfi	r1, r0, #6, #3
    35b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
    35b8:	f363 2153 	bfi	r1, r3, #9, #11
    35bc:	f36f 511f 	bfc	r1, #20, #12
    35c0:	2300      	movs	r3, #0
    35c2:	485d      	ldr	r0, [pc, #372]	; (3738 <usb_fix_descriptor+0x224>)
    35c4:	f7fe fbe0 	bl	1d88 <z_impl_z_log_msg_static_create>
    35c8:	46ad      	mov	sp, r5
					return -1;
    35ca:	f04f 30ff 	mov.w	r0, #4294967295
    35ce:	e0a9      	b.n	3724 <usb_fix_descriptor+0x210>
					LOG_ERR("There is no usb_cfg_data "
    35d0:	f06f 031b 	mvn.w	r3, #27
    35d4:	e7d9      	b.n	358a <usb_fix_descriptor+0x76>
		case USB_DESC_ENDPOINT:
			if (!cfg_data) {
    35d6:	f1b9 0f00 	cmp.w	r9, #0
    35da:	d029      	beq.n	3630 <usb_fix_descriptor+0x11c>
				return -1;
			}

			LOG_DBG("Endpoint descriptor %p", head);
			ep_descr = (struct usb_ep_descriptor *)head;
			if (usb_validate_ep_cfg_data(ep_descr,
    35dc:	1d3a      	adds	r2, r7, #4
    35de:	4649      	mov	r1, r9
    35e0:	4620      	mov	r0, r4
    35e2:	f00a f8e0 	bl	d7a6 <usb_validate_ep_cfg_data>
    35e6:	2800      	cmp	r0, #0
    35e8:	d052      	beq.n	3690 <usb_fix_descriptor+0x17c>
						     cfg_data,
						     &requested_ep)) {
				LOG_ERR("Failed to validate endpoints");
    35ea:	4b54      	ldr	r3, [pc, #336]	; (373c <usb_fix_descriptor+0x228>)
    35ec:	61fb      	str	r3, [r7, #28]
    35ee:	2302      	movs	r3, #2
    35f0:	703b      	strb	r3, [r7, #0]
    35f2:	2300      	movs	r3, #0
    35f4:	707b      	strb	r3, [r7, #1]
    35f6:	70bb      	strb	r3, [r7, #2]
    35f8:	70fb      	strb	r3, [r7, #3]
    35fa:	683a      	ldr	r2, [r7, #0]
    35fc:	61ba      	str	r2, [r7, #24]
    35fe:	4619      	mov	r1, r3
    3600:	f363 0100 	bfi	r1, r3, #0, #1
    3604:	f363 0141 	bfi	r1, r3, #1, #1
    3608:	f363 0182 	bfi	r1, r3, #2, #1
    360c:	f363 01c5 	bfi	r1, r3, #3, #3
    3610:	2201      	movs	r2, #1
    3612:	f362 1188 	bfi	r1, r2, #6, #3
    3616:	2208      	movs	r2, #8
    3618:	f362 2153 	bfi	r1, r2, #9, #11
    361c:	f363 511f 	bfi	r1, r3, #20, #12
    3620:	f107 0218 	add.w	r2, r7, #24
    3624:	4844      	ldr	r0, [pc, #272]	; (3738 <usb_fix_descriptor+0x224>)
    3626:	f7fe fbaf 	bl	1d88 <z_impl_z_log_msg_static_create>
				return -1;
    362a:	f04f 30ff 	mov.w	r0, #4294967295
    362e:	e079      	b.n	3724 <usb_fix_descriptor+0x210>
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    3630:	4b43      	ldr	r3, [pc, #268]	; (3740 <usb_fix_descriptor+0x22c>)
    3632:	637b      	str	r3, [r7, #52]	; 0x34
    3634:	2302      	movs	r3, #2
    3636:	703b      	strb	r3, [r7, #0]
    3638:	2300      	movs	r3, #0
    363a:	707b      	strb	r3, [r7, #1]
    363c:	70bb      	strb	r3, [r7, #2]
    363e:	70fb      	strb	r3, [r7, #3]
    3640:	683a      	ldr	r2, [r7, #0]
    3642:	633a      	str	r2, [r7, #48]	; 0x30
    3644:	4619      	mov	r1, r3
    3646:	f363 0100 	bfi	r1, r3, #0, #1
    364a:	f363 0141 	bfi	r1, r3, #1, #1
    364e:	f363 0182 	bfi	r1, r3, #2, #1
    3652:	f363 01c5 	bfi	r1, r3, #3, #3
    3656:	2201      	movs	r2, #1
    3658:	f362 1188 	bfi	r1, r2, #6, #3
    365c:	2208      	movs	r2, #8
    365e:	f362 2153 	bfi	r1, r2, #9, #11
    3662:	f363 511f 	bfi	r1, r3, #20, #12
    3666:	f107 0230 	add.w	r2, r7, #48	; 0x30
    366a:	4833      	ldr	r0, [pc, #204]	; (3738 <usb_fix_descriptor+0x224>)
    366c:	f7fe fb8c 	bl	1d88 <z_impl_z_log_msg_static_create>
				return -1;
    3670:	f04f 30ff 	mov.w	r0, #4294967295
    3674:	e056      	b.n	3724 <usb_fix_descriptor+0x210>
		case 0:
		case USB_DESC_STRING:
			/*
			 * Copy runtime SN string descriptor first, if has
			 */
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    3676:	2d03      	cmp	r5, #3
    3678:	d022      	beq.n	36c0 <usb_fix_descriptor+0x1ac>
			}
			/*
			 * Skip language descriptor but correct
			 * wTotalLength and bNumInterfaces once.
			 */
			if (str_descr_idx) {
    367a:	bb2d      	cbnz	r5, 36c8 <usb_fix_descriptor+0x1b4>
				ascii7_to_utf16le(head);
			} else {
				if (!cfg_descr) {
    367c:	b346      	cbz	r6, 36d0 <usb_fix_descriptor+0x1bc>
					return -1;
				}

				LOG_DBG("Now the wTotalLength is %zd",
					(uint8_t *)head - (uint8_t *)cfg_descr);
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    367e:	1ba3      	subs	r3, r4, r6
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    3680:	70b3      	strb	r3, [r6, #2]
	dst[1] = val >> 8;
    3682:	f3c3 2307 	ubfx	r3, r3, #8, #8
    3686:	70f3      	strb	r3, [r6, #3]
					     (uint8_t *)&cfg_descr->wTotalLength);
				cfg_descr->bNumInterfaces = numof_ifaces;
    3688:	f886 8004 	strb.w	r8, [r6, #4]
			}

			str_descr_idx += 1U;
    368c:	3501      	adds	r5, #1
    368e:	b2ed      	uxtb	r5, r5
		default:
			break;
		}

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    3690:	7823      	ldrb	r3, [r4, #0]
    3692:	441c      	add	r4, r3
	while (head->bLength != 0U) {
    3694:	7823      	ldrb	r3, [r4, #0]
    3696:	2b00      	cmp	r3, #0
    3698:	d03f      	beq.n	371a <usb_fix_descriptor+0x206>
		switch (head->bDescriptorType) {
    369a:	7863      	ldrb	r3, [r4, #1]
    369c:	2b05      	cmp	r3, #5
    369e:	d8f7      	bhi.n	3690 <usb_fix_descriptor+0x17c>
    36a0:	a201      	add	r2, pc, #4	; (adr r2, 36a8 <usb_fix_descriptor+0x194>)
    36a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    36a6:	bf00      	nop
    36a8:	00003677 	.word	0x00003677
    36ac:	00003691 	.word	0x00003691
    36b0:	00003717 	.word	0x00003717
    36b4:	00003677 	.word	0x00003677
    36b8:	0000352f 	.word	0x0000352f
    36bc:	000035d7 	.word	0x000035d7
				usb_fix_ascii_sn_string_descriptor(sn);
    36c0:	4620      	mov	r0, r4
    36c2:	f7ff fee5 	bl	3490 <usb_fix_ascii_sn_string_descriptor>
    36c6:	e7d8      	b.n	367a <usb_fix_descriptor+0x166>
				ascii7_to_utf16le(head);
    36c8:	4620      	mov	r0, r4
    36ca:	f00a f85a 	bl	d782 <ascii7_to_utf16le>
    36ce:	e7dd      	b.n	368c <usb_fix_descriptor+0x178>
					LOG_ERR("Incomplete device descriptor");
    36d0:	4b1c      	ldr	r3, [pc, #112]	; (3744 <usb_fix_descriptor+0x230>)
    36d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    36d4:	2302      	movs	r3, #2
    36d6:	703b      	strb	r3, [r7, #0]
    36d8:	2300      	movs	r3, #0
    36da:	707b      	strb	r3, [r7, #1]
    36dc:	70bb      	strb	r3, [r7, #2]
    36de:	70fb      	strb	r3, [r7, #3]
    36e0:	683a      	ldr	r2, [r7, #0]
    36e2:	64ba      	str	r2, [r7, #72]	; 0x48
    36e4:	4619      	mov	r1, r3
    36e6:	f363 0100 	bfi	r1, r3, #0, #1
    36ea:	f363 0141 	bfi	r1, r3, #1, #1
    36ee:	f363 0182 	bfi	r1, r3, #2, #1
    36f2:	f363 01c5 	bfi	r1, r3, #3, #3
    36f6:	2201      	movs	r2, #1
    36f8:	f362 1188 	bfi	r1, r2, #6, #3
    36fc:	2208      	movs	r2, #8
    36fe:	f362 2153 	bfi	r1, r2, #9, #11
    3702:	f363 511f 	bfi	r1, r3, #20, #12
    3706:	f107 0248 	add.w	r2, r7, #72	; 0x48
    370a:	480b      	ldr	r0, [pc, #44]	; (3738 <usb_fix_descriptor+0x224>)
    370c:	f7fe fb3c 	bl	1d88 <z_impl_z_log_msg_static_create>
					return -1;
    3710:	f04f 30ff 	mov.w	r0, #4294967295
    3714:	e006      	b.n	3724 <usb_fix_descriptor+0x210>
			cfg_descr = (struct usb_cfg_descriptor *)head;
    3716:	4626      	mov	r6, r4
    3718:	e7ba      	b.n	3690 <usb_fix_descriptor+0x17c>
	}

	if ((head + 1) != __usb_descriptor_end) {
    371a:	1ca0      	adds	r0, r4, #2
    371c:	4b0a      	ldr	r3, [pc, #40]	; (3748 <usb_fix_descriptor+0x234>)
    371e:	4298      	cmp	r0, r3
    3720:	d104      	bne.n	372c <usb_fix_descriptor+0x218>
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
    3722:	2000      	movs	r0, #0
}
    3724:	3754      	adds	r7, #84	; 0x54
    3726:	46bd      	mov	sp, r7
    3728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return usb_fix_descriptor(head + 1);
    372c:	f7ff fef2 	bl	3514 <usb_fix_descriptor>
    3730:	e7f8      	b.n	3724 <usb_fix_descriptor+0x210>
    3732:	bf00      	nop
    3734:	00010498 	.word	0x00010498
    3738:	0000feb4 	.word	0x0000feb4
    373c:	000104fc 	.word	0x000104fc
    3740:	000104b8 	.word	0x000104b8
    3744:	0001051c 	.word	0x0001051c
    3748:	2000032b 	.word	0x2000032b

0000374c <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
    374c:	b510      	push	{r4, lr}
    374e:	b088      	sub	sp, #32
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    3750:	4816      	ldr	r0, [pc, #88]	; (37ac <usb_get_device_descriptor+0x60>)
    3752:	f7ff fedf 	bl	3514 <usb_fix_descriptor>
    3756:	b910      	cbnz	r0, 375e <usb_get_device_descriptor+0x12>
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
    3758:	4814      	ldr	r0, [pc, #80]	; (37ac <usb_get_device_descriptor+0x60>)
}
    375a:	b008      	add	sp, #32
    375c:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to fixup USB descriptor");
    375e:	4b14      	ldr	r3, [pc, #80]	; (37b0 <usb_get_device_descriptor+0x64>)
    3760:	9307      	str	r3, [sp, #28]
    3762:	2302      	movs	r3, #2
    3764:	f88d 3004 	strb.w	r3, [sp, #4]
    3768:	2400      	movs	r4, #0
    376a:	f88d 4005 	strb.w	r4, [sp, #5]
    376e:	f88d 4006 	strb.w	r4, [sp, #6]
    3772:	f88d 4007 	strb.w	r4, [sp, #7]
    3776:	9b01      	ldr	r3, [sp, #4]
    3778:	9306      	str	r3, [sp, #24]
    377a:	4621      	mov	r1, r4
    377c:	f364 0100 	bfi	r1, r4, #0, #1
    3780:	f364 0141 	bfi	r1, r4, #1, #1
    3784:	f364 0182 	bfi	r1, r4, #2, #1
    3788:	f364 01c5 	bfi	r1, r4, #3, #3
    378c:	2301      	movs	r3, #1
    378e:	f363 1188 	bfi	r1, r3, #6, #3
    3792:	2308      	movs	r3, #8
    3794:	f363 2153 	bfi	r1, r3, #9, #11
    3798:	f364 511f 	bfi	r1, r4, #20, #12
    379c:	4623      	mov	r3, r4
    379e:	aa06      	add	r2, sp, #24
    37a0:	4804      	ldr	r0, [pc, #16]	; (37b4 <usb_get_device_descriptor+0x68>)
    37a2:	f7fe faf1 	bl	1d88 <z_impl_z_log_msg_static_create>
		return NULL;
    37a6:	4620      	mov	r0, r4
    37a8:	e7d7      	b.n	375a <usb_get_device_descriptor+0xe>
    37aa:	bf00      	nop
    37ac:	20000274 	.word	0x20000274
    37b0:	0001053c 	.word	0x0001053c
    37b4:	0000feb4 	.word	0x0000feb4

000037b8 <usb_ep_get_transfer>:
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    37b8:	2300      	movs	r3, #0
    37ba:	e000      	b.n	37be <usb_ep_get_transfer+0x6>
    37bc:	3301      	adds	r3, #1
    37be:	2b03      	cmp	r3, #3
    37c0:	d80c      	bhi.n	37dc <usb_ep_get_transfer+0x24>
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    37c2:	019a      	lsls	r2, r3, #6
    37c4:	4906      	ldr	r1, [pc, #24]	; (37e0 <usb_ep_get_transfer+0x28>)
    37c6:	5c8a      	ldrb	r2, [r1, r2]
    37c8:	4282      	cmp	r2, r0
    37ca:	d1f7      	bne.n	37bc <usb_ep_get_transfer+0x4>
    37cc:	eb01 1283 	add.w	r2, r1, r3, lsl #6
    37d0:	6852      	ldr	r2, [r2, #4]
    37d2:	2a00      	cmp	r2, #0
    37d4:	d0f2      	beq.n	37bc <usb_ep_get_transfer+0x4>
			return &ut_data[i];
    37d6:	eb01 1083 	add.w	r0, r1, r3, lsl #6
    37da:	4770      	bx	lr
		}
	}

	return NULL;
    37dc:	2000      	movs	r0, #0
}
    37de:	4770      	bx	lr
    37e0:	200011f0 	.word	0x200011f0

000037e4 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    37e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    37e8:	b083      	sub	sp, #12
    37ea:	af00      	add	r7, sp, #0
    37ec:	4604      	mov	r4, r0
	int ret = 0;
	uint32_t bytes;
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;
    37ee:	f810 5c2c 	ldrb.w	r5, [r0, #-44]

	if (trans->status != -EBUSY) {
    37f2:	f850 3c28 	ldr.w	r3, [r0, #-40]
    37f6:	f113 0f10 	cmn.w	r3, #16
    37fa:	d10d      	bne.n	3818 <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    37fc:	6903      	ldr	r3, [r0, #16]
    37fe:	f013 0f02 	tst.w	r3, #2
    3802:	f000 808e 	beq.w	3922 <usb_transfer_work+0x13e>
		if (!trans->bsize) {
    3806:	f850 2c20 	ldr.w	r2, [r0, #-32]
    380a:	bb62      	cbnz	r2, 3866 <usb_transfer_work+0x82>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    380c:	f013 0f04 	tst.w	r3, #4
    3810:	d022      	beq.n	3858 <usb_transfer_work+0x74>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
			}
			trans->status = 0;
    3812:	2300      	movs	r3, #0
    3814:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    3818:	f854 3c28 	ldr.w	r3, [r4, #-40]
    381c:	f113 0f10 	cmn.w	r3, #16
    3820:	d016      	beq.n	3850 <usb_transfer_work+0x6c>
    3822:	f854 6c18 	ldr.w	r6, [r4, #-24]
    3826:	b19e      	cbz	r6, 3850 <usb_transfer_work+0x6c>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    3828:	f854 8c1c 	ldr.w	r8, [r4, #-28]
		void *priv = trans->priv;
    382c:	f854 9c14 	ldr.w	r9, [r4, #-20]

		if (k_is_in_isr()) {
    3830:	f00b fcdf 	bl	f1f2 <k_is_in_isr>
    3834:	2800      	cmp	r0, #0
    3836:	f040 80e8 	bne.w	3a0a <usb_transfer_work+0x226>
		}

		LOG_DBG("Transfer done, ep 0x%02x, status %d, size %zu",
			trans->ep, trans->status, trans->tsize);

		trans->cb = NULL;
    383a:	2300      	movs	r3, #0
    383c:	f844 3c18 	str.w	r3, [r4, #-24]
		k_sem_give(&trans->sem);
    3840:	f1a4 0010 	sub.w	r0, r4, #16
	z_impl_k_sem_give(sem);
    3844:	f007 fa90 	bl	ad68 <z_impl_k_sem_give>

		/* Transfer completion callback */
		cb(ep, tsize, priv);
    3848:	464a      	mov	r2, r9
    384a:	4641      	mov	r1, r8
    384c:	4628      	mov	r0, r5
    384e:	47b0      	blx	r6
	}
}
    3850:	370c      	adds	r7, #12
    3852:	46bd      	mov	sp, r7
    3854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				usb_write(ep, NULL, 0, NULL);
    3858:	2300      	movs	r3, #0
    385a:	461a      	mov	r2, r3
    385c:	4619      	mov	r1, r3
    385e:	4628      	mov	r0, r5
    3860:	f009 ff74 	bl	d74c <usb_write>
    3864:	e7d5      	b.n	3812 <usb_transfer_work+0x2e>
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    3866:	1d3b      	adds	r3, r7, #4
    3868:	f850 1c24 	ldr.w	r1, [r0, #-36]
    386c:	4628      	mov	r0, r5
    386e:	f009 ff6d 	bl	d74c <usb_write>
		if (ret) {
    3872:	4684      	mov	ip, r0
    3874:	b980      	cbnz	r0, 3898 <usb_transfer_work+0xb4>
		trans->buffer += bytes;
    3876:	f854 2c24 	ldr.w	r2, [r4, #-36]
    387a:	687b      	ldr	r3, [r7, #4]
    387c:	441a      	add	r2, r3
    387e:	f844 2c24 	str.w	r2, [r4, #-36]
		trans->bsize -= bytes;
    3882:	f854 2c20 	ldr.w	r2, [r4, #-32]
    3886:	1ad2      	subs	r2, r2, r3
    3888:	f844 2c20 	str.w	r2, [r4, #-32]
		trans->tsize += bytes;
    388c:	f854 2c1c 	ldr.w	r2, [r4, #-28]
    3890:	4413      	add	r3, r2
    3892:	f844 3c1c 	str.w	r3, [r4, #-28]
    3896:	e7bf      	b.n	3818 <usb_transfer_work+0x34>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    3898:	466e      	mov	r6, sp
    389a:	b088      	sub	sp, #32
    389c:	466b      	mov	r3, sp
    389e:	f113 0210 	adds.w	r2, r3, #16
    38a2:	d038      	beq.n	3916 <usb_transfer_work+0x132>
    38a4:	2110      	movs	r1, #16
    38a6:	b16a      	cbz	r2, 38c4 <usb_transfer_work+0xe0>
    38a8:	4608      	mov	r0, r1
    38aa:	2904      	cmp	r1, #4
    38ac:	dd03      	ble.n	38b6 <usb_transfer_work+0xd2>
    38ae:	f8df e164 	ldr.w	lr, [pc, #356]	; 3a14 <usb_transfer_work+0x230>
    38b2:	f8c3 e014 	str.w	lr, [r3, #20]
    38b6:	2808      	cmp	r0, #8
    38b8:	dd01      	ble.n	38be <usb_transfer_work+0xda>
    38ba:	f8c3 c018 	str.w	ip, [r3, #24]
    38be:	280c      	cmp	r0, #12
    38c0:	dd00      	ble.n	38c4 <usb_transfer_work+0xe0>
    38c2:	61dd      	str	r5, [r3, #28]
    38c4:	290f      	cmp	r1, #15
    38c6:	dd29      	ble.n	391c <usb_transfer_work+0x138>
    38c8:	f04f 0c10 	mov.w	ip, #16
    38cc:	b13a      	cbz	r2, 38de <usb_transfer_work+0xfa>
    38ce:	2104      	movs	r1, #4
    38d0:	7039      	strb	r1, [r7, #0]
    38d2:	2100      	movs	r1, #0
    38d4:	7079      	strb	r1, [r7, #1]
    38d6:	70b9      	strb	r1, [r7, #2]
    38d8:	70f9      	strb	r1, [r7, #3]
    38da:	6838      	ldr	r0, [r7, #0]
    38dc:	6118      	str	r0, [r3, #16]
    38de:	2100      	movs	r1, #0
    38e0:	f36f 0100 	bfc	r1, #0, #1
    38e4:	f36f 0141 	bfc	r1, #1, #1
    38e8:	f36f 0182 	bfc	r1, #2, #1
    38ec:	f36f 01c5 	bfc	r1, #3, #3
    38f0:	2301      	movs	r3, #1
    38f2:	f363 1188 	bfi	r1, r3, #6, #3
    38f6:	f3cc 030a 	ubfx	r3, ip, #0, #11
    38fa:	f363 2153 	bfi	r1, r3, #9, #11
    38fe:	f36f 511f 	bfc	r1, #20, #12
    3902:	2300      	movs	r3, #0
    3904:	4844      	ldr	r0, [pc, #272]	; (3a18 <usb_transfer_work+0x234>)
    3906:	f7fe fa3f 	bl	1d88 <z_impl_z_log_msg_static_create>
    390a:	46b5      	mov	sp, r6
			trans->status = -EINVAL;
    390c:	f06f 0315 	mvn.w	r3, #21
    3910:	f844 3c28 	str.w	r3, [r4, #-40]
			goto done;
    3914:	e780      	b.n	3818 <usb_transfer_work+0x34>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    3916:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    391a:	e7c4      	b.n	38a6 <usb_transfer_work+0xc2>
    391c:	f06f 0c1b 	mvn.w	ip, #27
    3920:	e7d4      	b.n	38cc <usb_transfer_work+0xe8>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    3922:	1d3b      	adds	r3, r7, #4
    3924:	f850 2c20 	ldr.w	r2, [r0, #-32]
    3928:	f850 1c24 	ldr.w	r1, [r0, #-36]
    392c:	4628      	mov	r0, r5
    392e:	f003 fc2d 	bl	718c <usb_dc_ep_read_wait>
		if (ret) {
    3932:	4606      	mov	r6, r0
    3934:	b9a8      	cbnz	r0, 3962 <usb_transfer_work+0x17e>
		trans->buffer += bytes;
    3936:	f854 3c24 	ldr.w	r3, [r4, #-36]
    393a:	687e      	ldr	r6, [r7, #4]
    393c:	4433      	add	r3, r6
    393e:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    3942:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3946:	1b9b      	subs	r3, r3, r6
    3948:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    394c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3950:	4433      	add	r3, r6
    3952:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    3956:	2e00      	cmp	r6, #0
    3958:	d146      	bne.n	39e8 <usb_transfer_work+0x204>
			trans->status = 0;
    395a:	2300      	movs	r3, #0
    395c:	f844 3c28 	str.w	r3, [r4, #-40]
			goto done;
    3960:	e75a      	b.n	3818 <usb_transfer_work+0x34>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    3962:	46e8      	mov	r8, sp
    3964:	b088      	sub	sp, #32
    3966:	466b      	mov	r3, sp
    3968:	f113 0210 	adds.w	r2, r3, #16
    396c:	d036      	beq.n	39dc <usb_transfer_work+0x1f8>
    396e:	2110      	movs	r1, #16
    3970:	b162      	cbz	r2, 398c <usb_transfer_work+0x1a8>
    3972:	4608      	mov	r0, r1
    3974:	2904      	cmp	r1, #4
    3976:	dd03      	ble.n	3980 <usb_transfer_work+0x19c>
    3978:	f8df c098 	ldr.w	ip, [pc, #152]	; 3a14 <usb_transfer_work+0x230>
    397c:	f8c3 c014 	str.w	ip, [r3, #20]
    3980:	2808      	cmp	r0, #8
    3982:	dd00      	ble.n	3986 <usb_transfer_work+0x1a2>
    3984:	619e      	str	r6, [r3, #24]
    3986:	280c      	cmp	r0, #12
    3988:	dd00      	ble.n	398c <usb_transfer_work+0x1a8>
    398a:	61dd      	str	r5, [r3, #28]
    398c:	290f      	cmp	r1, #15
    398e:	dd28      	ble.n	39e2 <usb_transfer_work+0x1fe>
    3990:	2610      	movs	r6, #16
    3992:	b13a      	cbz	r2, 39a4 <usb_transfer_work+0x1c0>
    3994:	2104      	movs	r1, #4
    3996:	7039      	strb	r1, [r7, #0]
    3998:	2100      	movs	r1, #0
    399a:	7079      	strb	r1, [r7, #1]
    399c:	70b9      	strb	r1, [r7, #2]
    399e:	70f9      	strb	r1, [r7, #3]
    39a0:	6838      	ldr	r0, [r7, #0]
    39a2:	6118      	str	r0, [r3, #16]
    39a4:	2100      	movs	r1, #0
    39a6:	f36f 0100 	bfc	r1, #0, #1
    39aa:	f36f 0141 	bfc	r1, #1, #1
    39ae:	f36f 0182 	bfc	r1, #2, #1
    39b2:	f36f 01c5 	bfc	r1, #3, #3
    39b6:	2301      	movs	r3, #1
    39b8:	f363 1188 	bfi	r1, r3, #6, #3
    39bc:	f3c6 060a 	ubfx	r6, r6, #0, #11
    39c0:	f366 2153 	bfi	r1, r6, #9, #11
    39c4:	f36f 511f 	bfc	r1, #20, #12
    39c8:	2300      	movs	r3, #0
    39ca:	4813      	ldr	r0, [pc, #76]	; (3a18 <usb_transfer_work+0x234>)
    39cc:	f7fe f9dc 	bl	1d88 <z_impl_z_log_msg_static_create>
    39d0:	46c5      	mov	sp, r8
			trans->status = -EINVAL;
    39d2:	f06f 0315 	mvn.w	r3, #21
    39d6:	f844 3c28 	str.w	r3, [r4, #-40]
			goto done;
    39da:	e71d      	b.n	3818 <usb_transfer_work+0x34>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    39dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    39e0:	e7c6      	b.n	3970 <usb_transfer_work+0x18c>
    39e2:	f06f 061b 	mvn.w	r6, #27
    39e6:	e7d4      	b.n	3992 <usb_transfer_work+0x1ae>
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    39e8:	4628      	mov	r0, r5
    39ea:	f003 fd2f 	bl	744c <usb_dc_ep_mps>
    39ee:	fbb6 f3f0 	udiv	r3, r6, r0
    39f2:	fb00 6613 	mls	r6, r0, r3, r6
    39f6:	2e00      	cmp	r6, #0
    39f8:	d1af      	bne.n	395a <usb_transfer_work+0x176>
    39fa:	f854 3c20 	ldr.w	r3, [r4, #-32]
    39fe:	2b00      	cmp	r3, #0
    3a00:	d0ab      	beq.n	395a <usb_transfer_work+0x176>
		usb_dc_ep_read_continue(ep);
    3a02:	4628      	mov	r0, r5
    3a04:	f003 fc6c 	bl	72e0 <usb_dc_ep_read_continue>
    3a08:	e706      	b.n	3818 <usb_transfer_work+0x34>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    3a0a:	4621      	mov	r1, r4
    3a0c:	4803      	ldr	r0, [pc, #12]	; (3a1c <usb_transfer_work+0x238>)
    3a0e:	f00b fd8d 	bl	f52c <k_work_submit_to_queue>
			return;
    3a12:	e71d      	b.n	3850 <usb_transfer_work+0x6c>
    3a14:	0001056c 	.word	0x0001056c
    3a18:	0000fecc 	.word	0x0000fecc
    3a1c:	20000840 	.word	0x20000840

00003a20 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
    3a20:	b570      	push	{r4, r5, r6, lr}
    3a22:	b088      	sub	sp, #32
    3a24:	4606      	mov	r6, r0
    3a26:	460c      	mov	r4, r1
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    3a28:	f7ff fec6 	bl	37b8 <usb_ep_get_transfer>

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    3a2c:	1e63      	subs	r3, r4, #1
    3a2e:	b2db      	uxtb	r3, r3
    3a30:	2b01      	cmp	r3, #1
    3a32:	d80a      	bhi.n	3a4a <usb_transfer_ep_callback+0x2a>
    3a34:	4605      	mov	r5, r0
		return;
	}

	if (!trans) {
    3a36:	b150      	cbz	r0, 3a4e <usb_transfer_ep_callback+0x2e>
			LOG_ERR("RX data lost, no transfer");
		}
		return;
	}

	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    3a38:	f00b fbdb 	bl	f1f2 <k_is_in_isr>
    3a3c:	b108      	cbz	r0, 3a42 <usb_transfer_ep_callback+0x22>
    3a3e:	2c01      	cmp	r4, #1
    3a40:	d134      	bne.n	3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>
		/* If we are not in IRQ context, no need to defer work */
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
    3a42:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    3a46:	f7ff fecd 	bl	37e4 <usb_transfer_work>
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    3a4a:	b008      	add	sp, #32
    3a4c:	bd70      	pop	{r4, r5, r6, pc}
		if (status == USB_DC_EP_DATA_OUT) {
    3a4e:	2c01      	cmp	r4, #1
    3a50:	d1fb      	bne.n	3a4a <usb_transfer_ep_callback+0x2a>
				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    3a52:	466b      	mov	r3, sp
    3a54:	2201      	movs	r2, #1
    3a56:	a901      	add	r1, sp, #4
    3a58:	4630      	mov	r0, r6
    3a5a:	f003 fb97 	bl	718c <usb_dc_ep_read_wait>
			} while (bytes);
    3a5e:	9b00      	ldr	r3, [sp, #0]
    3a60:	2b00      	cmp	r3, #0
    3a62:	d1f6      	bne.n	3a52 <usb_transfer_ep_callback+0x32>
			LOG_ERR("RX data lost, no transfer");
    3a64:	4b14      	ldr	r3, [pc, #80]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    3a66:	9307      	str	r3, [sp, #28]
    3a68:	2302      	movs	r3, #2
    3a6a:	f88d 3004 	strb.w	r3, [sp, #4]
    3a6e:	2300      	movs	r3, #0
    3a70:	f88d 3005 	strb.w	r3, [sp, #5]
    3a74:	f88d 3006 	strb.w	r3, [sp, #6]
    3a78:	f88d 3007 	strb.w	r3, [sp, #7]
    3a7c:	9a01      	ldr	r2, [sp, #4]
    3a7e:	9206      	str	r2, [sp, #24]
    3a80:	4619      	mov	r1, r3
    3a82:	f363 0100 	bfi	r1, r3, #0, #1
    3a86:	f363 0141 	bfi	r1, r3, #1, #1
    3a8a:	f363 0182 	bfi	r1, r3, #2, #1
    3a8e:	f363 01c5 	bfi	r1, r3, #3, #3
    3a92:	2201      	movs	r2, #1
    3a94:	f362 1188 	bfi	r1, r2, #6, #3
    3a98:	2208      	movs	r2, #8
    3a9a:	f362 2153 	bfi	r1, r2, #9, #11
    3a9e:	f363 511f 	bfi	r1, r3, #20, #12
    3aa2:	aa06      	add	r2, sp, #24
    3aa4:	4805      	ldr	r0, [pc, #20]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    3aa6:	f7fe f96f 	bl	1d88 <z_impl_z_log_msg_static_create>
		return;
    3aaa:	e7ce      	b.n	3a4a <usb_transfer_ep_callback+0x2a>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    3aac:	f105 012c 	add.w	r1, r5, #44	; 0x2c
    3ab0:	4803      	ldr	r0, [pc, #12]	; (3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>)
    3ab2:	f00b fd3b 	bl	f52c <k_work_submit_to_queue>
    3ab6:	e7c8      	b.n	3a4a <usb_transfer_ep_callback+0x2a>
    3ab8:	0001058c 	.word	0x0001058c
    3abc:	0000fecc 	.word	0x0000fecc
    3ac0:	20000840 	.word	0x20000840

00003ac4 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    3ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ac8:	b08b      	sub	sp, #44	; 0x2c
    3aca:	af00      	add	r7, sp, #0
    3acc:	4606      	mov	r6, r0
    3ace:	6079      	str	r1, [r7, #4]
    3ad0:	4691      	mov	r9, r2
    3ad2:	469a      	mov	sl, r3
	struct usb_transfer_data *trans = NULL;
	int key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    3ad4:	f009 ff0a 	bl	d8ec <usb_transfer_is_busy>
    3ad8:	2800      	cmp	r0, #0
    3ada:	f040 80c3 	bne.w	3c64 <usb_transfer+0x1a0>
	__asm__ volatile(
    3ade:	f04f 0320 	mov.w	r3, #32
    3ae2:	f3ef 8511 	mrs	r5, BASEPRI
    3ae6:	f383 8812 	msr	BASEPRI_MAX, r3
    3aea:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3aee:	2400      	movs	r4, #0
    3af0:	2c03      	cmp	r4, #3
    3af2:	d835      	bhi.n	3b60 <usb_transfer+0x9c>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    3af4:	01a0      	lsls	r0, r4, #6
    3af6:	3018      	adds	r0, #24
    3af8:	4b5c      	ldr	r3, [pc, #368]	; (3c6c <usb_transfer+0x1a8>)
    3afa:	4418      	add	r0, r3
    3afc:	3004      	adds	r0, #4
	return z_impl_k_sem_take(sem, timeout);
    3afe:	2200      	movs	r2, #0
    3b00:	2300      	movs	r3, #0
    3b02:	f007 f955 	bl	adb0 <z_impl_k_sem_take>
    3b06:	4680      	mov	r8, r0
    3b08:	b108      	cbz	r0, 3b0e <usb_transfer+0x4a>
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3b0a:	3401      	adds	r4, #1
    3b0c:	e7f0      	b.n	3af0 <usb_transfer+0x2c>
			trans = &ut_data[i];
    3b0e:	01a2      	lsls	r2, r4, #6
    3b10:	4b56      	ldr	r3, [pc, #344]	; (3c6c <usb_transfer+0x1a8>)
    3b12:	eb03 1484 	add.w	r4, r3, r4, lsl #6
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    3b16:	f8d4 b004 	ldr.w	fp, [r4, #4]
    3b1a:	f11b 0f10 	cmn.w	fp, #16
    3b1e:	d04a      	beq.n	3bb6 <usb_transfer+0xf2>
		ret = -EBUSY;
		goto done;
	}

	/* Configure new transfer */
	trans->ep = ep;
    3b20:	549e      	strb	r6, [r3, r2]
	trans->buffer = data;
    3b22:	687b      	ldr	r3, [r7, #4]
    3b24:	60a3      	str	r3, [r4, #8]
	trans->bsize = dlen;
    3b26:	f8c4 900c 	str.w	r9, [r4, #12]
	trans->tsize = 0;
    3b2a:	2300      	movs	r3, #0
    3b2c:	6123      	str	r3, [r4, #16]
	trans->cb = cb;
    3b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3b30:	6163      	str	r3, [r4, #20]
	trans->flags = flags;
    3b32:	f8c4 a03c 	str.w	sl, [r4, #60]	; 0x3c
	trans->priv = cb_data;
    3b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3b38:	61a3      	str	r3, [r4, #24]
	trans->status = -EBUSY;
    3b3a:	f06f 030f 	mvn.w	r3, #15
    3b3e:	6063      	str	r3, [r4, #4]

	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    3b40:	4630      	mov	r0, r6
    3b42:	f003 fc83 	bl	744c <usb_dc_ep_mps>
    3b46:	2800      	cmp	r0, #0
    3b48:	d178      	bne.n	3c3c <usb_transfer+0x178>
		/* no need to send ZLP since last packet will be a short one */
		trans->flags |= USB_TRANS_NO_ZLP;
	}

	if (flags & USB_TRANS_WRITE) {
    3b4a:	f01a 0f02 	tst.w	sl, #2
    3b4e:	f000 8084 	beq.w	3c5a <usb_transfer+0x196>
		/* start writing first chunk */
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    3b52:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    3b56:	4846      	ldr	r0, [pc, #280]	; (3c70 <usb_transfer+0x1ac>)
    3b58:	f00b fce8 	bl	f52c <k_work_submit_to_queue>
	int key, ret = 0;
    3b5c:	46c3      	mov	fp, r8
    3b5e:	e021      	b.n	3ba4 <usb_transfer+0xe0>
		LOG_ERR("No transfer slot available");
    3b60:	4b44      	ldr	r3, [pc, #272]	; (3c74 <usb_transfer+0x1b0>)
    3b62:	627b      	str	r3, [r7, #36]	; 0x24
    3b64:	2302      	movs	r3, #2
    3b66:	733b      	strb	r3, [r7, #12]
    3b68:	2300      	movs	r3, #0
    3b6a:	737b      	strb	r3, [r7, #13]
    3b6c:	73bb      	strb	r3, [r7, #14]
    3b6e:	73fb      	strb	r3, [r7, #15]
    3b70:	68fa      	ldr	r2, [r7, #12]
    3b72:	623a      	str	r2, [r7, #32]
    3b74:	4619      	mov	r1, r3
    3b76:	f363 0100 	bfi	r1, r3, #0, #1
    3b7a:	f363 0141 	bfi	r1, r3, #1, #1
    3b7e:	f363 0182 	bfi	r1, r3, #2, #1
    3b82:	f363 01c5 	bfi	r1, r3, #3, #3
    3b86:	2201      	movs	r2, #1
    3b88:	f362 1188 	bfi	r1, r2, #6, #3
    3b8c:	2208      	movs	r2, #8
    3b8e:	f362 2153 	bfi	r1, r2, #9, #11
    3b92:	f363 511f 	bfi	r1, r3, #20, #12
    3b96:	f107 0220 	add.w	r2, r7, #32
    3b9a:	4837      	ldr	r0, [pc, #220]	; (3c78 <usb_transfer+0x1b4>)
    3b9c:	f7fe f8f4 	bl	1d88 <z_impl_z_log_msg_static_create>
		ret = -ENOMEM;
    3ba0:	f06f 0b0b 	mvn.w	fp, #11
	__asm__ volatile(
    3ba4:	f385 8811 	msr	BASEPRI, r5
    3ba8:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    3bac:	4658      	mov	r0, fp
    3bae:	372c      	adds	r7, #44	; 0x2c
    3bb0:	46bd      	mov	sp, r7
    3bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
    3bb6:	46e8      	mov	r8, sp
    3bb8:	b088      	sub	sp, #32
    3bba:	466b      	mov	r3, sp
    3bbc:	f113 0210 	adds.w	r2, r3, #16
    3bc0:	d00f      	beq.n	3be2 <usb_transfer+0x11e>
    3bc2:	210c      	movs	r1, #12
    3bc4:	b14a      	cbz	r2, 3bda <usb_transfer+0x116>
    3bc6:	4608      	mov	r0, r1
    3bc8:	2904      	cmp	r1, #4
    3bca:	dd03      	ble.n	3bd4 <usb_transfer+0x110>
    3bcc:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 3c7c <usb_transfer+0x1b8>
    3bd0:	f8c3 c014 	str.w	ip, [r3, #20]
    3bd4:	2808      	cmp	r0, #8
    3bd6:	dd07      	ble.n	3be8 <usb_transfer+0x124>
    3bd8:	619e      	str	r6, [r3, #24]
    3bda:	290b      	cmp	r1, #11
    3bdc:	dd2b      	ble.n	3c36 <usb_transfer+0x172>
    3bde:	260c      	movs	r6, #12
    3be0:	e004      	b.n	3bec <usb_transfer+0x128>
    3be2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3be6:	e7ed      	b.n	3bc4 <usb_transfer+0x100>
    3be8:	f06f 061b 	mvn.w	r6, #27
    3bec:	b13a      	cbz	r2, 3bfe <usb_transfer+0x13a>
    3bee:	2103      	movs	r1, #3
    3bf0:	7339      	strb	r1, [r7, #12]
    3bf2:	2100      	movs	r1, #0
    3bf4:	7379      	strb	r1, [r7, #13]
    3bf6:	73b9      	strb	r1, [r7, #14]
    3bf8:	73f9      	strb	r1, [r7, #15]
    3bfa:	68f8      	ldr	r0, [r7, #12]
    3bfc:	6118      	str	r0, [r3, #16]
    3bfe:	2100      	movs	r1, #0
    3c00:	f36f 0100 	bfc	r1, #0, #1
    3c04:	f36f 0141 	bfc	r1, #1, #1
    3c08:	f36f 0182 	bfc	r1, #2, #1
    3c0c:	f36f 01c5 	bfc	r1, #3, #3
    3c10:	2301      	movs	r3, #1
    3c12:	f363 1188 	bfi	r1, r3, #6, #3
    3c16:	f3c6 060a 	ubfx	r6, r6, #0, #11
    3c1a:	f366 2153 	bfi	r1, r6, #9, #11
    3c1e:	f36f 511f 	bfc	r1, #20, #12
    3c22:	2300      	movs	r3, #0
    3c24:	4814      	ldr	r0, [pc, #80]	; (3c78 <usb_transfer+0x1b4>)
    3c26:	f7fe f8af 	bl	1d88 <z_impl_z_log_msg_static_create>
    3c2a:	46c5      	mov	sp, r8
		k_sem_give(&trans->sem);
    3c2c:	f104 001c 	add.w	r0, r4, #28
	z_impl_k_sem_give(sem);
    3c30:	f007 f89a 	bl	ad68 <z_impl_k_sem_give>
		goto done;
    3c34:	e7b6      	b.n	3ba4 <usb_transfer+0xe0>
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
    3c36:	f06f 061b 	mvn.w	r6, #27
    3c3a:	e7d7      	b.n	3bec <usb_transfer+0x128>
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    3c3c:	4630      	mov	r0, r6
    3c3e:	f003 fc05 	bl	744c <usb_dc_ep_mps>
    3c42:	fbb9 f3f0 	udiv	r3, r9, r0
    3c46:	fb00 9313 	mls	r3, r0, r3, r9
    3c4a:	2b00      	cmp	r3, #0
    3c4c:	f43f af7d 	beq.w	3b4a <usb_transfer+0x86>
		trans->flags |= USB_TRANS_NO_ZLP;
    3c50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3c52:	f043 0304 	orr.w	r3, r3, #4
    3c56:	63e3      	str	r3, [r4, #60]	; 0x3c
    3c58:	e777      	b.n	3b4a <usb_transfer+0x86>
		ret = usb_dc_ep_read_continue(ep);
    3c5a:	4630      	mov	r0, r6
    3c5c:	f003 fb40 	bl	72e0 <usb_dc_ep_read_continue>
    3c60:	4683      	mov	fp, r0
    3c62:	e79f      	b.n	3ba4 <usb_transfer+0xe0>
		return -EBUSY;
    3c64:	f06f 0b0f 	mvn.w	fp, #15
    3c68:	e7a0      	b.n	3bac <usb_transfer+0xe8>
    3c6a:	bf00      	nop
    3c6c:	200011f0 	.word	0x200011f0
    3c70:	20000840 	.word	0x20000840
    3c74:	000105a8 	.word	0x000105a8
    3c78:	0000fecc 	.word	0x0000fecc
    3c7c:	000105c4 	.word	0x000105c4

00003c80 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    3c80:	b510      	push	{r4, lr}
	__asm__ volatile(
    3c82:	f04f 0320 	mov.w	r3, #32
    3c86:	f3ef 8411 	mrs	r4, BASEPRI
    3c8a:	f383 8812 	msr	BASEPRI_MAX, r3
    3c8e:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    3c92:	f7ff fd91 	bl	37b8 <usb_ep_get_transfer>
	if (!trans) {
    3c96:	b120      	cbz	r0, 3ca2 <usb_cancel_transfer+0x22>
    3c98:	4601      	mov	r1, r0
		goto done;
	}

	if (trans->status != -EBUSY) {
    3c9a:	6843      	ldr	r3, [r0, #4]
    3c9c:	f113 0f10 	cmn.w	r3, #16
    3ca0:	d004      	beq.n	3cac <usb_cancel_transfer+0x2c>
	__asm__ volatile(
    3ca2:	f384 8811 	msr	BASEPRI, r4
    3ca6:	f3bf 8f6f 	isb	sy
	trans->status = -ECANCELED;
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);

done:
	irq_unlock(key);
}
    3caa:	bd10      	pop	{r4, pc}
	trans->status = -ECANCELED;
    3cac:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    3cb0:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    3cb2:	312c      	adds	r1, #44	; 0x2c
    3cb4:	4801      	ldr	r0, [pc, #4]	; (3cbc <usb_cancel_transfer+0x3c>)
    3cb6:	f00b fc39 	bl	f52c <k_work_submit_to_queue>
    3cba:	e7f2      	b.n	3ca2 <usb_cancel_transfer+0x22>
    3cbc:	20000840 	.word	0x20000840

00003cc0 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    3cc0:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3cc2:	2400      	movs	r4, #0
    3cc4:	e004      	b.n	3cd0 <usb_cancel_transfers+0x10>
    3cc6:	f385 8811 	msr	BASEPRI, r5
    3cca:	f3bf 8f6f 	isb	sy
    3cce:	3401      	adds	r4, #1
    3cd0:	2c03      	cmp	r4, #3
    3cd2:	d81c      	bhi.n	3d0e <usb_cancel_transfers+0x4e>
	__asm__ volatile(
    3cd4:	f04f 0320 	mov.w	r3, #32
    3cd8:	f3ef 8511 	mrs	r5, BASEPRI
    3cdc:	f383 8812 	msr	BASEPRI_MAX, r3
    3ce0:	f3bf 8f6f 	isb	sy
		struct usb_transfer_data *trans = &ut_data[i];
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
    3ce4:	4b0a      	ldr	r3, [pc, #40]	; (3d10 <usb_cancel_transfers+0x50>)
    3ce6:	eb03 1384 	add.w	r3, r3, r4, lsl #6
    3cea:	685b      	ldr	r3, [r3, #4]
    3cec:	f113 0f10 	cmn.w	r3, #16
    3cf0:	d1e9      	bne.n	3cc6 <usb_cancel_transfers+0x6>
			trans->status = -ECANCELED;
    3cf2:	4b07      	ldr	r3, [pc, #28]	; (3d10 <usb_cancel_transfers+0x50>)
    3cf4:	01a1      	lsls	r1, r4, #6
    3cf6:	eb03 1284 	add.w	r2, r3, r4, lsl #6
    3cfa:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    3cfe:	6050      	str	r0, [r2, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    3d00:	3128      	adds	r1, #40	; 0x28
    3d02:	4419      	add	r1, r3
    3d04:	3104      	adds	r1, #4
    3d06:	4803      	ldr	r0, [pc, #12]	; (3d14 <usb_cancel_transfers+0x54>)
    3d08:	f00b fc10 	bl	f52c <k_work_submit_to_queue>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
    3d0c:	e7db      	b.n	3cc6 <usb_cancel_transfers+0x6>
		}

		irq_unlock(key);
	}
}
    3d0e:	bd38      	pop	{r3, r4, r5, pc}
    3d10:	200011f0 	.word	0x200011f0
    3d14:	20000840 	.word	0x20000840

00003d18 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    3d18:	b570      	push	{r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3d1a:	2500      	movs	r5, #0
    3d1c:	e011      	b.n	3d42 <usb_transfer_init+0x2a>
		k_work_init(&ut_data[i].work, usb_transfer_work);
    3d1e:	01ac      	lsls	r4, r5, #6
    3d20:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3d24:	4e09      	ldr	r6, [pc, #36]	; (3d4c <usb_transfer_init+0x34>)
    3d26:	4430      	add	r0, r6
    3d28:	4909      	ldr	r1, [pc, #36]	; (3d50 <usb_transfer_init+0x38>)
    3d2a:	3004      	adds	r0, #4
    3d2c:	f00b fbe2 	bl	f4f4 <k_work_init>
		k_sem_init(&ut_data[i].sem, 1, 1);
    3d30:	f104 0018 	add.w	r0, r4, #24
    3d34:	4430      	add	r0, r6
    3d36:	3004      	adds	r0, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
    3d38:	2201      	movs	r2, #1
    3d3a:	4611      	mov	r1, r2
    3d3c:	f00b fb4f 	bl	f3de <z_impl_k_sem_init>
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3d40:	3501      	adds	r5, #1
    3d42:	2d03      	cmp	r5, #3
    3d44:	d9eb      	bls.n	3d1e <usb_transfer_init+0x6>
	}

	return 0;
}
    3d46:	2000      	movs	r0, #0
    3d48:	bd70      	pop	{r4, r5, r6, pc}
    3d4a:	bf00      	nop
    3d4c:	200011f0 	.word	0x200011f0
    3d50:	000037e5 	.word	0x000037e5

00003d54 <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
    3d54:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d56:	b083      	sub	sp, #12
    3d58:	af00      	add	r7, sp, #0
    3d5a:	4604      	mov	r4, r0
    3d5c:	460e      	mov	r6, r1
    3d5e:	4615      	mov	r5, r2
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    3d60:	7901      	ldrb	r1, [r0, #4]
    3d62:	4834      	ldr	r0, [pc, #208]	; (3e34 <cdc_acm_class_handle_req+0xe0>)
    3d64:	f009 fd92 	bl	d88c <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    3d68:	b158      	cbz	r0, 3d82 <cdc_acm_class_handle_req+0x2e>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
    3d6a:	f994 2000 	ldrsb.w	r2, [r4]
    3d6e:	2a00      	cmp	r2, #0
    3d70:	db50      	blt.n	3e14 <cdc_acm_class_handle_req+0xc0>
		switch (setup->bRequest) {
    3d72:	7862      	ldrb	r2, [r4, #1]
    3d74:	2a20      	cmp	r2, #32
    3d76:	d041      	beq.n	3dfc <cdc_acm_class_handle_req+0xa8>
    3d78:	2a22      	cmp	r2, #34	; 0x22
    3d7a:	d046      	beq.n	3e0a <cdc_acm_class_handle_req+0xb6>
    3d7c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3d80:	e051      	b.n	3e26 <cdc_acm_class_handle_req+0xd2>
		LOG_WRN("Device data not found for interface %u",
    3d82:	88a4      	ldrh	r4, [r4, #4]
    3d84:	466d      	mov	r5, sp
    3d86:	b088      	sub	sp, #32
    3d88:	466b      	mov	r3, sp
    3d8a:	f113 0210 	adds.w	r2, r3, #16
    3d8e:	d02f      	beq.n	3df0 <cdc_acm_class_handle_req+0x9c>
    3d90:	210c      	movs	r1, #12
    3d92:	b13a      	cbz	r2, 3da4 <cdc_acm_class_handle_req+0x50>
    3d94:	4608      	mov	r0, r1
    3d96:	2904      	cmp	r1, #4
    3d98:	dd01      	ble.n	3d9e <cdc_acm_class_handle_req+0x4a>
    3d9a:	4e27      	ldr	r6, [pc, #156]	; (3e38 <cdc_acm_class_handle_req+0xe4>)
    3d9c:	615e      	str	r6, [r3, #20]
    3d9e:	2808      	cmp	r0, #8
    3da0:	dd00      	ble.n	3da4 <cdc_acm_class_handle_req+0x50>
    3da2:	619c      	str	r4, [r3, #24]
    3da4:	290b      	cmp	r1, #11
    3da6:	dd26      	ble.n	3df6 <cdc_acm_class_handle_req+0xa2>
    3da8:	240c      	movs	r4, #12
    3daa:	b13a      	cbz	r2, 3dbc <cdc_acm_class_handle_req+0x68>
    3dac:	2103      	movs	r1, #3
    3dae:	7139      	strb	r1, [r7, #4]
    3db0:	2100      	movs	r1, #0
    3db2:	7179      	strb	r1, [r7, #5]
    3db4:	71b9      	strb	r1, [r7, #6]
    3db6:	71f9      	strb	r1, [r7, #7]
    3db8:	6878      	ldr	r0, [r7, #4]
    3dba:	6118      	str	r0, [r3, #16]
    3dbc:	2100      	movs	r1, #0
    3dbe:	f36f 0100 	bfc	r1, #0, #1
    3dc2:	f36f 0141 	bfc	r1, #1, #1
    3dc6:	f36f 0182 	bfc	r1, #2, #1
    3dca:	f36f 01c5 	bfc	r1, #3, #3
    3dce:	2302      	movs	r3, #2
    3dd0:	f363 1188 	bfi	r1, r3, #6, #3
    3dd4:	f3c4 040a 	ubfx	r4, r4, #0, #11
    3dd8:	f364 2153 	bfi	r1, r4, #9, #11
    3ddc:	f36f 511f 	bfc	r1, #20, #12
    3de0:	2300      	movs	r3, #0
    3de2:	4816      	ldr	r0, [pc, #88]	; (3e3c <cdc_acm_class_handle_req+0xe8>)
    3de4:	f7fd ffd0 	bl	1d88 <z_impl_z_log_msg_static_create>
    3de8:	46ad      	mov	sp, r5
		return -ENODEV;
    3dea:	f06f 0012 	mvn.w	r0, #18
    3dee:	e01a      	b.n	3e26 <cdc_acm_class_handle_req+0xd2>
		LOG_WRN("Device data not found for interface %u",
    3df0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3df4:	e7cd      	b.n	3d92 <cdc_acm_class_handle_req+0x3e>
    3df6:	f06f 041b 	mvn.w	r4, #27
    3dfa:	e7d6      	b.n	3daa <cdc_acm_class_handle_req+0x56>
		case SET_LINE_CODING:
			rate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
			memcpy(&dev_data->line_coding, *data,
    3dfc:	2207      	movs	r2, #7
    3dfe:	6829      	ldr	r1, [r5, #0]
    3e00:	3810      	subs	r0, #16
    3e02:	f009 ffdb 	bl	ddbc <memcpy>
#if defined(CONFIG_CDC_ACM_DTE_RATE_CALLBACK_SUPPORT)
			if (rate != new_rate && dev_data->rate_cb != NULL) {
				dev_data->rate_cb(common->dev, new_rate);
			}
#endif
			return 0;
    3e06:	2000      	movs	r0, #0
    3e08:	e00d      	b.n	3e26 <cdc_acm_class_handle_req+0xd2>

		case SET_CONTROL_LINE_STATE:
			dev_data->line_state = (uint8_t)setup->wValue;
    3e0a:	78a2      	ldrb	r2, [r4, #2]
    3e0c:	f800 2c09 	strb.w	r2, [r0, #-9]
			LOG_DBG("CDC_SET_CONTROL_LINE_STATE 0x%x",
				dev_data->line_state);
			return 0;
    3e10:	2000      	movs	r0, #0
    3e12:	e008      	b.n	3e26 <cdc_acm_class_handle_req+0xd2>

		default:
			break;
		}
	} else {
		if (setup->bRequest == GET_LINE_CODING) {
    3e14:	7862      	ldrb	r2, [r4, #1]
    3e16:	2a21      	cmp	r2, #33	; 0x21
    3e18:	d108      	bne.n	3e2c <cdc_acm_class_handle_req+0xd8>
			*data = (uint8_t *)(&dev_data->line_coding);
    3e1a:	f1a0 0310 	sub.w	r3, r0, #16
    3e1e:	602b      	str	r3, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    3e20:	2307      	movs	r3, #7
    3e22:	6033      	str	r3, [r6, #0]
			LOG_DBG("CDC_GET_LINE_CODING %d %d %d %d",
				sys_le32_to_cpu(dev_data->line_coding.dwDTERate),
				dev_data->line_coding.bCharFormat,
				dev_data->line_coding.bParityType,
				dev_data->line_coding.bDataBits);
			return 0;
    3e24:	2000      	movs	r0, #0
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
}
    3e26:	370c      	adds	r7, #12
    3e28:	46bd      	mov	sp, r7
    3e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return -ENOTSUP;
    3e2c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3e30:	e7f9      	b.n	3e26 <cdc_acm_class_handle_req+0xd2>
    3e32:	bf00      	nop
    3e34:	200012f0 	.word	0x200012f0
    3e38:	00010600 	.word	0x00010600
    3e3c:	0000feac 	.word	0x0000feac

00003e40 <cdc_acm_int_in>:
 *
 * @param ep        Endpoint address.
 * @param ep_status Endpoint status code.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
    3e40:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e42:	b083      	sub	sp, #12
    3e44:	af00      	add	r7, sp, #0
    3e46:	4604      	mov	r4, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    3e48:	4601      	mov	r1, r0
    3e4a:	4822      	ldr	r0, [pc, #136]	; (3ed4 <cdc_acm_int_in+0x94>)
    3e4c:	f009 fd32 	bl	d8b4 <usb_get_dev_data_by_ep>
	if (common == NULL) {
    3e50:	b128      	cbz	r0, 3e5e <cdc_acm_int_in+0x1e>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
    3e52:	2201      	movs	r2, #1
    3e54:	f800 2c07 	strb.w	r2, [r0, #-7]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
    3e58:	370c      	adds	r7, #12
    3e5a:	46bd      	mov	sp, r7
    3e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("Device data not found for endpoint %u", ep);
    3e5e:	466d      	mov	r5, sp
    3e60:	b088      	sub	sp, #32
    3e62:	466b      	mov	r3, sp
    3e64:	f113 0210 	adds.w	r2, r3, #16
    3e68:	d02d      	beq.n	3ec6 <cdc_acm_int_in+0x86>
    3e6a:	210c      	movs	r1, #12
    3e6c:	b13a      	cbz	r2, 3e7e <cdc_acm_int_in+0x3e>
    3e6e:	4608      	mov	r0, r1
    3e70:	2904      	cmp	r1, #4
    3e72:	dd01      	ble.n	3e78 <cdc_acm_int_in+0x38>
    3e74:	4e18      	ldr	r6, [pc, #96]	; (3ed8 <cdc_acm_int_in+0x98>)
    3e76:	615e      	str	r6, [r3, #20]
    3e78:	2808      	cmp	r0, #8
    3e7a:	dd00      	ble.n	3e7e <cdc_acm_int_in+0x3e>
    3e7c:	619c      	str	r4, [r3, #24]
    3e7e:	290b      	cmp	r1, #11
    3e80:	dd24      	ble.n	3ecc <cdc_acm_int_in+0x8c>
    3e82:	240c      	movs	r4, #12
    3e84:	b13a      	cbz	r2, 3e96 <cdc_acm_int_in+0x56>
    3e86:	2103      	movs	r1, #3
    3e88:	7139      	strb	r1, [r7, #4]
    3e8a:	2100      	movs	r1, #0
    3e8c:	7179      	strb	r1, [r7, #5]
    3e8e:	71b9      	strb	r1, [r7, #6]
    3e90:	71f9      	strb	r1, [r7, #7]
    3e92:	6878      	ldr	r0, [r7, #4]
    3e94:	6118      	str	r0, [r3, #16]
    3e96:	2100      	movs	r1, #0
    3e98:	f36f 0100 	bfc	r1, #0, #1
    3e9c:	f36f 0141 	bfc	r1, #1, #1
    3ea0:	f36f 0182 	bfc	r1, #2, #1
    3ea4:	f36f 01c5 	bfc	r1, #3, #3
    3ea8:	2302      	movs	r3, #2
    3eaa:	f363 1188 	bfi	r1, r3, #6, #3
    3eae:	f3c4 040a 	ubfx	r4, r4, #0, #11
    3eb2:	f364 2153 	bfi	r1, r4, #9, #11
    3eb6:	f36f 511f 	bfc	r1, #20, #12
    3eba:	2300      	movs	r3, #0
    3ebc:	4807      	ldr	r0, [pc, #28]	; (3edc <cdc_acm_int_in+0x9c>)
    3ebe:	f7fd ff63 	bl	1d88 <z_impl_z_log_msg_static_create>
    3ec2:	46ad      	mov	sp, r5
		return;
    3ec4:	e7c8      	b.n	3e58 <cdc_acm_int_in+0x18>
		LOG_WRN("Device data not found for endpoint %u", ep);
    3ec6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3eca:	e7cf      	b.n	3e6c <cdc_acm_int_in+0x2c>
    3ecc:	f06f 041b 	mvn.w	r4, #27
    3ed0:	e7d8      	b.n	3e84 <cdc_acm_int_in+0x44>
    3ed2:	bf00      	nop
    3ed4:	200012f0 	.word	0x200012f0
    3ed8:	00010628 	.word	0x00010628
    3edc:	0000feac 	.word	0x0000feac

00003ee0 <cdc_acm_irq_rx_enable>:
 * @brief Enable RX interrupt
 *
 * @param dev CDC ACM device struct.
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
    3ee0:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    3ee2:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
    3ee4:	2301      	movs	r3, #1
    3ee6:	f881 304b 	strb.w	r3, [r1, #75]	; 0x4b

	if (dev_data->cb && dev_data->rx_ready) {
    3eea:	680b      	ldr	r3, [r1, #0]
    3eec:	b113      	cbz	r3, 3ef4 <cdc_acm_irq_rx_enable+0x14>
    3eee:	f891 3049 	ldrb.w	r3, [r1, #73]	; 0x49
    3ef2:	b903      	cbnz	r3, 3ef6 <cdc_acm_irq_rx_enable+0x16>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
	}
}
    3ef4:	bd08      	pop	{r3, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    3ef6:	3108      	adds	r1, #8
    3ef8:	4801      	ldr	r0, [pc, #4]	; (3f00 <cdc_acm_irq_rx_enable+0x20>)
    3efa:	f00b fb17 	bl	f52c <k_work_submit_to_queue>
}
    3efe:	e7f9      	b.n	3ef4 <cdc_acm_irq_rx_enable+0x14>
    3f00:	20000840 	.word	0x20000840

00003f04 <cdc_acm_irq_tx_enable>:
{
    3f04:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    3f06:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    3f08:	2301      	movs	r3, #1
    3f0a:	f881 304a 	strb.w	r3, [r1, #74]	; 0x4a
	if (dev_data->cb && dev_data->tx_ready) {
    3f0e:	680b      	ldr	r3, [r1, #0]
    3f10:	b113      	cbz	r3, 3f18 <cdc_acm_irq_tx_enable+0x14>
    3f12:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
    3f16:	b903      	cbnz	r3, 3f1a <cdc_acm_irq_tx_enable+0x16>
}
    3f18:	bd08      	pop	{r3, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    3f1a:	3108      	adds	r1, #8
    3f1c:	4801      	ldr	r0, [pc, #4]	; (3f24 <cdc_acm_irq_tx_enable+0x20>)
    3f1e:	f00b fb05 	bl	f52c <k_work_submit_to_queue>
}
    3f22:	e7f9      	b.n	3f18 <cdc_acm_irq_tx_enable+0x14>
    3f24:	20000840 	.word	0x20000840

00003f28 <cdc_acm_read_cb>:
{
    3f28:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f2a:	b085      	sub	sp, #20
    3f2c:	af02      	add	r7, sp, #8
    3f2e:	4606      	mov	r6, r0
    3f30:	4614      	mov	r4, r2
	if (size <= 0) {
    3f32:	1e0d      	subs	r5, r1, #0
    3f34:	dd51      	ble.n	3fda <cdc_acm_read_cb+0xb2>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    3f36:	462a      	mov	r2, r5
    3f38:	f104 014c 	add.w	r1, r4, #76	; 0x4c
    3f3c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    3f40:	f008 fe6e 	bl	cc20 <ring_buf_put>
	if (wrote < size) {
    3f44:	4285      	cmp	r5, r0
    3f46:	d937      	bls.n	3fb8 <cdc_acm_read_cb+0x90>
		LOG_ERR("Ring buffer full, drop %zd bytes", size - wrote);
    3f48:	1a29      	subs	r1, r5, r0
    3f4a:	466d      	mov	r5, sp
    3f4c:	b088      	sub	sp, #32
    3f4e:	ab02      	add	r3, sp, #8
    3f50:	f113 0210 	adds.w	r2, r3, #16
    3f54:	d04e      	beq.n	3ff4 <cdc_acm_read_cb+0xcc>
    3f56:	200c      	movs	r0, #12
    3f58:	b152      	cbz	r2, 3f70 <cdc_acm_read_cb+0x48>
    3f5a:	4684      	mov	ip, r0
    3f5c:	2804      	cmp	r0, #4
    3f5e:	dd03      	ble.n	3f68 <cdc_acm_read_cb+0x40>
    3f60:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 4014 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14>
    3f64:	f8c3 e014 	str.w	lr, [r3, #20]
    3f68:	f1bc 0f08 	cmp.w	ip, #8
    3f6c:	dd00      	ble.n	3f70 <cdc_acm_read_cb+0x48>
    3f6e:	6199      	str	r1, [r3, #24]
    3f70:	280b      	cmp	r0, #11
    3f72:	dd42      	ble.n	3ffa <cdc_acm_read_cb+0xd2>
    3f74:	f04f 0c0c 	mov.w	ip, #12
    3f78:	b13a      	cbz	r2, 3f8a <cdc_acm_read_cb+0x62>
    3f7a:	2103      	movs	r1, #3
    3f7c:	7139      	strb	r1, [r7, #4]
    3f7e:	2100      	movs	r1, #0
    3f80:	7179      	strb	r1, [r7, #5]
    3f82:	71b9      	strb	r1, [r7, #6]
    3f84:	71f9      	strb	r1, [r7, #7]
    3f86:	6878      	ldr	r0, [r7, #4]
    3f88:	6118      	str	r0, [r3, #16]
    3f8a:	2100      	movs	r1, #0
    3f8c:	f36f 0100 	bfc	r1, #0, #1
    3f90:	f36f 0141 	bfc	r1, #1, #1
    3f94:	f36f 0182 	bfc	r1, #2, #1
    3f98:	f36f 01c5 	bfc	r1, #3, #3
    3f9c:	2301      	movs	r3, #1
    3f9e:	f363 1188 	bfi	r1, r3, #6, #3
    3fa2:	f3cc 030a 	ubfx	r3, ip, #0, #11
    3fa6:	f363 2153 	bfi	r1, r3, #9, #11
    3faa:	f36f 511f 	bfc	r1, #20, #12
    3fae:	2300      	movs	r3, #0
    3fb0:	4819      	ldr	r0, [pc, #100]	; (4018 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x18>)
    3fb2:	f7fd fee9 	bl	1d88 <z_impl_z_log_msg_static_create>
    3fb6:	46ad      	mov	sp, r5
	dev_data->rx_ready = true;
    3fb8:	2301      	movs	r3, #1
    3fba:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	if (dev_data->cb && dev_data->rx_irq_ena) {
    3fbe:	6823      	ldr	r3, [r4, #0]
    3fc0:	b113      	cbz	r3, 3fc8 <cdc_acm_read_cb+0xa0>
    3fc2:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    3fc6:	b9db      	cbnz	r3, 4000 <CONFIG_COVERAGE_GCOV_HEAP_SIZE>
	if (ring_buf_space_get(dev_data->rx_ringbuf) < sizeof(dev_data->rx_buf)) {
    3fc8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
	return buf->size - (buf->put_head - buf->get_tail);
    3fcc:	69cb      	ldr	r3, [r1, #28]
    3fce:	684a      	ldr	r2, [r1, #4]
    3fd0:	6949      	ldr	r1, [r1, #20]
    3fd2:	1a52      	subs	r2, r2, r1
    3fd4:	1a9b      	subs	r3, r3, r2
    3fd6:	2b3f      	cmp	r3, #63	; 0x3f
    3fd8:	d918      	bls.n	400c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc>
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    3fda:	9401      	str	r4, [sp, #4]
    3fdc:	4b0f      	ldr	r3, [pc, #60]	; (401c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c>)
    3fde:	9300      	str	r3, [sp, #0]
    3fe0:	2301      	movs	r3, #1
    3fe2:	2240      	movs	r2, #64	; 0x40
    3fe4:	f104 014c 	add.w	r1, r4, #76	; 0x4c
    3fe8:	4630      	mov	r0, r6
    3fea:	f7ff fd6b 	bl	3ac4 <usb_transfer>
}
    3fee:	370c      	adds	r7, #12
    3ff0:	46bd      	mov	sp, r7
    3ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Ring buffer full, drop %zd bytes", size - wrote);
    3ff4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    3ff8:	e7ae      	b.n	3f58 <cdc_acm_read_cb+0x30>
    3ffa:	f06f 0c1b 	mvn.w	ip, #27
    3ffe:	e7bb      	b.n	3f78 <cdc_acm_read_cb+0x50>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    4000:	f104 0108 	add.w	r1, r4, #8
    4004:	4806      	ldr	r0, [pc, #24]	; (4020 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x20>)
    4006:	f00b fa91 	bl	f52c <k_work_submit_to_queue>
    400a:	e7dd      	b.n	3fc8 <cdc_acm_read_cb+0xa0>
		dev_data->rx_paused = true;
    400c:	2301      	movs	r3, #1
    400e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
		return;
    4012:	e7ec      	b.n	3fee <cdc_acm_read_cb+0xc6>
    4014:	00010650 	.word	0x00010650
    4018:	0000feac 	.word	0x0000feac
    401c:	00003f29 	.word	0x00003f29
    4020:	20000840 	.word	0x20000840

00004024 <cdc_acm_reset_port>:
{
    4024:	b508      	push	{r3, lr}
    4026:	4603      	mov	r3, r0
	dev_data->configured = false;
    4028:	f04f 0c00 	mov.w	ip, #0
    402c:	f880 c09e 	strb.w	ip, [r0, #158]	; 0x9e
	dev_data->suspended = false;
    4030:	f880 c09f 	strb.w	ip, [r0, #159]	; 0x9f
	dev_data->rx_ready = false;
    4034:	f880 c049 	strb.w	ip, [r0, #73]	; 0x49
	dev_data->tx_ready = false;
    4038:	f880 c048 	strb.w	ip, [r0, #72]	; 0x48
	dev_data->line_coding = (struct cdc_acm_line_coding)
    403c:	4a0b      	ldr	r2, [pc, #44]	; (406c <cdc_acm_reset_port+0x48>)
    403e:	e892 0003 	ldmia.w	r2, {r0, r1}
    4042:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    4046:	f8a3 1098 	strh.w	r1, [r3, #152]	; 0x98
    404a:	0c09      	lsrs	r1, r1, #16
    404c:	f883 109a 	strb.w	r1, [r3, #154]	; 0x9a
	dev_data->serial_state = 0;
    4050:	f883 c09c 	strb.w	ip, [r3, #156]	; 0x9c
	dev_data->line_state = 0;
    4054:	f883 c09b 	strb.w	ip, [r3, #155]	; 0x9b
	dev_data->rx_paused = false;
    4058:	f883 c0a0 	strb.w	ip, [r3, #160]	; 0xa0
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    405c:	2240      	movs	r2, #64	; 0x40
    405e:	4661      	mov	r1, ip
    4060:	f103 004c 	add.w	r0, r3, #76	; 0x4c
    4064:	f009 fed9 	bl	de1a <memset>
}
    4068:	bd08      	pop	{r3, pc}
    406a:	bf00      	nop
    406c:	0000ff40 	.word	0x0000ff40

00004070 <cdc_acm_do_cb>:
{
    4070:	b530      	push	{r4, r5, lr}
    4072:	b0a1      	sub	sp, #132	; 0x84
    4074:	4604      	mov	r4, r0
	const struct device *dev = dev_data->common.dev;
    4076:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
	struct usb_cfg_data *cfg = (void *)dev->config;
    407a:	685d      	ldr	r5, [r3, #4]
	switch (status) {
    407c:	3901      	subs	r1, #1
    407e:	2905      	cmp	r1, #5
    4080:	d806      	bhi.n	4090 <cdc_acm_do_cb+0x20>
    4082:	e8df f001 	tbb	[pc, r1]
    4086:	0503      	.short	0x0503
    4088:	99724b07 	.word	0x99724b07
		cdc_acm_reset_port(dev_data);
    408c:	f7ff ffca 	bl	4024 <cdc_acm_reset_port>
}
    4090:	b021      	add	sp, #132	; 0x84
    4092:	bd30      	pop	{r4, r5, pc}
		LOG_INF("Device configured");
    4094:	4b70      	ldr	r3, [pc, #448]	; (4258 <cdc_acm_do_cb+0x1e8>)
    4096:	931f      	str	r3, [sp, #124]	; 0x7c
    4098:	2302      	movs	r3, #2
    409a:	f88d 3004 	strb.w	r3, [sp, #4]
    409e:	2300      	movs	r3, #0
    40a0:	f88d 3005 	strb.w	r3, [sp, #5]
    40a4:	f88d 3006 	strb.w	r3, [sp, #6]
    40a8:	f88d 3007 	strb.w	r3, [sp, #7]
    40ac:	9a01      	ldr	r2, [sp, #4]
    40ae:	921e      	str	r2, [sp, #120]	; 0x78
    40b0:	4619      	mov	r1, r3
    40b2:	f363 0100 	bfi	r1, r3, #0, #1
    40b6:	f363 0141 	bfi	r1, r3, #1, #1
    40ba:	f363 0182 	bfi	r1, r3, #2, #1
    40be:	f363 01c5 	bfi	r1, r3, #3, #3
    40c2:	2203      	movs	r2, #3
    40c4:	f362 1188 	bfi	r1, r2, #6, #3
    40c8:	2208      	movs	r2, #8
    40ca:	f362 2153 	bfi	r1, r2, #9, #11
    40ce:	f363 511f 	bfi	r1, r3, #20, #12
    40d2:	aa1e      	add	r2, sp, #120	; 0x78
    40d4:	4861      	ldr	r0, [pc, #388]	; (425c <cdc_acm_do_cb+0x1ec>)
    40d6:	f7fd fe57 	bl	1d88 <z_impl_z_log_msg_static_create>
		if (!dev_data->configured) {
    40da:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
    40de:	b19b      	cbz	r3, 4108 <cdc_acm_do_cb+0x98>
		if (!dev_data->tx_ready) {
    40e0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    40e4:	2b00      	cmp	r3, #0
    40e6:	d1d3      	bne.n	4090 <cdc_acm_do_cb+0x20>
			dev_data->tx_ready = true;
    40e8:	2301      	movs	r3, #1
    40ea:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    40ee:	6823      	ldr	r3, [r4, #0]
    40f0:	2b00      	cmp	r3, #0
    40f2:	d0cd      	beq.n	4090 <cdc_acm_do_cb+0x20>
    40f4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
    40f8:	2b00      	cmp	r3, #0
    40fa:	d0c9      	beq.n	4090 <cdc_acm_do_cb+0x20>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    40fc:	f104 0108 	add.w	r1, r4, #8
    4100:	4857      	ldr	r0, [pc, #348]	; (4260 <cdc_acm_do_cb+0x1f0>)
    4102:	f00b fa13 	bl	f52c <k_work_submit_to_queue>
    4106:	e7c3      	b.n	4090 <cdc_acm_do_cb+0x20>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    4108:	6a2b      	ldr	r3, [r5, #32]
    410a:	4622      	mov	r2, r4
    410c:	2100      	movs	r1, #0
    410e:	7b18      	ldrb	r0, [r3, #12]
    4110:	f7ff ff0a 	bl	3f28 <cdc_acm_read_cb>
			dev_data->configured = true;
    4114:	2301      	movs	r3, #1
    4116:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
    411a:	e7e1      	b.n	40e0 <cdc_acm_do_cb+0x70>
		LOG_INF("Device disconnected");
    411c:	4b51      	ldr	r3, [pc, #324]	; (4264 <cdc_acm_do_cb+0x1f4>)
    411e:	9319      	str	r3, [sp, #100]	; 0x64
    4120:	2302      	movs	r3, #2
    4122:	f88d 3004 	strb.w	r3, [sp, #4]
    4126:	2300      	movs	r3, #0
    4128:	f88d 3005 	strb.w	r3, [sp, #5]
    412c:	f88d 3006 	strb.w	r3, [sp, #6]
    4130:	f88d 3007 	strb.w	r3, [sp, #7]
    4134:	9a01      	ldr	r2, [sp, #4]
    4136:	9218      	str	r2, [sp, #96]	; 0x60
    4138:	4619      	mov	r1, r3
    413a:	f363 0100 	bfi	r1, r3, #0, #1
    413e:	f363 0141 	bfi	r1, r3, #1, #1
    4142:	f363 0182 	bfi	r1, r3, #2, #1
    4146:	f363 01c5 	bfi	r1, r3, #3, #3
    414a:	2203      	movs	r2, #3
    414c:	f362 1188 	bfi	r1, r2, #6, #3
    4150:	2208      	movs	r2, #8
    4152:	f362 2153 	bfi	r1, r2, #9, #11
    4156:	f363 511f 	bfi	r1, r3, #20, #12
    415a:	aa18      	add	r2, sp, #96	; 0x60
    415c:	483f      	ldr	r0, [pc, #252]	; (425c <cdc_acm_do_cb+0x1ec>)
    415e:	f7fd fe13 	bl	1d88 <z_impl_z_log_msg_static_create>
		cdc_acm_reset_port(dev_data);
    4162:	4620      	mov	r0, r4
    4164:	f7ff ff5e 	bl	4024 <cdc_acm_reset_port>
		break;
    4168:	e792      	b.n	4090 <cdc_acm_do_cb+0x20>
		LOG_INF("Device suspended");
    416a:	4b3f      	ldr	r3, [pc, #252]	; (4268 <cdc_acm_do_cb+0x1f8>)
    416c:	9313      	str	r3, [sp, #76]	; 0x4c
    416e:	2302      	movs	r3, #2
    4170:	f88d 3004 	strb.w	r3, [sp, #4]
    4174:	2300      	movs	r3, #0
    4176:	f88d 3005 	strb.w	r3, [sp, #5]
    417a:	f88d 3006 	strb.w	r3, [sp, #6]
    417e:	f88d 3007 	strb.w	r3, [sp, #7]
    4182:	9a01      	ldr	r2, [sp, #4]
    4184:	9212      	str	r2, [sp, #72]	; 0x48
    4186:	4619      	mov	r1, r3
    4188:	f363 0100 	bfi	r1, r3, #0, #1
    418c:	f363 0141 	bfi	r1, r3, #1, #1
    4190:	f363 0182 	bfi	r1, r3, #2, #1
    4194:	f363 01c5 	bfi	r1, r3, #3, #3
    4198:	2203      	movs	r2, #3
    419a:	f362 1188 	bfi	r1, r2, #6, #3
    419e:	2208      	movs	r2, #8
    41a0:	f362 2153 	bfi	r1, r2, #9, #11
    41a4:	f363 511f 	bfi	r1, r3, #20, #12
    41a8:	aa12      	add	r2, sp, #72	; 0x48
    41aa:	482c      	ldr	r0, [pc, #176]	; (425c <cdc_acm_do_cb+0x1ec>)
    41ac:	f7fd fdec 	bl	1d88 <z_impl_z_log_msg_static_create>
		dev_data->suspended = true;
    41b0:	2301      	movs	r3, #1
    41b2:	f884 309f 	strb.w	r3, [r4, #159]	; 0x9f
		break;
    41b6:	e76b      	b.n	4090 <cdc_acm_do_cb+0x20>
		LOG_INF("Device resumed");
    41b8:	4b2c      	ldr	r3, [pc, #176]	; (426c <cdc_acm_do_cb+0x1fc>)
    41ba:	9307      	str	r3, [sp, #28]
    41bc:	2302      	movs	r3, #2
    41be:	f88d 3004 	strb.w	r3, [sp, #4]
    41c2:	2300      	movs	r3, #0
    41c4:	f88d 3005 	strb.w	r3, [sp, #5]
    41c8:	f88d 3006 	strb.w	r3, [sp, #6]
    41cc:	f88d 3007 	strb.w	r3, [sp, #7]
    41d0:	9a01      	ldr	r2, [sp, #4]
    41d2:	9206      	str	r2, [sp, #24]
    41d4:	4619      	mov	r1, r3
    41d6:	f363 0100 	bfi	r1, r3, #0, #1
    41da:	f363 0141 	bfi	r1, r3, #1, #1
    41de:	f363 0182 	bfi	r1, r3, #2, #1
    41e2:	f363 01c5 	bfi	r1, r3, #3, #3
    41e6:	2203      	movs	r2, #3
    41e8:	f362 1188 	bfi	r1, r2, #6, #3
    41ec:	2208      	movs	r2, #8
    41ee:	f362 2153 	bfi	r1, r2, #9, #11
    41f2:	f363 511f 	bfi	r1, r3, #20, #12
    41f6:	aa06      	add	r2, sp, #24
    41f8:	4818      	ldr	r0, [pc, #96]	; (425c <cdc_acm_do_cb+0x1ec>)
    41fa:	f7fd fdc5 	bl	1d88 <z_impl_z_log_msg_static_create>
		if (dev_data->suspended) {
    41fe:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
    4202:	2b00      	cmp	r3, #0
    4204:	f43f af44 	beq.w	4090 <cdc_acm_do_cb+0x20>
			LOG_INF("from suspend");
    4208:	4b19      	ldr	r3, [pc, #100]	; (4270 <cdc_acm_do_cb+0x200>)
    420a:	930d      	str	r3, [sp, #52]	; 0x34
    420c:	2302      	movs	r3, #2
    420e:	f88d 3004 	strb.w	r3, [sp, #4]
    4212:	2500      	movs	r5, #0
    4214:	f88d 5005 	strb.w	r5, [sp, #5]
    4218:	f88d 5006 	strb.w	r5, [sp, #6]
    421c:	f88d 5007 	strb.w	r5, [sp, #7]
    4220:	9b01      	ldr	r3, [sp, #4]
    4222:	930c      	str	r3, [sp, #48]	; 0x30
    4224:	4629      	mov	r1, r5
    4226:	f365 0100 	bfi	r1, r5, #0, #1
    422a:	f365 0141 	bfi	r1, r5, #1, #1
    422e:	f365 0182 	bfi	r1, r5, #2, #1
    4232:	f365 01c5 	bfi	r1, r5, #3, #3
    4236:	2303      	movs	r3, #3
    4238:	f363 1188 	bfi	r1, r3, #6, #3
    423c:	2308      	movs	r3, #8
    423e:	f363 2153 	bfi	r1, r3, #9, #11
    4242:	f365 511f 	bfi	r1, r5, #20, #12
    4246:	462b      	mov	r3, r5
    4248:	aa0c      	add	r2, sp, #48	; 0x30
    424a:	4804      	ldr	r0, [pc, #16]	; (425c <cdc_acm_do_cb+0x1ec>)
    424c:	f7fd fd9c 	bl	1d88 <z_impl_z_log_msg_static_create>
			dev_data->suspended = false;
    4250:	f884 509f 	strb.w	r5, [r4, #159]	; 0x9f
}
    4254:	e71c      	b.n	4090 <cdc_acm_do_cb+0x20>
    4256:	bf00      	nop
    4258:	00010674 	.word	0x00010674
    425c:	0000feac 	.word	0x0000feac
    4260:	20000840 	.word	0x20000840
    4264:	00010688 	.word	0x00010688
    4268:	0001069c 	.word	0x0001069c
    426c:	000106b0 	.word	0x000106b0
    4270:	000106c0 	.word	0x000106c0

00004274 <cdc_acm_dev_status_cb>:
{
    4274:	b5f0      	push	{r4, r5, r6, r7, lr}
    4276:	b083      	sub	sp, #12
    4278:	af00      	add	r7, sp, #0
    427a:	4604      	mov	r4, r0
    427c:	460d      	mov	r5, r1
    427e:	4616      	mov	r6, r2
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    4280:	4601      	mov	r1, r0
    4282:	4823      	ldr	r0, [pc, #140]	; (4310 <cdc_acm_dev_status_cb+0x9c>)
    4284:	f009 faf0 	bl	d868 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    4288:	b138      	cbz	r0, 429a <cdc_acm_dev_status_cb+0x26>
	cdc_acm_do_cb(dev_data, status, param);
    428a:	4632      	mov	r2, r6
    428c:	4629      	mov	r1, r5
    428e:	38a4      	subs	r0, #164	; 0xa4
    4290:	f7ff feee 	bl	4070 <cdc_acm_do_cb>
}
    4294:	370c      	adds	r7, #12
    4296:	46bd      	mov	sp, r7
    4298:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("Device data not found for cfg %p", cfg);
    429a:	466d      	mov	r5, sp
    429c:	b088      	sub	sp, #32
    429e:	466b      	mov	r3, sp
    42a0:	f113 0210 	adds.w	r2, r3, #16
    42a4:	d02d      	beq.n	4302 <cdc_acm_dev_status_cb+0x8e>
    42a6:	210c      	movs	r1, #12
    42a8:	b13a      	cbz	r2, 42ba <cdc_acm_dev_status_cb+0x46>
    42aa:	4608      	mov	r0, r1
    42ac:	2904      	cmp	r1, #4
    42ae:	dd01      	ble.n	42b4 <cdc_acm_dev_status_cb+0x40>
    42b0:	4e18      	ldr	r6, [pc, #96]	; (4314 <cdc_acm_dev_status_cb+0xa0>)
    42b2:	615e      	str	r6, [r3, #20]
    42b4:	2808      	cmp	r0, #8
    42b6:	dd00      	ble.n	42ba <cdc_acm_dev_status_cb+0x46>
    42b8:	619c      	str	r4, [r3, #24]
    42ba:	290b      	cmp	r1, #11
    42bc:	dd24      	ble.n	4308 <cdc_acm_dev_status_cb+0x94>
    42be:	240c      	movs	r4, #12
    42c0:	b13a      	cbz	r2, 42d2 <cdc_acm_dev_status_cb+0x5e>
    42c2:	2103      	movs	r1, #3
    42c4:	7139      	strb	r1, [r7, #4]
    42c6:	2100      	movs	r1, #0
    42c8:	7179      	strb	r1, [r7, #5]
    42ca:	71b9      	strb	r1, [r7, #6]
    42cc:	71f9      	strb	r1, [r7, #7]
    42ce:	6878      	ldr	r0, [r7, #4]
    42d0:	6118      	str	r0, [r3, #16]
    42d2:	2100      	movs	r1, #0
    42d4:	f36f 0100 	bfc	r1, #0, #1
    42d8:	f36f 0141 	bfc	r1, #1, #1
    42dc:	f36f 0182 	bfc	r1, #2, #1
    42e0:	f36f 01c5 	bfc	r1, #3, #3
    42e4:	2302      	movs	r3, #2
    42e6:	f363 1188 	bfi	r1, r3, #6, #3
    42ea:	f3c4 030a 	ubfx	r3, r4, #0, #11
    42ee:	f363 2153 	bfi	r1, r3, #9, #11
    42f2:	f36f 511f 	bfc	r1, #20, #12
    42f6:	2300      	movs	r3, #0
    42f8:	4807      	ldr	r0, [pc, #28]	; (4318 <cdc_acm_dev_status_cb+0xa4>)
    42fa:	f7fd fd45 	bl	1d88 <z_impl_z_log_msg_static_create>
    42fe:	46ad      	mov	sp, r5
		return;
    4300:	e7c8      	b.n	4294 <cdc_acm_dev_status_cb+0x20>
		LOG_WRN("Device data not found for cfg %p", cfg);
    4302:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    4306:	e7cf      	b.n	42a8 <cdc_acm_dev_status_cb+0x34>
    4308:	f06f 041b 	mvn.w	r4, #27
    430c:	e7d8      	b.n	42c0 <cdc_acm_dev_status_cb+0x4c>
    430e:	bf00      	nop
    4310:	200012f0 	.word	0x200012f0
    4314:	000106d0 	.word	0x000106d0
    4318:	0000feac 	.word	0x0000feac

0000431c <cdc_acm_send_notification>:
 * @retval 0 on success.
 * @retval -EIO if timed out.
 */
static int cdc_acm_send_notification(const struct device *dev,
				     uint16_t serial_state)
{
    431c:	b530      	push	{r4, r5, lr}
    431e:	b085      	sub	sp, #20
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    4320:	6905      	ldr	r5, [r0, #16]
	struct usb_cfg_data * const cfg = (void *)dev->config;
    4322:	6843      	ldr	r3, [r0, #4]
	struct cdc_acm_notification notification;
	uint32_t cnt = 0U;

	notification.bmRequestType = 0xA1;
    4324:	22a1      	movs	r2, #161	; 0xa1
    4326:	f88d 2004 	strb.w	r2, [sp, #4]
	notification.bNotificationType = 0x20;
    432a:	2220      	movs	r2, #32
    432c:	f88d 2005 	strb.w	r2, [sp, #5]
	notification.wValue = 0U;
    4330:	2400      	movs	r4, #0
    4332:	f8ad 4006 	strh.w	r4, [sp, #6]
	notification.wIndex = 0U;
    4336:	f8ad 4008 	strh.w	r4, [sp, #8]
	notification.wLength = sys_cpu_to_le16(sizeof(serial_state));
    433a:	2202      	movs	r2, #2
    433c:	f8ad 200a 	strh.w	r2, [sp, #10]
	notification.data = sys_cpu_to_le16(serial_state);
    4340:	f8ad 100c 	strh.w	r1, [sp, #12]

	dev_data->notification_sent = 0U;
    4344:	f885 409d 	strb.w	r4, [r5, #157]	; 0x9d

	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    4348:	6a18      	ldr	r0, [r3, #32]
    434a:	4623      	mov	r3, r4
    434c:	220a      	movs	r2, #10
    434e:	a901      	add	r1, sp, #4
    4350:	7900      	ldrb	r0, [r0, #4]
    4352:	f009 f9fb 	bl	d74c <usb_write>
		  (const uint8_t *)&notification, sizeof(notification), NULL);

	/* Wait for notification to be sent */
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    4356:	f895 309d 	ldrb.w	r3, [r5, #157]	; 0x9d
    435a:	b94b      	cbnz	r3, 4370 <cdc_acm_send_notification+0x54>
	z_impl_k_busy_wait(usec_to_wait);
    435c:	2001      	movs	r0, #1
    435e:	f00b fb1d 	bl	f99c <z_impl_k_busy_wait>
		k_busy_wait(1);

		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    4362:	3401      	adds	r4, #1
    4364:	4b04      	ldr	r3, [pc, #16]	; (4378 <cdc_acm_send_notification+0x5c>)
    4366:	429c      	cmp	r4, r3
    4368:	d9f5      	bls.n	4356 <cdc_acm_send_notification+0x3a>
			LOG_DBG("CDC ACM notification timeout!");
			return -EIO;
    436a:	f06f 0004 	mvn.w	r0, #4
    436e:	e000      	b.n	4372 <cdc_acm_send_notification+0x56>
		}
	}

	return 0;
    4370:	2000      	movs	r0, #0
}
    4372:	b005      	add	sp, #20
    4374:	bd30      	pop	{r4, r5, pc}
    4376:	bf00      	nop
    4378:	000186a0 	.word	0x000186a0

0000437c <cdc_acm_fifo_fill>:
{
    437c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4380:	b082      	sub	sp, #8
    4382:	af00      	add	r7, sp, #0
    4384:	4614      	mov	r4, r2
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    4386:	6906      	ldr	r6, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    4388:	f896 309e 	ldrb.w	r3, [r6, #158]	; 0x9e
    438c:	b11b      	cbz	r3, 4396 <cdc_acm_fifo_fill+0x1a>
    438e:	f896 309f 	ldrb.w	r3, [r6, #159]	; 0x9f
    4392:	2b00      	cmp	r3, #0
    4394:	d03d      	beq.n	4412 <cdc_acm_fifo_fill+0x96>
		LOG_WRN("Device not configured or suspended, drop %d bytes",
    4396:	466d      	mov	r5, sp
    4398:	b088      	sub	sp, #32
    439a:	466b      	mov	r3, sp
    439c:	f113 0210 	adds.w	r2, r3, #16
    43a0:	d031      	beq.n	4406 <cdc_acm_fifo_fill+0x8a>
    43a2:	210c      	movs	r1, #12
    43a4:	b13a      	cbz	r2, 43b6 <cdc_acm_fifo_fill+0x3a>
    43a6:	4608      	mov	r0, r1
    43a8:	2904      	cmp	r1, #4
    43aa:	dd01      	ble.n	43b0 <cdc_acm_fifo_fill+0x34>
    43ac:	4e40      	ldr	r6, [pc, #256]	; (44b0 <cdc_acm_fifo_fill+0x134>)
    43ae:	615e      	str	r6, [r3, #20]
    43b0:	2808      	cmp	r0, #8
    43b2:	dd00      	ble.n	43b6 <cdc_acm_fifo_fill+0x3a>
    43b4:	619c      	str	r4, [r3, #24]
    43b6:	290b      	cmp	r1, #11
    43b8:	dd28      	ble.n	440c <cdc_acm_fifo_fill+0x90>
    43ba:	240c      	movs	r4, #12
    43bc:	b13a      	cbz	r2, 43ce <cdc_acm_fifo_fill+0x52>
    43be:	2103      	movs	r1, #3
    43c0:	7139      	strb	r1, [r7, #4]
    43c2:	2100      	movs	r1, #0
    43c4:	7179      	strb	r1, [r7, #5]
    43c6:	71b9      	strb	r1, [r7, #6]
    43c8:	71f9      	strb	r1, [r7, #7]
    43ca:	6878      	ldr	r0, [r7, #4]
    43cc:	6118      	str	r0, [r3, #16]
    43ce:	2100      	movs	r1, #0
    43d0:	f36f 0100 	bfc	r1, #0, #1
    43d4:	f36f 0141 	bfc	r1, #1, #1
    43d8:	f36f 0182 	bfc	r1, #2, #1
    43dc:	f36f 01c5 	bfc	r1, #3, #3
    43e0:	2302      	movs	r3, #2
    43e2:	f363 1188 	bfi	r1, r3, #6, #3
    43e6:	f3c4 030a 	ubfx	r3, r4, #0, #11
    43ea:	f363 2153 	bfi	r1, r3, #9, #11
    43ee:	f36f 511f 	bfc	r1, #20, #12
    43f2:	2300      	movs	r3, #0
    43f4:	482f      	ldr	r0, [pc, #188]	; (44b4 <cdc_acm_fifo_fill+0x138>)
    43f6:	f7fd fcc7 	bl	1d88 <z_impl_z_log_msg_static_create>
    43fa:	46ad      	mov	sp, r5
		return 0;
    43fc:	2000      	movs	r0, #0
}
    43fe:	3708      	adds	r7, #8
    4400:	46bd      	mov	sp, r7
    4402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("Device not configured or suspended, drop %d bytes",
    4406:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    440a:	e7cb      	b.n	43a4 <cdc_acm_fifo_fill+0x28>
    440c:	f06f 041b 	mvn.w	r4, #27
    4410:	e7d4      	b.n	43bc <cdc_acm_fifo_fill+0x40>
	dev_data->tx_ready = false;
    4412:	2300      	movs	r3, #0
    4414:	f886 3048 	strb.w	r3, [r6, #72]	; 0x48
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    4418:	f8d6 0090 	ldr.w	r0, [r6, #144]	; 0x90
    441c:	f008 fc00 	bl	cc20 <ring_buf_put>
    4420:	4605      	mov	r5, r0
	if (wrote < len) {
    4422:	42a0      	cmp	r0, r4
    4424:	d235      	bcs.n	4492 <cdc_acm_fifo_fill+0x116>
		LOG_WRN("Ring buffer full, drop %zd bytes", len - wrote);
    4426:	1a24      	subs	r4, r4, r0
    4428:	46e8      	mov	r8, sp
    442a:	b088      	sub	sp, #32
    442c:	466b      	mov	r3, sp
    442e:	f113 0210 	adds.w	r2, r3, #16
    4432:	d037      	beq.n	44a4 <cdc_acm_fifo_fill+0x128>
    4434:	210c      	movs	r1, #12
    4436:	b14a      	cbz	r2, 444c <cdc_acm_fifo_fill+0xd0>
    4438:	4608      	mov	r0, r1
    443a:	2904      	cmp	r1, #4
    443c:	dd03      	ble.n	4446 <cdc_acm_fifo_fill+0xca>
    443e:	f8df c078 	ldr.w	ip, [pc, #120]	; 44b8 <cdc_acm_fifo_fill+0x13c>
    4442:	f8c3 c014 	str.w	ip, [r3, #20]
    4446:	2808      	cmp	r0, #8
    4448:	dd00      	ble.n	444c <cdc_acm_fifo_fill+0xd0>
    444a:	619c      	str	r4, [r3, #24]
    444c:	290b      	cmp	r1, #11
    444e:	dd2c      	ble.n	44aa <cdc_acm_fifo_fill+0x12e>
    4450:	240c      	movs	r4, #12
    4452:	b13a      	cbz	r2, 4464 <cdc_acm_fifo_fill+0xe8>
    4454:	2103      	movs	r1, #3
    4456:	7139      	strb	r1, [r7, #4]
    4458:	2100      	movs	r1, #0
    445a:	7179      	strb	r1, [r7, #5]
    445c:	71b9      	strb	r1, [r7, #6]
    445e:	71f9      	strb	r1, [r7, #7]
    4460:	6878      	ldr	r0, [r7, #4]
    4462:	6118      	str	r0, [r3, #16]
    4464:	2100      	movs	r1, #0
    4466:	f36f 0100 	bfc	r1, #0, #1
    446a:	f36f 0141 	bfc	r1, #1, #1
    446e:	f36f 0182 	bfc	r1, #2, #1
    4472:	f36f 01c5 	bfc	r1, #3, #3
    4476:	2302      	movs	r3, #2
    4478:	f363 1188 	bfi	r1, r3, #6, #3
    447c:	f3c4 030a 	ubfx	r3, r4, #0, #11
    4480:	f363 2153 	bfi	r1, r3, #9, #11
    4484:	f36f 511f 	bfc	r1, #20, #12
    4488:	2300      	movs	r3, #0
    448a:	480a      	ldr	r0, [pc, #40]	; (44b4 <cdc_acm_fifo_fill+0x138>)
    448c:	f7fd fc7c 	bl	1d88 <z_impl_z_log_msg_static_create>
    4490:	46c5      	mov	sp, r8
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    4492:	2200      	movs	r2, #0
    4494:	2300      	movs	r3, #0
    4496:	f106 0118 	add.w	r1, r6, #24
    449a:	4808      	ldr	r0, [pc, #32]	; (44bc <cdc_acm_fifo_fill+0x140>)
    449c:	f00b f85c 	bl	f558 <k_work_schedule_for_queue>
	return wrote;
    44a0:	4628      	mov	r0, r5
    44a2:	e7ac      	b.n	43fe <cdc_acm_fifo_fill+0x82>
		LOG_WRN("Ring buffer full, drop %zd bytes", len - wrote);
    44a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    44a8:	e7c5      	b.n	4436 <cdc_acm_fifo_fill+0xba>
    44aa:	f06f 041b 	mvn.w	r4, #27
    44ae:	e7d0      	b.n	4452 <cdc_acm_fifo_fill+0xd6>
    44b0:	000106f4 	.word	0x000106f4
    44b4:	0000feac 	.word	0x0000feac
    44b8:	00010650 	.word	0x00010650
    44bc:	20000840 	.word	0x20000840

000044c0 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    44c0:	b530      	push	{r4, r5, lr}
    44c2:	b097      	sub	sp, #92	; 0x5c
    44c4:	f88d 1007 	strb.w	r1, [sp, #7]
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    44c8:	6904      	ldr	r4, [r0, #16]

	if (!dev_data->configured || dev_data->suspended) {
    44ca:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
    44ce:	b113      	cbz	r3, 44d6 <cdc_acm_poll_out+0x16>
    44d0:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
    44d4:	b323      	cbz	r3, 4520 <cdc_acm_poll_out+0x60>
		LOG_INF("USB device not ready, drop data");
    44d6:	4b47      	ldr	r3, [pc, #284]	; (45f4 <cdc_acm_poll_out+0x134>)
    44d8:	9315      	str	r3, [sp, #84]	; 0x54
    44da:	2302      	movs	r3, #2
    44dc:	f88d 300c 	strb.w	r3, [sp, #12]
    44e0:	2300      	movs	r3, #0
    44e2:	f88d 300d 	strb.w	r3, [sp, #13]
    44e6:	f88d 300e 	strb.w	r3, [sp, #14]
    44ea:	f88d 300f 	strb.w	r3, [sp, #15]
    44ee:	9a03      	ldr	r2, [sp, #12]
    44f0:	9214      	str	r2, [sp, #80]	; 0x50
    44f2:	4619      	mov	r1, r3
    44f4:	f363 0100 	bfi	r1, r3, #0, #1
    44f8:	f363 0141 	bfi	r1, r3, #1, #1
    44fc:	f363 0182 	bfi	r1, r3, #2, #1
    4500:	f363 01c5 	bfi	r1, r3, #3, #3
    4504:	2203      	movs	r2, #3
    4506:	f362 1188 	bfi	r1, r2, #6, #3
    450a:	2208      	movs	r2, #8
    450c:	f362 2153 	bfi	r1, r2, #9, #11
    4510:	f363 511f 	bfi	r1, r3, #20, #12
    4514:	aa14      	add	r2, sp, #80	; 0x50
    4516:	4838      	ldr	r0, [pc, #224]	; (45f8 <cdc_acm_poll_out+0x138>)
    4518:	f7fd fc36 	bl	1d88 <z_impl_z_log_msg_static_create>
	/* Schedule with minimal timeout to make it possible to send more than
	 * one byte per USB transfer. The latency increase is negligible while
	 * the increased throughput and reduced CPU usage is easily observable.
	 */
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_MSEC(1));
}
    451c:	b017      	add	sp, #92	; 0x5c
    451e:	bd30      	pop	{r4, r5, pc}
	dev_data->tx_ready = false;
    4520:	2300      	movs	r3, #0
    4522:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    4526:	2201      	movs	r2, #1
    4528:	f10d 0107 	add.w	r1, sp, #7
    452c:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    4530:	f008 fb76 	bl	cc20 <ring_buf_put>
    4534:	bb90      	cbnz	r0, 459c <cdc_acm_poll_out+0xdc>
		LOG_INF("Ring buffer full, drain buffer");
    4536:	4b31      	ldr	r3, [pc, #196]	; (45fc <cdc_acm_poll_out+0x13c>)
    4538:	9309      	str	r3, [sp, #36]	; 0x24
    453a:	2302      	movs	r3, #2
    453c:	f88d 300c 	strb.w	r3, [sp, #12]
    4540:	2500      	movs	r5, #0
    4542:	f88d 500d 	strb.w	r5, [sp, #13]
    4546:	f88d 500e 	strb.w	r5, [sp, #14]
    454a:	f88d 500f 	strb.w	r5, [sp, #15]
    454e:	9b03      	ldr	r3, [sp, #12]
    4550:	9308      	str	r3, [sp, #32]
    4552:	4629      	mov	r1, r5
    4554:	f365 0100 	bfi	r1, r5, #0, #1
    4558:	f365 0141 	bfi	r1, r5, #1, #1
    455c:	f365 0182 	bfi	r1, r5, #2, #1
    4560:	f365 01c5 	bfi	r1, r5, #3, #3
    4564:	2303      	movs	r3, #3
    4566:	f363 1188 	bfi	r1, r3, #6, #3
    456a:	2308      	movs	r3, #8
    456c:	f363 2153 	bfi	r1, r3, #9, #11
    4570:	f365 511f 	bfi	r1, r5, #20, #12
    4574:	462b      	mov	r3, r5
    4576:	aa08      	add	r2, sp, #32
    4578:	481f      	ldr	r0, [pc, #124]	; (45f8 <cdc_acm_poll_out+0x138>)
    457a:	f7fd fc05 	bl	1d88 <z_impl_z_log_msg_static_create>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    457e:	2201      	movs	r2, #1
    4580:	4629      	mov	r1, r5
    4582:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    4586:	f008 fba6 	bl	ccd6 <ring_buf_get>
    458a:	b178      	cbz	r0, 45ac <cdc_acm_poll_out+0xec>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    458c:	2201      	movs	r2, #1
    458e:	f10d 0107 	add.w	r1, sp, #7
    4592:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    4596:	f008 fb43 	bl	cc20 <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    459a:	b138      	cbz	r0, 45ac <cdc_acm_poll_out+0xec>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_MSEC(1));
    459c:	2221      	movs	r2, #33	; 0x21
    459e:	2300      	movs	r3, #0
    45a0:	f104 0118 	add.w	r1, r4, #24
    45a4:	4816      	ldr	r0, [pc, #88]	; (4600 <cdc_acm_poll_out+0x140>)
    45a6:	f00a ffd7 	bl	f558 <k_work_schedule_for_queue>
    45aa:	e7b7      	b.n	451c <cdc_acm_poll_out+0x5c>
			LOG_ERR("Failed to drain buffer");
    45ac:	4b15      	ldr	r3, [pc, #84]	; (4604 <cdc_acm_poll_out+0x144>)
    45ae:	930f      	str	r3, [sp, #60]	; 0x3c
    45b0:	2302      	movs	r3, #2
    45b2:	f88d 300c 	strb.w	r3, [sp, #12]
    45b6:	2300      	movs	r3, #0
    45b8:	f88d 300d 	strb.w	r3, [sp, #13]
    45bc:	f88d 300e 	strb.w	r3, [sp, #14]
    45c0:	f88d 300f 	strb.w	r3, [sp, #15]
    45c4:	9a03      	ldr	r2, [sp, #12]
    45c6:	920e      	str	r2, [sp, #56]	; 0x38
    45c8:	4619      	mov	r1, r3
    45ca:	f363 0100 	bfi	r1, r3, #0, #1
    45ce:	f363 0141 	bfi	r1, r3, #1, #1
    45d2:	f363 0182 	bfi	r1, r3, #2, #1
    45d6:	f363 01c5 	bfi	r1, r3, #3, #3
    45da:	2201      	movs	r2, #1
    45dc:	f362 1188 	bfi	r1, r2, #6, #3
    45e0:	2208      	movs	r2, #8
    45e2:	f362 2153 	bfi	r1, r2, #9, #11
    45e6:	f363 511f 	bfi	r1, r3, #20, #12
    45ea:	aa0e      	add	r2, sp, #56	; 0x38
    45ec:	4802      	ldr	r0, [pc, #8]	; (45f8 <cdc_acm_poll_out+0x138>)
    45ee:	f7fd fbcb 	bl	1d88 <z_impl_z_log_msg_static_create>
			return;
    45f2:	e793      	b.n	451c <cdc_acm_poll_out+0x5c>
    45f4:	00010728 	.word	0x00010728
    45f8:	0000feac 	.word	0x0000feac
    45fc:	00010748 	.word	0x00010748
    4600:	20000840 	.word	0x20000840
    4604:	00010768 	.word	0x00010768

00004608 <cdc_acm_write_cb>:
{
    4608:	b510      	push	{r4, lr}
    460a:	4614      	mov	r4, r2
	dev_data->tx_ready = true;
    460c:	2301      	movs	r3, #1
    460e:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
	if (dev_data->cb && dev_data->tx_irq_ena) {
    4612:	6813      	ldr	r3, [r2, #0]
    4614:	b113      	cbz	r3, 461c <cdc_acm_write_cb+0x14>
    4616:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
    461a:	b96b      	cbnz	r3, 4638 <cdc_acm_write_cb+0x30>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    461c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	return buf->get_head == buf->put_tail;
    4620:	691a      	ldr	r2, [r3, #16]
    4622:	689b      	ldr	r3, [r3, #8]
    4624:	4293      	cmp	r3, r2
    4626:	d006      	beq.n	4636 <cdc_acm_write_cb+0x2e>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    4628:	2200      	movs	r2, #0
    462a:	2300      	movs	r3, #0
    462c:	f104 0118 	add.w	r1, r4, #24
    4630:	4804      	ldr	r0, [pc, #16]	; (4644 <cdc_acm_write_cb+0x3c>)
    4632:	f00a ff91 	bl	f558 <k_work_schedule_for_queue>
}
    4636:	bd10      	pop	{r4, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    4638:	f102 0108 	add.w	r1, r2, #8
    463c:	4801      	ldr	r0, [pc, #4]	; (4644 <cdc_acm_write_cb+0x3c>)
    463e:	f00a ff75 	bl	f52c <k_work_submit_to_queue>
    4642:	e7eb      	b.n	461c <cdc_acm_write_cb+0x14>
    4644:	20000840 	.word	0x20000840

00004648 <cdc_acm_init>:
{
    4648:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    464a:	6904      	ldr	r4, [r0, #16]
	dev_data->common.dev = dev;
    464c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    4650:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
	parent->next = child;
    4654:	2200      	movs	r2, #0
    4656:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
	return list->tail;
    465a:	4a0b      	ldr	r2, [pc, #44]	; (4688 <cdc_acm_init+0x40>)
    465c:	6852      	ldr	r2, [r2, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    465e:	b172      	cbz	r2, 467e <cdc_acm_init+0x36>
	parent->next = child;
    4660:	6013      	str	r3, [r2, #0]
	list->tail = node;
    4662:	4a09      	ldr	r2, [pc, #36]	; (4688 <cdc_acm_init+0x40>)
    4664:	6053      	str	r3, [r2, #4]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    4666:	4909      	ldr	r1, [pc, #36]	; (468c <cdc_acm_init+0x44>)
    4668:	f104 0008 	add.w	r0, r4, #8
    466c:	f00a ff42 	bl	f4f4 <k_work_init>
	k_work_init_delayable(&dev_data->tx_work, tx_work_handler);
    4670:	4907      	ldr	r1, [pc, #28]	; (4690 <cdc_acm_init+0x48>)
    4672:	f104 0018 	add.w	r0, r4, #24
    4676:	f00a ff63 	bl	f540 <k_work_init_delayable>
}
    467a:	2000      	movs	r0, #0
    467c:	bd10      	pop	{r4, pc}
    467e:	4a02      	ldr	r2, [pc, #8]	; (4688 <cdc_acm_init+0x40>)
    4680:	6053      	str	r3, [r2, #4]
	list->head = node;
    4682:	6013      	str	r3, [r2, #0]
}
    4684:	e7ef      	b.n	4666 <cdc_acm_init+0x1e>
    4686:	bf00      	nop
    4688:	200012f0 	.word	0x200012f0
    468c:	0000d91d 	.word	0x0000d91d
    4690:	00004695 	.word	0x00004695

00004694 <tx_work_handler>:
{
    4694:	b5f0      	push	{r4, r5, r6, r7, lr}
    4696:	b085      	sub	sp, #20
    4698:	4604      	mov	r4, r0
	struct cdc_acm_dev_data_t *dev_data =
    469a:	f1a0 0718 	sub.w	r7, r0, #24
	const struct device *dev = dev_data->common.dev;
    469e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
	struct usb_cfg_data *cfg = (void *)dev->config;
    46a2:	685b      	ldr	r3, [r3, #4]
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    46a4:	6a1b      	ldr	r3, [r3, #32]
    46a6:	7d1d      	ldrb	r5, [r3, #20]
	if (usb_transfer_is_busy(ep)) {
    46a8:	4628      	mov	r0, r5
    46aa:	f009 f91f 	bl	d8ec <usb_transfer_is_busy>
    46ae:	b108      	cbz	r0, 46b4 <tx_work_handler+0x20>
}
    46b0:	b005      	add	sp, #20
    46b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    46b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    46b8:	a903      	add	r1, sp, #12
    46ba:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    46bc:	f008 fad0 	bl	cc60 <ring_buf_get_claim>
	if (!len) {
    46c0:	4606      	mov	r6, r0
    46c2:	2800      	cmp	r0, #0
    46c4:	d0f4      	beq.n	46b0 <tx_work_handler+0x1c>
	dev_data->tx_ready = false;
    46c6:	2300      	movs	r3, #0
    46c8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    46cc:	f010 0f3f 	tst.w	r0, #63	; 0x3f
    46d0:	d100      	bne.n	46d4 <tx_work_handler+0x40>
		len -= 1;
    46d2:	1e46      	subs	r6, r0, #1
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    46d4:	9701      	str	r7, [sp, #4]
    46d6:	4b06      	ldr	r3, [pc, #24]	; (46f0 <tx_work_handler+0x5c>)
    46d8:	9300      	str	r3, [sp, #0]
    46da:	2302      	movs	r3, #2
    46dc:	4632      	mov	r2, r6
    46de:	9903      	ldr	r1, [sp, #12]
    46e0:	4628      	mov	r0, r5
    46e2:	f7ff f9ef 	bl	3ac4 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    46e6:	4631      	mov	r1, r6
    46e8:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    46ea:	f008 fad6 	bl	cc9a <ring_buf_get_finish>
    46ee:	e7df      	b.n	46b0 <tx_work_handler+0x1c>
    46f0:	00004609 	.word	0x00004609

000046f4 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(void)
{
    46f4:	b530      	push	{r4, r5, lr}
    46f6:	b083      	sub	sp, #12

	k_work_queue_start(&z_usb_work_q,
    46f8:	4d08      	ldr	r5, [pc, #32]	; (471c <z_usb_work_q_init+0x28>)
    46fa:	2400      	movs	r4, #0
    46fc:	9400      	str	r4, [sp, #0]
    46fe:	f04f 33ff 	mov.w	r3, #4294967295
    4702:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4706:	4906      	ldr	r1, [pc, #24]	; (4720 <z_usb_work_q_init+0x2c>)
    4708:	4628      	mov	r0, r5
    470a:	f006 fc79 	bl	b000 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    470e:	4905      	ldr	r1, [pc, #20]	; (4724 <z_usb_work_q_init+0x30>)
    4710:	4628      	mov	r0, r5
    4712:	f006 f93d 	bl	a990 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    4716:	4620      	mov	r0, r4
    4718:	b003      	add	sp, #12
    471a:	bd30      	pop	{r4, r5, pc}
    471c:	20000840 	.word	0x20000840
    4720:	20002700 	.word	0x20002700
    4724:	000107f0 	.word	0x000107f0

00004728 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    4728:	4901      	ldr	r1, [pc, #4]	; (4730 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    472a:	2210      	movs	r2, #16
	str	r2, [r1]
    472c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    472e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    4730:	e000ed10 	.word	0xe000ed10

00004734 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    4734:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    4736:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    4738:	f380 8811 	msr	BASEPRI, r0
	isb
    473c:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    4740:	f3bf 8f4f 	dsb	sy
    4744:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    4746:	b662      	cpsie	i
	isb
    4748:	f3bf 8f6f 	isb	sy

	bx	lr
    474c:	4770      	bx	lr
    474e:	bf00      	nop

00004750 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    4750:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    4752:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    4754:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    4758:	f3bf 8f4f 	dsb	sy
    475c:	bf20      	wfe

	msr	BASEPRI, r0
    475e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    4762:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    4764:	4770      	bx	lr
    4766:	bf00      	nop

00004768 <esf_dump>:
#include <kernel_arch_data.h>
#include <zephyr/logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    4768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    476c:	b082      	sub	sp, #8
    476e:	af00      	add	r7, sp, #0
    4770:	4604      	mov	r4, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    4772:	f8d0 e000 	ldr.w	lr, [r0]
    4776:	f8d0 c004 	ldr.w	ip, [r0, #4]
    477a:	6886      	ldr	r6, [r0, #8]
    477c:	466d      	mov	r5, sp
    477e:	b08a      	sub	sp, #40	; 0x28
    4780:	466b      	mov	r3, sp
    4782:	f113 0210 	adds.w	r2, r3, #16
    4786:	f000 80eb 	beq.w	4960 <esf_dump+0x1f8>
    478a:	2114      	movs	r1, #20
    478c:	b18a      	cbz	r2, 47b2 <esf_dump+0x4a>
    478e:	4608      	mov	r0, r1
    4790:	2904      	cmp	r1, #4
    4792:	dd03      	ble.n	479c <esf_dump+0x34>
    4794:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 4990 <esf_dump+0x228>
    4798:	f8c3 8014 	str.w	r8, [r3, #20]
    479c:	2808      	cmp	r0, #8
    479e:	dd01      	ble.n	47a4 <esf_dump+0x3c>
    47a0:	f8c3 e018 	str.w	lr, [r3, #24]
    47a4:	280c      	cmp	r0, #12
    47a6:	dd01      	ble.n	47ac <esf_dump+0x44>
    47a8:	f8c3 c01c 	str.w	ip, [r3, #28]
    47ac:	2810      	cmp	r0, #16
    47ae:	dd00      	ble.n	47b2 <esf_dump+0x4a>
    47b0:	621e      	str	r6, [r3, #32]
    47b2:	2913      	cmp	r1, #19
    47b4:	f340 80d7 	ble.w	4966 <esf_dump+0x1fe>
    47b8:	f04f 0c14 	mov.w	ip, #20
    47bc:	b13a      	cbz	r2, 47ce <esf_dump+0x66>
    47be:	2105      	movs	r1, #5
    47c0:	7139      	strb	r1, [r7, #4]
    47c2:	2100      	movs	r1, #0
    47c4:	7179      	strb	r1, [r7, #5]
    47c6:	71b9      	strb	r1, [r7, #6]
    47c8:	71f9      	strb	r1, [r7, #7]
    47ca:	6878      	ldr	r0, [r7, #4]
    47cc:	6118      	str	r0, [r3, #16]
    47ce:	2100      	movs	r1, #0
    47d0:	f36f 0100 	bfc	r1, #0, #1
    47d4:	f36f 0141 	bfc	r1, #1, #1
    47d8:	f36f 0182 	bfc	r1, #2, #1
    47dc:	f36f 01c5 	bfc	r1, #3, #3
    47e0:	2301      	movs	r3, #1
    47e2:	f363 1188 	bfi	r1, r3, #6, #3
    47e6:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    47ea:	f36c 2153 	bfi	r1, ip, #9, #11
    47ee:	f36f 511f 	bfc	r1, #20, #12
    47f2:	2300      	movs	r3, #0
    47f4:	4867      	ldr	r0, [pc, #412]	; (4994 <esf_dump+0x22c>)
    47f6:	f7fd fac7 	bl	1d88 <z_impl_z_log_msg_static_create>
    47fa:	46ad      	mov	sp, r5
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    47fc:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    4800:	f8d4 c010 	ldr.w	ip, [r4, #16]
    4804:	6966      	ldr	r6, [r4, #20]
    4806:	466d      	mov	r5, sp
    4808:	b08a      	sub	sp, #40	; 0x28
    480a:	466b      	mov	r3, sp
    480c:	f113 0210 	adds.w	r2, r3, #16
    4810:	f000 80ac 	beq.w	496c <esf_dump+0x204>
    4814:	2114      	movs	r1, #20
    4816:	b18a      	cbz	r2, 483c <esf_dump+0xd4>
    4818:	4608      	mov	r0, r1
    481a:	2904      	cmp	r1, #4
    481c:	dd03      	ble.n	4826 <esf_dump+0xbe>
    481e:	f8df 8178 	ldr.w	r8, [pc, #376]	; 4998 <esf_dump+0x230>
    4822:	f8c3 8014 	str.w	r8, [r3, #20]
    4826:	2808      	cmp	r0, #8
    4828:	dd01      	ble.n	482e <esf_dump+0xc6>
    482a:	f8c3 e018 	str.w	lr, [r3, #24]
    482e:	280c      	cmp	r0, #12
    4830:	dd01      	ble.n	4836 <esf_dump+0xce>
    4832:	f8c3 c01c 	str.w	ip, [r3, #28]
    4836:	2810      	cmp	r0, #16
    4838:	dd00      	ble.n	483c <esf_dump+0xd4>
    483a:	621e      	str	r6, [r3, #32]
    483c:	2913      	cmp	r1, #19
    483e:	f340 8098 	ble.w	4972 <esf_dump+0x20a>
    4842:	f04f 0c14 	mov.w	ip, #20
    4846:	b13a      	cbz	r2, 4858 <esf_dump+0xf0>
    4848:	2105      	movs	r1, #5
    484a:	7139      	strb	r1, [r7, #4]
    484c:	2100      	movs	r1, #0
    484e:	7179      	strb	r1, [r7, #5]
    4850:	71b9      	strb	r1, [r7, #6]
    4852:	71f9      	strb	r1, [r7, #7]
    4854:	6878      	ldr	r0, [r7, #4]
    4856:	6118      	str	r0, [r3, #16]
    4858:	2100      	movs	r1, #0
    485a:	f36f 0100 	bfc	r1, #0, #1
    485e:	f36f 0141 	bfc	r1, #1, #1
    4862:	f36f 0182 	bfc	r1, #2, #1
    4866:	f36f 01c5 	bfc	r1, #3, #3
    486a:	2301      	movs	r3, #1
    486c:	f363 1188 	bfi	r1, r3, #6, #3
    4870:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    4874:	f36c 2153 	bfi	r1, ip, #9, #11
    4878:	f36f 511f 	bfc	r1, #20, #12
    487c:	2300      	movs	r3, #0
    487e:	4845      	ldr	r0, [pc, #276]	; (4994 <esf_dump+0x22c>)
    4880:	f7fd fa82 	bl	1d88 <z_impl_z_log_msg_static_create>
    4884:	46ad      	mov	sp, r5
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    4886:	69e6      	ldr	r6, [r4, #28]
    4888:	466d      	mov	r5, sp
    488a:	b088      	sub	sp, #32
    488c:	466b      	mov	r3, sp
    488e:	f113 0210 	adds.w	r2, r3, #16
    4892:	d071      	beq.n	4978 <esf_dump+0x210>
    4894:	210c      	movs	r1, #12
    4896:	b14a      	cbz	r2, 48ac <esf_dump+0x144>
    4898:	4608      	mov	r0, r1
    489a:	2904      	cmp	r1, #4
    489c:	dd03      	ble.n	48a6 <esf_dump+0x13e>
    489e:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 499c <esf_dump+0x234>
    48a2:	f8c3 c014 	str.w	ip, [r3, #20]
    48a6:	2808      	cmp	r0, #8
    48a8:	dd00      	ble.n	48ac <esf_dump+0x144>
    48aa:	619e      	str	r6, [r3, #24]
    48ac:	290b      	cmp	r1, #11
    48ae:	dd66      	ble.n	497e <esf_dump+0x216>
    48b0:	f04f 0c0c 	mov.w	ip, #12
    48b4:	b13a      	cbz	r2, 48c6 <esf_dump+0x15e>
    48b6:	2103      	movs	r1, #3
    48b8:	7139      	strb	r1, [r7, #4]
    48ba:	2100      	movs	r1, #0
    48bc:	7179      	strb	r1, [r7, #5]
    48be:	71b9      	strb	r1, [r7, #6]
    48c0:	71f9      	strb	r1, [r7, #7]
    48c2:	6878      	ldr	r0, [r7, #4]
    48c4:	6118      	str	r0, [r3, #16]
    48c6:	2100      	movs	r1, #0
    48c8:	f36f 0100 	bfc	r1, #0, #1
    48cc:	f36f 0141 	bfc	r1, #1, #1
    48d0:	f36f 0182 	bfc	r1, #2, #1
    48d4:	f36f 01c5 	bfc	r1, #3, #3
    48d8:	2301      	movs	r3, #1
    48da:	f363 1188 	bfi	r1, r3, #6, #3
    48de:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    48e2:	f36c 2153 	bfi	r1, ip, #9, #11
    48e6:	f36f 511f 	bfc	r1, #20, #12
    48ea:	2300      	movs	r3, #0
    48ec:	4829      	ldr	r0, [pc, #164]	; (4994 <esf_dump+0x22c>)
    48ee:	f7fd fa4b 	bl	1d88 <z_impl_z_log_msg_static_create>
    48f2:	46ad      	mov	sp, r5
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    48f4:	69a4      	ldr	r4, [r4, #24]
    48f6:	b088      	sub	sp, #32
    48f8:	466b      	mov	r3, sp
    48fa:	f113 0210 	adds.w	r2, r3, #16
    48fe:	d041      	beq.n	4984 <esf_dump+0x21c>
    4900:	210c      	movs	r1, #12
    4902:	b13a      	cbz	r2, 4914 <esf_dump+0x1ac>
    4904:	4608      	mov	r0, r1
    4906:	2904      	cmp	r1, #4
    4908:	dd01      	ble.n	490e <esf_dump+0x1a6>
    490a:	4d25      	ldr	r5, [pc, #148]	; (49a0 <esf_dump+0x238>)
    490c:	615d      	str	r5, [r3, #20]
    490e:	2808      	cmp	r0, #8
    4910:	dd00      	ble.n	4914 <esf_dump+0x1ac>
    4912:	619c      	str	r4, [r3, #24]
    4914:	290b      	cmp	r1, #11
    4916:	dd38      	ble.n	498a <esf_dump+0x222>
    4918:	240c      	movs	r4, #12
    491a:	b13a      	cbz	r2, 492c <esf_dump+0x1c4>
    491c:	2103      	movs	r1, #3
    491e:	7139      	strb	r1, [r7, #4]
    4920:	2100      	movs	r1, #0
    4922:	7179      	strb	r1, [r7, #5]
    4924:	71b9      	strb	r1, [r7, #6]
    4926:	71f9      	strb	r1, [r7, #7]
    4928:	6878      	ldr	r0, [r7, #4]
    492a:	6118      	str	r0, [r3, #16]
    492c:	2100      	movs	r1, #0
    492e:	f36f 0100 	bfc	r1, #0, #1
    4932:	f36f 0141 	bfc	r1, #1, #1
    4936:	f36f 0182 	bfc	r1, #2, #1
    493a:	f36f 01c5 	bfc	r1, #3, #3
    493e:	2301      	movs	r3, #1
    4940:	f363 1188 	bfi	r1, r3, #6, #3
    4944:	f3c4 040a 	ubfx	r4, r4, #0, #11
    4948:	f364 2153 	bfi	r1, r4, #9, #11
    494c:	f36f 511f 	bfc	r1, #20, #12
    4950:	2300      	movs	r3, #0
    4952:	4810      	ldr	r0, [pc, #64]	; (4994 <esf_dump+0x22c>)
    4954:	f7fd fa18 	bl	1d88 <z_impl_z_log_msg_static_create>
		esf->basic.pc);
}
    4958:	3708      	adds	r7, #8
    495a:	46bd      	mov	sp, r7
    495c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    4960:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    4964:	e712      	b.n	478c <esf_dump+0x24>
    4966:	f06f 0c1b 	mvn.w	ip, #27
    496a:	e727      	b.n	47bc <esf_dump+0x54>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    496c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    4970:	e751      	b.n	4816 <esf_dump+0xae>
    4972:	f06f 0c1b 	mvn.w	ip, #27
    4976:	e766      	b.n	4846 <esf_dump+0xde>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    4978:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    497c:	e78b      	b.n	4896 <esf_dump+0x12e>
    497e:	f06f 0c1b 	mvn.w	ip, #27
    4982:	e797      	b.n	48b4 <esf_dump+0x14c>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    4984:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    4988:	e7bb      	b.n	4902 <esf_dump+0x19a>
    498a:	f06f 041b 	mvn.w	r4, #27
    498e:	e7c4      	b.n	491a <esf_dump+0x1b2>
    4990:	000107fc 	.word	0x000107fc
    4994:	0000fe8c 	.word	0x0000fe8c
    4998:	0001082c 	.word	0x0001082c
    499c:	0001085c 	.word	0x0001085c
    49a0:	0001086c 	.word	0x0001086c

000049a4 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    49a4:	2800      	cmp	r0, #0
    49a6:	db07      	blt.n	49b8 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    49a8:	f000 021f 	and.w	r2, r0, #31
    49ac:	0940      	lsrs	r0, r0, #5
    49ae:	2301      	movs	r3, #1
    49b0:	4093      	lsls	r3, r2
    49b2:	4a02      	ldr	r2, [pc, #8]	; (49bc <__NVIC_EnableIRQ+0x18>)
    49b4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
    49b8:	4770      	bx	lr
    49ba:	bf00      	nop
    49bc:	e000e100 	.word	0xe000e100

000049c0 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    49c0:	2800      	cmp	r0, #0
    49c2:	db0c      	blt.n	49de <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    49c4:	f000 021f 	and.w	r2, r0, #31
    49c8:	0940      	lsrs	r0, r0, #5
    49ca:	2301      	movs	r3, #1
    49cc:	4093      	lsls	r3, r2
    49ce:	3020      	adds	r0, #32
    49d0:	4a03      	ldr	r2, [pc, #12]	; (49e0 <__NVIC_DisableIRQ+0x20>)
    49d2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    49d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    49da:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    49de:	4770      	bx	lr
    49e0:	e000e100 	.word	0xe000e100

000049e4 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    49e4:	2800      	cmp	r0, #0
    49e6:	db08      	blt.n	49fa <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    49e8:	0149      	lsls	r1, r1, #5
    49ea:	b2c9      	uxtb	r1, r1
    49ec:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    49f0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    49f4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    49f8:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    49fa:	f000 000f 	and.w	r0, r0, #15
    49fe:	0149      	lsls	r1, r1, #5
    4a00:	b2c9      	uxtb	r1, r1
    4a02:	4b01      	ldr	r3, [pc, #4]	; (4a08 <__NVIC_SetPriority+0x24>)
    4a04:	5419      	strb	r1, [r3, r0]
  }
}
    4a06:	4770      	bx	lr
    4a08:	e000ed14 	.word	0xe000ed14

00004a0c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    4a0c:	0942      	lsrs	r2, r0, #5
    4a0e:	4b05      	ldr	r3, [pc, #20]	; (4a24 <arch_irq_is_enabled+0x18>)
    4a10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4a14:	f000 001f 	and.w	r0, r0, #31
    4a18:	2301      	movs	r3, #1
    4a1a:	fa03 f000 	lsl.w	r0, r3, r0
}
    4a1e:	4010      	ands	r0, r2
    4a20:	4770      	bx	lr
    4a22:	bf00      	nop
    4a24:	e000e100 	.word	0xe000e100

00004a28 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    4a28:	bf30      	wfi
    b z_SysNmiOnReset
    4a2a:	f7ff bffd 	b.w	4a28 <z_SysNmiOnReset>
    4a2e:	bf00      	nop

00004a30 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    4a30:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4a32:	4b0b      	ldr	r3, [pc, #44]	; (4a60 <z_arm_prep_c+0x30>)
    4a34:	4a0b      	ldr	r2, [pc, #44]	; (4a64 <z_arm_prep_c+0x34>)
    4a36:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    4a3a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    4a3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4a40:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    4a44:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4a48:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    4a4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    4a50:	f005 fe92 	bl	a778 <z_bss_zero>
	z_data_copy();
    4a54:	f006 ff20 	bl	b898 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    4a58:	f000 ff9e 	bl	5998 <z_arm_interrupt_init>
	z_cstart();
    4a5c:	f005 feea 	bl	a834 <z_cstart>
    4a60:	e000ed00 	.word	0xe000ed00
    4a64:	00000000 	.word	0x00000000

00004a68 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    4a68:	4a0a      	ldr	r2, [pc, #40]	; (4a94 <arch_swap+0x2c>)
    4a6a:	6893      	ldr	r3, [r2, #8]
    4a6c:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    4a70:	4909      	ldr	r1, [pc, #36]	; (4a98 <arch_swap+0x30>)
    4a72:	6809      	ldr	r1, [r1, #0]
    4a74:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4a78:	4908      	ldr	r1, [pc, #32]	; (4a9c <arch_swap+0x34>)
    4a7a:	684b      	ldr	r3, [r1, #4]
    4a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4a80:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    4a82:	2300      	movs	r3, #0
    4a84:	f383 8811 	msr	BASEPRI, r3
    4a88:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    4a8c:	6893      	ldr	r3, [r2, #8]
}
    4a8e:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    4a92:	4770      	bx	lr
    4a94:	20002350 	.word	0x20002350
    4a98:	00011174 	.word	0x00011174
    4a9c:	e000ed00 	.word	0xe000ed00

00004aa0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    4aa0:	4913      	ldr	r1, [pc, #76]	; (4af0 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    4aa2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    4aa4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    4aa8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    4aaa:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    4aae:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4ab2:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    4ab4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    4ab8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    4abc:	4f0d      	ldr	r7, [pc, #52]	; (4af4 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    4abe:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    4ac2:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    4ac4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    4ac6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    4ac8:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    4acc:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    4ace:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    4ad2:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    4ad6:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    4ad8:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    4ada:	f001 f80d 	bl	5af8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    4ade:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    4ae2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    4ae6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    4aea:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    4aee:	4770      	bx	lr
    ldr r1, =_kernel
    4af0:	20002350 	.word	0x20002350
    ldr v4, =_SCS_ICSR
    4af4:	e000ed04 	.word	0xe000ed04

00004af8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    4af8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    4afc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    4afe:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    4b02:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    4b06:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    4b08:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    4b0c:	2902      	cmp	r1, #2
    beq _oops
    4b0e:	d0ff      	beq.n	4b10 <_oops>

00004b10 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    4b10:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    4b12:	f009 f89b 	bl	dc4c <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    4b16:	bd01      	pop	{r0, pc}

00004b18 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    4b18:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    4b1a:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    4b1e:	490e      	ldr	r1, [pc, #56]	; (4b58 <arch_new_thread+0x40>)
    4b20:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    4b24:	f021 0101 	bic.w	r1, r1, #1
    4b28:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    4b2c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    4b30:	9b01      	ldr	r3, [sp, #4]
    4b32:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    4b36:	9b02      	ldr	r3, [sp, #8]
    4b38:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    4b3c:	9b03      	ldr	r3, [sp, #12]
    4b3e:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    4b42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    4b46:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
    4b4a:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    4b4c:	2300      	movs	r3, #0
    4b4e:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    4b52:	bc10      	pop	{r4}
    4b54:	4770      	bx	lr
    4b56:	bf00      	nop
    4b58:	0000bf53 	.word	0x0000bf53

00004b5c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    4b5c:	4b10      	ldr	r3, [pc, #64]	; (4ba0 <z_check_thread_stack_fail+0x44>)
    4b5e:	689b      	ldr	r3, [r3, #8]

	if (thread == NULL) {
    4b60:	b1bb      	cbz	r3, 4b92 <z_check_thread_stack_fail+0x36>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    4b62:	f110 0f16 	cmn.w	r0, #22
    4b66:	d00b      	beq.n	4b80 <z_check_thread_stack_fail+0x24>
    4b68:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4b6c:	f1a2 0c40 	sub.w	ip, r2, #64	; 0x40
    4b70:	4584      	cmp	ip, r0
    4b72:	d810      	bhi.n	4b96 <z_check_thread_stack_fail+0x3a>
    4b74:	4282      	cmp	r2, r0
    4b76:	d910      	bls.n	4b9a <z_check_thread_stack_fail+0x3e>
    4b78:	428a      	cmp	r2, r1
    4b7a:	d807      	bhi.n	4b8c <z_check_thread_stack_fail+0x30>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    4b7c:	2000      	movs	r0, #0
    4b7e:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    4b80:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4b84:	428a      	cmp	r2, r1
    4b86:	d801      	bhi.n	4b8c <z_check_thread_stack_fail+0x30>
	return 0;
    4b88:	2000      	movs	r0, #0
}
    4b8a:	4770      	bx	lr
		return thread->stack_info.start;
    4b8c:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    4b90:	4770      	bx	lr
		return 0;
    4b92:	2000      	movs	r0, #0
    4b94:	4770      	bx	lr
	return 0;
    4b96:	2000      	movs	r0, #0
    4b98:	4770      	bx	lr
    4b9a:	2000      	movs	r0, #0
    4b9c:	4770      	bx	lr
    4b9e:	bf00      	nop
    4ba0:	20002350 	.word	0x20002350

00004ba4 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    4ba4:	b508      	push	{r3, lr}
    4ba6:	460d      	mov	r5, r1
    4ba8:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    4baa:	4b08      	ldr	r3, [pc, #32]	; (4bcc <arch_switch_to_main_thread+0x28>)
    4bac:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    4bae:	f000 ffa3 	bl	5af8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    4bb2:	4620      	mov	r0, r4
    4bb4:	f385 8809 	msr	PSP, r5
    4bb8:	2100      	movs	r1, #0
    4bba:	b663      	cpsie	if
    4bbc:	f381 8811 	msr	BASEPRI, r1
    4bc0:	f3bf 8f6f 	isb	sy
    4bc4:	2200      	movs	r2, #0
    4bc6:	2300      	movs	r3, #0
    4bc8:	f007 f9c3 	bl	bf52 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    4bcc:	20002350 	.word	0x20002350

00004bd0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    4bd0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    4bd2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    4bd4:	4a0b      	ldr	r2, [pc, #44]	; (4c04 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    4bd6:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    4bd8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    4bda:	bf1e      	ittt	ne
	movne	r1, #0
    4bdc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    4bde:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    4be0:	f00a fb40 	blne	f264 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    4be4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    4be6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    4bea:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    4bee:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    4bf2:	4905      	ldr	r1, [pc, #20]	; (4c08 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    4bf4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    4bf6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    4bf8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    4bfa:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    4bfe:	4903      	ldr	r1, [pc, #12]	; (4c0c <_isr_wrapper+0x3c>)
	bx r1
    4c00:	4708      	bx	r1
    4c02:	0000      	.short	0x0000
	ldr r2, =_kernel
    4c04:	20002350 	.word	0x20002350
	ldr r1, =_sw_isr_table
    4c08:	0000fc94 	.word	0x0000fc94
	ldr r1, =z_arm_int_exit
    4c0c:	00004c11 	.word	0x00004c11

00004c10 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    4c10:	4b04      	ldr	r3, [pc, #16]	; (4c24 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    4c12:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    4c14:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    4c16:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    4c18:	d003      	beq.n	4c22 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    4c1a:	4903      	ldr	r1, [pc, #12]	; (4c28 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    4c20:	600a      	str	r2, [r1, #0]

00004c22 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    4c22:	4770      	bx	lr
	ldr r3, =_kernel
    4c24:	20002350 	.word	0x20002350
	ldr r1, =_SCS_ICSR
    4c28:	e000ed04 	.word	0xe000ed04

00004c2c <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    4c2c:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    4c2e:	4b0d      	ldr	r3, [pc, #52]	; (4c64 <z_arm_is_synchronous_svc+0x38>)
    4c30:	695a      	ldr	r2, [r3, #20]
    4c32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    4c36:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    4c38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4c3c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
    4c40:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    4c44:	695a      	ldr	r2, [r3, #20]
    4c46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    4c4a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    4c4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4c50:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    4c54:	f64d 7302 	movw	r3, #57090	; 0xdf02
    4c58:	4299      	cmp	r1, r3
    4c5a:	d001      	beq.n	4c60 <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
    4c5c:	2000      	movs	r0, #0
    4c5e:	4770      	bx	lr
		return true;
    4c60:	2001      	movs	r0, #1
}
    4c62:	4770      	bx	lr
    4c64:	e000ed00 	.word	0xe000ed00

00004c68 <get_esf>:
 *
 * @return ESF pointer on success, otherwise return NULL
 */
static inline z_arch_esf_t *get_esf(uint32_t msp, uint32_t psp, uint32_t exc_return,
	bool *nested_exc)
{
    4c68:	b510      	push	{r4, lr}
    4c6a:	b088      	sub	sp, #32
	bool alternative_state_exc = false;
	z_arch_esf_t *ptr_esf = NULL;

	*nested_exc = false;
    4c6c:	2400      	movs	r4, #0
    4c6e:	701c      	strb	r4, [r3, #0]

	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4c70:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
    4c74:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
    4c78:	d132      	bne.n	4ce0 <get_esf+0x78>
	}
#else
	/* The processor has a single execution state.
	 * We verify that the Thread mode is using PSP.
	 */
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4c7a:	f002 040c 	and.w	r4, r2, #12
    4c7e:	2c08      	cmp	r4, #8
    4c80:	d005      	beq.n	4c8e <get_esf+0x26>
		return NULL;
	}
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	if (!alternative_state_exc) {
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4c82:	f012 0f08 	tst.w	r2, #8
    4c86:	d028      	beq.n	4cda <get_esf+0x72>
			/* Returning to thread mode */
			ptr_esf =  (z_arch_esf_t *)psp;
    4c88:	4608      	mov	r0, r1
			*nested_exc = true;
		}
	}

	return ptr_esf;
}
    4c8a:	b008      	add	sp, #32
    4c8c:	bd10      	pop	{r4, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    4c8e:	4b15      	ldr	r3, [pc, #84]	; (4ce4 <get_esf+0x7c>)
    4c90:	9307      	str	r3, [sp, #28]
    4c92:	2302      	movs	r3, #2
    4c94:	f88d 3004 	strb.w	r3, [sp, #4]
    4c98:	2400      	movs	r4, #0
    4c9a:	f88d 4005 	strb.w	r4, [sp, #5]
    4c9e:	f88d 4006 	strb.w	r4, [sp, #6]
    4ca2:	f88d 4007 	strb.w	r4, [sp, #7]
    4ca6:	9b01      	ldr	r3, [sp, #4]
    4ca8:	9306      	str	r3, [sp, #24]
    4caa:	4621      	mov	r1, r4
    4cac:	f364 0100 	bfi	r1, r4, #0, #1
    4cb0:	f364 0141 	bfi	r1, r4, #1, #1
    4cb4:	f364 0182 	bfi	r1, r4, #2, #1
    4cb8:	f364 01c5 	bfi	r1, r4, #3, #3
    4cbc:	2301      	movs	r3, #1
    4cbe:	f363 1188 	bfi	r1, r3, #6, #3
    4cc2:	2308      	movs	r3, #8
    4cc4:	f363 2153 	bfi	r1, r3, #9, #11
    4cc8:	f364 511f 	bfi	r1, r4, #20, #12
    4ccc:	4623      	mov	r3, r4
    4cce:	aa06      	add	r2, sp, #24
    4cd0:	4805      	ldr	r0, [pc, #20]	; (4ce8 <get_esf+0x80>)
    4cd2:	f7fd f859 	bl	1d88 <z_impl_z_log_msg_static_create>
		return NULL;
    4cd6:	4620      	mov	r0, r4
    4cd8:	e7d7      	b.n	4c8a <get_esf+0x22>
			*nested_exc = true;
    4cda:	2201      	movs	r2, #1
    4cdc:	701a      	strb	r2, [r3, #0]
    4cde:	e7d4      	b.n	4c8a <get_esf+0x22>
		return NULL;
    4ce0:	2000      	movs	r0, #0
    4ce2:	e7d2      	b.n	4c8a <get_esf+0x22>
    4ce4:	0001089c 	.word	0x0001089c
    4ce8:	0000fe8c 	.word	0x0000fe8c

00004cec <bus_fault>:
{
    4cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4cf0:	b0ac      	sub	sp, #176	; 0xb0
    4cf2:	af00      	add	r7, sp, #0
    4cf4:	4605      	mov	r5, r0
    4cf6:	4688      	mov	r8, r1
    4cf8:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** BUS FAULT *****");
    4cfa:	4bb9      	ldr	r3, [pc, #740]	; (4fe0 <bus_fault+0x2f4>)
    4cfc:	61fb      	str	r3, [r7, #28]
    4cfe:	2302      	movs	r3, #2
    4d00:	713b      	strb	r3, [r7, #4]
    4d02:	2300      	movs	r3, #0
    4d04:	717b      	strb	r3, [r7, #5]
    4d06:	71bb      	strb	r3, [r7, #6]
    4d08:	71fb      	strb	r3, [r7, #7]
    4d0a:	687a      	ldr	r2, [r7, #4]
    4d0c:	61ba      	str	r2, [r7, #24]
    4d0e:	4619      	mov	r1, r3
    4d10:	f363 0100 	bfi	r1, r3, #0, #1
    4d14:	f363 0141 	bfi	r1, r3, #1, #1
    4d18:	f363 0182 	bfi	r1, r3, #2, #1
    4d1c:	f363 01c5 	bfi	r1, r3, #3, #3
    4d20:	2201      	movs	r2, #1
    4d22:	f362 1188 	bfi	r1, r2, #6, #3
    4d26:	2208      	movs	r2, #8
    4d28:	f362 2153 	bfi	r1, r2, #9, #11
    4d2c:	f363 511f 	bfi	r1, r3, #20, #12
    4d30:	f107 0218 	add.w	r2, r7, #24
    4d34:	48ab      	ldr	r0, [pc, #684]	; (4fe4 <bus_fault+0x2f8>)
    4d36:	f7fd f827 	bl	1d88 <z_impl_z_log_msg_static_create>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4d3a:	4bab      	ldr	r3, [pc, #684]	; (4fe8 <bus_fault+0x2fc>)
    4d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d3e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    4d42:	d12b      	bne.n	4d9c <bus_fault+0xb0>
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    4d44:	2616      	movs	r6, #22
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    4d46:	4ba8      	ldr	r3, [pc, #672]	; (4fe8 <bus_fault+0x2fc>)
    4d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d4a:	f413 6f00 	tst.w	r3, #2048	; 0x800
    4d4e:	d147      	bne.n	4de0 <bus_fault+0xf4>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    4d50:	4ba5      	ldr	r3, [pc, #660]	; (4fe8 <bus_fault+0x2fc>)
    4d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d54:	f413 7f00 	tst.w	r3, #512	; 0x200
    4d58:	d164      	bne.n	4e24 <bus_fault+0x138>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4d5a:	4ba3      	ldr	r3, [pc, #652]	; (4fe8 <bus_fault+0x2fc>)
    4d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d5e:	f413 6f80 	tst.w	r3, #1024	; 0x400
    4d62:	f040 80d3 	bne.w	4f0c <bus_fault+0x220>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    4d66:	4ba0      	ldr	r3, [pc, #640]	; (4fe8 <bus_fault+0x2fc>)
    4d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d6a:	f413 7f80 	tst.w	r3, #256	; 0x100
    4d6e:	f040 80ef 	bne.w	4f50 <bus_fault+0x264>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    4d72:	4b9d      	ldr	r3, [pc, #628]	; (4fe8 <bus_fault+0x2fc>)
    4d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d76:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    4d7a:	f040 810d 	bne.w	4f98 <bus_fault+0x2ac>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4d7e:	4a9a      	ldr	r2, [pc, #616]	; (4fe8 <bus_fault+0x2fc>)
    4d80:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4d82:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    4d86:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    4d88:	2101      	movs	r1, #1
    4d8a:	4628      	mov	r0, r5
    4d8c:	f008 ff80 	bl	dc90 <memory_fault_recoverable>
    4d90:	7020      	strb	r0, [r4, #0]
}
    4d92:	4630      	mov	r0, r6
    4d94:	37b0      	adds	r7, #176	; 0xb0
    4d96:	46bd      	mov	sp, r7
    4d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Stacking error");
    4d9c:	4b93      	ldr	r3, [pc, #588]	; (4fec <bus_fault+0x300>)
    4d9e:	637b      	str	r3, [r7, #52]	; 0x34
    4da0:	2302      	movs	r3, #2
    4da2:	713b      	strb	r3, [r7, #4]
    4da4:	2300      	movs	r3, #0
    4da6:	717b      	strb	r3, [r7, #5]
    4da8:	71bb      	strb	r3, [r7, #6]
    4daa:	71fb      	strb	r3, [r7, #7]
    4dac:	687a      	ldr	r2, [r7, #4]
    4dae:	633a      	str	r2, [r7, #48]	; 0x30
    4db0:	4619      	mov	r1, r3
    4db2:	f363 0100 	bfi	r1, r3, #0, #1
    4db6:	f363 0141 	bfi	r1, r3, #1, #1
    4dba:	f363 0182 	bfi	r1, r3, #2, #1
    4dbe:	f363 01c5 	bfi	r1, r3, #3, #3
    4dc2:	2201      	movs	r2, #1
    4dc4:	f362 1188 	bfi	r1, r2, #6, #3
    4dc8:	2208      	movs	r2, #8
    4dca:	f362 2153 	bfi	r1, r2, #9, #11
    4dce:	f363 511f 	bfi	r1, r3, #20, #12
    4dd2:	f107 0230 	add.w	r2, r7, #48	; 0x30
    4dd6:	4883      	ldr	r0, [pc, #524]	; (4fe4 <bus_fault+0x2f8>)
    4dd8:	f7fc ffd6 	bl	1d88 <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_BUS_STACKING;
    4ddc:	2617      	movs	r6, #23
    4dde:	e7b2      	b.n	4d46 <bus_fault+0x5a>
		PR_FAULT_INFO("  Unstacking error");
    4de0:	4b83      	ldr	r3, [pc, #524]	; (4ff0 <bus_fault+0x304>)
    4de2:	64fb      	str	r3, [r7, #76]	; 0x4c
    4de4:	2302      	movs	r3, #2
    4de6:	713b      	strb	r3, [r7, #4]
    4de8:	2300      	movs	r3, #0
    4dea:	717b      	strb	r3, [r7, #5]
    4dec:	71bb      	strb	r3, [r7, #6]
    4dee:	71fb      	strb	r3, [r7, #7]
    4df0:	687a      	ldr	r2, [r7, #4]
    4df2:	64ba      	str	r2, [r7, #72]	; 0x48
    4df4:	4619      	mov	r1, r3
    4df6:	f363 0100 	bfi	r1, r3, #0, #1
    4dfa:	f363 0141 	bfi	r1, r3, #1, #1
    4dfe:	f363 0182 	bfi	r1, r3, #2, #1
    4e02:	f363 01c5 	bfi	r1, r3, #3, #3
    4e06:	2201      	movs	r2, #1
    4e08:	f362 1188 	bfi	r1, r2, #6, #3
    4e0c:	2208      	movs	r2, #8
    4e0e:	f362 2153 	bfi	r1, r2, #9, #11
    4e12:	f363 511f 	bfi	r1, r3, #20, #12
    4e16:	f107 0248 	add.w	r2, r7, #72	; 0x48
    4e1a:	4872      	ldr	r0, [pc, #456]	; (4fe4 <bus_fault+0x2f8>)
    4e1c:	f7fc ffb4 	bl	1d88 <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    4e20:	2618      	movs	r6, #24
    4e22:	e795      	b.n	4d50 <bus_fault+0x64>
		PR_FAULT_INFO("  Precise data bus error");
    4e24:	4b73      	ldr	r3, [pc, #460]	; (4ff4 <bus_fault+0x308>)
    4e26:	667b      	str	r3, [r7, #100]	; 0x64
    4e28:	2302      	movs	r3, #2
    4e2a:	713b      	strb	r3, [r7, #4]
    4e2c:	2300      	movs	r3, #0
    4e2e:	717b      	strb	r3, [r7, #5]
    4e30:	71bb      	strb	r3, [r7, #6]
    4e32:	71fb      	strb	r3, [r7, #7]
    4e34:	687a      	ldr	r2, [r7, #4]
    4e36:	663a      	str	r2, [r7, #96]	; 0x60
    4e38:	4619      	mov	r1, r3
    4e3a:	f363 0100 	bfi	r1, r3, #0, #1
    4e3e:	f363 0141 	bfi	r1, r3, #1, #1
    4e42:	f363 0182 	bfi	r1, r3, #2, #1
    4e46:	f363 01c5 	bfi	r1, r3, #3, #3
    4e4a:	2201      	movs	r2, #1
    4e4c:	f362 1188 	bfi	r1, r2, #6, #3
    4e50:	2208      	movs	r2, #8
    4e52:	f362 2153 	bfi	r1, r2, #9, #11
    4e56:	f363 511f 	bfi	r1, r3, #20, #12
    4e5a:	f107 0260 	add.w	r2, r7, #96	; 0x60
    4e5e:	4861      	ldr	r0, [pc, #388]	; (4fe4 <bus_fault+0x2f8>)
    4e60:	f7fc ff92 	bl	1d88 <z_impl_z_log_msg_static_create>
		STORE_xFAR(bfar, SCB->BFAR);
    4e64:	4b60      	ldr	r3, [pc, #384]	; (4fe8 <bus_fault+0x2fc>)
    4e66:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    4e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e6a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    4e6e:	d049      	beq.n	4f04 <bus_fault+0x218>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    4e70:	466e      	mov	r6, sp
    4e72:	b088      	sub	sp, #32
    4e74:	466b      	mov	r3, sp
    4e76:	f113 0210 	adds.w	r2, r3, #16
    4e7a:	d011      	beq.n	4ea0 <bus_fault+0x1b4>
    4e7c:	210c      	movs	r1, #12
    4e7e:	b152      	cbz	r2, 4e96 <bus_fault+0x1aa>
    4e80:	468c      	mov	ip, r1
    4e82:	2904      	cmp	r1, #4
    4e84:	dd03      	ble.n	4e8e <bus_fault+0x1a2>
    4e86:	f8df e170 	ldr.w	lr, [pc, #368]	; 4ff8 <bus_fault+0x30c>
    4e8a:	f8c3 e014 	str.w	lr, [r3, #20]
    4e8e:	f1bc 0f08 	cmp.w	ip, #8
    4e92:	dd08      	ble.n	4ea6 <bus_fault+0x1ba>
    4e94:	6198      	str	r0, [r3, #24]
    4e96:	290b      	cmp	r1, #11
    4e98:	dd31      	ble.n	4efe <bus_fault+0x212>
    4e9a:	f04f 0c0c 	mov.w	ip, #12
    4e9e:	e004      	b.n	4eaa <bus_fault+0x1be>
    4ea0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    4ea4:	e7eb      	b.n	4e7e <bus_fault+0x192>
    4ea6:	f06f 0c1b 	mvn.w	ip, #27
    4eaa:	b13a      	cbz	r2, 4ebc <bus_fault+0x1d0>
    4eac:	2103      	movs	r1, #3
    4eae:	7139      	strb	r1, [r7, #4]
    4eb0:	2100      	movs	r1, #0
    4eb2:	7179      	strb	r1, [r7, #5]
    4eb4:	71b9      	strb	r1, [r7, #6]
    4eb6:	71f9      	strb	r1, [r7, #7]
    4eb8:	6878      	ldr	r0, [r7, #4]
    4eba:	6118      	str	r0, [r3, #16]
    4ebc:	2100      	movs	r1, #0
    4ebe:	f36f 0100 	bfc	r1, #0, #1
    4ec2:	f36f 0141 	bfc	r1, #1, #1
    4ec6:	f36f 0182 	bfc	r1, #2, #1
    4eca:	f36f 01c5 	bfc	r1, #3, #3
    4ece:	2301      	movs	r3, #1
    4ed0:	f363 1188 	bfi	r1, r3, #6, #3
    4ed4:	f3cc 030a 	ubfx	r3, ip, #0, #11
    4ed8:	f363 2153 	bfi	r1, r3, #9, #11
    4edc:	f36f 511f 	bfc	r1, #20, #12
    4ee0:	2300      	movs	r3, #0
    4ee2:	4840      	ldr	r0, [pc, #256]	; (4fe4 <bus_fault+0x2f8>)
    4ee4:	f7fc ff50 	bl	1d88 <z_impl_z_log_msg_static_create>
    4ee8:	46b5      	mov	sp, r6
			if (from_hard_fault != 0) {
    4eea:	f1b8 0f00 	cmp.w	r8, #0
    4eee:	d00b      	beq.n	4f08 <bus_fault+0x21c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    4ef0:	4a3d      	ldr	r2, [pc, #244]	; (4fe8 <bus_fault+0x2fc>)
    4ef2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4ef4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    4ef8:	6293      	str	r3, [r2, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    4efa:	2619      	movs	r6, #25
    4efc:	e72d      	b.n	4d5a <bus_fault+0x6e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    4efe:	f06f 0c1b 	mvn.w	ip, #27
    4f02:	e7d2      	b.n	4eaa <bus_fault+0x1be>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    4f04:	2619      	movs	r6, #25
    4f06:	e728      	b.n	4d5a <bus_fault+0x6e>
    4f08:	2619      	movs	r6, #25
    4f0a:	e726      	b.n	4d5a <bus_fault+0x6e>
		PR_FAULT_INFO("  Imprecise data bus error");
    4f0c:	4b3b      	ldr	r3, [pc, #236]	; (4ffc <bus_fault+0x310>)
    4f0e:	67fb      	str	r3, [r7, #124]	; 0x7c
    4f10:	2302      	movs	r3, #2
    4f12:	713b      	strb	r3, [r7, #4]
    4f14:	2300      	movs	r3, #0
    4f16:	717b      	strb	r3, [r7, #5]
    4f18:	71bb      	strb	r3, [r7, #6]
    4f1a:	71fb      	strb	r3, [r7, #7]
    4f1c:	687a      	ldr	r2, [r7, #4]
    4f1e:	67ba      	str	r2, [r7, #120]	; 0x78
    4f20:	4619      	mov	r1, r3
    4f22:	f363 0100 	bfi	r1, r3, #0, #1
    4f26:	f363 0141 	bfi	r1, r3, #1, #1
    4f2a:	f363 0182 	bfi	r1, r3, #2, #1
    4f2e:	f363 01c5 	bfi	r1, r3, #3, #3
    4f32:	2201      	movs	r2, #1
    4f34:	f362 1188 	bfi	r1, r2, #6, #3
    4f38:	2208      	movs	r2, #8
    4f3a:	f362 2153 	bfi	r1, r2, #9, #11
    4f3e:	f363 511f 	bfi	r1, r3, #20, #12
    4f42:	f107 0278 	add.w	r2, r7, #120	; 0x78
    4f46:	4827      	ldr	r0, [pc, #156]	; (4fe4 <bus_fault+0x2f8>)
    4f48:	f7fc ff1e 	bl	1d88 <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    4f4c:	261a      	movs	r6, #26
    4f4e:	e70a      	b.n	4d66 <bus_fault+0x7a>
		PR_FAULT_INFO("  Instruction bus error");
    4f50:	4b2b      	ldr	r3, [pc, #172]	; (5000 <bus_fault+0x314>)
    4f52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    4f56:	2302      	movs	r3, #2
    4f58:	713b      	strb	r3, [r7, #4]
    4f5a:	2300      	movs	r3, #0
    4f5c:	717b      	strb	r3, [r7, #5]
    4f5e:	71bb      	strb	r3, [r7, #6]
    4f60:	71fb      	strb	r3, [r7, #7]
    4f62:	687a      	ldr	r2, [r7, #4]
    4f64:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    4f68:	4619      	mov	r1, r3
    4f6a:	f363 0100 	bfi	r1, r3, #0, #1
    4f6e:	f363 0141 	bfi	r1, r3, #1, #1
    4f72:	f363 0182 	bfi	r1, r3, #2, #1
    4f76:	f363 01c5 	bfi	r1, r3, #3, #3
    4f7a:	2201      	movs	r2, #1
    4f7c:	f362 1188 	bfi	r1, r2, #6, #3
    4f80:	2208      	movs	r2, #8
    4f82:	f362 2153 	bfi	r1, r2, #9, #11
    4f86:	f363 511f 	bfi	r1, r3, #20, #12
    4f8a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
    4f8e:	4815      	ldr	r0, [pc, #84]	; (4fe4 <bus_fault+0x2f8>)
    4f90:	f7fc fefa 	bl	1d88 <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    4f94:	261b      	movs	r6, #27
    4f96:	e6f2      	b.n	4d7e <bus_fault+0x92>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    4f98:	4b1a      	ldr	r3, [pc, #104]	; (5004 <bus_fault+0x318>)
    4f9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    4f9e:	2302      	movs	r3, #2
    4fa0:	713b      	strb	r3, [r7, #4]
    4fa2:	2300      	movs	r3, #0
    4fa4:	717b      	strb	r3, [r7, #5]
    4fa6:	71bb      	strb	r3, [r7, #6]
    4fa8:	71fb      	strb	r3, [r7, #7]
    4faa:	687a      	ldr	r2, [r7, #4]
    4fac:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    4fb0:	4619      	mov	r1, r3
    4fb2:	f363 0100 	bfi	r1, r3, #0, #1
    4fb6:	f363 0141 	bfi	r1, r3, #1, #1
    4fba:	f363 0182 	bfi	r1, r3, #2, #1
    4fbe:	f363 01c5 	bfi	r1, r3, #3, #3
    4fc2:	2201      	movs	r2, #1
    4fc4:	f362 1188 	bfi	r1, r2, #6, #3
    4fc8:	2208      	movs	r2, #8
    4fca:	f362 2153 	bfi	r1, r2, #9, #11
    4fce:	f363 511f 	bfi	r1, r3, #20, #12
    4fd2:	f107 0290 	add.w	r2, r7, #144	; 0x90
    4fd6:	4803      	ldr	r0, [pc, #12]	; (4fe4 <bus_fault+0x2f8>)
    4fd8:	f7fc fed6 	bl	1d88 <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    4fdc:	261c      	movs	r6, #28
    4fde:	e6ce      	b.n	4d7e <bus_fault+0x92>
    4fe0:	000108c8 	.word	0x000108c8
    4fe4:	0000fe8c 	.word	0x0000fe8c
    4fe8:	e000ed00 	.word	0xe000ed00
    4fec:	000108e0 	.word	0x000108e0
    4ff0:	000108f4 	.word	0x000108f4
    4ff4:	00010908 	.word	0x00010908
    4ff8:	00010924 	.word	0x00010924
    4ffc:	0001093c 	.word	0x0001093c
    5000:	00010958 	.word	0x00010958
    5004:	00010970 	.word	0x00010970

00005008 <usage_fault>:
{
    5008:	b500      	push	{lr}
    500a:	b0ad      	sub	sp, #180	; 0xb4
	PR_FAULT_INFO("***** USAGE FAULT *****");
    500c:	4b96      	ldr	r3, [pc, #600]	; (5268 <usage_fault+0x260>)
    500e:	9307      	str	r3, [sp, #28]
    5010:	2302      	movs	r3, #2
    5012:	f88d 3004 	strb.w	r3, [sp, #4]
    5016:	2300      	movs	r3, #0
    5018:	f88d 3005 	strb.w	r3, [sp, #5]
    501c:	f88d 3006 	strb.w	r3, [sp, #6]
    5020:	f88d 3007 	strb.w	r3, [sp, #7]
    5024:	9a01      	ldr	r2, [sp, #4]
    5026:	9206      	str	r2, [sp, #24]
    5028:	4619      	mov	r1, r3
    502a:	f363 0100 	bfi	r1, r3, #0, #1
    502e:	f363 0141 	bfi	r1, r3, #1, #1
    5032:	f363 0182 	bfi	r1, r3, #2, #1
    5036:	f363 01c5 	bfi	r1, r3, #3, #3
    503a:	2201      	movs	r2, #1
    503c:	f362 1188 	bfi	r1, r2, #6, #3
    5040:	2208      	movs	r2, #8
    5042:	f362 2153 	bfi	r1, r2, #9, #11
    5046:	f363 511f 	bfi	r1, r3, #20, #12
    504a:	aa06      	add	r2, sp, #24
    504c:	4887      	ldr	r0, [pc, #540]	; (526c <usage_fault+0x264>)
    504e:	f7fc fe9b 	bl	1d88 <z_impl_z_log_msg_static_create>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    5052:	4b87      	ldr	r3, [pc, #540]	; (5270 <usage_fault+0x268>)
    5054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5056:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    505a:	d126      	bne.n	50aa <usage_fault+0xa2>
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    505c:	201d      	movs	r0, #29
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    505e:	4b84      	ldr	r3, [pc, #528]	; (5270 <usage_fault+0x268>)
    5060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5062:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    5066:	d145      	bne.n	50f4 <usage_fault+0xec>
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    5068:	4b81      	ldr	r3, [pc, #516]	; (5270 <usage_fault+0x268>)
    506a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    506c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    5070:	d165      	bne.n	513e <usage_fault+0x136>
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    5072:	4b7f      	ldr	r3, [pc, #508]	; (5270 <usage_fault+0x268>)
    5074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5076:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    507a:	f040 8085 	bne.w	5188 <usage_fault+0x180>
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    507e:	4b7c      	ldr	r3, [pc, #496]	; (5270 <usage_fault+0x268>)
    5080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5082:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    5086:	f040 80a4 	bne.w	51d2 <usage_fault+0x1ca>
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    508a:	4b79      	ldr	r3, [pc, #484]	; (5270 <usage_fault+0x268>)
    508c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    508e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5092:	f040 80c3 	bne.w	521c <usage_fault+0x214>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    5096:	4a76      	ldr	r2, [pc, #472]	; (5270 <usage_fault+0x268>)
    5098:	6a93      	ldr	r3, [r2, #40]	; 0x28
    509a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    509e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    50a2:	6293      	str	r3, [r2, #40]	; 0x28
}
    50a4:	b02d      	add	sp, #180	; 0xb4
    50a6:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
    50aa:	4b72      	ldr	r3, [pc, #456]	; (5274 <usage_fault+0x26c>)
    50ac:	930d      	str	r3, [sp, #52]	; 0x34
    50ae:	2302      	movs	r3, #2
    50b0:	f88d 3004 	strb.w	r3, [sp, #4]
    50b4:	2300      	movs	r3, #0
    50b6:	f88d 3005 	strb.w	r3, [sp, #5]
    50ba:	f88d 3006 	strb.w	r3, [sp, #6]
    50be:	f88d 3007 	strb.w	r3, [sp, #7]
    50c2:	9a01      	ldr	r2, [sp, #4]
    50c4:	920c      	str	r2, [sp, #48]	; 0x30
    50c6:	4619      	mov	r1, r3
    50c8:	f363 0100 	bfi	r1, r3, #0, #1
    50cc:	f363 0141 	bfi	r1, r3, #1, #1
    50d0:	f363 0182 	bfi	r1, r3, #2, #1
    50d4:	f363 01c5 	bfi	r1, r3, #3, #3
    50d8:	2201      	movs	r2, #1
    50da:	f362 1188 	bfi	r1, r2, #6, #3
    50de:	2208      	movs	r2, #8
    50e0:	f362 2153 	bfi	r1, r2, #9, #11
    50e4:	f363 511f 	bfi	r1, r3, #20, #12
    50e8:	aa0c      	add	r2, sp, #48	; 0x30
    50ea:	4860      	ldr	r0, [pc, #384]	; (526c <usage_fault+0x264>)
    50ec:	f7fc fe4c 	bl	1d88 <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_USAGE_DIV_0;
    50f0:	201e      	movs	r0, #30
    50f2:	e7b4      	b.n	505e <usage_fault+0x56>
		PR_FAULT_INFO("  Unaligned memory access");
    50f4:	4b60      	ldr	r3, [pc, #384]	; (5278 <usage_fault+0x270>)
    50f6:	9313      	str	r3, [sp, #76]	; 0x4c
    50f8:	2302      	movs	r3, #2
    50fa:	f88d 3004 	strb.w	r3, [sp, #4]
    50fe:	2300      	movs	r3, #0
    5100:	f88d 3005 	strb.w	r3, [sp, #5]
    5104:	f88d 3006 	strb.w	r3, [sp, #6]
    5108:	f88d 3007 	strb.w	r3, [sp, #7]
    510c:	9a01      	ldr	r2, [sp, #4]
    510e:	9212      	str	r2, [sp, #72]	; 0x48
    5110:	4619      	mov	r1, r3
    5112:	f363 0100 	bfi	r1, r3, #0, #1
    5116:	f363 0141 	bfi	r1, r3, #1, #1
    511a:	f363 0182 	bfi	r1, r3, #2, #1
    511e:	f363 01c5 	bfi	r1, r3, #3, #3
    5122:	2201      	movs	r2, #1
    5124:	f362 1188 	bfi	r1, r2, #6, #3
    5128:	2208      	movs	r2, #8
    512a:	f362 2153 	bfi	r1, r2, #9, #11
    512e:	f363 511f 	bfi	r1, r3, #20, #12
    5132:	aa12      	add	r2, sp, #72	; 0x48
    5134:	484d      	ldr	r0, [pc, #308]	; (526c <usage_fault+0x264>)
    5136:	f7fc fe27 	bl	1d88 <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    513a:	201f      	movs	r0, #31
    513c:	e794      	b.n	5068 <usage_fault+0x60>
		PR_FAULT_INFO("  No coprocessor instructions");
    513e:	4b4f      	ldr	r3, [pc, #316]	; (527c <usage_fault+0x274>)
    5140:	9319      	str	r3, [sp, #100]	; 0x64
    5142:	2302      	movs	r3, #2
    5144:	f88d 3004 	strb.w	r3, [sp, #4]
    5148:	2300      	movs	r3, #0
    514a:	f88d 3005 	strb.w	r3, [sp, #5]
    514e:	f88d 3006 	strb.w	r3, [sp, #6]
    5152:	f88d 3007 	strb.w	r3, [sp, #7]
    5156:	9a01      	ldr	r2, [sp, #4]
    5158:	9218      	str	r2, [sp, #96]	; 0x60
    515a:	4619      	mov	r1, r3
    515c:	f363 0100 	bfi	r1, r3, #0, #1
    5160:	f363 0141 	bfi	r1, r3, #1, #1
    5164:	f363 0182 	bfi	r1, r3, #2, #1
    5168:	f363 01c5 	bfi	r1, r3, #3, #3
    516c:	2201      	movs	r2, #1
    516e:	f362 1188 	bfi	r1, r2, #6, #3
    5172:	2208      	movs	r2, #8
    5174:	f362 2153 	bfi	r1, r2, #9, #11
    5178:	f363 511f 	bfi	r1, r3, #20, #12
    517c:	aa18      	add	r2, sp, #96	; 0x60
    517e:	483b      	ldr	r0, [pc, #236]	; (526c <usage_fault+0x264>)
    5180:	f7fc fe02 	bl	1d88 <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    5184:	2021      	movs	r0, #33	; 0x21
    5186:	e774      	b.n	5072 <usage_fault+0x6a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    5188:	4b3d      	ldr	r3, [pc, #244]	; (5280 <usage_fault+0x278>)
    518a:	931f      	str	r3, [sp, #124]	; 0x7c
    518c:	2302      	movs	r3, #2
    518e:	f88d 3004 	strb.w	r3, [sp, #4]
    5192:	2300      	movs	r3, #0
    5194:	f88d 3005 	strb.w	r3, [sp, #5]
    5198:	f88d 3006 	strb.w	r3, [sp, #6]
    519c:	f88d 3007 	strb.w	r3, [sp, #7]
    51a0:	9a01      	ldr	r2, [sp, #4]
    51a2:	921e      	str	r2, [sp, #120]	; 0x78
    51a4:	4619      	mov	r1, r3
    51a6:	f363 0100 	bfi	r1, r3, #0, #1
    51aa:	f363 0141 	bfi	r1, r3, #1, #1
    51ae:	f363 0182 	bfi	r1, r3, #2, #1
    51b2:	f363 01c5 	bfi	r1, r3, #3, #3
    51b6:	2201      	movs	r2, #1
    51b8:	f362 1188 	bfi	r1, r2, #6, #3
    51bc:	2208      	movs	r2, #8
    51be:	f362 2153 	bfi	r1, r2, #9, #11
    51c2:	f363 511f 	bfi	r1, r3, #20, #12
    51c6:	aa1e      	add	r2, sp, #120	; 0x78
    51c8:	4828      	ldr	r0, [pc, #160]	; (526c <usage_fault+0x264>)
    51ca:	f7fc fddd 	bl	1d88 <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    51ce:	2022      	movs	r0, #34	; 0x22
    51d0:	e755      	b.n	507e <usage_fault+0x76>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    51d2:	4b2c      	ldr	r3, [pc, #176]	; (5284 <usage_fault+0x27c>)
    51d4:	9325      	str	r3, [sp, #148]	; 0x94
    51d6:	2302      	movs	r3, #2
    51d8:	f88d 3004 	strb.w	r3, [sp, #4]
    51dc:	2300      	movs	r3, #0
    51de:	f88d 3005 	strb.w	r3, [sp, #5]
    51e2:	f88d 3006 	strb.w	r3, [sp, #6]
    51e6:	f88d 3007 	strb.w	r3, [sp, #7]
    51ea:	9a01      	ldr	r2, [sp, #4]
    51ec:	9224      	str	r2, [sp, #144]	; 0x90
    51ee:	4619      	mov	r1, r3
    51f0:	f363 0100 	bfi	r1, r3, #0, #1
    51f4:	f363 0141 	bfi	r1, r3, #1, #1
    51f8:	f363 0182 	bfi	r1, r3, #2, #1
    51fc:	f363 01c5 	bfi	r1, r3, #3, #3
    5200:	2201      	movs	r2, #1
    5202:	f362 1188 	bfi	r1, r2, #6, #3
    5206:	2208      	movs	r2, #8
    5208:	f362 2153 	bfi	r1, r2, #9, #11
    520c:	f363 511f 	bfi	r1, r3, #20, #12
    5210:	aa24      	add	r2, sp, #144	; 0x90
    5212:	4816      	ldr	r0, [pc, #88]	; (526c <usage_fault+0x264>)
    5214:	f7fc fdb8 	bl	1d88 <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    5218:	2023      	movs	r0, #35	; 0x23
    521a:	e736      	b.n	508a <usage_fault+0x82>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    521c:	4b1a      	ldr	r3, [pc, #104]	; (5288 <usage_fault+0x280>)
    521e:	932b      	str	r3, [sp, #172]	; 0xac
    5220:	2302      	movs	r3, #2
    5222:	f88d 3004 	strb.w	r3, [sp, #4]
    5226:	2300      	movs	r3, #0
    5228:	f88d 3005 	strb.w	r3, [sp, #5]
    522c:	f88d 3006 	strb.w	r3, [sp, #6]
    5230:	f88d 3007 	strb.w	r3, [sp, #7]
    5234:	9a01      	ldr	r2, [sp, #4]
    5236:	922a      	str	r2, [sp, #168]	; 0xa8
    5238:	4619      	mov	r1, r3
    523a:	f363 0100 	bfi	r1, r3, #0, #1
    523e:	f363 0141 	bfi	r1, r3, #1, #1
    5242:	f363 0182 	bfi	r1, r3, #2, #1
    5246:	f363 01c5 	bfi	r1, r3, #3, #3
    524a:	2201      	movs	r2, #1
    524c:	f362 1188 	bfi	r1, r2, #6, #3
    5250:	2208      	movs	r2, #8
    5252:	f362 2153 	bfi	r1, r2, #9, #11
    5256:	f363 511f 	bfi	r1, r3, #20, #12
    525a:	aa2a      	add	r2, sp, #168	; 0xa8
    525c:	4803      	ldr	r0, [pc, #12]	; (526c <usage_fault+0x264>)
    525e:	f7fc fd93 	bl	1d88 <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    5262:	2024      	movs	r0, #36	; 0x24
    5264:	e717      	b.n	5096 <usage_fault+0x8e>
    5266:	bf00      	nop
    5268:	000109a0 	.word	0x000109a0
    526c:	0000fe8c 	.word	0x0000fe8c
    5270:	e000ed00 	.word	0xe000ed00
    5274:	000109b8 	.word	0x000109b8
    5278:	000109cc 	.word	0x000109cc
    527c:	000109e8 	.word	0x000109e8
    5280:	00010a08 	.word	0x00010a08
    5284:	00010a30 	.word	0x00010a30
    5288:	00010a4c 	.word	0x00010a4c

0000528c <debug_monitor>:
{
    528c:	b500      	push	{lr}
    528e:	b089      	sub	sp, #36	; 0x24
	*recoverable = false;
    5290:	2300      	movs	r3, #0
    5292:	700b      	strb	r3, [r1, #0]
	PR_FAULT_INFO(
    5294:	4a12      	ldr	r2, [pc, #72]	; (52e0 <debug_monitor+0x54>)
    5296:	9207      	str	r2, [sp, #28]
    5298:	2202      	movs	r2, #2
    529a:	f88d 2004 	strb.w	r2, [sp, #4]
    529e:	f88d 3005 	strb.w	r3, [sp, #5]
    52a2:	f88d 3006 	strb.w	r3, [sp, #6]
    52a6:	f88d 3007 	strb.w	r3, [sp, #7]
    52aa:	9a01      	ldr	r2, [sp, #4]
    52ac:	9206      	str	r2, [sp, #24]
    52ae:	4619      	mov	r1, r3
    52b0:	f363 0100 	bfi	r1, r3, #0, #1
    52b4:	f363 0141 	bfi	r1, r3, #1, #1
    52b8:	f363 0182 	bfi	r1, r3, #2, #1
    52bc:	f363 01c5 	bfi	r1, r3, #3, #3
    52c0:	2201      	movs	r2, #1
    52c2:	f362 1188 	bfi	r1, r2, #6, #3
    52c6:	2208      	movs	r2, #8
    52c8:	f362 2153 	bfi	r1, r2, #9, #11
    52cc:	f363 511f 	bfi	r1, r3, #20, #12
    52d0:	aa06      	add	r2, sp, #24
    52d2:	4804      	ldr	r0, [pc, #16]	; (52e4 <debug_monitor+0x58>)
    52d4:	f7fc fd58 	bl	1d88 <z_impl_z_log_msg_static_create>
}
    52d8:	b009      	add	sp, #36	; 0x24
    52da:	f85d fb04 	ldr.w	pc, [sp], #4
    52de:	bf00      	nop
    52e0:	00010a78 	.word	0x00010a78
    52e4:	0000fe8c 	.word	0x0000fe8c

000052e8 <reserved_exception>:
{
    52e8:	b590      	push	{r4, r7, lr}
    52ea:	b083      	sub	sp, #12
    52ec:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** %s %d) *****",
    52ee:	290f      	cmp	r1, #15
    52f0:	dc23      	bgt.n	533a <reserved_exception+0x52>
    52f2:	4c2f      	ldr	r4, [pc, #188]	; (53b0 <reserved_exception+0xc8>)
    52f4:	3910      	subs	r1, #16
    52f6:	2300      	movs	r3, #0
    52f8:	713b      	strb	r3, [r7, #4]
    52fa:	2302      	movs	r3, #2
    52fc:	717b      	strb	r3, [r7, #5]
    52fe:	b08a      	sub	sp, #40	; 0x28
    5300:	46ec      	mov	ip, sp
    5302:	f11c 0210 	adds.w	r2, ip, #16
    5306:	d01a      	beq.n	533e <reserved_exception+0x56>
    5308:	2012      	movs	r0, #18
    530a:	b122      	cbz	r2, 5316 <reserved_exception+0x2e>
    530c:	2804      	cmp	r0, #4
    530e:	dd02      	ble.n	5316 <reserved_exception+0x2e>
    5310:	4b28      	ldr	r3, [pc, #160]	; (53b4 <reserved_exception+0xcc>)
    5312:	f8cc 3014 	str.w	r3, [ip, #20]
    5316:	2300      	movs	r3, #0
    5318:	703b      	strb	r3, [r7, #0]
    531a:	2302      	movs	r3, #2
    531c:	707b      	strb	r3, [r7, #1]
    531e:	b1e2      	cbz	r2, 535a <reserved_exception+0x72>
    5320:	4603      	mov	r3, r0
    5322:	2808      	cmp	r0, #8
    5324:	dd01      	ble.n	532a <reserved_exception+0x42>
    5326:	f8cc 4018 	str.w	r4, [ip, #24]
    532a:	2b0c      	cmp	r3, #12
    532c:	dd01      	ble.n	5332 <reserved_exception+0x4a>
    532e:	f8cc 101c 	str.w	r1, [ip, #28]
    5332:	f10c 0320 	add.w	r3, ip, #32
    5336:	2100      	movs	r1, #0
    5338:	e00d      	b.n	5356 <reserved_exception+0x6e>
    533a:	4c1f      	ldr	r4, [pc, #124]	; (53b8 <reserved_exception+0xd0>)
    533c:	e7da      	b.n	52f4 <reserved_exception+0xc>
    533e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    5342:	e7e2      	b.n	530a <reserved_exception+0x22>
    5344:	f101 0408 	add.w	r4, r1, #8
    5348:	eb04 0e07 	add.w	lr, r4, r7
    534c:	f81e ec08 	ldrb.w	lr, [lr, #-8]
    5350:	f803 eb01 	strb.w	lr, [r3], #1
    5354:	3101      	adds	r1, #1
    5356:	2901      	cmp	r1, #1
    5358:	d9f4      	bls.n	5344 <reserved_exception+0x5c>
    535a:	2811      	cmp	r0, #17
    535c:	dd24      	ble.n	53a8 <reserved_exception+0xc0>
    535e:	2312      	movs	r3, #18
    5360:	b14a      	cbz	r2, 5376 <reserved_exception+0x8e>
    5362:	2104      	movs	r1, #4
    5364:	7139      	strb	r1, [r7, #4]
    5366:	2100      	movs	r1, #0
    5368:	7179      	strb	r1, [r7, #5]
    536a:	71b9      	strb	r1, [r7, #6]
    536c:	2101      	movs	r1, #1
    536e:	71f9      	strb	r1, [r7, #7]
    5370:	6878      	ldr	r0, [r7, #4]
    5372:	f8cc 0010 	str.w	r0, [ip, #16]
    5376:	2100      	movs	r1, #0
    5378:	f36f 0100 	bfc	r1, #0, #1
    537c:	f36f 0141 	bfc	r1, #1, #1
    5380:	f36f 0182 	bfc	r1, #2, #1
    5384:	f36f 01c5 	bfc	r1, #3, #3
    5388:	2001      	movs	r0, #1
    538a:	f360 1188 	bfi	r1, r0, #6, #3
    538e:	f3c3 030a 	ubfx	r3, r3, #0, #11
    5392:	f363 2153 	bfi	r1, r3, #9, #11
    5396:	f36f 511f 	bfc	r1, #20, #12
    539a:	2300      	movs	r3, #0
    539c:	4807      	ldr	r0, [pc, #28]	; (53bc <reserved_exception+0xd4>)
    539e:	f7fc fcf3 	bl	1d88 <z_impl_z_log_msg_static_create>
}
    53a2:	370c      	adds	r7, #12
    53a4:	46bd      	mov	sp, r7
    53a6:	bd90      	pop	{r4, r7, pc}
	PR_FAULT_INFO("***** %s %d) *****",
    53a8:	f06f 031b 	mvn.w	r3, #27
    53ac:	e7d8      	b.n	5360 <reserved_exception+0x78>
    53ae:	bf00      	nop
    53b0:	00010a9c 	.word	0x00010a9c
    53b4:	00010ad0 	.word	0x00010ad0
    53b8:	00010ab4 	.word	0x00010ab4
    53bc:	0000fe8c 	.word	0x0000fe8c

000053c0 <mem_manage_fault>:
{
    53c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    53c4:	b0a7      	sub	sp, #156	; 0x9c
    53c6:	af00      	add	r7, sp, #0
    53c8:	4604      	mov	r4, r0
    53ca:	4688      	mov	r8, r1
    53cc:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    53ce:	4bb9      	ldr	r3, [pc, #740]	; (56b4 <mem_manage_fault+0x2f4>)
    53d0:	61fb      	str	r3, [r7, #28]
    53d2:	2302      	movs	r3, #2
    53d4:	713b      	strb	r3, [r7, #4]
    53d6:	2300      	movs	r3, #0
    53d8:	717b      	strb	r3, [r7, #5]
    53da:	71bb      	strb	r3, [r7, #6]
    53dc:	71fb      	strb	r3, [r7, #7]
    53de:	687a      	ldr	r2, [r7, #4]
    53e0:	61ba      	str	r2, [r7, #24]
    53e2:	4619      	mov	r1, r3
    53e4:	f363 0100 	bfi	r1, r3, #0, #1
    53e8:	f363 0141 	bfi	r1, r3, #1, #1
    53ec:	f363 0182 	bfi	r1, r3, #2, #1
    53f0:	f363 01c5 	bfi	r1, r3, #3, #3
    53f4:	2201      	movs	r2, #1
    53f6:	f362 1188 	bfi	r1, r2, #6, #3
    53fa:	2208      	movs	r2, #8
    53fc:	f362 2153 	bfi	r1, r2, #9, #11
    5400:	f363 511f 	bfi	r1, r3, #20, #12
    5404:	f107 0218 	add.w	r2, r7, #24
    5408:	48ab      	ldr	r0, [pc, #684]	; (56b8 <mem_manage_fault+0x2f8>)
    540a:	f7fc fcbd 	bl	1d88 <z_impl_z_log_msg_static_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    540e:	4bab      	ldr	r3, [pc, #684]	; (56bc <mem_manage_fault+0x2fc>)
    5410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5412:	f013 0f10 	tst.w	r3, #16
    5416:	d141      	bne.n	549c <mem_manage_fault+0xdc>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    5418:	2610      	movs	r6, #16
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    541a:	4ba8      	ldr	r3, [pc, #672]	; (56bc <mem_manage_fault+0x2fc>)
    541c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    541e:	f013 0f08 	tst.w	r3, #8
    5422:	d15d      	bne.n	54e0 <mem_manage_fault+0x120>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    5424:	4ba5      	ldr	r3, [pc, #660]	; (56bc <mem_manage_fault+0x2fc>)
    5426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5428:	f013 0f02 	tst.w	r3, #2
    542c:	d17a      	bne.n	5524 <mem_manage_fault+0x164>
	uint32_t mmfar = -EINVAL;
    542e:	f06f 0915 	mvn.w	r9, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    5432:	4ba2      	ldr	r3, [pc, #648]	; (56bc <mem_manage_fault+0x2fc>)
    5434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5436:	f013 0f01 	tst.w	r3, #1
    543a:	f040 80ea 	bne.w	5612 <mem_manage_fault+0x252>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    543e:	4b9f      	ldr	r3, [pc, #636]	; (56bc <mem_manage_fault+0x2fc>)
    5440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5442:	f013 0f20 	tst.w	r3, #32
    5446:	f040 8106 	bne.w	5656 <mem_manage_fault+0x296>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    544a:	4b9c      	ldr	r3, [pc, #624]	; (56bc <mem_manage_fault+0x2fc>)
    544c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    544e:	f013 0f10 	tst.w	r3, #16
    5452:	d104      	bne.n	545e <mem_manage_fault+0x9e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    5454:	4b99      	ldr	r3, [pc, #612]	; (56bc <mem_manage_fault+0x2fc>)
    5456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    5458:	f013 0f02 	tst.w	r3, #2
    545c:	d005      	beq.n	546a <mem_manage_fault+0xaa>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    545e:	4b97      	ldr	r3, [pc, #604]	; (56bc <mem_manage_fault+0x2fc>)
    5460:	685b      	ldr	r3, [r3, #4]
    5462:	f413 6f00 	tst.w	r3, #2048	; 0x800
    5466:	f040 811a 	bne.w	569e <mem_manage_fault+0x2de>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    546a:	4b94      	ldr	r3, [pc, #592]	; (56bc <mem_manage_fault+0x2fc>)
    546c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    546e:	f013 0f20 	tst.w	r3, #32
    5472:	d004      	beq.n	547e <mem_manage_fault+0xbe>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    5474:	4a91      	ldr	r2, [pc, #580]	; (56bc <mem_manage_fault+0x2fc>)
    5476:	6a53      	ldr	r3, [r2, #36]	; 0x24
    5478:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    547c:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    547e:	4a8f      	ldr	r2, [pc, #572]	; (56bc <mem_manage_fault+0x2fc>)
    5480:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5482:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    5486:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    5488:	2101      	movs	r1, #1
    548a:	4620      	mov	r0, r4
    548c:	f008 fc00 	bl	dc90 <memory_fault_recoverable>
    5490:	7028      	strb	r0, [r5, #0]
}
    5492:	4630      	mov	r0, r6
    5494:	379c      	adds	r7, #156	; 0x9c
    5496:	46bd      	mov	sp, r7
    5498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
    549c:	4b88      	ldr	r3, [pc, #544]	; (56c0 <mem_manage_fault+0x300>)
    549e:	637b      	str	r3, [r7, #52]	; 0x34
    54a0:	2302      	movs	r3, #2
    54a2:	713b      	strb	r3, [r7, #4]
    54a4:	2300      	movs	r3, #0
    54a6:	717b      	strb	r3, [r7, #5]
    54a8:	71bb      	strb	r3, [r7, #6]
    54aa:	71fb      	strb	r3, [r7, #7]
    54ac:	687a      	ldr	r2, [r7, #4]
    54ae:	633a      	str	r2, [r7, #48]	; 0x30
    54b0:	4619      	mov	r1, r3
    54b2:	f363 0100 	bfi	r1, r3, #0, #1
    54b6:	f363 0141 	bfi	r1, r3, #1, #1
    54ba:	f363 0182 	bfi	r1, r3, #2, #1
    54be:	f363 01c5 	bfi	r1, r3, #3, #3
    54c2:	2201      	movs	r2, #1
    54c4:	f362 1188 	bfi	r1, r2, #6, #3
    54c8:	2208      	movs	r2, #8
    54ca:	f362 2153 	bfi	r1, r2, #9, #11
    54ce:	f363 511f 	bfi	r1, r3, #20, #12
    54d2:	f107 0230 	add.w	r2, r7, #48	; 0x30
    54d6:	4878      	ldr	r0, [pc, #480]	; (56b8 <mem_manage_fault+0x2f8>)
    54d8:	f7fc fc56 	bl	1d88 <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_MEM_STACKING;
    54dc:	2611      	movs	r6, #17
    54de:	e79c      	b.n	541a <mem_manage_fault+0x5a>
		PR_FAULT_INFO("  Unstacking error");
    54e0:	4b78      	ldr	r3, [pc, #480]	; (56c4 <mem_manage_fault+0x304>)
    54e2:	64fb      	str	r3, [r7, #76]	; 0x4c
    54e4:	2302      	movs	r3, #2
    54e6:	713b      	strb	r3, [r7, #4]
    54e8:	2300      	movs	r3, #0
    54ea:	717b      	strb	r3, [r7, #5]
    54ec:	71bb      	strb	r3, [r7, #6]
    54ee:	71fb      	strb	r3, [r7, #7]
    54f0:	687a      	ldr	r2, [r7, #4]
    54f2:	64ba      	str	r2, [r7, #72]	; 0x48
    54f4:	4619      	mov	r1, r3
    54f6:	f363 0100 	bfi	r1, r3, #0, #1
    54fa:	f363 0141 	bfi	r1, r3, #1, #1
    54fe:	f363 0182 	bfi	r1, r3, #2, #1
    5502:	f363 01c5 	bfi	r1, r3, #3, #3
    5506:	2201      	movs	r2, #1
    5508:	f362 1188 	bfi	r1, r2, #6, #3
    550c:	2208      	movs	r2, #8
    550e:	f362 2153 	bfi	r1, r2, #9, #11
    5512:	f363 511f 	bfi	r1, r3, #20, #12
    5516:	f107 0248 	add.w	r2, r7, #72	; 0x48
    551a:	4867      	ldr	r0, [pc, #412]	; (56b8 <mem_manage_fault+0x2f8>)
    551c:	f7fc fc34 	bl	1d88 <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_MEM_UNSTACKING;
    5520:	2612      	movs	r6, #18
    5522:	e77f      	b.n	5424 <mem_manage_fault+0x64>
		PR_FAULT_INFO("  Data Access Violation");
    5524:	4b68      	ldr	r3, [pc, #416]	; (56c8 <mem_manage_fault+0x308>)
    5526:	667b      	str	r3, [r7, #100]	; 0x64
    5528:	2302      	movs	r3, #2
    552a:	713b      	strb	r3, [r7, #4]
    552c:	2300      	movs	r3, #0
    552e:	717b      	strb	r3, [r7, #5]
    5530:	71bb      	strb	r3, [r7, #6]
    5532:	71fb      	strb	r3, [r7, #7]
    5534:	687a      	ldr	r2, [r7, #4]
    5536:	663a      	str	r2, [r7, #96]	; 0x60
    5538:	4619      	mov	r1, r3
    553a:	f363 0100 	bfi	r1, r3, #0, #1
    553e:	f363 0141 	bfi	r1, r3, #1, #1
    5542:	f363 0182 	bfi	r1, r3, #2, #1
    5546:	f363 01c5 	bfi	r1, r3, #3, #3
    554a:	2201      	movs	r2, #1
    554c:	f362 1188 	bfi	r1, r2, #6, #3
    5550:	2208      	movs	r2, #8
    5552:	f362 2153 	bfi	r1, r2, #9, #11
    5556:	f363 511f 	bfi	r1, r3, #20, #12
    555a:	f107 0260 	add.w	r2, r7, #96	; 0x60
    555e:	4856      	ldr	r0, [pc, #344]	; (56b8 <mem_manage_fault+0x2f8>)
    5560:	f7fc fc12 	bl	1d88 <z_impl_z_log_msg_static_create>
		uint32_t temp = SCB->MMFAR;
    5564:	4b55      	ldr	r3, [pc, #340]	; (56bc <mem_manage_fault+0x2fc>)
    5566:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    556a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    556c:	f013 0f80 	tst.w	r3, #128	; 0x80
    5570:	d049      	beq.n	5606 <mem_manage_fault+0x246>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    5572:	466e      	mov	r6, sp
    5574:	b088      	sub	sp, #32
    5576:	466b      	mov	r3, sp
    5578:	f113 0210 	adds.w	r2, r3, #16
    557c:	d011      	beq.n	55a2 <mem_manage_fault+0x1e2>
    557e:	210c      	movs	r1, #12
    5580:	b152      	cbz	r2, 5598 <mem_manage_fault+0x1d8>
    5582:	4608      	mov	r0, r1
    5584:	2904      	cmp	r1, #4
    5586:	dd03      	ble.n	5590 <mem_manage_fault+0x1d0>
    5588:	f8df c140 	ldr.w	ip, [pc, #320]	; 56cc <mem_manage_fault+0x30c>
    558c:	f8c3 c014 	str.w	ip, [r3, #20]
    5590:	2808      	cmp	r0, #8
    5592:	dd09      	ble.n	55a8 <mem_manage_fault+0x1e8>
    5594:	f8c3 9018 	str.w	r9, [r3, #24]
    5598:	290b      	cmp	r1, #11
    559a:	dd31      	ble.n	5600 <mem_manage_fault+0x240>
    559c:	f04f 0c0c 	mov.w	ip, #12
    55a0:	e004      	b.n	55ac <mem_manage_fault+0x1ec>
    55a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    55a6:	e7eb      	b.n	5580 <mem_manage_fault+0x1c0>
    55a8:	f06f 0c1b 	mvn.w	ip, #27
    55ac:	b13a      	cbz	r2, 55be <mem_manage_fault+0x1fe>
    55ae:	2103      	movs	r1, #3
    55b0:	7139      	strb	r1, [r7, #4]
    55b2:	2100      	movs	r1, #0
    55b4:	7179      	strb	r1, [r7, #5]
    55b6:	71b9      	strb	r1, [r7, #6]
    55b8:	71f9      	strb	r1, [r7, #7]
    55ba:	6878      	ldr	r0, [r7, #4]
    55bc:	6118      	str	r0, [r3, #16]
    55be:	2100      	movs	r1, #0
    55c0:	f36f 0100 	bfc	r1, #0, #1
    55c4:	f36f 0141 	bfc	r1, #1, #1
    55c8:	f36f 0182 	bfc	r1, #2, #1
    55cc:	f36f 01c5 	bfc	r1, #3, #3
    55d0:	2301      	movs	r3, #1
    55d2:	f363 1188 	bfi	r1, r3, #6, #3
    55d6:	f3cc 030a 	ubfx	r3, ip, #0, #11
    55da:	f363 2153 	bfi	r1, r3, #9, #11
    55de:	f36f 511f 	bfc	r1, #20, #12
    55e2:	2300      	movs	r3, #0
    55e4:	4834      	ldr	r0, [pc, #208]	; (56b8 <mem_manage_fault+0x2f8>)
    55e6:	f7fc fbcf 	bl	1d88 <z_impl_z_log_msg_static_create>
    55ea:	46b5      	mov	sp, r6
			if (from_hard_fault != 0) {
    55ec:	f1b8 0f00 	cmp.w	r8, #0
    55f0:	d00d      	beq.n	560e <mem_manage_fault+0x24e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    55f2:	4a32      	ldr	r2, [pc, #200]	; (56bc <mem_manage_fault+0x2fc>)
    55f4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    55f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    55fa:	6293      	str	r3, [r2, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    55fc:	2613      	movs	r6, #19
    55fe:	e718      	b.n	5432 <mem_manage_fault+0x72>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    5600:	f06f 0c1b 	mvn.w	ip, #27
    5604:	e7d2      	b.n	55ac <mem_manage_fault+0x1ec>
	uint32_t mmfar = -EINVAL;
    5606:	f06f 0915 	mvn.w	r9, #21
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    560a:	2613      	movs	r6, #19
    560c:	e711      	b.n	5432 <mem_manage_fault+0x72>
    560e:	2613      	movs	r6, #19
    5610:	e70f      	b.n	5432 <mem_manage_fault+0x72>
		PR_FAULT_INFO("  Instruction Access Violation");
    5612:	4b2f      	ldr	r3, [pc, #188]	; (56d0 <mem_manage_fault+0x310>)
    5614:	67fb      	str	r3, [r7, #124]	; 0x7c
    5616:	2302      	movs	r3, #2
    5618:	713b      	strb	r3, [r7, #4]
    561a:	2300      	movs	r3, #0
    561c:	717b      	strb	r3, [r7, #5]
    561e:	71bb      	strb	r3, [r7, #6]
    5620:	71fb      	strb	r3, [r7, #7]
    5622:	687a      	ldr	r2, [r7, #4]
    5624:	67ba      	str	r2, [r7, #120]	; 0x78
    5626:	4619      	mov	r1, r3
    5628:	f363 0100 	bfi	r1, r3, #0, #1
    562c:	f363 0141 	bfi	r1, r3, #1, #1
    5630:	f363 0182 	bfi	r1, r3, #2, #1
    5634:	f363 01c5 	bfi	r1, r3, #3, #3
    5638:	2201      	movs	r2, #1
    563a:	f362 1188 	bfi	r1, r2, #6, #3
    563e:	2208      	movs	r2, #8
    5640:	f362 2153 	bfi	r1, r2, #9, #11
    5644:	f363 511f 	bfi	r1, r3, #20, #12
    5648:	f107 0278 	add.w	r2, r7, #120	; 0x78
    564c:	481a      	ldr	r0, [pc, #104]	; (56b8 <mem_manage_fault+0x2f8>)
    564e:	f7fc fb9b 	bl	1d88 <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    5652:	2614      	movs	r6, #20
    5654:	e6f3      	b.n	543e <mem_manage_fault+0x7e>
		PR_FAULT_INFO(
    5656:	4b1f      	ldr	r3, [pc, #124]	; (56d4 <mem_manage_fault+0x314>)
    5658:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    565c:	2302      	movs	r3, #2
    565e:	713b      	strb	r3, [r7, #4]
    5660:	2300      	movs	r3, #0
    5662:	717b      	strb	r3, [r7, #5]
    5664:	71bb      	strb	r3, [r7, #6]
    5666:	71fb      	strb	r3, [r7, #7]
    5668:	687a      	ldr	r2, [r7, #4]
    566a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    566e:	4619      	mov	r1, r3
    5670:	f363 0100 	bfi	r1, r3, #0, #1
    5674:	f363 0141 	bfi	r1, r3, #1, #1
    5678:	f363 0182 	bfi	r1, r3, #2, #1
    567c:	f363 01c5 	bfi	r1, r3, #3, #3
    5680:	2201      	movs	r2, #1
    5682:	f362 1188 	bfi	r1, r2, #6, #3
    5686:	2208      	movs	r2, #8
    5688:	f362 2153 	bfi	r1, r2, #9, #11
    568c:	f363 511f 	bfi	r1, r3, #20, #12
    5690:	f107 0290 	add.w	r2, r7, #144	; 0x90
    5694:	4808      	ldr	r0, [pc, #32]	; (56b8 <mem_manage_fault+0x2f8>)
    5696:	f7fc fb77 	bl	1d88 <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    569a:	2615      	movs	r6, #21
    569c:	e6d5      	b.n	544a <mem_manage_fault+0x8a>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    569e:	4621      	mov	r1, r4
    56a0:	4648      	mov	r0, r9
    56a2:	f7ff fa5b 	bl	4b5c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    56a6:	2800      	cmp	r0, #0
    56a8:	f43f aedf 	beq.w	546a <mem_manage_fault+0xaa>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    56ac:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    56b0:	2602      	movs	r6, #2
    56b2:	e6da      	b.n	546a <mem_manage_fault+0xaa>
    56b4:	00010ae4 	.word	0x00010ae4
    56b8:	0000fe8c 	.word	0x0000fe8c
    56bc:	e000ed00 	.word	0xe000ed00
    56c0:	00010afc 	.word	0x00010afc
    56c4:	000108f4 	.word	0x000108f4
    56c8:	00010b30 	.word	0x00010b30
    56cc:	00010b48 	.word	0x00010b48
    56d0:	00010b60 	.word	0x00010b60
    56d4:	00010970 	.word	0x00010970

000056d8 <hard_fault>:
{
    56d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    56da:	b09b      	sub	sp, #108	; 0x6c
    56dc:	af00      	add	r7, sp, #0
    56de:	4606      	mov	r6, r0
    56e0:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
    56e2:	4b80      	ldr	r3, [pc, #512]	; (58e4 <hard_fault+0x20c>)
    56e4:	61fb      	str	r3, [r7, #28]
    56e6:	2302      	movs	r3, #2
    56e8:	713b      	strb	r3, [r7, #4]
    56ea:	2400      	movs	r4, #0
    56ec:	717c      	strb	r4, [r7, #5]
    56ee:	71bc      	strb	r4, [r7, #6]
    56f0:	71fc      	strb	r4, [r7, #7]
    56f2:	687b      	ldr	r3, [r7, #4]
    56f4:	61bb      	str	r3, [r7, #24]
    56f6:	4621      	mov	r1, r4
    56f8:	f364 0100 	bfi	r1, r4, #0, #1
    56fc:	f364 0141 	bfi	r1, r4, #1, #1
    5700:	f364 0182 	bfi	r1, r4, #2, #1
    5704:	f364 01c5 	bfi	r1, r4, #3, #3
    5708:	2301      	movs	r3, #1
    570a:	f363 1188 	bfi	r1, r3, #6, #3
    570e:	2308      	movs	r3, #8
    5710:	f363 2153 	bfi	r1, r3, #9, #11
    5714:	f364 511f 	bfi	r1, r4, #20, #12
    5718:	4623      	mov	r3, r4
    571a:	f107 0218 	add.w	r2, r7, #24
    571e:	4872      	ldr	r0, [pc, #456]	; (58e8 <hard_fault+0x210>)
    5720:	f7fc fb32 	bl	1d88 <z_impl_z_log_msg_static_create>
	*recoverable = false;
    5724:	702c      	strb	r4, [r5, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    5726:	4b71      	ldr	r3, [pc, #452]	; (58ec <hard_fault+0x214>)
    5728:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    572a:	f014 0402 	ands.w	r4, r4, #2
    572e:	d10c      	bne.n	574a <hard_fault+0x72>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    5730:	4b6e      	ldr	r3, [pc, #440]	; (58ec <hard_fault+0x214>)
    5732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5734:	2b00      	cmp	r3, #0
    5736:	db2a      	blt.n	578e <hard_fault+0xb6>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    5738:	4b6c      	ldr	r3, [pc, #432]	; (58ec <hard_fault+0x214>)
    573a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    573c:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    5740:	d146      	bne.n	57d0 <hard_fault+0xf8>
}
    5742:	4620      	mov	r0, r4
    5744:	376c      	adds	r7, #108	; 0x6c
    5746:	46bd      	mov	sp, r7
    5748:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Bus fault on vector table read");
    574a:	4b69      	ldr	r3, [pc, #420]	; (58f0 <hard_fault+0x218>)
    574c:	667b      	str	r3, [r7, #100]	; 0x64
    574e:	2302      	movs	r3, #2
    5750:	713b      	strb	r3, [r7, #4]
    5752:	2400      	movs	r4, #0
    5754:	717c      	strb	r4, [r7, #5]
    5756:	71bc      	strb	r4, [r7, #6]
    5758:	71fc      	strb	r4, [r7, #7]
    575a:	687b      	ldr	r3, [r7, #4]
    575c:	663b      	str	r3, [r7, #96]	; 0x60
    575e:	4621      	mov	r1, r4
    5760:	f364 0100 	bfi	r1, r4, #0, #1
    5764:	f364 0141 	bfi	r1, r4, #1, #1
    5768:	f364 0182 	bfi	r1, r4, #2, #1
    576c:	f364 01c5 	bfi	r1, r4, #3, #3
    5770:	2301      	movs	r3, #1
    5772:	f363 1188 	bfi	r1, r3, #6, #3
    5776:	2308      	movs	r3, #8
    5778:	f363 2153 	bfi	r1, r3, #9, #11
    577c:	f364 511f 	bfi	r1, r4, #20, #12
    5780:	4623      	mov	r3, r4
    5782:	f107 0260 	add.w	r2, r7, #96	; 0x60
    5786:	4858      	ldr	r0, [pc, #352]	; (58e8 <hard_fault+0x210>)
    5788:	f7fc fafe 	bl	1d88 <z_impl_z_log_msg_static_create>
    578c:	e7d9      	b.n	5742 <hard_fault+0x6a>
		PR_EXC("  Debug event");
    578e:	4b59      	ldr	r3, [pc, #356]	; (58f4 <hard_fault+0x21c>)
    5790:	64fb      	str	r3, [r7, #76]	; 0x4c
    5792:	2302      	movs	r3, #2
    5794:	713b      	strb	r3, [r7, #4]
    5796:	2300      	movs	r3, #0
    5798:	717b      	strb	r3, [r7, #5]
    579a:	71bb      	strb	r3, [r7, #6]
    579c:	71fb      	strb	r3, [r7, #7]
    579e:	687a      	ldr	r2, [r7, #4]
    57a0:	64ba      	str	r2, [r7, #72]	; 0x48
    57a2:	4619      	mov	r1, r3
    57a4:	f363 0100 	bfi	r1, r3, #0, #1
    57a8:	f363 0141 	bfi	r1, r3, #1, #1
    57ac:	f363 0182 	bfi	r1, r3, #2, #1
    57b0:	f363 01c5 	bfi	r1, r3, #3, #3
    57b4:	2201      	movs	r2, #1
    57b6:	f362 1188 	bfi	r1, r2, #6, #3
    57ba:	2208      	movs	r2, #8
    57bc:	f362 2153 	bfi	r1, r2, #9, #11
    57c0:	f363 511f 	bfi	r1, r3, #20, #12
    57c4:	f107 0248 	add.w	r2, r7, #72	; 0x48
    57c8:	4847      	ldr	r0, [pc, #284]	; (58e8 <hard_fault+0x210>)
    57ca:	f7fc fadd 	bl	1d88 <z_impl_z_log_msg_static_create>
    57ce:	e7b8      	b.n	5742 <hard_fault+0x6a>
		PR_EXC("  Fault escalation (see below)");
    57d0:	4b49      	ldr	r3, [pc, #292]	; (58f8 <hard_fault+0x220>)
    57d2:	637b      	str	r3, [r7, #52]	; 0x34
    57d4:	2302      	movs	r3, #2
    57d6:	713b      	strb	r3, [r7, #4]
    57d8:	2300      	movs	r3, #0
    57da:	717b      	strb	r3, [r7, #5]
    57dc:	71bb      	strb	r3, [r7, #6]
    57de:	71fb      	strb	r3, [r7, #7]
    57e0:	687a      	ldr	r2, [r7, #4]
    57e2:	633a      	str	r2, [r7, #48]	; 0x30
    57e4:	4619      	mov	r1, r3
    57e6:	f363 0100 	bfi	r1, r3, #0, #1
    57ea:	f363 0141 	bfi	r1, r3, #1, #1
    57ee:	f363 0182 	bfi	r1, r3, #2, #1
    57f2:	f363 01c5 	bfi	r1, r3, #3, #3
    57f6:	2201      	movs	r2, #1
    57f8:	f362 1188 	bfi	r1, r2, #6, #3
    57fc:	2208      	movs	r2, #8
    57fe:	f362 2153 	bfi	r1, r2, #9, #11
    5802:	f363 511f 	bfi	r1, r3, #20, #12
    5806:	f107 0230 	add.w	r2, r7, #48	; 0x30
    580a:	4837      	ldr	r0, [pc, #220]	; (58e8 <hard_fault+0x210>)
    580c:	f7fc fabc 	bl	1d88 <z_impl_z_log_msg_static_create>
		if (z_arm_is_synchronous_svc(esf)) {
    5810:	4630      	mov	r0, r6
    5812:	f7ff fa0b 	bl	4c2c <z_arm_is_synchronous_svc>
    5816:	2800      	cmp	r0, #0
    5818:	d040      	beq.n	589c <hard_fault+0x1c4>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    581a:	6834      	ldr	r4, [r6, #0]
    581c:	466d      	mov	r5, sp
    581e:	b088      	sub	sp, #32
    5820:	466b      	mov	r3, sp
    5822:	f113 0210 	adds.w	r2, r3, #16
    5826:	d00f      	beq.n	5848 <hard_fault+0x170>
    5828:	210c      	movs	r1, #12
    582a:	b14a      	cbz	r2, 5840 <hard_fault+0x168>
    582c:	4608      	mov	r0, r1
    582e:	2904      	cmp	r1, #4
    5830:	dd03      	ble.n	583a <hard_fault+0x162>
    5832:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 58fc <hard_fault+0x224>
    5836:	f8c3 c014 	str.w	ip, [r3, #20]
    583a:	2808      	cmp	r0, #8
    583c:	dd07      	ble.n	584e <hard_fault+0x176>
    583e:	619c      	str	r4, [r3, #24]
    5840:	290b      	cmp	r1, #11
    5842:	dd28      	ble.n	5896 <hard_fault+0x1be>
    5844:	240c      	movs	r4, #12
    5846:	e004      	b.n	5852 <hard_fault+0x17a>
    5848:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    584c:	e7ed      	b.n	582a <hard_fault+0x152>
    584e:	f06f 041b 	mvn.w	r4, #27
    5852:	b13a      	cbz	r2, 5864 <hard_fault+0x18c>
    5854:	2103      	movs	r1, #3
    5856:	7139      	strb	r1, [r7, #4]
    5858:	2100      	movs	r1, #0
    585a:	7179      	strb	r1, [r7, #5]
    585c:	71b9      	strb	r1, [r7, #6]
    585e:	71f9      	strb	r1, [r7, #7]
    5860:	6878      	ldr	r0, [r7, #4]
    5862:	6118      	str	r0, [r3, #16]
    5864:	2100      	movs	r1, #0
    5866:	f36f 0100 	bfc	r1, #0, #1
    586a:	f36f 0141 	bfc	r1, #1, #1
    586e:	f36f 0182 	bfc	r1, #2, #1
    5872:	f36f 01c5 	bfc	r1, #3, #3
    5876:	2301      	movs	r3, #1
    5878:	f363 1188 	bfi	r1, r3, #6, #3
    587c:	f3c4 030a 	ubfx	r3, r4, #0, #11
    5880:	f363 2153 	bfi	r1, r3, #9, #11
    5884:	f36f 511f 	bfc	r1, #20, #12
    5888:	2300      	movs	r3, #0
    588a:	4817      	ldr	r0, [pc, #92]	; (58e8 <hard_fault+0x210>)
    588c:	f7fc fa7c 	bl	1d88 <z_impl_z_log_msg_static_create>
    5890:	46ad      	mov	sp, r5
			reason = esf->basic.r0;
    5892:	6834      	ldr	r4, [r6, #0]
    5894:	e755      	b.n	5742 <hard_fault+0x6a>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    5896:	f06f 041b 	mvn.w	r4, #27
    589a:	e7da      	b.n	5852 <hard_fault+0x17a>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    589c:	4b13      	ldr	r3, [pc, #76]	; (58ec <hard_fault+0x214>)
    589e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    58a0:	f013 0fff 	tst.w	r3, #255	; 0xff
    58a4:	d10f      	bne.n	58c6 <hard_fault+0x1ee>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    58a6:	4b11      	ldr	r3, [pc, #68]	; (58ec <hard_fault+0x214>)
    58a8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    58aa:	f414 447f 	ands.w	r4, r4, #65280	; 0xff00
    58ae:	d111      	bne.n	58d4 <hard_fault+0x1fc>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    58b0:	4b0e      	ldr	r3, [pc, #56]	; (58ec <hard_fault+0x214>)
    58b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    58b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    58b8:	f4ff af43 	bcc.w	5742 <hard_fault+0x6a>
			reason = usage_fault(esf);
    58bc:	4630      	mov	r0, r6
    58be:	f7ff fba3 	bl	5008 <usage_fault>
    58c2:	4604      	mov	r4, r0
	return reason;
    58c4:	e73d      	b.n	5742 <hard_fault+0x6a>
			reason = mem_manage_fault(esf, 1, recoverable);
    58c6:	462a      	mov	r2, r5
    58c8:	2101      	movs	r1, #1
    58ca:	4630      	mov	r0, r6
    58cc:	f7ff fd78 	bl	53c0 <mem_manage_fault>
    58d0:	4604      	mov	r4, r0
    58d2:	e736      	b.n	5742 <hard_fault+0x6a>
			reason = bus_fault(esf, 1, recoverable);
    58d4:	462a      	mov	r2, r5
    58d6:	2101      	movs	r1, #1
    58d8:	4630      	mov	r0, r6
    58da:	f7ff fa07 	bl	4cec <bus_fault>
    58de:	4604      	mov	r4, r0
    58e0:	e72f      	b.n	5742 <hard_fault+0x6a>
    58e2:	bf00      	nop
    58e4:	00010b80 	.word	0x00010b80
    58e8:	0000fe8c 	.word	0x0000fe8c
    58ec:	e000ed00 	.word	0xe000ed00
    58f0:	00010b98 	.word	0x00010b98
    58f4:	00010bbc 	.word	0x00010bbc
    58f8:	00010bcc 	.word	0x00010bcc
    58fc:	00010bec 	.word	0x00010bec

00005900 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    5900:	b530      	push	{r4, r5, lr}
    5902:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    5904:	4b1a      	ldr	r3, [pc, #104]	; (5970 <z_arm_fault+0x70>)
    5906:	685c      	ldr	r4, [r3, #4]
    5908:	f3c4 0408 	ubfx	r4, r4, #0, #9
    590c:	2300      	movs	r3, #0
    590e:	f383 8811 	msr	BASEPRI, r3
    5912:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(0);

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
    5916:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    591a:	f7ff f9a5 	bl	4c68 <get_esf>
    591e:	4605      	mov	r5, r0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    5920:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    5924:	4621      	mov	r1, r4
    5926:	f008 f9b5 	bl	dc94 <fault_handle>
	if (recoverable) {
    592a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    592e:	b10b      	cbz	r3, 5934 <z_arm_fault+0x34>
	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    5930:	b00b      	add	sp, #44	; 0x2c
    5932:	bd30      	pop	{r4, r5, pc}
    5934:	4604      	mov	r4, r0
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    5936:	2220      	movs	r2, #32
    5938:	4629      	mov	r1, r5
    593a:	a801      	add	r0, sp, #4
    593c:	f008 fa3e 	bl	ddbc <memcpy>
	if (nested_exc) {
    5940:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    5944:	b14b      	cbz	r3, 595a <z_arm_fault+0x5a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    5946:	9b08      	ldr	r3, [sp, #32]
    5948:	f3c3 0208 	ubfx	r2, r3, #0, #9
    594c:	b95a      	cbnz	r2, 5966 <z_arm_fault+0x66>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    594e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    5952:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    5956:	9308      	str	r3, [sp, #32]
    5958:	e005      	b.n	5966 <z_arm_fault+0x66>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    595a:	9b08      	ldr	r3, [sp, #32]
    595c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    5960:	f023 0301 	bic.w	r3, r3, #1
    5964:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    5966:	a901      	add	r1, sp, #4
    5968:	4620      	mov	r0, r4
    596a:	f008 f963 	bl	dc34 <z_arm_fatal_error>
    596e:	e7df      	b.n	5930 <z_arm_fault+0x30>
    5970:	e000ed00 	.word	0xe000ed00

00005974 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    5974:	4a02      	ldr	r2, [pc, #8]	; (5980 <z_arm_fault_init+0xc>)
    5976:	6953      	ldr	r3, [r2, #20]
    5978:	f043 0310 	orr.w	r3, r3, #16
    597c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    597e:	4770      	bx	lr
    5980:	e000ed00 	.word	0xe000ed00

00005984 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    5984:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    5988:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    598c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    598e:	4672      	mov	r2, lr
	bl z_arm_fault
    5990:	f7ff ffb6 	bl	5900 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    5994:	bd01      	pop	{r0, pc}
    5996:	bf00      	nop

00005998 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    5998:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    599a:	e006      	b.n	59aa <z_arm_interrupt_init+0x12>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    599c:	f003 030f 	and.w	r3, r3, #15
    59a0:	4909      	ldr	r1, [pc, #36]	; (59c8 <z_arm_interrupt_init+0x30>)
    59a2:	4419      	add	r1, r3
    59a4:	2320      	movs	r3, #32
    59a6:	760b      	strb	r3, [r1, #24]
    59a8:	3201      	adds	r2, #1
    59aa:	2a2f      	cmp	r2, #47	; 0x2f
    59ac:	dc0a      	bgt.n	59c4 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    59ae:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    59b0:	2b00      	cmp	r3, #0
    59b2:	dbf3      	blt.n	599c <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    59b4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    59b8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    59bc:	2120      	movs	r1, #32
    59be:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    59c2:	e7f1      	b.n	59a8 <z_arm_interrupt_init+0x10>
	}
}
    59c4:	4770      	bx	lr
    59c6:	bf00      	nop
    59c8:	e000ecfc 	.word	0xe000ecfc

000059cc <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
    59cc:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
    59ce:	4913      	ldr	r1, [pc, #76]	; (5a1c <__start+0x50>)
    strb r0, [r1]
    59d0:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    59d2:	2000      	movs	r0, #0
    msr CONTROL, r0
    59d4:	f380 8814 	msr	CONTROL, r0
    isb
    59d8:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    59dc:	f7fb feb6 	bl	174c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    59e0:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    59e2:	490f      	ldr	r1, [pc, #60]	; (5a20 <__start+0x54>)
    str r0, [r1]
    59e4:	6008      	str	r0, [r1, #0]
    dsb
    59e6:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    59ea:	480e      	ldr	r0, [pc, #56]	; (5a24 <__start+0x58>)
    msr msp, r0
    59ec:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    59f0:	f000 f830 	bl	5a54 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    59f4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    59f6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    59fa:	480b      	ldr	r0, [pc, #44]	; (5a28 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    59fc:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    5a00:	1840      	adds	r0, r0, r1
    msr PSP, r0
    5a02:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    5a06:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    5a0a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    5a0c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    5a0e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    5a12:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    5a16:	f7ff f80b 	bl	4a30 <z_arm_prep_c>
    5a1a:	0000      	.short	0x0000
    ldr r1, =z_sys_post_kernel
    5a1c:	200023a3 	.word	0x200023a3
    ldr r1, =_SCS_MPU_CTRL
    5a20:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    5a24:	20003d40 	.word	0x20003d40
    ldr r0, =z_interrupt_stacks
    5a28:	20002f80 	.word	0x20002f80

00005a2c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    5a2c:	4b08      	ldr	r3, [pc, #32]	; (5a50 <z_arm_clear_arm_mpu_config+0x24>)
    5a2e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    5a32:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    5a36:	2300      	movs	r3, #0
    5a38:	e006      	b.n	5a48 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    5a3a:	4a05      	ldr	r2, [pc, #20]	; (5a50 <z_arm_clear_arm_mpu_config+0x24>)
    5a3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    5a40:	2100      	movs	r1, #0
    5a42:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    5a46:	3301      	adds	r3, #1
    5a48:	4283      	cmp	r3, r0
    5a4a:	dbf6      	blt.n	5a3a <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    5a4c:	4770      	bx	lr
    5a4e:	bf00      	nop
    5a50:	e000ed00 	.word	0xe000ed00

00005a54 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    5a54:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    5a56:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    5a58:	2400      	movs	r4, #0
    5a5a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    5a5e:	f7ff ffe5 	bl	5a2c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    5a62:	4623      	mov	r3, r4
    5a64:	e008      	b.n	5a78 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    5a66:	f103 0120 	add.w	r1, r3, #32
    5a6a:	4a0e      	ldr	r2, [pc, #56]	; (5aa4 <z_arm_init_arch_hw_at_boot+0x50>)
    5a6c:	f04f 30ff 	mov.w	r0, #4294967295
    5a70:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    5a74:	3301      	adds	r3, #1
    5a76:	b2db      	uxtb	r3, r3
    5a78:	2b07      	cmp	r3, #7
    5a7a:	d9f4      	bls.n	5a66 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    5a7c:	2300      	movs	r3, #0
    5a7e:	e008      	b.n	5a92 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    5a80:	f103 0160 	add.w	r1, r3, #96	; 0x60
    5a84:	4a07      	ldr	r2, [pc, #28]	; (5aa4 <z_arm_init_arch_hw_at_boot+0x50>)
    5a86:	f04f 30ff 	mov.w	r0, #4294967295
    5a8a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    5a8e:	3301      	adds	r3, #1
    5a90:	b2db      	uxtb	r3, r3
    5a92:	2b07      	cmp	r3, #7
    5a94:	d9f4      	bls.n	5a80 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    5a96:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    5a98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5a9c:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    5aa0:	bd10      	pop	{r4, pc}
    5aa2:	bf00      	nop
    5aa4:	e000e100 	.word	0xe000e100

00005aa8 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    5aa8:	b508      	push	{r3, lr}
	if (_current == thread) {
    5aaa:	4b0a      	ldr	r3, [pc, #40]	; (5ad4 <z_impl_k_thread_abort+0x2c>)
    5aac:	689b      	ldr	r3, [r3, #8]
    5aae:	4283      	cmp	r3, r0
    5ab0:	d002      	beq.n	5ab8 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    5ab2:	f005 fea5 	bl	b800 <z_thread_abort>
}
    5ab6:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5ab8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    5abc:	2b00      	cmp	r3, #0
    5abe:	d0f8      	beq.n	5ab2 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5ac0:	4b05      	ldr	r3, [pc, #20]	; (5ad8 <z_impl_k_thread_abort+0x30>)
    5ac2:	685a      	ldr	r2, [r3, #4]
    5ac4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    5ac8:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    5aca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5acc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    5ad0:	625a      	str	r2, [r3, #36]	; 0x24
    5ad2:	e7ee      	b.n	5ab2 <z_impl_k_thread_abort+0xa>
    5ad4:	20002350 	.word	0x20002350
    5ad8:	e000ed00 	.word	0xe000ed00

00005adc <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    5adc:	b508      	push	{r3, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    5ade:	4b03      	ldr	r3, [pc, #12]	; (5aec <z_arm_configure_static_mpu_regions+0x10>)
    5ae0:	4a03      	ldr	r2, [pc, #12]	; (5af0 <z_arm_configure_static_mpu_regions+0x14>)
    5ae2:	2101      	movs	r1, #1
    5ae4:	4803      	ldr	r0, [pc, #12]	; (5af4 <z_arm_configure_static_mpu_regions+0x18>)
    5ae6:	f008 f92a 	bl	dd3e <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    5aea:	bd08      	pop	{r3, pc}
    5aec:	20020000 	.word	0x20020000
    5af0:	20000000 	.word	0x20000000
    5af4:	00010c08 	.word	0x00010c08

00005af8 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    5af8:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    5afa:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    5afe:	3b40      	subs	r3, #64	; 0x40
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    5b00:	4804      	ldr	r0, [pc, #16]	; (5b14 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    5b02:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    5b04:	2340      	movs	r3, #64	; 0x40
    5b06:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    5b08:	4b03      	ldr	r3, [pc, #12]	; (5b18 <z_arm_configure_dynamic_mpu_regions+0x20>)
    5b0a:	6083      	str	r3, [r0, #8]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    5b0c:	2101      	movs	r1, #1
    5b0e:	f008 f91a 	bl	dd46 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
    5b12:	bd08      	pop	{r3, pc}
    5b14:	200012f8 	.word	0x200012f8
    5b18:	150b0000 	.word	0x150b0000

00005b1c <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    5b1c:	4a08      	ldr	r2, [pc, #32]	; (5b40 <region_init+0x24>)
    5b1e:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5b22:	680b      	ldr	r3, [r1, #0]
    5b24:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    5b28:	4303      	orrs	r3, r0
    5b2a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5b2e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    5b32:	688b      	ldr	r3, [r1, #8]
    5b34:	f043 0301 	orr.w	r3, r3, #1
    5b38:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    5b3c:	4770      	bx	lr
    5b3e:	bf00      	nop
    5b40:	e000ed00 	.word	0xe000ed00

00005b44 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    5b44:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b46:	b083      	sub	sp, #12
    5b48:	af00      	add	r7, sp, #0
    5b4a:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    5b4c:	2807      	cmp	r0, #7
    5b4e:	d805      	bhi.n	5b5c <region_allocate_and_init+0x18>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    5b50:	f7ff ffe4 	bl	5b1c <region_init>

	return index;
    5b54:	4620      	mov	r0, r4
}
    5b56:	370c      	adds	r7, #12
    5b58:	46bd      	mov	sp, r7
    5b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    5b5c:	466d      	mov	r5, sp
    5b5e:	b088      	sub	sp, #32
    5b60:	466b      	mov	r3, sp
    5b62:	f113 0210 	adds.w	r2, r3, #16
    5b66:	d02f      	beq.n	5bc8 <region_allocate_and_init+0x84>
    5b68:	210c      	movs	r1, #12
    5b6a:	b13a      	cbz	r2, 5b7c <region_allocate_and_init+0x38>
    5b6c:	4608      	mov	r0, r1
    5b6e:	2904      	cmp	r1, #4
    5b70:	dd01      	ble.n	5b76 <region_allocate_and_init+0x32>
    5b72:	4e18      	ldr	r6, [pc, #96]	; (5bd4 <region_allocate_and_init+0x90>)
    5b74:	615e      	str	r6, [r3, #20]
    5b76:	2808      	cmp	r0, #8
    5b78:	dd00      	ble.n	5b7c <region_allocate_and_init+0x38>
    5b7a:	619c      	str	r4, [r3, #24]
    5b7c:	290b      	cmp	r1, #11
    5b7e:	dd26      	ble.n	5bce <region_allocate_and_init+0x8a>
    5b80:	240c      	movs	r4, #12
    5b82:	b13a      	cbz	r2, 5b94 <region_allocate_and_init+0x50>
    5b84:	2103      	movs	r1, #3
    5b86:	7139      	strb	r1, [r7, #4]
    5b88:	2100      	movs	r1, #0
    5b8a:	7179      	strb	r1, [r7, #5]
    5b8c:	71b9      	strb	r1, [r7, #6]
    5b8e:	71f9      	strb	r1, [r7, #7]
    5b90:	6878      	ldr	r0, [r7, #4]
    5b92:	6118      	str	r0, [r3, #16]
    5b94:	2100      	movs	r1, #0
    5b96:	f36f 0100 	bfc	r1, #0, #1
    5b9a:	f36f 0141 	bfc	r1, #1, #1
    5b9e:	f36f 0182 	bfc	r1, #2, #1
    5ba2:	f36f 01c5 	bfc	r1, #3, #3
    5ba6:	2301      	movs	r3, #1
    5ba8:	f363 1188 	bfi	r1, r3, #6, #3
    5bac:	f3c4 040a 	ubfx	r4, r4, #0, #11
    5bb0:	f364 2153 	bfi	r1, r4, #9, #11
    5bb4:	f36f 511f 	bfc	r1, #20, #12
    5bb8:	2300      	movs	r3, #0
    5bba:	4807      	ldr	r0, [pc, #28]	; (5bd8 <region_allocate_and_init+0x94>)
    5bbc:	f7fc f8e4 	bl	1d88 <z_impl_z_log_msg_static_create>
    5bc0:	46ad      	mov	sp, r5
		return -EINVAL;
    5bc2:	f06f 0015 	mvn.w	r0, #21
    5bc6:	e7c6      	b.n	5b56 <region_allocate_and_init+0x12>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    5bc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    5bcc:	e7cd      	b.n	5b6a <region_allocate_and_init+0x26>
    5bce:	f06f 041b 	mvn.w	r4, #27
    5bd2:	e7d6      	b.n	5b82 <region_allocate_and_init+0x3e>
    5bd4:	00010c18 	.word	0x00010c18
    5bd8:	0000fe84 	.word	0x0000fe84

00005bdc <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    5bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5be0:	b082      	sub	sp, #8
    5be2:	af00      	add	r7, sp, #0
    5be4:	4681      	mov	r9, r0
    5be6:	4688      	mov	r8, r1
    5be8:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
    5bea:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    5bec:	2500      	movs	r5, #0
    5bee:	e00f      	b.n	5c10 <mpu_configure_regions+0x34>
		}
		/* Non-empty region. */

		if (do_sanity_check &&
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    5bf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    5bf4:	e024      	b.n	5c40 <mpu_configure_regions+0x64>
    5bf6:	f06f 041b 	mvn.w	r4, #27
    5bfa:	e02d      	b.n	5c58 <mpu_configure_regions+0x7c>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    5bfc:	4621      	mov	r1, r4
    5bfe:	b2f0      	uxtb	r0, r6
    5c00:	f008 f87e 	bl	dd00 <mpu_configure_region>
    5c04:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    5c06:	f110 0f16 	cmn.w	r0, #22
    5c0a:	d047      	beq.n	5c9c <mpu_configure_regions+0xc0>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    5c0c:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    5c0e:	3501      	adds	r5, #1
    5c10:	4545      	cmp	r5, r8
    5c12:	da43      	bge.n	5c9c <mpu_configure_regions+0xc0>
		if (regions[i].size == 0U) {
    5c14:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    5c18:	eb09 0484 	add.w	r4, r9, r4, lsl #2
    5c1c:	6862      	ldr	r2, [r4, #4]
    5c1e:	2a00      	cmp	r2, #0
    5c20:	d0f5      	beq.n	5c0e <mpu_configure_regions+0x32>
		if (do_sanity_check &&
    5c22:	f1ba 0f00 	cmp.w	sl, #0
    5c26:	d0e9      	beq.n	5bfc <mpu_configure_regions+0x20>
				(!mpu_partition_is_valid(&regions[i]))) {
    5c28:	4620      	mov	r0, r4
    5c2a:	f008 f858 	bl	dcde <mpu_partition_is_valid>
		if (do_sanity_check &&
    5c2e:	2800      	cmp	r0, #0
    5c30:	d1e4      	bne.n	5bfc <mpu_configure_regions+0x20>
			LOG_ERR("Partition %u: sanity check failed.", i);
    5c32:	466e      	mov	r6, sp
    5c34:	b088      	sub	sp, #32
    5c36:	466b      	mov	r3, sp
    5c38:	f113 0210 	adds.w	r2, r3, #16
    5c3c:	d0d8      	beq.n	5bf0 <mpu_configure_regions+0x14>
    5c3e:	210c      	movs	r1, #12
    5c40:	b13a      	cbz	r2, 5c52 <mpu_configure_regions+0x76>
    5c42:	4608      	mov	r0, r1
    5c44:	2904      	cmp	r1, #4
    5c46:	dd01      	ble.n	5c4c <mpu_configure_regions+0x70>
    5c48:	4c17      	ldr	r4, [pc, #92]	; (5ca8 <mpu_configure_regions+0xcc>)
    5c4a:	615c      	str	r4, [r3, #20]
    5c4c:	2808      	cmp	r0, #8
    5c4e:	dd00      	ble.n	5c52 <mpu_configure_regions+0x76>
    5c50:	619d      	str	r5, [r3, #24]
    5c52:	290b      	cmp	r1, #11
    5c54:	ddcf      	ble.n	5bf6 <mpu_configure_regions+0x1a>
    5c56:	240c      	movs	r4, #12
    5c58:	b13a      	cbz	r2, 5c6a <mpu_configure_regions+0x8e>
    5c5a:	2103      	movs	r1, #3
    5c5c:	7139      	strb	r1, [r7, #4]
    5c5e:	2100      	movs	r1, #0
    5c60:	7179      	strb	r1, [r7, #5]
    5c62:	71b9      	strb	r1, [r7, #6]
    5c64:	71f9      	strb	r1, [r7, #7]
    5c66:	6878      	ldr	r0, [r7, #4]
    5c68:	6118      	str	r0, [r3, #16]
    5c6a:	2100      	movs	r1, #0
    5c6c:	f36f 0100 	bfc	r1, #0, #1
    5c70:	f36f 0141 	bfc	r1, #1, #1
    5c74:	f36f 0182 	bfc	r1, #2, #1
    5c78:	f36f 01c5 	bfc	r1, #3, #3
    5c7c:	2301      	movs	r3, #1
    5c7e:	f363 1188 	bfi	r1, r3, #6, #3
    5c82:	f3c4 030a 	ubfx	r3, r4, #0, #11
    5c86:	f363 2153 	bfi	r1, r3, #9, #11
    5c8a:	f36f 511f 	bfc	r1, #20, #12
    5c8e:	2300      	movs	r3, #0
    5c90:	4806      	ldr	r0, [pc, #24]	; (5cac <mpu_configure_regions+0xd0>)
    5c92:	f7fc f879 	bl	1d88 <z_impl_z_log_msg_static_create>
    5c96:	46b5      	mov	sp, r6
			return -EINVAL;
    5c98:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    5c9c:	4630      	mov	r0, r6
    5c9e:	3708      	adds	r7, #8
    5ca0:	46bd      	mov	sp, r7
    5ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5ca6:	bf00      	nop
    5ca8:	00010c40 	.word	0x00010c40
    5cac:	0000fe84 	.word	0x0000fe84

00005cb0 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    5cb0:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    5cb2:	4c03      	ldr	r4, [pc, #12]	; (5cc0 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    5cb4:	2301      	movs	r3, #1
    5cb6:	7822      	ldrb	r2, [r4, #0]
    5cb8:	f7ff ff90 	bl	5bdc <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    5cbc:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    5cbe:	bd10      	pop	{r4, pc}
    5cc0:	20002399 	.word	0x20002399

00005cc4 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    5cc4:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    5cc6:	2300      	movs	r3, #0
    5cc8:	4a09      	ldr	r2, [pc, #36]	; (5cf0 <mpu_configure_dynamic_mpu_regions+0x2c>)
    5cca:	7812      	ldrb	r2, [r2, #0]
    5ccc:	f7ff ff86 	bl	5bdc <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    5cd0:	f110 0f16 	cmn.w	r0, #22
    5cd4:	d00a      	beq.n	5cec <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    5cd6:	4603      	mov	r3, r0
    5cd8:	e006      	b.n	5ce8 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    5cda:	4a06      	ldr	r2, [pc, #24]	; (5cf4 <mpu_configure_dynamic_mpu_regions+0x30>)
    5cdc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    5ce0:	2100      	movs	r1, #0
    5ce2:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    5ce6:	3301      	adds	r3, #1
    5ce8:	2b07      	cmp	r3, #7
    5cea:	ddf6      	ble.n	5cda <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    5cec:	bd08      	pop	{r3, pc}
    5cee:	bf00      	nop
    5cf0:	20002399 	.word	0x20002399
    5cf4:	e000ed00 	.word	0xe000ed00

00005cf8 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    5cf8:	4b04      	ldr	r3, [pc, #16]	; (5d0c <arm_core_mpu_enable+0x14>)
    5cfa:	2205      	movs	r2, #5
    5cfc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    5d00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5d04:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    5d08:	4770      	bx	lr
    5d0a:	bf00      	nop
    5d0c:	e000ed00 	.word	0xe000ed00

00005d10 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    5d10:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    5d14:	4b02      	ldr	r3, [pc, #8]	; (5d20 <arm_core_mpu_disable+0x10>)
    5d16:	2200      	movs	r2, #0
    5d18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    5d1c:	4770      	bx	lr
    5d1e:	bf00      	nop
    5d20:	e000ed00 	.word	0xe000ed00

00005d24 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    5d24:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    5d26:	4b0e      	ldr	r3, [pc, #56]	; (5d60 <z_arm_mpu_init+0x3c>)
    5d28:	681d      	ldr	r5, [r3, #0]
    5d2a:	2d08      	cmp	r5, #8
    5d2c:	d815      	bhi.n	5d5a <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    5d2e:	f7ff ffef 	bl	5d10 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    5d32:	2400      	movs	r4, #0
    5d34:	e009      	b.n	5d4a <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    5d36:	4b0a      	ldr	r3, [pc, #40]	; (5d60 <z_arm_mpu_init+0x3c>)
    5d38:	6859      	ldr	r1, [r3, #4]
    5d3a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    5d3e:	0093      	lsls	r3, r2, #2
    5d40:	4419      	add	r1, r3
    5d42:	4620      	mov	r0, r4
    5d44:	f7ff feea 	bl	5b1c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    5d48:	3401      	adds	r4, #1
    5d4a:	42a5      	cmp	r5, r4
    5d4c:	d8f3      	bhi.n	5d36 <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    5d4e:	4b05      	ldr	r3, [pc, #20]	; (5d64 <z_arm_mpu_init+0x40>)
    5d50:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    5d52:	f7ff ffd1 	bl	5cf8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    5d56:	2000      	movs	r0, #0
}
    5d58:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    5d5a:	f04f 30ff 	mov.w	r0, #4294967295
    5d5e:	e7fb      	b.n	5d58 <z_arm_mpu_init+0x34>
    5d60:	00010c64 	.word	0x00010c64
    5d64:	20002399 	.word	0x20002399

00005d68 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    5d68:	4b01      	ldr	r3, [pc, #4]	; (5d70 <__stdout_hook_install+0x8>)
    5d6a:	6018      	str	r0, [r3, #0]
}
    5d6c:	4770      	bx	lr
    5d6e:	bf00      	nop
    5d70:	20000114 	.word	0x20000114

00005d74 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    5d74:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5d78:	4905      	ldr	r1, [pc, #20]	; (5d90 <__NVIC_SystemReset+0x1c>)
    5d7a:	68ca      	ldr	r2, [r1, #12]
    5d7c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5d80:	4b04      	ldr	r3, [pc, #16]	; (5d94 <__NVIC_SystemReset+0x20>)
    5d82:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5d84:	60cb      	str	r3, [r1, #12]
    5d86:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    5d8a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    5d8c:	e7fd      	b.n	5d8a <__NVIC_SystemReset+0x16>
    5d8e:	bf00      	nop
    5d90:	e000ed00 	.word	0xe000ed00
    5d94:	05fa0004 	.word	0x05fa0004

00005d98 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    5d98:	f04f 0220 	mov.w	r2, #32
    5d9c:	f3ef 8311 	mrs	r3, BASEPRI
    5da0:	f382 8812 	msr	BASEPRI_MAX, r2
    5da4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    5da8:	4a04      	ldr	r2, [pc, #16]	; (5dbc <nordicsemi_nrf52_init+0x24>)
    5daa:	2101      	movs	r1, #1
    5dac:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    5db0:	f383 8811 	msr	BASEPRI, r3
    5db4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    5db8:	2000      	movs	r0, #0
    5dba:	4770      	bx	lr
    5dbc:	4001e000 	.word	0x4001e000

00005dc0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    5dc0:	b130      	cbz	r0, 5dd0 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    5dc2:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    5dc4:	4b03      	ldr	r3, [pc, #12]	; (5dd4 <arch_busy_wait+0x14>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    5dc6:	0180      	lsls	r0, r0, #6
    5dc8:	f043 0301 	orr.w	r3, r3, #1
    5dcc:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    5dce:	bd08      	pop	{r3, pc}
    5dd0:	4770      	bx	lr
    5dd2:	bf00      	nop
    5dd4:	0000ff50 	.word	0x0000ff50

00005dd8 <endpoint_ctx>:

	return true;
}

static struct nrf_usbd_ep_ctx *endpoint_ctx(const uint8_t ep)
{
    5dd8:	b510      	push	{r4, lr}
    5dda:	4604      	mov	r4, r0
	struct nrf_usbd_ctx *ctx;
	uint8_t ep_num;

	if (!ep_is_valid(ep)) {
    5ddc:	f008 f87c 	bl	ded8 <ep_is_valid>
    5de0:	b1c0      	cbz	r0, 5e14 <endpoint_ctx+0x3c>
		return NULL;
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);
    5de2:	f004 030f 	and.w	r3, r4, #15

	if (NRF_USBD_EPIN_CHECK(ep)) {
    5de6:	f014 0f80 	tst.w	r4, #128	; 0x80
    5dea:	d10a      	bne.n	5e02 <endpoint_ctx+0x2a>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    5dec:	f014 0f08 	tst.w	r4, #8
    5df0:	d114      	bne.n	5e1c <endpoint_ctx+0x44>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
					    CFG_EP_ISOIN_CNT +
    5df2:	f103 0009 	add.w	r0, r3, #9
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    5df6:	0140      	lsls	r0, r0, #5
    5df8:	3048      	adds	r0, #72	; 0x48
    5dfa:	4b09      	ldr	r3, [pc, #36]	; (5e20 <endpoint_ctx+0x48>)
    5dfc:	4418      	add	r0, r3
    5dfe:	3004      	adds	r0, #4
					    ep_num];
		}
	}

	return NULL;
}
    5e00:	bd10      	pop	{r4, pc}
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    5e02:	f014 0f08 	tst.w	r4, #8
    5e06:	d107      	bne.n	5e18 <endpoint_ctx+0x40>
			return &ctx->ep_ctx[ep_num];
    5e08:	0158      	lsls	r0, r3, #5
    5e0a:	3048      	adds	r0, #72	; 0x48
    5e0c:	4b04      	ldr	r3, [pc, #16]	; (5e20 <endpoint_ctx+0x48>)
    5e0e:	4418      	add	r0, r3
    5e10:	3004      	adds	r0, #4
    5e12:	e7f5      	b.n	5e00 <endpoint_ctx+0x28>
		return NULL;
    5e14:	2000      	movs	r0, #0
    5e16:	e7f3      	b.n	5e00 <endpoint_ctx+0x28>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    5e18:	4802      	ldr	r0, [pc, #8]	; (5e24 <endpoint_ctx+0x4c>)
    5e1a:	e7f1      	b.n	5e00 <endpoint_ctx+0x28>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    5e1c:	4802      	ldr	r0, [pc, #8]	; (5e28 <endpoint_ctx+0x50>)
    5e1e:	e7ef      	b.n	5e00 <endpoint_ctx+0x28>
    5e20:	20001304 	.word	0x20001304
    5e24:	20001450 	.word	0x20001450
    5e28:	20001570 	.word	0x20001570

00005e2c <eps_ctx_init>:
 * Endpoint buffers are allocated during the first call of this function.
 * This function may also be called again on every USB reset event
 * to reinitialize the state of all endpoints.
 */
static int eps_ctx_init(void)
{
    5e2c:	b510      	push	{r4, lr}
	struct nrf_usbd_ep_ctx *ep_ctx;
	uint32_t i;

	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    5e2e:	2400      	movs	r4, #0
    5e30:	e005      	b.n	5e3e <eps_ctx_init+0x12>
		ep_ctx = in_endpoint_ctx(i);
    5e32:	b2e0      	uxtb	r0, r4
    5e34:	f008 f86b 	bl	df0e <in_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
		ep_ctx_reset(ep_ctx);
    5e38:	f008 f873 	bl	df22 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    5e3c:	3401      	adds	r4, #1
    5e3e:	2c07      	cmp	r4, #7
    5e40:	d9f7      	bls.n	5e32 <eps_ctx_init+0x6>
	}

	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    5e42:	2400      	movs	r4, #0
    5e44:	e002      	b.n	5e4c <eps_ctx_init+0x20>

		if (!ep_ctx->buf.block.data) {
			ep_ctx->buf.block.data = ep_out_bufs[i];
		}

		ep_ctx_reset(ep_ctx);
    5e46:	f008 f86c 	bl	df22 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    5e4a:	3401      	adds	r4, #1
    5e4c:	2c07      	cmp	r4, #7
    5e4e:	d80a      	bhi.n	5e66 <eps_ctx_init+0x3a>
		ep_ctx = out_endpoint_ctx(i);
    5e50:	b2e0      	uxtb	r0, r4
    5e52:	f008 f862 	bl	df1a <out_endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    5e56:	6903      	ldr	r3, [r0, #16]
    5e58:	2b00      	cmp	r3, #0
    5e5a:	d1f4      	bne.n	5e46 <eps_ctx_init+0x1a>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    5e5c:	4b0a      	ldr	r3, [pc, #40]	; (5e88 <eps_ctx_init+0x5c>)
    5e5e:	eb03 1384 	add.w	r3, r3, r4, lsl #6
    5e62:	6103      	str	r3, [r0, #16]
    5e64:	e7ef      	b.n	5e46 <eps_ctx_init+0x1a>
	}

	if (CFG_EP_ISOIN_CNT) {
		ep_ctx = in_endpoint_ctx(NRF_USBD_EPIN(8));
    5e66:	2088      	movs	r0, #136	; 0x88
    5e68:	f008 f851 	bl	df0e <in_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
		ep_ctx_reset(ep_ctx);
    5e6c:	f008 f859 	bl	df22 <ep_ctx_reset>
	}

	if (CFG_EP_ISOOUT_CNT) {
		BUILD_ASSERT(CFG_EP_ISOOUT_CNT <= 1);

		ep_ctx = out_endpoint_ctx(NRF_USBD_EPOUT(8));
    5e70:	2008      	movs	r0, #8
    5e72:	f008 f852 	bl	df1a <out_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);

		if (!ep_ctx->buf.block.data) {
    5e76:	6903      	ldr	r3, [r0, #16]
    5e78:	b11b      	cbz	r3, 5e82 <eps_ctx_init+0x56>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
		}

		ep_ctx_reset(ep_ctx);
    5e7a:	f008 f852 	bl	df22 <ep_ctx_reset>
	}

	return 0;
}
    5e7e:	2000      	movs	r0, #0
    5e80:	bd10      	pop	{r4, pc}
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    5e82:	4b02      	ldr	r3, [pc, #8]	; (5e8c <eps_ctx_init+0x60>)
    5e84:	6103      	str	r3, [r0, #16]
    5e86:	e7f8      	b.n	5e7a <eps_ctx_init+0x4e>
    5e88:	20001994 	.word	0x20001994
    5e8c:	20001594 	.word	0x20001594

00005e90 <usbd_evt_get>:
{
    5e90:	b508      	push	{r3, lr}
	return z_impl_k_queue_get(queue, timeout);
    5e92:	2200      	movs	r2, #0
    5e94:	2300      	movs	r3, #0
    5e96:	4802      	ldr	r0, [pc, #8]	; (5ea0 <usbd_evt_get+0x10>)
    5e98:	f004 ff28 	bl	acec <z_impl_k_queue_get>
}
    5e9c:	bd08      	pop	{r3, pc}
    5e9e:	bf00      	nop
    5ea0:	20000264 	.word	0x20000264

00005ea4 <usbd_evt_flush>:
{
    5ea4:	b510      	push	{r4, lr}
    5ea6:	e004      	b.n	5eb2 <usbd_evt_flush+0xe>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5ea8:	1d01      	adds	r1, r0, #4
    5eaa:	4805      	ldr	r0, [pc, #20]	; (5ec0 <usbd_evt_flush+0x1c>)
    5eac:	f009 f95f 	bl	f16e <k_mem_slab_free>
	} while (ev != NULL);
    5eb0:	b12c      	cbz	r4, 5ebe <usbd_evt_flush+0x1a>
		ev = usbd_evt_get();
    5eb2:	f7ff ffed 	bl	5e90 <usbd_evt_get>
		if (ev) {
    5eb6:	4604      	mov	r4, r0
    5eb8:	2800      	cmp	r0, #0
    5eba:	d1f5      	bne.n	5ea8 <usbd_evt_flush+0x4>
    5ebc:	e7f8      	b.n	5eb0 <usbd_evt_flush+0xc>
}
    5ebe:	bd10      	pop	{r4, pc}
    5ec0:	20000210 	.word	0x20000210

00005ec4 <usbd_evt_alloc>:
{
    5ec4:	b500      	push	{lr}
    5ec6:	b08f      	sub	sp, #60	; 0x3c
	if (k_mem_slab_alloc(&fifo_elem_slab,
    5ec8:	2200      	movs	r2, #0
    5eca:	2300      	movs	r3, #0
    5ecc:	a901      	add	r1, sp, #4
    5ece:	4833      	ldr	r0, [pc, #204]	; (5f9c <usbd_evt_alloc+0xd8>)
    5ed0:	f004 fd0a 	bl	a8e8 <k_mem_slab_alloc>
    5ed4:	b920      	cbnz	r0, 5ee0 <usbd_evt_alloc+0x1c>
	ev = (struct usbd_event *)block.data;
    5ed6:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
    5ed8:	6040      	str	r0, [r0, #4]
}
    5eda:	b00f      	add	sp, #60	; 0x3c
    5edc:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_ERR("USBD event allocation failed!");
    5ee0:	4b2f      	ldr	r3, [pc, #188]	; (5fa0 <usbd_evt_alloc+0xdc>)
    5ee2:	9307      	str	r3, [sp, #28]
    5ee4:	2302      	movs	r3, #2
    5ee6:	f88d 3000 	strb.w	r3, [sp]
    5eea:	2300      	movs	r3, #0
    5eec:	f88d 3001 	strb.w	r3, [sp, #1]
    5ef0:	f88d 3002 	strb.w	r3, [sp, #2]
    5ef4:	f88d 3003 	strb.w	r3, [sp, #3]
    5ef8:	9a00      	ldr	r2, [sp, #0]
    5efa:	9206      	str	r2, [sp, #24]
    5efc:	4619      	mov	r1, r3
    5efe:	f363 0100 	bfi	r1, r3, #0, #1
    5f02:	f363 0141 	bfi	r1, r3, #1, #1
    5f06:	f363 0182 	bfi	r1, r3, #2, #1
    5f0a:	f363 01c5 	bfi	r1, r3, #3, #3
    5f0e:	2201      	movs	r2, #1
    5f10:	f362 1188 	bfi	r1, r2, #6, #3
    5f14:	2208      	movs	r2, #8
    5f16:	f362 2153 	bfi	r1, r2, #9, #11
    5f1a:	f363 511f 	bfi	r1, r3, #20, #12
    5f1e:	aa06      	add	r2, sp, #24
    5f20:	4820      	ldr	r0, [pc, #128]	; (5fa4 <usbd_evt_alloc+0xe0>)
    5f22:	f7fb ff31 	bl	1d88 <z_impl_z_log_msg_static_create>
		usbd_evt_flush();
    5f26:	f7ff ffbd 	bl	5ea4 <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    5f2a:	2200      	movs	r2, #0
    5f2c:	2300      	movs	r3, #0
    5f2e:	a901      	add	r1, sp, #4
    5f30:	481a      	ldr	r0, [pc, #104]	; (5f9c <usbd_evt_alloc+0xd8>)
    5f32:	f004 fcd9 	bl	a8e8 <k_mem_slab_alloc>
    5f36:	b320      	cbz	r0, 5f82 <usbd_evt_alloc+0xbe>
			LOG_ERR("USBD event memory corrupted");
    5f38:	4b1b      	ldr	r3, [pc, #108]	; (5fa8 <usbd_evt_alloc+0xe4>)
    5f3a:	930d      	str	r3, [sp, #52]	; 0x34
    5f3c:	2302      	movs	r3, #2
    5f3e:	f88d 3000 	strb.w	r3, [sp]
    5f42:	2300      	movs	r3, #0
    5f44:	f88d 3001 	strb.w	r3, [sp, #1]
    5f48:	f88d 3002 	strb.w	r3, [sp, #2]
    5f4c:	f88d 3003 	strb.w	r3, [sp, #3]
    5f50:	9a00      	ldr	r2, [sp, #0]
    5f52:	920c      	str	r2, [sp, #48]	; 0x30
    5f54:	4619      	mov	r1, r3
    5f56:	f363 0100 	bfi	r1, r3, #0, #1
    5f5a:	f363 0141 	bfi	r1, r3, #1, #1
    5f5e:	f363 0182 	bfi	r1, r3, #2, #1
    5f62:	f363 01c5 	bfi	r1, r3, #3, #3
    5f66:	2201      	movs	r2, #1
    5f68:	f362 1188 	bfi	r1, r2, #6, #3
    5f6c:	2208      	movs	r2, #8
    5f6e:	f362 2153 	bfi	r1, r2, #9, #11
    5f72:	f363 511f 	bfi	r1, r3, #20, #12
    5f76:	aa0c      	add	r2, sp, #48	; 0x30
    5f78:	480a      	ldr	r0, [pc, #40]	; (5fa4 <usbd_evt_alloc+0xe0>)
    5f7a:	f7fb ff05 	bl	1d88 <z_impl_z_log_msg_static_create>
			return NULL;
    5f7e:	2000      	movs	r0, #0
    5f80:	e7ab      	b.n	5eda <usbd_evt_alloc+0x16>
		ev = (struct usbd_event *)block.data;
    5f82:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    5f84:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    5f86:	2304      	movs	r3, #4
    5f88:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    5f8a:	4808      	ldr	r0, [pc, #32]	; (5fac <usbd_evt_alloc+0xe8>)
    5f8c:	f009 fa1b 	bl	f3c6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5f90:	4907      	ldr	r1, [pc, #28]	; (5fb0 <usbd_evt_alloc+0xec>)
    5f92:	4808      	ldr	r0, [pc, #32]	; (5fb4 <usbd_evt_alloc+0xf0>)
    5f94:	f009 faca 	bl	f52c <k_work_submit_to_queue>
		return NULL;
    5f98:	e7f1      	b.n	5f7e <usbd_evt_alloc+0xba>
    5f9a:	bf00      	nop
    5f9c:	20000210 	.word	0x20000210
    5fa0:	00010c98 	.word	0x00010c98
    5fa4:	0000fec4 	.word	0x0000fec4
    5fa8:	00010cb8 	.word	0x00010cb8
    5fac:	20000264 	.word	0x20000264
    5fb0:	2000132c 	.word	0x2000132c
    5fb4:	20000910 	.word	0x20000910

00005fb8 <submit_dc_power_event>:
{
    5fb8:	b510      	push	{r4, lr}
    5fba:	4604      	mov	r4, r0
	struct usbd_event *ev = usbd_evt_alloc();
    5fbc:	f7ff ff82 	bl	5ec4 <usbd_evt_alloc>
	if (!ev) {
    5fc0:	b150      	cbz	r0, 5fd8 <submit_dc_power_event+0x20>
    5fc2:	4601      	mov	r1, r0
	ev->evt_type = USBD_EVT_POWER;
    5fc4:	2300      	movs	r3, #0
    5fc6:	7403      	strb	r3, [r0, #16]
	ev->evt.pwr_evt.state = state;
    5fc8:	7204      	strb	r4, [r0, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    5fca:	4806      	ldr	r0, [pc, #24]	; (5fe4 <submit_dc_power_event+0x2c>)
    5fcc:	f009 f9fb 	bl	f3c6 <k_queue_append>
	if (usbd_ctx.attached) {
    5fd0:	4b05      	ldr	r3, [pc, #20]	; (5fe8 <submit_dc_power_event+0x30>)
    5fd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    5fd6:	b903      	cbnz	r3, 5fda <submit_dc_power_event+0x22>
}
    5fd8:	bd10      	pop	{r4, pc}
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5fda:	4904      	ldr	r1, [pc, #16]	; (5fec <submit_dc_power_event+0x34>)
    5fdc:	4804      	ldr	r0, [pc, #16]	; (5ff0 <submit_dc_power_event+0x38>)
    5fde:	f009 faa5 	bl	f52c <k_work_submit_to_queue>
}
    5fe2:	e7f9      	b.n	5fd8 <submit_dc_power_event+0x20>
    5fe4:	20000264 	.word	0x20000264
    5fe8:	20001304 	.word	0x20001304
    5fec:	2000132c 	.word	0x2000132c
    5ff0:	20000910 	.word	0x20000910

00005ff4 <usb_dc_power_event_handler>:
{
    5ff4:	b5b0      	push	{r4, r5, r7, lr}
    5ff6:	b082      	sub	sp, #8
    5ff8:	af00      	add	r7, sp, #0
	switch (event) {
    5ffa:	2801      	cmp	r0, #1
    5ffc:	d040      	beq.n	6080 <usb_dc_power_event_handler+0x8c>
    5ffe:	4601      	mov	r1, r0
    6000:	2802      	cmp	r0, #2
    6002:	d040      	beq.n	6086 <usb_dc_power_event_handler+0x92>
    6004:	2800      	cmp	r0, #0
    6006:	d03d      	beq.n	6084 <usb_dc_power_event_handler+0x90>
		LOG_ERR("Unknown USB power event %d", event);
    6008:	466c      	mov	r4, sp
    600a:	b088      	sub	sp, #32
    600c:	466b      	mov	r3, sp
    600e:	f113 0210 	adds.w	r2, r3, #16
    6012:	d02f      	beq.n	6074 <usb_dc_power_event_handler+0x80>
    6014:	200c      	movs	r0, #12
    6016:	b142      	cbz	r2, 602a <usb_dc_power_event_handler+0x36>
    6018:	4684      	mov	ip, r0
    601a:	2804      	cmp	r0, #4
    601c:	dd01      	ble.n	6022 <usb_dc_power_event_handler+0x2e>
    601e:	4d1c      	ldr	r5, [pc, #112]	; (6090 <usb_dc_power_event_handler+0x9c>)
    6020:	615d      	str	r5, [r3, #20]
    6022:	f1bc 0f08 	cmp.w	ip, #8
    6026:	dd00      	ble.n	602a <usb_dc_power_event_handler+0x36>
    6028:	6199      	str	r1, [r3, #24]
    602a:	280b      	cmp	r0, #11
    602c:	dd25      	ble.n	607a <usb_dc_power_event_handler+0x86>
    602e:	f04f 0c0c 	mov.w	ip, #12
    6032:	b13a      	cbz	r2, 6044 <usb_dc_power_event_handler+0x50>
    6034:	2103      	movs	r1, #3
    6036:	7139      	strb	r1, [r7, #4]
    6038:	2100      	movs	r1, #0
    603a:	7179      	strb	r1, [r7, #5]
    603c:	71b9      	strb	r1, [r7, #6]
    603e:	71f9      	strb	r1, [r7, #7]
    6040:	6878      	ldr	r0, [r7, #4]
    6042:	6118      	str	r0, [r3, #16]
    6044:	2100      	movs	r1, #0
    6046:	f36f 0100 	bfc	r1, #0, #1
    604a:	f36f 0141 	bfc	r1, #1, #1
    604e:	f36f 0182 	bfc	r1, #2, #1
    6052:	f36f 01c5 	bfc	r1, #3, #3
    6056:	2301      	movs	r3, #1
    6058:	f363 1188 	bfi	r1, r3, #6, #3
    605c:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    6060:	f36c 2153 	bfi	r1, ip, #9, #11
    6064:	f36f 511f 	bfc	r1, #20, #12
    6068:	2300      	movs	r3, #0
    606a:	480a      	ldr	r0, [pc, #40]	; (6094 <usb_dc_power_event_handler+0xa0>)
    606c:	f7fb fe8c 	bl	1d88 <z_impl_z_log_msg_static_create>
    6070:	46a5      	mov	sp, r4
    6072:	e00a      	b.n	608a <usb_dc_power_event_handler+0x96>
    6074:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6078:	e7cd      	b.n	6016 <usb_dc_power_event_handler+0x22>
    607a:	f06f 0c1b 	mvn.w	ip, #27
    607e:	e7d8      	b.n	6032 <usb_dc_power_event_handler+0x3e>
		new_state = USBD_DETACHED;
    6080:	2000      	movs	r0, #0
    6082:	e000      	b.n	6086 <usb_dc_power_event_handler+0x92>
	switch (event) {
    6084:	2001      	movs	r0, #1
	submit_dc_power_event(new_state);
    6086:	f7ff ff97 	bl	5fb8 <submit_dc_power_event>
}
    608a:	3708      	adds	r7, #8
    608c:	46bd      	mov	sp, r7
    608e:	bdb0      	pop	{r4, r5, r7, pc}
    6090:	00010cd4 	.word	0x00010cd4
    6094:	0000fec4 	.word	0x0000fec4

00006098 <usbd_sof_trigger_iso_read>:
 * ISO OUT endpoint does not generate irq by itself and reading
 * from ISO OUT ep is synchronized with SOF frame. For more details
 * refer to Nordic usbd specification.
 */
static void usbd_sof_trigger_iso_read(void)
{
    6098:	b510      	push	{r4, lr}
    609a:	b08e      	sub	sp, #56	; 0x38
	struct usbd_event *ev;
	struct nrf_usbd_ep_ctx *ep_ctx;

	ep_ctx = endpoint_ctx(NRFX_USBD_EPOUT8);
    609c:	2008      	movs	r0, #8
    609e:	f7ff fe9b 	bl	5dd8 <endpoint_ctx>
	if (!ep_ctx) {
    60a2:	b120      	cbz	r0, 60ae <usbd_sof_trigger_iso_read+0x16>
    60a4:	4604      	mov	r4, r0
		LOG_ERR("There is no ISO ep");
		return;
	}

	if (ep_ctx->cfg.en) {
    60a6:	7a03      	ldrb	r3, [r0, #8]
    60a8:	bb2b      	cbnz	r3, 60f6 <usbd_sof_trigger_iso_read+0x5e>
		usbd_evt_put(ev);
		usbd_work_schedule();
	} else {
		LOG_DBG("Endpoint is not enabled");
	}
}
    60aa:	b00e      	add	sp, #56	; 0x38
    60ac:	bd10      	pop	{r4, pc}
		LOG_ERR("There is no ISO ep");
    60ae:	4b2d      	ldr	r3, [pc, #180]	; (6164 <usbd_sof_trigger_iso_read+0xcc>)
    60b0:	930d      	str	r3, [sp, #52]	; 0x34
    60b2:	2302      	movs	r3, #2
    60b4:	f88d 3004 	strb.w	r3, [sp, #4]
    60b8:	2300      	movs	r3, #0
    60ba:	f88d 3005 	strb.w	r3, [sp, #5]
    60be:	f88d 3006 	strb.w	r3, [sp, #6]
    60c2:	f88d 3007 	strb.w	r3, [sp, #7]
    60c6:	9a01      	ldr	r2, [sp, #4]
    60c8:	920c      	str	r2, [sp, #48]	; 0x30
    60ca:	4619      	mov	r1, r3
    60cc:	f363 0100 	bfi	r1, r3, #0, #1
    60d0:	f363 0141 	bfi	r1, r3, #1, #1
    60d4:	f363 0182 	bfi	r1, r3, #2, #1
    60d8:	f363 01c5 	bfi	r1, r3, #3, #3
    60dc:	2201      	movs	r2, #1
    60de:	f362 1188 	bfi	r1, r2, #6, #3
    60e2:	2208      	movs	r2, #8
    60e4:	f362 2153 	bfi	r1, r2, #9, #11
    60e8:	f363 511f 	bfi	r1, r3, #20, #12
    60ec:	aa0c      	add	r2, sp, #48	; 0x30
    60ee:	481e      	ldr	r0, [pc, #120]	; (6168 <usbd_sof_trigger_iso_read+0xd0>)
    60f0:	f7fb fe4a 	bl	1d88 <z_impl_z_log_msg_static_create>
		return;
    60f4:	e7d9      	b.n	60aa <usbd_sof_trigger_iso_read+0x12>
		ep_ctx->read_pending = true;
    60f6:	2301      	movs	r3, #1
    60f8:	7743      	strb	r3, [r0, #29]
		ep_ctx->read_complete = true;
    60fa:	7703      	strb	r3, [r0, #28]
		ev = usbd_evt_alloc();
    60fc:	f7ff fee2 	bl	5ec4 <usbd_evt_alloc>
		if (!ev) {
    6100:	4601      	mov	r1, r0
    6102:	b158      	cbz	r0, 611c <usbd_sof_trigger_iso_read+0x84>
		ev->evt_type = USBD_EVT_EP;
    6104:	2301      	movs	r3, #1
    6106:	7403      	strb	r3, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    6108:	7303      	strb	r3, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    610a:	6084      	str	r4, [r0, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    610c:	4817      	ldr	r0, [pc, #92]	; (616c <usbd_sof_trigger_iso_read+0xd4>)
    610e:	f009 f95a 	bl	f3c6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    6112:	4917      	ldr	r1, [pc, #92]	; (6170 <usbd_sof_trigger_iso_read+0xd8>)
    6114:	4817      	ldr	r0, [pc, #92]	; (6174 <usbd_sof_trigger_iso_read+0xdc>)
    6116:	f009 fa09 	bl	f52c <k_work_submit_to_queue>
}
    611a:	e7c6      	b.n	60aa <usbd_sof_trigger_iso_read+0x12>
			LOG_ERR("Failed to alloc evt");
    611c:	4b16      	ldr	r3, [pc, #88]	; (6178 <usbd_sof_trigger_iso_read+0xe0>)
    611e:	9307      	str	r3, [sp, #28]
    6120:	2302      	movs	r3, #2
    6122:	f88d 3004 	strb.w	r3, [sp, #4]
    6126:	2300      	movs	r3, #0
    6128:	f88d 3005 	strb.w	r3, [sp, #5]
    612c:	f88d 3006 	strb.w	r3, [sp, #6]
    6130:	f88d 3007 	strb.w	r3, [sp, #7]
    6134:	9a01      	ldr	r2, [sp, #4]
    6136:	9206      	str	r2, [sp, #24]
    6138:	4619      	mov	r1, r3
    613a:	f363 0100 	bfi	r1, r3, #0, #1
    613e:	f363 0141 	bfi	r1, r3, #1, #1
    6142:	f363 0182 	bfi	r1, r3, #2, #1
    6146:	f363 01c5 	bfi	r1, r3, #3, #3
    614a:	2201      	movs	r2, #1
    614c:	f362 1188 	bfi	r1, r2, #6, #3
    6150:	2208      	movs	r2, #8
    6152:	f362 2153 	bfi	r1, r2, #9, #11
    6156:	f363 511f 	bfi	r1, r3, #20, #12
    615a:	aa06      	add	r2, sp, #24
    615c:	4802      	ldr	r0, [pc, #8]	; (6168 <usbd_sof_trigger_iso_read+0xd0>)
    615e:	f7fb fe13 	bl	1d88 <z_impl_z_log_msg_static_create>
			return;
    6162:	e7a2      	b.n	60aa <usbd_sof_trigger_iso_read+0x12>
    6164:	00010cf0 	.word	0x00010cf0
    6168:	0000fec4 	.word	0x0000fec4
    616c:	20000264 	.word	0x20000264
    6170:	2000132c 	.word	0x2000132c
    6174:	20000910 	.word	0x20000910
    6178:	00010d04 	.word	0x00010d04

0000617c <usbd_event_transfer_data>:
{
    617c:	b5f0      	push	{r4, r5, r6, r7, lr}
    617e:	b083      	sub	sp, #12
    6180:	af00      	add	r7, sp, #0
    6182:	4604      	mov	r4, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    6184:	7886      	ldrb	r6, [r0, #2]
    6186:	4630      	mov	r0, r6
    6188:	f7ff fe26 	bl	5dd8 <endpoint_ctx>
    618c:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    618e:	f016 0f80 	tst.w	r6, #128	; 0x80
    6192:	d118      	bne.n	61c6 <usbd_event_transfer_data+0x4a>
		switch (p_event->data.eptransfer.status) {
    6194:	78e3      	ldrb	r3, [r4, #3]
    6196:	2b00      	cmp	r3, #0
    6198:	d06e      	beq.n	6278 <usbd_event_transfer_data+0xfc>
    619a:	2b01      	cmp	r3, #1
    619c:	f040 8084 	bne.w	62a8 <usbd_event_transfer_data+0x12c>
			struct usbd_event *ev = usbd_evt_alloc();
    61a0:	f7ff fe90 	bl	5ec4 <usbd_evt_alloc>
			if (!ev) {
    61a4:	4601      	mov	r1, r0
    61a6:	2800      	cmp	r0, #0
    61a8:	f000 80b6 	beq.w	6318 <usbd_event_transfer_data+0x19c>
			ep_ctx->read_pending = true;
    61ac:	2301      	movs	r3, #1
    61ae:	776b      	strb	r3, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    61b0:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    61b2:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    61b4:	6085      	str	r5, [r0, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    61b6:	485d      	ldr	r0, [pc, #372]	; (632c <usbd_event_transfer_data+0x1b0>)
    61b8:	f009 f905 	bl	f3c6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    61bc:	495c      	ldr	r1, [pc, #368]	; (6330 <usbd_event_transfer_data+0x1b4>)
    61be:	485d      	ldr	r0, [pc, #372]	; (6334 <usbd_event_transfer_data+0x1b8>)
    61c0:	f009 f9b4 	bl	f52c <k_work_submit_to_queue>
}
    61c4:	e0a8      	b.n	6318 <usbd_event_transfer_data+0x19c>
		switch (p_event->data.eptransfer.status) {
    61c6:	78e3      	ldrb	r3, [r4, #3]
    61c8:	2b00      	cmp	r3, #0
    61ca:	d03b      	beq.n	6244 <usbd_event_transfer_data+0xc8>
    61cc:	2b03      	cmp	r3, #3
    61ce:	f000 80a3 	beq.w	6318 <usbd_event_transfer_data+0x19c>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    61d2:	466c      	mov	r4, sp
    61d4:	b088      	sub	sp, #32
    61d6:	4669      	mov	r1, sp
    61d8:	f111 0210 	adds.w	r2, r1, #16
    61dc:	d046      	beq.n	626c <usbd_event_transfer_data+0xf0>
    61de:	2010      	movs	r0, #16
    61e0:	b162      	cbz	r2, 61fc <usbd_event_transfer_data+0x80>
    61e2:	4605      	mov	r5, r0
    61e4:	2804      	cmp	r0, #4
    61e6:	dd03      	ble.n	61f0 <usbd_event_transfer_data+0x74>
    61e8:	f8df c14c 	ldr.w	ip, [pc, #332]	; 6338 <usbd_event_transfer_data+0x1bc>
    61ec:	f8c1 c014 	str.w	ip, [r1, #20]
    61f0:	2d08      	cmp	r5, #8
    61f2:	dd00      	ble.n	61f6 <usbd_event_transfer_data+0x7a>
    61f4:	618b      	str	r3, [r1, #24]
    61f6:	2d0c      	cmp	r5, #12
    61f8:	dd00      	ble.n	61fc <usbd_event_transfer_data+0x80>
    61fa:	61ce      	str	r6, [r1, #28]
    61fc:	280f      	cmp	r0, #15
    61fe:	dd38      	ble.n	6272 <usbd_event_transfer_data+0xf6>
    6200:	2310      	movs	r3, #16
    6202:	b13a      	cbz	r2, 6214 <usbd_event_transfer_data+0x98>
    6204:	2004      	movs	r0, #4
    6206:	7138      	strb	r0, [r7, #4]
    6208:	2000      	movs	r0, #0
    620a:	7178      	strb	r0, [r7, #5]
    620c:	71b8      	strb	r0, [r7, #6]
    620e:	71f8      	strb	r0, [r7, #7]
    6210:	6878      	ldr	r0, [r7, #4]
    6212:	6108      	str	r0, [r1, #16]
    6214:	2100      	movs	r1, #0
    6216:	f36f 0100 	bfc	r1, #0, #1
    621a:	f36f 0141 	bfc	r1, #1, #1
    621e:	f36f 0182 	bfc	r1, #2, #1
    6222:	f36f 01c5 	bfc	r1, #3, #3
    6226:	2001      	movs	r0, #1
    6228:	f360 1188 	bfi	r1, r0, #6, #3
    622c:	f3c3 030a 	ubfx	r3, r3, #0, #11
    6230:	f363 2153 	bfi	r1, r3, #9, #11
    6234:	f36f 511f 	bfc	r1, #20, #12
    6238:	2300      	movs	r3, #0
    623a:	4840      	ldr	r0, [pc, #256]	; (633c <usbd_event_transfer_data+0x1c0>)
    623c:	f7fb fda4 	bl	1d88 <z_impl_z_log_msg_static_create>
    6240:	46a5      	mov	sp, r4
    6242:	e069      	b.n	6318 <usbd_event_transfer_data+0x19c>
			struct usbd_event *ev = usbd_evt_alloc();
    6244:	f7ff fe3e 	bl	5ec4 <usbd_evt_alloc>
			if (!ev) {
    6248:	4601      	mov	r1, r0
    624a:	2800      	cmp	r0, #0
    624c:	d064      	beq.n	6318 <usbd_event_transfer_data+0x19c>
			ep_ctx->write_in_progress = false;
    624e:	2300      	movs	r3, #0
    6250:	77ab      	strb	r3, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    6252:	2301      	movs	r3, #1
    6254:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    6256:	2303      	movs	r3, #3
    6258:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    625a:	6085      	str	r5, [r0, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    625c:	4833      	ldr	r0, [pc, #204]	; (632c <usbd_event_transfer_data+0x1b0>)
    625e:	f009 f8b2 	bl	f3c6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    6262:	4933      	ldr	r1, [pc, #204]	; (6330 <usbd_event_transfer_data+0x1b4>)
    6264:	4833      	ldr	r0, [pc, #204]	; (6334 <usbd_event_transfer_data+0x1b8>)
    6266:	f009 f961 	bl	f52c <k_work_submit_to_queue>
}
    626a:	e055      	b.n	6318 <usbd_event_transfer_data+0x19c>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    626c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6270:	e7b6      	b.n	61e0 <usbd_event_transfer_data+0x64>
    6272:	f06f 031b 	mvn.w	r3, #27
    6276:	e7c4      	b.n	6202 <usbd_event_transfer_data+0x86>
			struct usbd_event *ev = usbd_evt_alloc();
    6278:	f7ff fe24 	bl	5ec4 <usbd_evt_alloc>
			if (!ev) {
    627c:	4606      	mov	r6, r0
    627e:	2800      	cmp	r0, #0
    6280:	d04a      	beq.n	6318 <usbd_event_transfer_data+0x19c>
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    6282:	78a1      	ldrb	r1, [r4, #2]
    6284:	482e      	ldr	r0, [pc, #184]	; (6340 <usbd_event_transfer_data+0x1c4>)
    6286:	f007 fe06 	bl	de96 <nrf_usbd_ep_amount_get>
    628a:	60e8      	str	r0, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
    628c:	2301      	movs	r3, #1
    628e:	7433      	strb	r3, [r6, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    6290:	2302      	movs	r3, #2
    6292:	7333      	strb	r3, [r6, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    6294:	60b5      	str	r5, [r6, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    6296:	4631      	mov	r1, r6
    6298:	4824      	ldr	r0, [pc, #144]	; (632c <usbd_event_transfer_data+0x1b0>)
    629a:	f009 f894 	bl	f3c6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    629e:	4924      	ldr	r1, [pc, #144]	; (6330 <usbd_event_transfer_data+0x1b4>)
    62a0:	4824      	ldr	r0, [pc, #144]	; (6334 <usbd_event_transfer_data+0x1b8>)
    62a2:	f009 f943 	bl	f52c <k_work_submit_to_queue>
}
    62a6:	e037      	b.n	6318 <usbd_event_transfer_data+0x19c>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    62a8:	466c      	mov	r4, sp
    62aa:	b088      	sub	sp, #32
    62ac:	4669      	mov	r1, sp
    62ae:	f111 0210 	adds.w	r2, r1, #16
    62b2:	d034      	beq.n	631e <usbd_event_transfer_data+0x1a2>
    62b4:	2010      	movs	r0, #16
    62b6:	b162      	cbz	r2, 62d2 <usbd_event_transfer_data+0x156>
    62b8:	4605      	mov	r5, r0
    62ba:	2804      	cmp	r0, #4
    62bc:	dd03      	ble.n	62c6 <usbd_event_transfer_data+0x14a>
    62be:	f8df c078 	ldr.w	ip, [pc, #120]	; 6338 <usbd_event_transfer_data+0x1bc>
    62c2:	f8c1 c014 	str.w	ip, [r1, #20]
    62c6:	2d08      	cmp	r5, #8
    62c8:	dd00      	ble.n	62cc <usbd_event_transfer_data+0x150>
    62ca:	618b      	str	r3, [r1, #24]
    62cc:	2d0c      	cmp	r5, #12
    62ce:	dd00      	ble.n	62d2 <usbd_event_transfer_data+0x156>
    62d0:	61ce      	str	r6, [r1, #28]
    62d2:	280f      	cmp	r0, #15
    62d4:	dd26      	ble.n	6324 <usbd_event_transfer_data+0x1a8>
    62d6:	2310      	movs	r3, #16
    62d8:	b13a      	cbz	r2, 62ea <usbd_event_transfer_data+0x16e>
    62da:	2004      	movs	r0, #4
    62dc:	7138      	strb	r0, [r7, #4]
    62de:	2000      	movs	r0, #0
    62e0:	7178      	strb	r0, [r7, #5]
    62e2:	71b8      	strb	r0, [r7, #6]
    62e4:	71f8      	strb	r0, [r7, #7]
    62e6:	6878      	ldr	r0, [r7, #4]
    62e8:	6108      	str	r0, [r1, #16]
    62ea:	2100      	movs	r1, #0
    62ec:	f36f 0100 	bfc	r1, #0, #1
    62f0:	f36f 0141 	bfc	r1, #1, #1
    62f4:	f36f 0182 	bfc	r1, #2, #1
    62f8:	f36f 01c5 	bfc	r1, #3, #3
    62fc:	2001      	movs	r0, #1
    62fe:	f360 1188 	bfi	r1, r0, #6, #3
    6302:	f3c3 030a 	ubfx	r3, r3, #0, #11
    6306:	f363 2153 	bfi	r1, r3, #9, #11
    630a:	f36f 511f 	bfc	r1, #20, #12
    630e:	2300      	movs	r3, #0
    6310:	480a      	ldr	r0, [pc, #40]	; (633c <usbd_event_transfer_data+0x1c0>)
    6312:	f7fb fd39 	bl	1d88 <z_impl_z_log_msg_static_create>
    6316:	46a5      	mov	sp, r4
}
    6318:	370c      	adds	r7, #12
    631a:	46bd      	mov	sp, r7
    631c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    631e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6322:	e7c8      	b.n	62b6 <usbd_event_transfer_data+0x13a>
    6324:	f06f 031b 	mvn.w	r3, #27
    6328:	e7d6      	b.n	62d8 <usbd_event_transfer_data+0x15c>
    632a:	bf00      	nop
    632c:	20000264 	.word	0x20000264
    6330:	2000132c 	.word	0x2000132c
    6334:	20000910 	.word	0x20000910
    6338:	00010d18 	.word	0x00010d18
    633c:	0000fec4 	.word	0x0000fec4
    6340:	40027000 	.word	0x40027000

00006344 <usbd_work_process_recvreq>:
	if (!ep_ctx->read_pending) {
    6344:	7f4b      	ldrb	r3, [r1, #29]
    6346:	2b00      	cmp	r3, #0
    6348:	d05f      	beq.n	640a <usbd_work_process_recvreq+0xc6>
{
    634a:	b5f0      	push	{r4, r5, r6, r7, lr}
    634c:	b085      	sub	sp, #20
    634e:	af00      	add	r7, sp, #0
    6350:	460c      	mov	r4, r1
	if (!ep_ctx->read_complete) {
    6352:	7f0b      	ldrb	r3, [r1, #28]
    6354:	b913      	cbnz	r3, 635c <usbd_work_process_recvreq+0x18>
}
    6356:	3714      	adds	r7, #20
    6358:	46bd      	mov	sp, r7
    635a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ep_ctx->read_pending = false;
    635c:	2600      	movs	r6, #0
    635e:	774e      	strb	r6, [r1, #29]
	ep_ctx->read_complete = false;
    6360:	770e      	strb	r6, [r1, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    6362:	f100 0538 	add.w	r5, r0, #56	; 0x38
	return z_impl_k_mutex_lock(mutex, timeout);
    6366:	f04f 32ff 	mov.w	r2, #4294967295
    636a:	f04f 33ff 	mov.w	r3, #4294967295
    636e:	4628      	mov	r0, r5
    6370:	f004 fbfa 	bl	ab68 <z_impl_k_mutex_lock>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    6374:	6963      	ldr	r3, [r4, #20]
    6376:	607b      	str	r3, [r7, #4]
    6378:	6863      	ldr	r3, [r4, #4]
    637a:	60bb      	str	r3, [r7, #8]
    637c:	60fe      	str	r6, [r7, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    637e:	1d39      	adds	r1, r7, #4
    6380:	7a60      	ldrb	r0, [r4, #9]
    6382:	f003 fa4b 	bl	981c <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    6386:	4b21      	ldr	r3, [pc, #132]	; (640c <usbd_work_process_recvreq+0xc8>)
    6388:	4298      	cmp	r0, r3
    638a:	d034      	beq.n	63f6 <usbd_work_process_recvreq+0xb2>
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
    638c:	466e      	mov	r6, sp
    638e:	b088      	sub	sp, #32
    6390:	466b      	mov	r3, sp
    6392:	f113 0210 	adds.w	r2, r3, #16
    6396:	d032      	beq.n	63fe <usbd_work_process_recvreq+0xba>
    6398:	210c      	movs	r1, #12
    639a:	b14a      	cbz	r2, 63b0 <usbd_work_process_recvreq+0x6c>
    639c:	460c      	mov	r4, r1
    639e:	2904      	cmp	r1, #4
    63a0:	dd03      	ble.n	63aa <usbd_work_process_recvreq+0x66>
    63a2:	f8df c06c 	ldr.w	ip, [pc, #108]	; 6410 <usbd_work_process_recvreq+0xcc>
    63a6:	f8c3 c014 	str.w	ip, [r3, #20]
    63aa:	2c08      	cmp	r4, #8
    63ac:	dd00      	ble.n	63b0 <usbd_work_process_recvreq+0x6c>
    63ae:	6198      	str	r0, [r3, #24]
    63b0:	290b      	cmp	r1, #11
    63b2:	dd27      	ble.n	6404 <usbd_work_process_recvreq+0xc0>
    63b4:	240c      	movs	r4, #12
    63b6:	b13a      	cbz	r2, 63c8 <usbd_work_process_recvreq+0x84>
    63b8:	2103      	movs	r1, #3
    63ba:	7039      	strb	r1, [r7, #0]
    63bc:	2100      	movs	r1, #0
    63be:	7079      	strb	r1, [r7, #1]
    63c0:	70b9      	strb	r1, [r7, #2]
    63c2:	70f9      	strb	r1, [r7, #3]
    63c4:	6838      	ldr	r0, [r7, #0]
    63c6:	6118      	str	r0, [r3, #16]
    63c8:	2100      	movs	r1, #0
    63ca:	f36f 0100 	bfc	r1, #0, #1
    63ce:	f36f 0141 	bfc	r1, #1, #1
    63d2:	f36f 0182 	bfc	r1, #2, #1
    63d6:	f36f 01c5 	bfc	r1, #3, #3
    63da:	2301      	movs	r3, #1
    63dc:	f363 1188 	bfi	r1, r3, #6, #3
    63e0:	f3c4 040a 	ubfx	r4, r4, #0, #11
    63e4:	f364 2153 	bfi	r1, r4, #9, #11
    63e8:	f36f 511f 	bfc	r1, #20, #12
    63ec:	2300      	movs	r3, #0
    63ee:	4809      	ldr	r0, [pc, #36]	; (6414 <usbd_work_process_recvreq+0xd0>)
    63f0:	f7fb fcca 	bl	1d88 <z_impl_z_log_msg_static_create>
    63f4:	46b5      	mov	sp, r6
	return z_impl_k_mutex_unlock(mutex);
    63f6:	4628      	mov	r0, r5
    63f8:	f004 fc3a 	bl	ac70 <z_impl_k_mutex_unlock>
    63fc:	e7ab      	b.n	6356 <usbd_work_process_recvreq+0x12>
    63fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    6402:	e7ca      	b.n	639a <usbd_work_process_recvreq+0x56>
    6404:	f06f 041b 	mvn.w	r4, #27
    6408:	e7d5      	b.n	63b6 <usbd_work_process_recvreq+0x72>
    640a:	4770      	bx	lr
    640c:	0bad0000 	.word	0x0bad0000
    6410:	00010d44 	.word	0x00010d44
    6414:	0000fec4 	.word	0x0000fec4

00006418 <usbd_work_process_setup>:
{
    6418:	b538      	push	{r3, r4, r5, lr}
    641a:	4605      	mov	r5, r0
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    641c:	6944      	ldr	r4, [r0, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    641e:	2208      	movs	r2, #8
    6420:	2100      	movs	r1, #0
    6422:	4620      	mov	r0, r4
    6424:	f007 fcf9 	bl	de1a <memset>
    return ret;
}

NRF_STATIC_INLINE uint8_t nrf_usbd_setup_bmrequesttype_get(NRF_USBD_Type const * p_reg)
{
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    6428:	4b1e      	ldr	r3, [pc, #120]	; (64a4 <usbd_work_process_setup+0x8c>)
    642a:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
	usbd_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    642e:	7022      	strb	r2, [r4, #0]
}

NRF_STATIC_INLINE uint8_t nrf_usbd_setup_brequest_get(NRF_USBD_Type const * p_reg)
{
    return (uint8_t)(p_reg->BREQUEST);
    6430:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
	usbd_setup->bRequest = nrf_usbd_setup_brequest_get(NRF_USBD);
    6434:	7062      	strb	r2, [r4, #1]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_wvalue_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WVALUEL;
    6436:	f8d3 1488 	ldr.w	r1, [r3, #1160]	; 0x488
    643a:	b289      	uxth	r1, r1
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    643c:	f8d3 248c 	ldr.w	r2, [r3, #1164]	; 0x48c
    6440:	0212      	lsls	r2, r2, #8
    6442:	b292      	uxth	r2, r2
    6444:	430a      	orrs	r2, r1
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    6446:	8062      	strh	r2, [r4, #2]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_windex_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WINDEXL;
    6448:	f8d3 1490 	ldr.w	r1, [r3, #1168]	; 0x490
    644c:	b289      	uxth	r1, r1
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    644e:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
    6452:	0212      	lsls	r2, r2, #8
    6454:	b292      	uxth	r2, r2
    6456:	430a      	orrs	r2, r1
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    6458:	80a2      	strh	r2, [r4, #4]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_wlength_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WLENGTHL;
    645a:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    645e:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    6460:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    6464:	021b      	lsls	r3, r3, #8
    6466:	b29b      	uxth	r3, r3
    6468:	4313      	orrs	r3, r2
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    646a:	80e3      	strh	r3, [r4, #6]
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    646c:	2208      	movs	r2, #8
    646e:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    6470:	4621      	mov	r1, r4
    6472:	480d      	ldr	r0, [pc, #52]	; (64a8 <usbd_work_process_setup+0x90>)
    6474:	f007 fca2 	bl	ddbc <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    6478:	682b      	ldr	r3, [r5, #0]
    647a:	2100      	movs	r1, #0
    647c:	7a68      	ldrb	r0, [r5, #9]
    647e:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    6480:	f994 3000 	ldrsb.w	r3, [r4]
    6484:	2b00      	cmp	r3, #0
    6486:	db01      	blt.n	648c <usbd_work_process_setup+0x74>
    6488:	88e3      	ldrh	r3, [r4, #6]
    648a:	b923      	cbnz	r3, 6496 <usbd_work_process_setup+0x7e>
		ctx->ctrl_read_len = 0U;
    648c:	4b07      	ldr	r3, [pc, #28]	; (64ac <usbd_work_process_setup+0x94>)
    648e:	2200      	movs	r2, #0
    6490:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
}
    6494:	bd38      	pop	{r3, r4, r5, pc}
		ctx->ctrl_read_len = usbd_setup->wLength;
    6496:	4a05      	ldr	r2, [pc, #20]	; (64ac <usbd_work_process_setup+0x94>)
    6498:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    649c:	f003 fc42 	bl	9d24 <nrfx_usbd_setup_data_clear>
    64a0:	e7f8      	b.n	6494 <usbd_work_process_setup+0x7c>
    64a2:	bf00      	nop
    64a4:	40027000 	.word	0x40027000
    64a8:	20001308 	.word	0x20001308
    64ac:	20001304 	.word	0x20001304

000064b0 <usbd_work_process_ep_events>:
{
    64b0:	b538      	push	{r3, r4, r5, lr}
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    64b2:	6804      	ldr	r4, [r0, #0]
	switch (ep_evt->evt_type) {
    64b4:	7903      	ldrb	r3, [r0, #4]
    64b6:	2b03      	cmp	r3, #3
    64b8:	d806      	bhi.n	64c8 <usbd_work_process_ep_events+0x18>
    64ba:	e8df f003 	tbb	[pc, r3]
    64be:	0602      	.short	0x0602
    64c0:	100b      	.short	0x100b
		usbd_work_process_setup(ep_ctx);
    64c2:	4620      	mov	r0, r4
    64c4:	f7ff ffa8 	bl	6418 <usbd_work_process_setup>
}
    64c8:	bd38      	pop	{r3, r4, r5, pc}
		usbd_work_process_recvreq(ctx, ep_ctx);
    64ca:	4621      	mov	r1, r4
    64cc:	480f      	ldr	r0, [pc, #60]	; (650c <usbd_work_process_ep_events+0x5c>)
    64ce:	f7ff ff39 	bl	6344 <usbd_work_process_recvreq>
		break;
    64d2:	e7f9      	b.n	64c8 <usbd_work_process_ep_events+0x18>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    64d4:	6823      	ldr	r3, [r4, #0]
    64d6:	2101      	movs	r1, #1
    64d8:	7a60      	ldrb	r0, [r4, #9]
    64da:	4798      	blx	r3
		break;
    64dc:	e7f4      	b.n	64c8 <usbd_work_process_ep_events+0x18>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    64de:	7aa3      	ldrb	r3, [r4, #10]
    64e0:	b90b      	cbnz	r3, 64e6 <usbd_work_process_ep_events+0x36>
		    !ep_ctx->trans_zlp) {
    64e2:	7fe3      	ldrb	r3, [r4, #31]
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    64e4:	b123      	cbz	r3, 64f0 <usbd_work_process_ep_events+0x40>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    64e6:	6823      	ldr	r3, [r4, #0]
    64e8:	2102      	movs	r1, #2
    64ea:	7a60      	ldrb	r0, [r4, #9]
    64ec:	4798      	blx	r3
}
    64ee:	e7eb      	b.n	64c8 <usbd_work_process_ep_events+0x18>
	return z_impl_k_mutex_lock(mutex, timeout);
    64f0:	4d07      	ldr	r5, [pc, #28]	; (6510 <usbd_work_process_ep_events+0x60>)
    64f2:	f04f 32ff 	mov.w	r2, #4294967295
    64f6:	f04f 33ff 	mov.w	r3, #4294967295
    64fa:	4628      	mov	r0, r5
    64fc:	f004 fb34 	bl	ab68 <z_impl_k_mutex_lock>
			nrfx_usbd_setup_clear();
    6500:	f003 fc62 	bl	9dc8 <nrfx_usbd_setup_clear>
	return z_impl_k_mutex_unlock(mutex);
    6504:	4628      	mov	r0, r5
    6506:	f004 fbb3 	bl	ac70 <z_impl_k_mutex_unlock>
    650a:	e7ec      	b.n	64e6 <usbd_work_process_ep_events+0x36>
    650c:	20001304 	.word	0x20001304
    6510:	2000133c 	.word	0x2000133c

00006514 <usbd_work_process_pwr_events>:
{
    6514:	b510      	push	{r4, lr}
	switch (pwr_evt->state) {
    6516:	7803      	ldrb	r3, [r0, #0]
    6518:	2b04      	cmp	r3, #4
    651a:	d81c      	bhi.n	6556 <usbd_work_process_pwr_events+0x42>
    651c:	e8df f003 	tbb	[pc, r3]
    6520:	2c0c031c 	.word	0x2c0c031c
    6524:	3b          	.byte	0x3b
    6525:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    6526:	f003 f8d7 	bl	96d8 <nrfx_usbd_is_enabled>
    652a:	b9a0      	cbnz	r0, 6556 <usbd_work_process_pwr_events+0x42>
			nrfx_usbd_enable();
    652c:	f003 f854 	bl	95d8 <nrfx_usbd_enable>
			err = hfxo_start(ctx);
    6530:	481f      	ldr	r0, [pc, #124]	; (65b0 <usbd_work_process_pwr_events+0x9c>)
    6532:	f007 fd62 	bl	dffa <hfxo_start>
    6536:	e00e      	b.n	6556 <usbd_work_process_pwr_events+0x42>
		usbd_enable_endpoints(ctx);
    6538:	4c1d      	ldr	r4, [pc, #116]	; (65b0 <usbd_work_process_pwr_events+0x9c>)
    653a:	4620      	mov	r0, r4
    653c:	f007 fd2b 	bl	df96 <usbd_enable_endpoints>
		nrfx_usbd_start(true);
    6540:	2001      	movs	r0, #1
    6542:	f003 f8ad 	bl	96a0 <nrfx_usbd_start>
		ctx->ready = true;
    6546:	2301      	movs	r3, #1
    6548:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
    654c:	6823      	ldr	r3, [r4, #0]
    654e:	b113      	cbz	r3, 6556 <usbd_work_process_pwr_events+0x42>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    6550:	2100      	movs	r1, #0
    6552:	2002      	movs	r0, #2
    6554:	4798      	blx	r3
}
    6556:	bd10      	pop	{r4, pc}
		ctx->ready = false;
    6558:	4c15      	ldr	r4, [pc, #84]	; (65b0 <usbd_work_process_pwr_events+0x9c>)
    655a:	2300      	movs	r3, #0
    655c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		nrfx_usbd_disable();
    6560:	f003 fdda 	bl	a118 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    6564:	4620      	mov	r0, r4
    6566:	f007 fcfc 	bl	df62 <hfxo_stop>
		if (ctx->status_cb) {
    656a:	6823      	ldr	r3, [r4, #0]
    656c:	2b00      	cmp	r3, #0
    656e:	d0f2      	beq.n	6556 <usbd_work_process_pwr_events+0x42>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    6570:	2100      	movs	r1, #0
    6572:	2004      	movs	r0, #4
    6574:	4798      	blx	r3
    6576:	e7ee      	b.n	6556 <usbd_work_process_pwr_events+0x42>
	return get_usbd_ctx()->ready;
    6578:	4b0d      	ldr	r3, [pc, #52]	; (65b0 <usbd_work_process_pwr_events+0x9c>)
    657a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		if (dev_ready()) {
    657e:	2b00      	cmp	r3, #0
    6580:	d0e9      	beq.n	6556 <usbd_work_process_pwr_events+0x42>
			nrfx_usbd_suspend();
    6582:	f003 f8b3 	bl	96ec <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    6586:	4b0a      	ldr	r3, [pc, #40]	; (65b0 <usbd_work_process_pwr_events+0x9c>)
    6588:	681b      	ldr	r3, [r3, #0]
    658a:	2b00      	cmp	r3, #0
    658c:	d0e3      	beq.n	6556 <usbd_work_process_pwr_events+0x42>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    658e:	2100      	movs	r1, #0
    6590:	2005      	movs	r0, #5
    6592:	4798      	blx	r3
    6594:	e7df      	b.n	6556 <usbd_work_process_pwr_events+0x42>
		if (ctx->status_cb && dev_ready()) {
    6596:	4b06      	ldr	r3, [pc, #24]	; (65b0 <usbd_work_process_pwr_events+0x9c>)
    6598:	681b      	ldr	r3, [r3, #0]
    659a:	2b00      	cmp	r3, #0
    659c:	d0db      	beq.n	6556 <usbd_work_process_pwr_events+0x42>
	return get_usbd_ctx()->ready;
    659e:	4a04      	ldr	r2, [pc, #16]	; (65b0 <usbd_work_process_pwr_events+0x9c>)
    65a0:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
		if (ctx->status_cb && dev_ready()) {
    65a4:	2a00      	cmp	r2, #0
    65a6:	d0d6      	beq.n	6556 <usbd_work_process_pwr_events+0x42>
			ctx->status_cb(USB_DC_RESUME, NULL);
    65a8:	2100      	movs	r1, #0
    65aa:	2006      	movs	r0, #6
    65ac:	4798      	blx	r3
}
    65ae:	e7d2      	b.n	6556 <usbd_work_process_pwr_events+0x42>
    65b0:	20001304 	.word	0x20001304

000065b4 <usbd_reinit>:
{
    65b4:	b508      	push	{r3, lr}
	nrfx_power_usbevt_disable();
    65b6:	f008 fc55 	bl	ee64 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    65ba:	f003 fdad 	bl	a118 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    65be:	f003 f801 	bl	95c4 <nrfx_usbd_uninit>
	usbd_evt_flush();
    65c2:	f7ff fc6f 	bl	5ea4 <usbd_evt_flush>
	ret = eps_ctx_init();
    65c6:	f7ff fc31 	bl	5e2c <eps_ctx_init>
	nrfx_power_usbevt_enable();
    65ca:	f008 fc44 	bl	ee56 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    65ce:	4802      	ldr	r0, [pc, #8]	; (65d8 <usbd_reinit+0x24>)
    65d0:	f003 f8cc 	bl	976c <nrfx_usbd_init>
}
    65d4:	bd08      	pop	{r3, pc}
    65d6:	bf00      	nop
    65d8:	00006a6d 	.word	0x00006a6d

000065dc <usbd_work_handler>:

/* Work handler */
static void usbd_work_handler(struct k_work *item)
{
    65dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    65e0:	b088      	sub	sp, #32
    65e2:	af00      	add	r7, sp, #0
    65e4:	4606      	mov	r6, r0
	struct nrf_usbd_ctx *ctx;
	struct usbd_event *ev;

	ctx = CONTAINER_OF(item, struct nrf_usbd_ctx, usb_work);

	while ((ev = usbd_evt_get()) != NULL) {
    65e6:	e04f      	b.n	6688 <usbd_work_handler+0xac>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    65e8:	1d21      	adds	r1, r4, #4
    65ea:	487e      	ldr	r0, [pc, #504]	; (67e4 <usbd_work_handler+0x208>)
    65ec:	f008 fdbf 	bl	f16e <k_mem_slab_free>
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
			/* Drop non-power events when cable is detached. */
			usbd_evt_free(ev);
			continue;
    65f0:	e04a      	b.n	6688 <usbd_work_handler+0xac>
		}

		switch (ev->evt_type) {
		case USBD_EVT_EP:
			if (!ctx->attached) {
    65f2:	f816 3c04 	ldrb.w	r3, [r6, #-4]
    65f6:	2b00      	cmp	r3, #0
    65f8:	d13e      	bne.n	6678 <usbd_work_handler+0x9c>
				LOG_ERR("not attached, EP 0x%02x event dropped",
    65fa:	68a3      	ldr	r3, [r4, #8]
    65fc:	f893 c009 	ldrb.w	ip, [r3, #9]
    6600:	46ea      	mov	sl, sp
    6602:	b088      	sub	sp, #32
    6604:	466b      	mov	r3, sp
    6606:	f113 0210 	adds.w	r2, r3, #16
    660a:	d010      	beq.n	662e <usbd_work_handler+0x52>
    660c:	210c      	movs	r1, #12
    660e:	b152      	cbz	r2, 6626 <usbd_work_handler+0x4a>
    6610:	4608      	mov	r0, r1
    6612:	2904      	cmp	r1, #4
    6614:	dd03      	ble.n	661e <usbd_work_handler+0x42>
    6616:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 67e8 <usbd_work_handler+0x20c>
    661a:	f8c3 e014 	str.w	lr, [r3, #20]
    661e:	2808      	cmp	r0, #8
    6620:	dd08      	ble.n	6634 <usbd_work_handler+0x58>
    6622:	f8c3 c018 	str.w	ip, [r3, #24]
    6626:	290b      	cmp	r1, #11
    6628:	dd4c      	ble.n	66c4 <usbd_work_handler+0xe8>
    662a:	210c      	movs	r1, #12
    662c:	e004      	b.n	6638 <usbd_work_handler+0x5c>
    662e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    6632:	e7ec      	b.n	660e <usbd_work_handler+0x32>
    6634:	f06f 011b 	mvn.w	r1, #27
    6638:	b13a      	cbz	r2, 664a <usbd_work_handler+0x6e>
    663a:	2003      	movs	r0, #3
    663c:	7138      	strb	r0, [r7, #4]
    663e:	2000      	movs	r0, #0
    6640:	7178      	strb	r0, [r7, #5]
    6642:	71b8      	strb	r0, [r7, #6]
    6644:	71f8      	strb	r0, [r7, #7]
    6646:	6878      	ldr	r0, [r7, #4]
    6648:	6118      	str	r0, [r3, #16]
    664a:	f36f 0800 	bfc	r8, #0, #1
    664e:	f36f 0841 	bfc	r8, #1, #1
    6652:	f36f 0882 	bfc	r8, #2, #1
    6656:	f36f 08c5 	bfc	r8, #3, #3
    665a:	2301      	movs	r3, #1
    665c:	f363 1888 	bfi	r8, r3, #6, #3
    6660:	f3c1 030a 	ubfx	r3, r1, #0, #11
    6664:	f363 2853 	bfi	r8, r3, #9, #11
    6668:	f36f 581f 	bfc	r8, #20, #12
    666c:	2300      	movs	r3, #0
    666e:	4641      	mov	r1, r8
    6670:	485e      	ldr	r0, [pc, #376]	; (67ec <usbd_work_handler+0x210>)
    6672:	f7fb fb89 	bl	1d88 <z_impl_z_log_msg_static_create>
    6676:	46d5      	mov	sp, sl
					(uint32_t)ev->evt.ep_evt.ep->cfg.addr);
			}
			usbd_work_process_ep_events(&ev->evt.ep_evt);
    6678:	f104 0008 	add.w	r0, r4, #8
    667c:	f7ff ff18 	bl	64b0 <usbd_work_process_ep_events>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    6680:	1d21      	adds	r1, r4, #4
    6682:	4858      	ldr	r0, [pc, #352]	; (67e4 <usbd_work_handler+0x208>)
    6684:	f008 fd73 	bl	f16e <k_mem_slab_free>
	while ((ev = usbd_evt_get()) != NULL) {
    6688:	f7ff fc02 	bl	5e90 <usbd_evt_get>
    668c:	4604      	mov	r4, r0
    668e:	2800      	cmp	r0, #0
    6690:	f000 80a3 	beq.w	67da <usbd_work_handler+0x1fe>
	return get_usbd_ctx()->ready;
    6694:	4b56      	ldr	r3, [pc, #344]	; (67f0 <usbd_work_handler+0x214>)
    6696:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    669a:	b913      	cbnz	r3, 66a2 <usbd_work_handler+0xc6>
    669c:	7c23      	ldrb	r3, [r4, #16]
    669e:	2b00      	cmp	r3, #0
    66a0:	d1a2      	bne.n	65e8 <usbd_work_handler+0xc>
		switch (ev->evt_type) {
    66a2:	7c23      	ldrb	r3, [r4, #16]
    66a4:	2b04      	cmp	r3, #4
    66a6:	d858      	bhi.n	675a <usbd_work_handler+0x17e>
    66a8:	a201      	add	r2, pc, #4	; (adr r2, 66b0 <usbd_work_handler+0xd4>)
    66aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    66ae:	bf00      	nop
    66b0:	000066cb 	.word	0x000066cb
    66b4:	000065f3 	.word	0x000065f3
    66b8:	000066d5 	.word	0x000066d5
    66bc:	00006701 	.word	0x00006701
    66c0:	00006715 	.word	0x00006715
				LOG_ERR("not attached, EP 0x%02x event dropped",
    66c4:	f06f 011b 	mvn.w	r1, #27
    66c8:	e7b6      	b.n	6638 <usbd_work_handler+0x5c>
			break;
		case USBD_EVT_POWER:
			usbd_work_process_pwr_events(&ev->evt.pwr_evt);
    66ca:	f104 0008 	add.w	r0, r4, #8
    66ce:	f7ff ff21 	bl	6514 <usbd_work_process_pwr_events>
			break;
    66d2:	e7d5      	b.n	6680 <usbd_work_handler+0xa4>
		case USBD_EVT_RESET:
			LOG_DBG("USBD reset event");
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    66d4:	f106 0a10 	add.w	sl, r6, #16
	return z_impl_k_mutex_lock(mutex, timeout);
    66d8:	f04f 32ff 	mov.w	r2, #4294967295
    66dc:	f04f 33ff 	mov.w	r3, #4294967295
    66e0:	4650      	mov	r0, sl
    66e2:	f004 fa41 	bl	ab68 <z_impl_k_mutex_lock>
			eps_ctx_init();
    66e6:	f7ff fba1 	bl	5e2c <eps_ctx_init>
	return z_impl_k_mutex_unlock(mutex);
    66ea:	4650      	mov	r0, sl
    66ec:	f004 fac0 	bl	ac70 <z_impl_k_mutex_unlock>
			k_mutex_unlock(&ctx->drv_lock);

			if (ctx->status_cb) {
    66f0:	f856 3c28 	ldr.w	r3, [r6, #-40]
    66f4:	2b00      	cmp	r3, #0
    66f6:	d0c3      	beq.n	6680 <usbd_work_handler+0xa4>
				ctx->status_cb(USB_DC_RESET, NULL);
    66f8:	2100      	movs	r1, #0
    66fa:	2001      	movs	r0, #1
    66fc:	4798      	blx	r3
    66fe:	e7bf      	b.n	6680 <usbd_work_handler+0xa4>
			}
			break;
		case USBD_EVT_SOF:
			usbd_sof_trigger_iso_read();
    6700:	f7ff fcca 	bl	6098 <usbd_sof_trigger_iso_read>

			if (ctx->status_cb) {
    6704:	f856 3c28 	ldr.w	r3, [r6, #-40]
    6708:	2b00      	cmp	r3, #0
    670a:	d0b9      	beq.n	6680 <usbd_work_handler+0xa4>
				ctx->status_cb(USB_DC_SOF, NULL);
    670c:	2100      	movs	r1, #0
    670e:	200a      	movs	r0, #10
    6710:	4798      	blx	r3
    6712:	e7b5      	b.n	6680 <usbd_work_handler+0xa4>
		case USBD_EVT_REINIT: {
				/*
				 * Reinitialize the peripheral after queue
				 * overflow.
				 */
				LOG_ERR("USBD event queue full!");
    6714:	4b37      	ldr	r3, [pc, #220]	; (67f4 <usbd_work_handler+0x218>)
    6716:	61fb      	str	r3, [r7, #28]
    6718:	2302      	movs	r3, #2
    671a:	713b      	strb	r3, [r7, #4]
    671c:	2300      	movs	r3, #0
    671e:	717b      	strb	r3, [r7, #5]
    6720:	71bb      	strb	r3, [r7, #6]
    6722:	71fb      	strb	r3, [r7, #7]
    6724:	687a      	ldr	r2, [r7, #4]
    6726:	61ba      	str	r2, [r7, #24]
    6728:	f363 0500 	bfi	r5, r3, #0, #1
    672c:	f363 0541 	bfi	r5, r3, #1, #1
    6730:	f363 0582 	bfi	r5, r3, #2, #1
    6734:	f363 05c5 	bfi	r5, r3, #3, #3
    6738:	2201      	movs	r2, #1
    673a:	f362 1588 	bfi	r5, r2, #6, #3
    673e:	2208      	movs	r2, #8
    6740:	f362 2553 	bfi	r5, r2, #9, #11
    6744:	f363 551f 	bfi	r5, r3, #20, #12
    6748:	f107 0218 	add.w	r2, r7, #24
    674c:	4629      	mov	r1, r5
    674e:	4827      	ldr	r0, [pc, #156]	; (67ec <usbd_work_handler+0x210>)
    6750:	f7fb fb1a 	bl	1d88 <z_impl_z_log_msg_static_create>
				usbd_reinit();
    6754:	f7ff ff2e 	bl	65b4 <usbd_reinit>
				break;
    6758:	e792      	b.n	6680 <usbd_work_handler+0xa4>
			}
		default:
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    675a:	46ea      	mov	sl, sp
    675c:	b088      	sub	sp, #32
    675e:	4669      	mov	r1, sp
    6760:	f111 0210 	adds.w	r2, r1, #16
    6764:	d131      	bne.n	67ca <usbd_work_handler+0x1ee>
    6766:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    676a:	b152      	cbz	r2, 6782 <usbd_work_handler+0x1a6>
    676c:	4684      	mov	ip, r0
    676e:	2804      	cmp	r0, #4
    6770:	dd03      	ble.n	677a <usbd_work_handler+0x19e>
    6772:	f8df e084 	ldr.w	lr, [pc, #132]	; 67f8 <usbd_work_handler+0x21c>
    6776:	f8c1 e014 	str.w	lr, [r1, #20]
    677a:	f1bc 0f08 	cmp.w	ip, #8
    677e:	dd26      	ble.n	67ce <usbd_work_handler+0x1f2>
    6780:	618b      	str	r3, [r1, #24]
    6782:	280b      	cmp	r0, #11
    6784:	dd26      	ble.n	67d4 <usbd_work_handler+0x1f8>
    6786:	230c      	movs	r3, #12
    6788:	b13a      	cbz	r2, 679a <usbd_work_handler+0x1be>
    678a:	2003      	movs	r0, #3
    678c:	7138      	strb	r0, [r7, #4]
    678e:	2000      	movs	r0, #0
    6790:	7178      	strb	r0, [r7, #5]
    6792:	71b8      	strb	r0, [r7, #6]
    6794:	71f8      	strb	r0, [r7, #7]
    6796:	6878      	ldr	r0, [r7, #4]
    6798:	6108      	str	r0, [r1, #16]
    679a:	f36f 0900 	bfc	r9, #0, #1
    679e:	f36f 0941 	bfc	r9, #1, #1
    67a2:	f36f 0982 	bfc	r9, #2, #1
    67a6:	f36f 09c5 	bfc	r9, #3, #3
    67aa:	2101      	movs	r1, #1
    67ac:	f361 1988 	bfi	r9, r1, #6, #3
    67b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
    67b4:	f363 2953 	bfi	r9, r3, #9, #11
    67b8:	f36f 591f 	bfc	r9, #20, #12
    67bc:	2300      	movs	r3, #0
    67be:	4649      	mov	r1, r9
    67c0:	480a      	ldr	r0, [pc, #40]	; (67ec <usbd_work_handler+0x210>)
    67c2:	f7fb fae1 	bl	1d88 <z_impl_z_log_msg_static_create>
    67c6:	46d5      	mov	sp, sl
    67c8:	e75a      	b.n	6680 <usbd_work_handler+0xa4>
    67ca:	200c      	movs	r0, #12
    67cc:	e7cd      	b.n	676a <usbd_work_handler+0x18e>
    67ce:	f06f 031b 	mvn.w	r3, #27
    67d2:	e7d9      	b.n	6788 <usbd_work_handler+0x1ac>
    67d4:	f06f 031b 	mvn.w	r3, #27
    67d8:	e7d6      	b.n	6788 <usbd_work_handler+0x1ac>
			break;
		}
		usbd_evt_free(ev);
	}
}
    67da:	3720      	adds	r7, #32
    67dc:	46bd      	mov	sp, r7
    67de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    67e2:	bf00      	nop
    67e4:	20000210 	.word	0x20000210
    67e8:	00010d6c 	.word	0x00010d6c
    67ec:	0000fec4 	.word	0x0000fec4
    67f0:	20001304 	.word	0x20001304
    67f4:	00010d94 	.word	0x00010d94
    67f8:	00010dac 	.word	0x00010dac

000067fc <usbd_event_transfer_ctrl>:
{
    67fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    67fe:	b083      	sub	sp, #12
    6800:	af00      	add	r7, sp, #0
    6802:	4604      	mov	r4, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    6804:	7886      	ldrb	r6, [r0, #2]
    6806:	4630      	mov	r0, r6
    6808:	f7ff fae6 	bl	5dd8 <endpoint_ctx>
    680c:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    680e:	f016 0f80 	tst.w	r6, #128	; 0x80
    6812:	d118      	bne.n	6846 <usbd_event_transfer_ctrl+0x4a>
		switch (p_event->data.eptransfer.status) {
    6814:	78e3      	ldrb	r3, [r4, #3]
    6816:	2b00      	cmp	r3, #0
    6818:	d06f      	beq.n	68fa <usbd_event_transfer_ctrl+0xfe>
    681a:	2b01      	cmp	r3, #1
    681c:	f040 80d6 	bne.w	69cc <usbd_event_transfer_ctrl+0x1d0>
			struct usbd_event *ev = usbd_evt_alloc();
    6820:	f7ff fb50 	bl	5ec4 <usbd_evt_alloc>
			if (!ev) {
    6824:	4601      	mov	r1, r0
    6826:	2800      	cmp	r0, #0
    6828:	f000 8108 	beq.w	6a3c <usbd_event_transfer_ctrl+0x240>
			ep_ctx->read_pending = true;
    682c:	2301      	movs	r3, #1
    682e:	776b      	strb	r3, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    6830:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    6832:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    6834:	6085      	str	r5, [r0, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    6836:	4886      	ldr	r0, [pc, #536]	; (6a50 <usbd_event_transfer_ctrl+0x254>)
    6838:	f008 fdc5 	bl	f3c6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    683c:	4985      	ldr	r1, [pc, #532]	; (6a54 <usbd_event_transfer_ctrl+0x258>)
    683e:	4886      	ldr	r0, [pc, #536]	; (6a58 <usbd_event_transfer_ctrl+0x25c>)
    6840:	f008 fe74 	bl	f52c <k_work_submit_to_queue>
}
    6844:	e0fa      	b.n	6a3c <usbd_event_transfer_ctrl+0x240>
		switch (p_event->data.eptransfer.status) {
    6846:	78e3      	ldrb	r3, [r4, #3]
    6848:	2b00      	cmp	r3, #0
    684a:	d03b      	beq.n	68c4 <usbd_event_transfer_ctrl+0xc8>
    684c:	2b03      	cmp	r3, #3
    684e:	f000 80f5 	beq.w	6a3c <usbd_event_transfer_ctrl+0x240>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    6852:	466c      	mov	r4, sp
    6854:	b088      	sub	sp, #32
    6856:	4669      	mov	r1, sp
    6858:	f111 0210 	adds.w	r2, r1, #16
    685c:	d047      	beq.n	68ee <usbd_event_transfer_ctrl+0xf2>
    685e:	2010      	movs	r0, #16
    6860:	b162      	cbz	r2, 687c <usbd_event_transfer_ctrl+0x80>
    6862:	4605      	mov	r5, r0
    6864:	2804      	cmp	r0, #4
    6866:	dd03      	ble.n	6870 <usbd_event_transfer_ctrl+0x74>
    6868:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 6a5c <usbd_event_transfer_ctrl+0x260>
    686c:	f8c1 c014 	str.w	ip, [r1, #20]
    6870:	2d08      	cmp	r5, #8
    6872:	dd00      	ble.n	6876 <usbd_event_transfer_ctrl+0x7a>
    6874:	618b      	str	r3, [r1, #24]
    6876:	2d0c      	cmp	r5, #12
    6878:	dd00      	ble.n	687c <usbd_event_transfer_ctrl+0x80>
    687a:	61ce      	str	r6, [r1, #28]
    687c:	280f      	cmp	r0, #15
    687e:	dd39      	ble.n	68f4 <usbd_event_transfer_ctrl+0xf8>
    6880:	2310      	movs	r3, #16
    6882:	b13a      	cbz	r2, 6894 <usbd_event_transfer_ctrl+0x98>
    6884:	2004      	movs	r0, #4
    6886:	7138      	strb	r0, [r7, #4]
    6888:	2000      	movs	r0, #0
    688a:	7178      	strb	r0, [r7, #5]
    688c:	71b8      	strb	r0, [r7, #6]
    688e:	71f8      	strb	r0, [r7, #7]
    6890:	6878      	ldr	r0, [r7, #4]
    6892:	6108      	str	r0, [r1, #16]
    6894:	2100      	movs	r1, #0
    6896:	f36f 0100 	bfc	r1, #0, #1
    689a:	f36f 0141 	bfc	r1, #1, #1
    689e:	f36f 0182 	bfc	r1, #2, #1
    68a2:	f36f 01c5 	bfc	r1, #3, #3
    68a6:	2001      	movs	r0, #1
    68a8:	f360 1188 	bfi	r1, r0, #6, #3
    68ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
    68b0:	f363 2153 	bfi	r1, r3, #9, #11
    68b4:	f36f 511f 	bfc	r1, #20, #12
    68b8:	2300      	movs	r3, #0
    68ba:	4869      	ldr	r0, [pc, #420]	; (6a60 <usbd_event_transfer_ctrl+0x264>)
    68bc:	f7fb fa64 	bl	1d88 <z_impl_z_log_msg_static_create>
    68c0:	46a5      	mov	sp, r4
    68c2:	e0bb      	b.n	6a3c <usbd_event_transfer_ctrl+0x240>
			struct usbd_event *ev = usbd_evt_alloc();
    68c4:	f7ff fafe 	bl	5ec4 <usbd_evt_alloc>
			if (!ev) {
    68c8:	4601      	mov	r1, r0
    68ca:	2800      	cmp	r0, #0
    68cc:	f000 80b6 	beq.w	6a3c <usbd_event_transfer_ctrl+0x240>
			ep_ctx->write_in_progress = false;
    68d0:	2300      	movs	r3, #0
    68d2:	77ab      	strb	r3, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    68d4:	2301      	movs	r3, #1
    68d6:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    68d8:	2303      	movs	r3, #3
    68da:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    68dc:	6085      	str	r5, [r0, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    68de:	485c      	ldr	r0, [pc, #368]	; (6a50 <usbd_event_transfer_ctrl+0x254>)
    68e0:	f008 fd71 	bl	f3c6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    68e4:	495b      	ldr	r1, [pc, #364]	; (6a54 <usbd_event_transfer_ctrl+0x258>)
    68e6:	485c      	ldr	r0, [pc, #368]	; (6a58 <usbd_event_transfer_ctrl+0x25c>)
    68e8:	f008 fe20 	bl	f52c <k_work_submit_to_queue>
}
    68ec:	e0a6      	b.n	6a3c <usbd_event_transfer_ctrl+0x240>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    68ee:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    68f2:	e7b5      	b.n	6860 <usbd_event_transfer_ctrl+0x64>
    68f4:	f06f 031b 	mvn.w	r3, #27
    68f8:	e7c3      	b.n	6882 <usbd_event_transfer_ctrl+0x86>
			struct usbd_event *ev = usbd_evt_alloc();
    68fa:	f7ff fae3 	bl	5ec4 <usbd_evt_alloc>
			if (!ev) {
    68fe:	4606      	mov	r6, r0
    6900:	2800      	cmp	r0, #0
    6902:	f000 809b 	beq.w	6a3c <usbd_event_transfer_ctrl+0x240>
			ev->evt_type = USBD_EVT_EP;
    6906:	2301      	movs	r3, #1
    6908:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    690a:	2302      	movs	r3, #2
    690c:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    690e:	6085      	str	r5, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
    6910:	f105 010c 	add.w	r1, r5, #12
    6914:	78a0      	ldrb	r0, [r4, #2]
    6916:	f003 f815 	bl	9944 <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
    691a:	4684      	mov	ip, r0
    691c:	b3b0      	cbz	r0, 698c <usbd_event_transfer_ctrl+0x190>
				LOG_ERR("_ep_status_get failed! Code: %d",
    691e:	466c      	mov	r4, sp
    6920:	b088      	sub	sp, #32
    6922:	466b      	mov	r3, sp
    6924:	f113 0210 	adds.w	r2, r3, #16
    6928:	d043      	beq.n	69b2 <usbd_event_transfer_ctrl+0x1b6>
    692a:	210c      	movs	r1, #12
    692c:	b152      	cbz	r2, 6944 <usbd_event_transfer_ctrl+0x148>
    692e:	4608      	mov	r0, r1
    6930:	2904      	cmp	r1, #4
    6932:	dd03      	ble.n	693c <usbd_event_transfer_ctrl+0x140>
    6934:	f8df e12c 	ldr.w	lr, [pc, #300]	; 6a64 <usbd_event_transfer_ctrl+0x268>
    6938:	f8c3 e014 	str.w	lr, [r3, #20]
    693c:	2808      	cmp	r0, #8
    693e:	dd01      	ble.n	6944 <usbd_event_transfer_ctrl+0x148>
    6940:	f8c3 c018 	str.w	ip, [r3, #24]
    6944:	290b      	cmp	r1, #11
    6946:	dd37      	ble.n	69b8 <usbd_event_transfer_ctrl+0x1bc>
    6948:	f04f 0c0c 	mov.w	ip, #12
    694c:	b13a      	cbz	r2, 695e <usbd_event_transfer_ctrl+0x162>
    694e:	2103      	movs	r1, #3
    6950:	7139      	strb	r1, [r7, #4]
    6952:	2100      	movs	r1, #0
    6954:	7179      	strb	r1, [r7, #5]
    6956:	71b9      	strb	r1, [r7, #6]
    6958:	71f9      	strb	r1, [r7, #7]
    695a:	6878      	ldr	r0, [r7, #4]
    695c:	6118      	str	r0, [r3, #16]
    695e:	2100      	movs	r1, #0
    6960:	f36f 0100 	bfc	r1, #0, #1
    6964:	f36f 0141 	bfc	r1, #1, #1
    6968:	f36f 0182 	bfc	r1, #2, #1
    696c:	f36f 01c5 	bfc	r1, #3, #3
    6970:	2301      	movs	r3, #1
    6972:	f363 1188 	bfi	r1, r3, #6, #3
    6976:	f3cc 030a 	ubfx	r3, ip, #0, #11
    697a:	f363 2153 	bfi	r1, r3, #9, #11
    697e:	f36f 511f 	bfc	r1, #20, #12
    6982:	2300      	movs	r3, #0
    6984:	4836      	ldr	r0, [pc, #216]	; (6a60 <usbd_event_transfer_ctrl+0x264>)
    6986:	f7fb f9ff 	bl	1d88 <z_impl_z_log_msg_static_create>
    698a:	46a5      	mov	sp, r4
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    698c:	4b36      	ldr	r3, [pc, #216]	; (6a68 <usbd_event_transfer_ctrl+0x26c>)
    698e:	f8b3 328c 	ldrh.w	r3, [r3, #652]	; 0x28c
    6992:	68ea      	ldr	r2, [r5, #12]
    6994:	4293      	cmp	r3, r2
    6996:	d812      	bhi.n	69be <usbd_event_transfer_ctrl+0x1c2>
				ctx->ctrl_read_len = 0U;
    6998:	4b33      	ldr	r3, [pc, #204]	; (6a68 <usbd_event_transfer_ctrl+0x26c>)
    699a:	2200      	movs	r2, #0
    699c:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
	k_fifo_put(&usbd_evt_fifo, ev);
    69a0:	4631      	mov	r1, r6
    69a2:	482b      	ldr	r0, [pc, #172]	; (6a50 <usbd_event_transfer_ctrl+0x254>)
    69a4:	f008 fd0f 	bl	f3c6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    69a8:	492a      	ldr	r1, [pc, #168]	; (6a54 <usbd_event_transfer_ctrl+0x258>)
    69aa:	482b      	ldr	r0, [pc, #172]	; (6a58 <usbd_event_transfer_ctrl+0x25c>)
    69ac:	f008 fdbe 	bl	f52c <k_work_submit_to_queue>
}
    69b0:	e044      	b.n	6a3c <usbd_event_transfer_ctrl+0x240>
				LOG_ERR("_ep_status_get failed! Code: %d",
    69b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    69b6:	e7b9      	b.n	692c <usbd_event_transfer_ctrl+0x130>
    69b8:	f06f 0c1b 	mvn.w	ip, #27
    69bc:	e7c6      	b.n	694c <usbd_event_transfer_ctrl+0x150>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    69be:	1a9b      	subs	r3, r3, r2
    69c0:	4a29      	ldr	r2, [pc, #164]	; (6a68 <usbd_event_transfer_ctrl+0x26c>)
    69c2:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    69c6:	f003 f9ad 	bl	9d24 <nrfx_usbd_setup_data_clear>
    69ca:	e7e9      	b.n	69a0 <usbd_event_transfer_ctrl+0x1a4>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    69cc:	466c      	mov	r4, sp
    69ce:	b088      	sub	sp, #32
    69d0:	4669      	mov	r1, sp
    69d2:	f111 0210 	adds.w	r2, r1, #16
    69d6:	d034      	beq.n	6a42 <usbd_event_transfer_ctrl+0x246>
    69d8:	2010      	movs	r0, #16
    69da:	b162      	cbz	r2, 69f6 <usbd_event_transfer_ctrl+0x1fa>
    69dc:	4605      	mov	r5, r0
    69de:	2804      	cmp	r0, #4
    69e0:	dd03      	ble.n	69ea <usbd_event_transfer_ctrl+0x1ee>
    69e2:	f8df c078 	ldr.w	ip, [pc, #120]	; 6a5c <usbd_event_transfer_ctrl+0x260>
    69e6:	f8c1 c014 	str.w	ip, [r1, #20]
    69ea:	2d08      	cmp	r5, #8
    69ec:	dd00      	ble.n	69f0 <usbd_event_transfer_ctrl+0x1f4>
    69ee:	618b      	str	r3, [r1, #24]
    69f0:	2d0c      	cmp	r5, #12
    69f2:	dd00      	ble.n	69f6 <usbd_event_transfer_ctrl+0x1fa>
    69f4:	61ce      	str	r6, [r1, #28]
    69f6:	280f      	cmp	r0, #15
    69f8:	dd26      	ble.n	6a48 <usbd_event_transfer_ctrl+0x24c>
    69fa:	2310      	movs	r3, #16
    69fc:	b13a      	cbz	r2, 6a0e <usbd_event_transfer_ctrl+0x212>
    69fe:	2004      	movs	r0, #4
    6a00:	7138      	strb	r0, [r7, #4]
    6a02:	2000      	movs	r0, #0
    6a04:	7178      	strb	r0, [r7, #5]
    6a06:	71b8      	strb	r0, [r7, #6]
    6a08:	71f8      	strb	r0, [r7, #7]
    6a0a:	6878      	ldr	r0, [r7, #4]
    6a0c:	6108      	str	r0, [r1, #16]
    6a0e:	2100      	movs	r1, #0
    6a10:	f36f 0100 	bfc	r1, #0, #1
    6a14:	f36f 0141 	bfc	r1, #1, #1
    6a18:	f36f 0182 	bfc	r1, #2, #1
    6a1c:	f36f 01c5 	bfc	r1, #3, #3
    6a20:	2001      	movs	r0, #1
    6a22:	f360 1188 	bfi	r1, r0, #6, #3
    6a26:	f3c3 030a 	ubfx	r3, r3, #0, #11
    6a2a:	f363 2153 	bfi	r1, r3, #9, #11
    6a2e:	f36f 511f 	bfc	r1, #20, #12
    6a32:	2300      	movs	r3, #0
    6a34:	480a      	ldr	r0, [pc, #40]	; (6a60 <usbd_event_transfer_ctrl+0x264>)
    6a36:	f7fb f9a7 	bl	1d88 <z_impl_z_log_msg_static_create>
    6a3a:	46a5      	mov	sp, r4
}
    6a3c:	370c      	adds	r7, #12
    6a3e:	46bd      	mov	sp, r7
    6a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    6a42:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6a46:	e7c8      	b.n	69da <usbd_event_transfer_ctrl+0x1de>
    6a48:	f06f 031b 	mvn.w	r3, #27
    6a4c:	e7d6      	b.n	69fc <usbd_event_transfer_ctrl+0x200>
    6a4e:	bf00      	nop
    6a50:	20000264 	.word	0x20000264
    6a54:	2000132c 	.word	0x2000132c
    6a58:	20000910 	.word	0x20000910
    6a5c:	00010d18 	.word	0x00010d18
    6a60:	0000fec4 	.word	0x0000fec4
    6a64:	00010dc4 	.word	0x00010dc4
    6a68:	20001304 	.word	0x20001304

00006a6c <usbd_event_handler>:
{
    6a6c:	b510      	push	{r4, lr}
    6a6e:	b088      	sub	sp, #32
	struct usbd_event evt = {0};
    6a70:	2300      	movs	r3, #0
    6a72:	9303      	str	r3, [sp, #12]
    6a74:	9304      	str	r3, [sp, #16]
    6a76:	9305      	str	r3, [sp, #20]
    6a78:	9306      	str	r3, [sp, #24]
    6a7a:	9307      	str	r3, [sp, #28]
	switch (p_event->type) {
    6a7c:	7803      	ldrb	r3, [r0, #0]
    6a7e:	3b01      	subs	r3, #1
    6a80:	2b05      	cmp	r3, #5
    6a82:	d81c      	bhi.n	6abe <usbd_event_handler+0x52>
    6a84:	e8df f003 	tbb	[pc, r3]
    6a88:	211d0325 	.word	0x211d0325
    6a8c:	2943      	.short	0x2943
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    6a8e:	2303      	movs	r3, #3
    6a90:	f88d 3014 	strb.w	r3, [sp, #20]
		ev = usbd_evt_alloc();
    6a94:	f7ff fa16 	bl	5ec4 <usbd_evt_alloc>
		if (!ev) {
    6a98:	4603      	mov	r3, r0
    6a9a:	b180      	cbz	r0, 6abe <usbd_event_handler+0x52>
		ev->evt_type = evt.evt_type;
    6a9c:	f89d 201c 	ldrb.w	r2, [sp, #28]
    6aa0:	7402      	strb	r2, [r0, #16]
		ev->evt = evt.evt;
    6aa2:	f100 0208 	add.w	r2, r0, #8
    6aa6:	a905      	add	r1, sp, #20
    6aa8:	c903      	ldmia	r1, {r0, r1}
    6aaa:	e882 0003 	stmia.w	r2, {r0, r1}
	k_fifo_put(&usbd_evt_fifo, ev);
    6aae:	4619      	mov	r1, r3
    6ab0:	4821      	ldr	r0, [pc, #132]	; (6b38 <usbd_event_handler+0xcc>)
    6ab2:	f008 fc88 	bl	f3c6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    6ab6:	4921      	ldr	r1, [pc, #132]	; (6b3c <usbd_event_handler+0xd0>)
    6ab8:	4821      	ldr	r0, [pc, #132]	; (6b40 <usbd_event_handler+0xd4>)
    6aba:	f008 fd37 	bl	f52c <k_work_submit_to_queue>
}
    6abe:	b008      	add	sp, #32
    6ac0:	bd10      	pop	{r4, pc}
		evt.evt.pwr_evt.state = USBD_RESUMED;
    6ac2:	2304      	movs	r3, #4
    6ac4:	f88d 3014 	strb.w	r3, [sp, #20]
	if (put_evt) {
    6ac8:	e7e4      	b.n	6a94 <usbd_event_handler+0x28>
		evt.evt.pwr_evt.state = USBD_RESUMED;
    6aca:	2304      	movs	r3, #4
    6acc:	f88d 3014 	strb.w	r3, [sp, #20]
	if (put_evt) {
    6ad0:	e7e0      	b.n	6a94 <usbd_event_handler+0x28>
		evt.evt_type = USBD_EVT_RESET;
    6ad2:	2302      	movs	r3, #2
    6ad4:	f88d 301c 	strb.w	r3, [sp, #28]
	if (put_evt) {
    6ad8:	e7dc      	b.n	6a94 <usbd_event_handler+0x28>
    6ada:	4604      	mov	r4, r0
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    6adc:	7880      	ldrb	r0, [r0, #2]
    6ade:	f7ff f97b 	bl	5dd8 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    6ae2:	7a83      	ldrb	r3, [r0, #10]
    6ae4:	2b01      	cmp	r3, #1
    6ae6:	d00e      	beq.n	6b06 <usbd_event_handler+0x9a>
    6ae8:	d805      	bhi.n	6af6 <usbd_event_handler+0x8a>
    6aea:	2b00      	cmp	r3, #0
    6aec:	d1e7      	bne.n	6abe <usbd_event_handler+0x52>
			usbd_event_transfer_ctrl(p_event);
    6aee:	4620      	mov	r0, r4
    6af0:	f7ff fe84 	bl	67fc <usbd_event_transfer_ctrl>
	if (put_evt) {
    6af4:	e7e3      	b.n	6abe <usbd_event_handler+0x52>
    6af6:	3b02      	subs	r3, #2
    6af8:	b2db      	uxtb	r3, r3
    6afa:	2b01      	cmp	r3, #1
    6afc:	d8df      	bhi.n	6abe <usbd_event_handler+0x52>
			usbd_event_transfer_data(p_event);
    6afe:	4620      	mov	r0, r4
    6b00:	f7ff fb3c 	bl	617c <usbd_event_transfer_data>
	if (put_evt) {
    6b04:	e7db      	b.n	6abe <usbd_event_handler+0x52>
			usbd_event_transfer_data(p_event);
    6b06:	4620      	mov	r0, r4
    6b08:	f7ff fb38 	bl	617c <usbd_event_transfer_data>
	if (put_evt) {
    6b0c:	e7d7      	b.n	6abe <usbd_event_handler+0x52>
		nrfx_usbd_setup_get(&drv_setup);
    6b0e:	a801      	add	r0, sp, #4
    6b10:	f003 f8dc 	bl	9ccc <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    6b14:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6b18:	2b05      	cmp	r3, #5
    6b1a:	d007      	beq.n	6b2c <usbd_event_handler+0xc0>
				endpoint_ctx(NRF_USBD_EPOUT(0));
    6b1c:	2000      	movs	r0, #0
    6b1e:	f7ff f95b 	bl	5dd8 <endpoint_ctx>
			evt.evt_type = USBD_EVT_EP;
    6b22:	2301      	movs	r3, #1
    6b24:	f88d 301c 	strb.w	r3, [sp, #28]
			evt.evt.ep_evt.ep = ep_ctx;
    6b28:	9005      	str	r0, [sp, #20]
	if (put_evt) {
    6b2a:	e7b3      	b.n	6a94 <usbd_event_handler+0x28>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    6b2c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6b30:	f013 0f60 	tst.w	r3, #96	; 0x60
    6b34:	d0c3      	beq.n	6abe <usbd_event_handler+0x52>
    6b36:	e7f1      	b.n	6b1c <usbd_event_handler+0xb0>
    6b38:	20000264 	.word	0x20000264
    6b3c:	2000132c 	.word	0x2000132c
    6b40:	20000910 	.word	0x20000910

00006b44 <usb_init>:
	}
	return 0;
}

static int usb_init(void)
{
    6b44:	b530      	push	{r4, r5, lr}
    6b46:	b083      	sub	sp, #12

	static const nrfx_power_usbevt_config_t usbevt_config = {
		.handler = usb_dc_power_event_handler
	};

	err = nrfx_usbd_init(usbd_event_handler);
    6b48:	4812      	ldr	r0, [pc, #72]	; (6b94 <usb_init+0x50>)
    6b4a:	f002 fe0f 	bl	976c <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    6b4e:	4b12      	ldr	r3, [pc, #72]	; (6b98 <usb_init+0x54>)
    6b50:	4298      	cmp	r0, r3
    6b52:	d11b      	bne.n	6b8c <usb_init+0x48>
	}

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    6b54:	4811      	ldr	r0, [pc, #68]	; (6b9c <usb_init+0x58>)
    6b56:	f002 f9a9 	bl	8eac <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);
    6b5a:	4811      	ldr	r0, [pc, #68]	; (6ba0 <usb_init+0x5c>)
    6b5c:	f002 f9ce 	bl	8efc <nrfx_power_usbevt_init>

	k_work_queue_start(&usbd_work_queue,
    6b60:	4d10      	ldr	r5, [pc, #64]	; (6ba4 <usb_init+0x60>)
    6b62:	2400      	movs	r4, #0
    6b64:	9400      	str	r4, [sp, #0]
    6b66:	f04f 33ff 	mov.w	r3, #4294967295
    6b6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6b6e:	490e      	ldr	r1, [pc, #56]	; (6ba8 <usb_init+0x64>)
    6b70:	4628      	mov	r0, r5
    6b72:	f004 fa45 	bl	b000 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    6b76:	490d      	ldr	r1, [pc, #52]	; (6bac <usb_init+0x68>)
    6b78:	4628      	mov	r0, r5
    6b7a:	f003 ff09 	bl	a990 <z_impl_k_thread_name_set>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_thread_name_set(&usbd_work_queue.thread, "usbd_workq");
	k_work_init(&ctx->usb_work, usbd_work_handler);
    6b7e:	490c      	ldr	r1, [pc, #48]	; (6bb0 <usb_init+0x6c>)
    6b80:	480c      	ldr	r0, [pc, #48]	; (6bb4 <usb_init+0x70>)
    6b82:	f008 fcb7 	bl	f4f4 <k_work_init>

	return 0;
    6b86:	4620      	mov	r0, r4
}
    6b88:	b003      	add	sp, #12
    6b8a:	bd30      	pop	{r4, r5, pc}
		return -EIO;
    6b8c:	f06f 0004 	mvn.w	r0, #4
    6b90:	e7fa      	b.n	6b88 <usb_init+0x44>
    6b92:	bf00      	nop
    6b94:	00006a6d 	.word	0x00006a6d
    6b98:	0bad0000 	.word	0x0bad0000
    6b9c:	00010ebc 	.word	0x00010ebc
    6ba0:	00010eb8 	.word	0x00010eb8
    6ba4:	20000910 	.word	0x20000910
    6ba8:	20002b40 	.word	0x20002b40
    6bac:	00010de4 	.word	0x00010de4
    6bb0:	000065dd 	.word	0x000065dd
    6bb4:	2000132c 	.word	0x2000132c

00006bb8 <usb_dc_attach>:
{
    6bb8:	b510      	push	{r4, lr}
	if (ctx->attached) {
    6bba:	4b18      	ldr	r3, [pc, #96]	; (6c1c <usb_dc_attach+0x64>)
    6bbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    6bc0:	b113      	cbz	r3, 6bc8 <usb_dc_attach+0x10>
		return 0;
    6bc2:	2400      	movs	r4, #0
}
    6bc4:	4620      	mov	r0, r4
    6bc6:	bd10      	pop	{r4, pc}
	return z_impl_k_mutex_init(mutex);
    6bc8:	4c15      	ldr	r4, [pc, #84]	; (6c20 <usb_dc_attach+0x68>)
    6bca:	4620      	mov	r0, r4
    6bcc:	f008 fb66 	bl	f29c <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    6bd0:	2000      	movs	r0, #0
    6bd2:	f000 fda7 	bl	7724 <z_nrf_clock_control_get_onoff>
	ctx->hfxo_mgr =
    6bd6:	f844 0c1c 	str.w	r0, [r4, #-28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6bda:	2200      	movs	r2, #0
    6bdc:	2101      	movs	r1, #1
    6bde:	2027      	movs	r0, #39	; 0x27
    6be0:	f007 f844 	bl	dc6c <z_arm_irq_priority_set>
	nrfx_power_usbevt_enable();
    6be4:	f008 f937 	bl	ee56 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
    6be8:	f7ff f920 	bl	5e2c <eps_ctx_init>
	if (ret == 0) {
    6bec:	4604      	mov	r4, r0
    6bee:	b918      	cbnz	r0, 6bf8 <usb_dc_attach+0x40>
		ctx->attached = true;
    6bf0:	4b0a      	ldr	r3, [pc, #40]	; (6c1c <usb_dc_attach+0x64>)
    6bf2:	2201      	movs	r2, #1
    6bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    6bf8:	4b0a      	ldr	r3, [pc, #40]	; (6c24 <usb_dc_attach+0x6c>)
    6bfa:	681b      	ldr	r3, [r3, #0]
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    6bfc:	b11b      	cbz	r3, 6c06 <usb_dc_attach+0x4e>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    6bfe:	490a      	ldr	r1, [pc, #40]	; (6c28 <usb_dc_attach+0x70>)
    6c00:	480a      	ldr	r0, [pc, #40]	; (6c2c <usb_dc_attach+0x74>)
    6c02:	f008 fc93 	bl	f52c <k_work_submit_to_queue>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    6c06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6c0a:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
    6c0e:	f013 0f01 	tst.w	r3, #1
    6c12:	d0d7      	beq.n	6bc4 <usb_dc_attach+0xc>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    6c14:	2000      	movs	r0, #0
    6c16:	f7ff f9ed 	bl	5ff4 <usb_dc_power_event_handler>
    6c1a:	e7d3      	b.n	6bc4 <usb_dc_attach+0xc>
    6c1c:	20001304 	.word	0x20001304
    6c20:	2000133c 	.word	0x2000133c
    6c24:	20000264 	.word	0x20000264
    6c28:	2000132c 	.word	0x2000132c
    6c2c:	20000910 	.word	0x20000910

00006c30 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    6c30:	4b07      	ldr	r3, [pc, #28]	; (6c50 <usb_dc_set_address+0x20>)
    6c32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    6c36:	b12b      	cbz	r3, 6c44 <usb_dc_set_address+0x14>
	return get_usbd_ctx()->ready;
    6c38:	4b05      	ldr	r3, [pc, #20]	; (6c50 <usb_dc_set_address+0x20>)
    6c3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    6c3e:	b123      	cbz	r3, 6c4a <usb_dc_set_address+0x1a>
	return 0;
    6c40:	2000      	movs	r0, #0
    6c42:	4770      	bx	lr
		return -ENODEV;
    6c44:	f06f 0012 	mvn.w	r0, #18
    6c48:	4770      	bx	lr
    6c4a:	f06f 0012 	mvn.w	r0, #18
}
    6c4e:	4770      	bx	lr
    6c50:	20001304 	.word	0x20001304

00006c54 <usb_dc_ep_check_cap>:
{
    6c54:	b500      	push	{lr}
    6c56:	b08f      	sub	sp, #60	; 0x3c
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    6c58:	7801      	ldrb	r1, [r0, #0]
    6c5a:	f001 020f 	and.w	r2, r1, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    6c5e:	7903      	ldrb	r3, [r0, #4]
    6c60:	b903      	cbnz	r3, 6c64 <usb_dc_ep_check_cap+0x10>
    6c62:	b93a      	cbnz	r2, 6c74 <usb_dc_ep_check_cap+0x20>
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    6c64:	2a08      	cmp	r2, #8
    6c66:	d82b      	bhi.n	6cc0 <usb_dc_ep_check_cap+0x6c>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    6c68:	2b01      	cmp	r3, #1
    6c6a:	d04f      	beq.n	6d0c <usb_dc_ep_check_cap+0xb8>
	return 0;
    6c6c:	2000      	movs	r0, #0
}
    6c6e:	b00f      	add	sp, #60	; 0x3c
    6c70:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_ERR("invalid endpoint configuration");
    6c74:	4b29      	ldr	r3, [pc, #164]	; (6d1c <usb_dc_ep_check_cap+0xc8>)
    6c76:	9307      	str	r3, [sp, #28]
    6c78:	2302      	movs	r3, #2
    6c7a:	f88d 3004 	strb.w	r3, [sp, #4]
    6c7e:	2300      	movs	r3, #0
    6c80:	f88d 3005 	strb.w	r3, [sp, #5]
    6c84:	f88d 3006 	strb.w	r3, [sp, #6]
    6c88:	f88d 3007 	strb.w	r3, [sp, #7]
    6c8c:	9a01      	ldr	r2, [sp, #4]
    6c8e:	9206      	str	r2, [sp, #24]
    6c90:	4619      	mov	r1, r3
    6c92:	f363 0100 	bfi	r1, r3, #0, #1
    6c96:	f363 0141 	bfi	r1, r3, #1, #1
    6c9a:	f363 0182 	bfi	r1, r3, #2, #1
    6c9e:	f363 01c5 	bfi	r1, r3, #3, #3
    6ca2:	2201      	movs	r2, #1
    6ca4:	f362 1188 	bfi	r1, r2, #6, #3
    6ca8:	2208      	movs	r2, #8
    6caa:	f362 2153 	bfi	r1, r2, #9, #11
    6cae:	f363 511f 	bfi	r1, r3, #20, #12
    6cb2:	aa06      	add	r2, sp, #24
    6cb4:	481a      	ldr	r0, [pc, #104]	; (6d20 <usb_dc_ep_check_cap+0xcc>)
    6cb6:	f7fb f867 	bl	1d88 <z_impl_z_log_msg_static_create>
		return -1;
    6cba:	f04f 30ff 	mov.w	r0, #4294967295
    6cbe:	e7d6      	b.n	6c6e <usb_dc_ep_check_cap+0x1a>
		LOG_ERR("invalid endpoint index/address");
    6cc0:	4b18      	ldr	r3, [pc, #96]	; (6d24 <usb_dc_ep_check_cap+0xd0>)
    6cc2:	930d      	str	r3, [sp, #52]	; 0x34
    6cc4:	2302      	movs	r3, #2
    6cc6:	f88d 3004 	strb.w	r3, [sp, #4]
    6cca:	2300      	movs	r3, #0
    6ccc:	f88d 3005 	strb.w	r3, [sp, #5]
    6cd0:	f88d 3006 	strb.w	r3, [sp, #6]
    6cd4:	f88d 3007 	strb.w	r3, [sp, #7]
    6cd8:	9a01      	ldr	r2, [sp, #4]
    6cda:	920c      	str	r2, [sp, #48]	; 0x30
    6cdc:	4619      	mov	r1, r3
    6cde:	f363 0100 	bfi	r1, r3, #0, #1
    6ce2:	f363 0141 	bfi	r1, r3, #1, #1
    6ce6:	f363 0182 	bfi	r1, r3, #2, #1
    6cea:	f363 01c5 	bfi	r1, r3, #3, #3
    6cee:	2201      	movs	r2, #1
    6cf0:	f362 1188 	bfi	r1, r2, #6, #3
    6cf4:	2208      	movs	r2, #8
    6cf6:	f362 2153 	bfi	r1, r2, #9, #11
    6cfa:	f363 511f 	bfi	r1, r3, #20, #12
    6cfe:	aa0c      	add	r2, sp, #48	; 0x30
    6d00:	4807      	ldr	r0, [pc, #28]	; (6d20 <usb_dc_ep_check_cap+0xcc>)
    6d02:	f7fb f841 	bl	1d88 <z_impl_z_log_msg_static_create>
		return -1;
    6d06:	f04f 30ff 	mov.w	r0, #4294967295
    6d0a:	e7b0      	b.n	6c6e <usb_dc_ep_check_cap+0x1a>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    6d0c:	f011 0f08 	tst.w	r1, #8
    6d10:	d001      	beq.n	6d16 <usb_dc_ep_check_cap+0xc2>
	return 0;
    6d12:	2000      	movs	r0, #0
    6d14:	e7ab      	b.n	6c6e <usb_dc_ep_check_cap+0x1a>
		return -1;
    6d16:	f04f 30ff 	mov.w	r0, #4294967295
    6d1a:	e7a8      	b.n	6c6e <usb_dc_ep_check_cap+0x1a>
    6d1c:	00010df0 	.word	0x00010df0
    6d20:	0000fec4 	.word	0x0000fec4
    6d24:	00010e10 	.word	0x00010e10

00006d28 <usb_dc_ep_configure>:
	return get_usbd_ctx()->attached;
    6d28:	4b26      	ldr	r3, [pc, #152]	; (6dc4 <usb_dc_ep_configure+0x9c>)
    6d2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    6d2e:	2b00      	cmp	r3, #0
    6d30:	d041      	beq.n	6db6 <usb_dc_ep_configure+0x8e>
{
    6d32:	b530      	push	{r4, r5, lr}
    6d34:	b089      	sub	sp, #36	; 0x24
    6d36:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    6d38:	7805      	ldrb	r5, [r0, #0]
    6d3a:	4628      	mov	r0, r5
    6d3c:	f7ff f84c 	bl	5dd8 <endpoint_ctx>
	if (!ep_ctx) {
    6d40:	2800      	cmp	r0, #0
    6d42:	d03b      	beq.n	6dbc <usb_dc_ep_configure+0x94>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    6d44:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    6d46:	7922      	ldrb	r2, [r4, #4]
    6d48:	7282      	strb	r2, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    6d4a:	8862      	ldrh	r2, [r4, #2]
    6d4c:	6042      	str	r2, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    6d4e:	7820      	ldrb	r0, [r4, #0]
    6d50:	f010 0f08 	tst.w	r0, #8
    6d54:	d103      	bne.n	6d5e <usb_dc_ep_configure+0x36>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    6d56:	8863      	ldrh	r3, [r4, #2]
    6d58:	1e5a      	subs	r2, r3, #1
    6d5a:	4213      	tst	r3, r2
    6d5c:	d105      	bne.n	6d6a <usb_dc_ep_configure+0x42>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    6d5e:	8861      	ldrh	r1, [r4, #2]
    6d60:	f002 fcf4 	bl	974c <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    6d64:	2000      	movs	r0, #0
}
    6d66:	b009      	add	sp, #36	; 0x24
    6d68:	bd30      	pop	{r4, r5, pc}
			LOG_ERR("EP max packet size must be a power of 2");
    6d6a:	4b17      	ldr	r3, [pc, #92]	; (6dc8 <usb_dc_ep_configure+0xa0>)
    6d6c:	9307      	str	r3, [sp, #28]
    6d6e:	2302      	movs	r3, #2
    6d70:	f88d 3004 	strb.w	r3, [sp, #4]
    6d74:	2300      	movs	r3, #0
    6d76:	f88d 3005 	strb.w	r3, [sp, #5]
    6d7a:	f88d 3006 	strb.w	r3, [sp, #6]
    6d7e:	f88d 3007 	strb.w	r3, [sp, #7]
    6d82:	9a01      	ldr	r2, [sp, #4]
    6d84:	9206      	str	r2, [sp, #24]
    6d86:	4619      	mov	r1, r3
    6d88:	f363 0100 	bfi	r1, r3, #0, #1
    6d8c:	f363 0141 	bfi	r1, r3, #1, #1
    6d90:	f363 0182 	bfi	r1, r3, #2, #1
    6d94:	f363 01c5 	bfi	r1, r3, #3, #3
    6d98:	2201      	movs	r2, #1
    6d9a:	f362 1188 	bfi	r1, r2, #6, #3
    6d9e:	2208      	movs	r2, #8
    6da0:	f362 2153 	bfi	r1, r2, #9, #11
    6da4:	f363 511f 	bfi	r1, r3, #20, #12
    6da8:	aa06      	add	r2, sp, #24
    6daa:	4808      	ldr	r0, [pc, #32]	; (6dcc <usb_dc_ep_configure+0xa4>)
    6dac:	f7fa ffec 	bl	1d88 <z_impl_z_log_msg_static_create>
			return -EINVAL;
    6db0:	f06f 0015 	mvn.w	r0, #21
    6db4:	e7d7      	b.n	6d66 <usb_dc_ep_configure+0x3e>
		return -ENODEV;
    6db6:	f06f 0012 	mvn.w	r0, #18
}
    6dba:	4770      	bx	lr
		return -EINVAL;
    6dbc:	f06f 0015 	mvn.w	r0, #21
    6dc0:	e7d1      	b.n	6d66 <usb_dc_ep_configure+0x3e>
    6dc2:	bf00      	nop
    6dc4:	20001304 	.word	0x20001304
    6dc8:	00010e30 	.word	0x00010e30
    6dcc:	0000fec4 	.word	0x0000fec4

00006dd0 <usb_dc_ep_set_stall>:
	return get_usbd_ctx()->attached;
    6dd0:	4b2a      	ldr	r3, [pc, #168]	; (6e7c <usb_dc_ep_set_stall+0xac>)
    6dd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    6dd6:	2b00      	cmp	r3, #0
    6dd8:	d047      	beq.n	6e6a <usb_dc_ep_set_stall+0x9a>
{
    6dda:	b530      	push	{r4, r5, lr}
    6ddc:	b089      	sub	sp, #36	; 0x24
    6dde:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
    6de0:	4b26      	ldr	r3, [pc, #152]	; (6e7c <usb_dc_ep_set_stall+0xac>)
    6de2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    6de6:	2b00      	cmp	r3, #0
    6de8:	d042      	beq.n	6e70 <usb_dc_ep_set_stall+0xa0>
	ep_ctx = endpoint_ctx(ep);
    6dea:	f7fe fff5 	bl	5dd8 <endpoint_ctx>
	if (!ep_ctx) {
    6dee:	4605      	mov	r5, r0
    6df0:	2800      	cmp	r0, #0
    6df2:	d040      	beq.n	6e76 <usb_dc_ep_set_stall+0xa6>
	switch (ep_ctx->cfg.type) {
    6df4:	7a83      	ldrb	r3, [r0, #10]
    6df6:	2b01      	cmp	r3, #1
    6df8:	d011      	beq.n	6e1e <usb_dc_ep_set_stall+0x4e>
    6dfa:	d808      	bhi.n	6e0e <usb_dc_ep_set_stall+0x3e>
    6dfc:	b90b      	cbnz	r3, 6e02 <usb_dc_ep_set_stall+0x32>
		nrfx_usbd_setup_stall();
    6dfe:	f002 ffeb 	bl	9dd8 <nrfx_usbd_setup_stall>
	ep_ctx->buf.len = 0U;
    6e02:	2000      	movs	r0, #0
    6e04:	60e8      	str	r0, [r5, #12]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    6e06:	696b      	ldr	r3, [r5, #20]
    6e08:	61ab      	str	r3, [r5, #24]
}
    6e0a:	b009      	add	sp, #36	; 0x24
    6e0c:	bd30      	pop	{r4, r5, pc}
	switch (ep_ctx->cfg.type) {
    6e0e:	3b02      	subs	r3, #2
    6e10:	b2db      	uxtb	r3, r3
    6e12:	2b01      	cmp	r3, #1
    6e14:	d8f5      	bhi.n	6e02 <usb_dc_ep_set_stall+0x32>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    6e16:	4620      	mov	r0, r4
    6e18:	f002 ff24 	bl	9c64 <nrfx_usbd_ep_stall>
		break;
    6e1c:	e7f1      	b.n	6e02 <usb_dc_ep_set_stall+0x32>
		LOG_ERR("STALL unsupported on ISO endpoint");
    6e1e:	4b18      	ldr	r3, [pc, #96]	; (6e80 <usb_dc_ep_set_stall+0xb0>)
    6e20:	9307      	str	r3, [sp, #28]
    6e22:	2302      	movs	r3, #2
    6e24:	f88d 3004 	strb.w	r3, [sp, #4]
    6e28:	2300      	movs	r3, #0
    6e2a:	f88d 3005 	strb.w	r3, [sp, #5]
    6e2e:	f88d 3006 	strb.w	r3, [sp, #6]
    6e32:	f88d 3007 	strb.w	r3, [sp, #7]
    6e36:	9a01      	ldr	r2, [sp, #4]
    6e38:	9206      	str	r2, [sp, #24]
    6e3a:	4619      	mov	r1, r3
    6e3c:	f363 0100 	bfi	r1, r3, #0, #1
    6e40:	f363 0141 	bfi	r1, r3, #1, #1
    6e44:	f363 0182 	bfi	r1, r3, #2, #1
    6e48:	f363 01c5 	bfi	r1, r3, #3, #3
    6e4c:	2201      	movs	r2, #1
    6e4e:	f362 1188 	bfi	r1, r2, #6, #3
    6e52:	2208      	movs	r2, #8
    6e54:	f362 2153 	bfi	r1, r2, #9, #11
    6e58:	f363 511f 	bfi	r1, r3, #20, #12
    6e5c:	aa06      	add	r2, sp, #24
    6e5e:	4809      	ldr	r0, [pc, #36]	; (6e84 <usb_dc_ep_set_stall+0xb4>)
    6e60:	f7fa ff92 	bl	1d88 <z_impl_z_log_msg_static_create>
		return -EINVAL;
    6e64:	f06f 0015 	mvn.w	r0, #21
    6e68:	e7cf      	b.n	6e0a <usb_dc_ep_set_stall+0x3a>
		return -ENODEV;
    6e6a:	f06f 0012 	mvn.w	r0, #18
}
    6e6e:	4770      	bx	lr
		return -ENODEV;
    6e70:	f06f 0012 	mvn.w	r0, #18
    6e74:	e7c9      	b.n	6e0a <usb_dc_ep_set_stall+0x3a>
		return -EINVAL;
    6e76:	f06f 0015 	mvn.w	r0, #21
    6e7a:	e7c6      	b.n	6e0a <usb_dc_ep_set_stall+0x3a>
    6e7c:	20001304 	.word	0x20001304
    6e80:	00010e58 	.word	0x00010e58
    6e84:	0000fec4 	.word	0x0000fec4

00006e88 <usb_dc_ep_clear_stall>:
	return get_usbd_ctx()->attached;
    6e88:	4b11      	ldr	r3, [pc, #68]	; (6ed0 <usb_dc_ep_clear_stall+0x48>)
    6e8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    6e8e:	b19b      	cbz	r3, 6eb8 <usb_dc_ep_clear_stall+0x30>
{
    6e90:	b510      	push	{r4, lr}
    6e92:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
    6e94:	4b0e      	ldr	r3, [pc, #56]	; (6ed0 <usb_dc_ep_clear_stall+0x48>)
    6e96:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    6e9a:	b183      	cbz	r3, 6ebe <usb_dc_ep_clear_stall+0x36>
	ep_ctx = endpoint_ctx(ep);
    6e9c:	f7fe ff9c 	bl	5dd8 <endpoint_ctx>
	if (!ep_ctx) {
    6ea0:	b180      	cbz	r0, 6ec4 <usb_dc_ep_clear_stall+0x3c>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    6ea2:	f014 0f08 	tst.w	r4, #8
    6ea6:	d110      	bne.n	6eca <usb_dc_ep_clear_stall+0x42>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    6ea8:	4620      	mov	r0, r4
    6eaa:	f002 ff03 	bl	9cb4 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    6eae:	4620      	mov	r0, r4
    6eb0:	f003 f9ca 	bl	a248 <nrfx_usbd_ep_stall_clear>
	return 0;
    6eb4:	2000      	movs	r0, #0
}
    6eb6:	bd10      	pop	{r4, pc}
		return -ENODEV;
    6eb8:	f06f 0012 	mvn.w	r0, #18
}
    6ebc:	4770      	bx	lr
		return -ENODEV;
    6ebe:	f06f 0012 	mvn.w	r0, #18
    6ec2:	e7f8      	b.n	6eb6 <usb_dc_ep_clear_stall+0x2e>
		return -EINVAL;
    6ec4:	f06f 0015 	mvn.w	r0, #21
    6ec8:	e7f5      	b.n	6eb6 <usb_dc_ep_clear_stall+0x2e>
		return -EINVAL;
    6eca:	f06f 0015 	mvn.w	r0, #21
    6ece:	e7f2      	b.n	6eb6 <usb_dc_ep_clear_stall+0x2e>
    6ed0:	20001304 	.word	0x20001304

00006ed4 <usb_dc_ep_is_stalled>:
{
    6ed4:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    6ed6:	4b10      	ldr	r3, [pc, #64]	; (6f18 <usb_dc_ep_is_stalled+0x44>)
    6ed8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    6edc:	b17b      	cbz	r3, 6efe <usb_dc_ep_is_stalled+0x2a>
    6ede:	4604      	mov	r4, r0
    6ee0:	460d      	mov	r5, r1
	return get_usbd_ctx()->ready;
    6ee2:	4b0d      	ldr	r3, [pc, #52]	; (6f18 <usb_dc_ep_is_stalled+0x44>)
    6ee4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    6ee8:	b163      	cbz	r3, 6f04 <usb_dc_ep_is_stalled+0x30>
	ep_ctx = endpoint_ctx(ep);
    6eea:	f7fe ff75 	bl	5dd8 <endpoint_ctx>
	if (!ep_ctx) {
    6eee:	b160      	cbz	r0, 6f0a <usb_dc_ep_is_stalled+0x36>
	if (!stalled) {
    6ef0:	b175      	cbz	r5, 6f10 <usb_dc_ep_is_stalled+0x3c>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    6ef2:	4620      	mov	r0, r4
    6ef4:	f002 febe 	bl	9c74 <nrfx_usbd_ep_stall_check>
    6ef8:	7028      	strb	r0, [r5, #0]
	return 0;
    6efa:	2000      	movs	r0, #0
}
    6efc:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    6efe:	f06f 0012 	mvn.w	r0, #18
    6f02:	e7fb      	b.n	6efc <usb_dc_ep_is_stalled+0x28>
    6f04:	f06f 0012 	mvn.w	r0, #18
    6f08:	e7f8      	b.n	6efc <usb_dc_ep_is_stalled+0x28>
		return -EINVAL;
    6f0a:	f06f 0015 	mvn.w	r0, #21
    6f0e:	e7f5      	b.n	6efc <usb_dc_ep_is_stalled+0x28>
		return -EINVAL;
    6f10:	f06f 0015 	mvn.w	r0, #21
    6f14:	e7f2      	b.n	6efc <usb_dc_ep_is_stalled+0x28>
    6f16:	bf00      	nop
    6f18:	20001304 	.word	0x20001304

00006f1c <usb_dc_ep_enable>:
{
    6f1c:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    6f1e:	4b15      	ldr	r3, [pc, #84]	; (6f74 <usb_dc_ep_enable+0x58>)
    6f20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    6f24:	b1eb      	cbz	r3, 6f62 <usb_dc_ep_enable+0x46>
    6f26:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
    6f28:	f7fe ff56 	bl	5dd8 <endpoint_ctx>
	if (!ep_ctx) {
    6f2c:	4605      	mov	r5, r0
    6f2e:	b1d8      	cbz	r0, 6f68 <usb_dc_ep_enable+0x4c>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    6f30:	f014 0f08 	tst.w	r4, #8
    6f34:	d009      	beq.n	6f4a <usb_dc_ep_enable+0x2e>
	if (ep_ctx->cfg.en) {
    6f36:	7a2b      	ldrb	r3, [r5, #8]
    6f38:	b9cb      	cbnz	r3, 6f6e <usb_dc_ep_enable+0x52>
	ep_ctx->cfg.en = true;
    6f3a:	2301      	movs	r3, #1
    6f3c:	722b      	strb	r3, [r5, #8]
	return get_usbd_ctx()->ready;
    6f3e:	4b0d      	ldr	r3, [pc, #52]	; (6f74 <usb_dc_ep_enable+0x58>)
    6f40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (dev_ready()) {
    6f44:	b943      	cbnz	r3, 6f58 <usb_dc_ep_enable+0x3c>
	return 0;
    6f46:	2000      	movs	r0, #0
}
    6f48:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    6f4a:	4620      	mov	r0, r4
    6f4c:	f002 feb2 	bl	9cb4 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    6f50:	4620      	mov	r0, r4
    6f52:	f003 f979 	bl	a248 <nrfx_usbd_ep_stall_clear>
    6f56:	e7ee      	b.n	6f36 <usb_dc_ep_enable+0x1a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    6f58:	4620      	mov	r0, r4
    6f5a:	f003 f91d 	bl	a198 <nrfx_usbd_ep_enable>
	return 0;
    6f5e:	2000      	movs	r0, #0
    6f60:	e7f2      	b.n	6f48 <usb_dc_ep_enable+0x2c>
		return -ENODEV;
    6f62:	f06f 0012 	mvn.w	r0, #18
    6f66:	e7ef      	b.n	6f48 <usb_dc_ep_enable+0x2c>
		return -EINVAL;
    6f68:	f06f 0015 	mvn.w	r0, #21
    6f6c:	e7ec      	b.n	6f48 <usb_dc_ep_enable+0x2c>
		return -EALREADY;
    6f6e:	f06f 0077 	mvn.w	r0, #119	; 0x77
    6f72:	e7e9      	b.n	6f48 <usb_dc_ep_enable+0x2c>
    6f74:	20001304 	.word	0x20001304

00006f78 <usb_dc_ep_write>:
{
    6f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6f7c:	b085      	sub	sp, #20
    6f7e:	af00      	add	r7, sp, #0
    6f80:	4698      	mov	r8, r3
	return get_usbd_ctx()->attached;
    6f82:	4b7c      	ldr	r3, [pc, #496]	; (7174 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x174>)
    6f84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    6f88:	2b00      	cmp	r3, #0
    6f8a:	f000 80e6 	beq.w	715a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15a>
    6f8e:	4604      	mov	r4, r0
    6f90:	4689      	mov	r9, r1
    6f92:	4616      	mov	r6, r2
	return get_usbd_ctx()->ready;
    6f94:	4b77      	ldr	r3, [pc, #476]	; (7174 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x174>)
    6f96:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    6f9a:	2b00      	cmp	r3, #0
    6f9c:	f000 80e0 	beq.w	7160 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x160>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    6fa0:	f010 0f80 	tst.w	r0, #128	; 0x80
    6fa4:	f000 80df 	beq.w	7166 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x166>
	ep_ctx = endpoint_ctx(ep);
    6fa8:	f7fe ff16 	bl	5dd8 <endpoint_ctx>
	if (!ep_ctx) {
    6fac:	4605      	mov	r5, r0
    6fae:	2800      	cmp	r0, #0
    6fb0:	f000 80dc 	beq.w	716c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16c>
	if (!ep_ctx->cfg.en) {
    6fb4:	7a03      	ldrb	r3, [r0, #8]
    6fb6:	2b00      	cmp	r3, #0
    6fb8:	d077      	beq.n	70aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xaa>
	return z_impl_k_mutex_lock(mutex, timeout);
    6fba:	f04f 32ff 	mov.w	r2, #4294967295
    6fbe:	f04f 33ff 	mov.w	r3, #4294967295
    6fc2:	486d      	ldr	r0, [pc, #436]	; (7178 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x178>)
    6fc4:	f003 fdd0 	bl	ab68 <z_impl_k_mutex_lock>
	if (ep_ctx->write_in_progress) {
    6fc8:	7fab      	ldrb	r3, [r5, #30]
    6fca:	2b00      	cmp	r3, #0
    6fcc:	f040 80a9 	bne.w	7122 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x122>
	if (!data_len && ep_ctx->trans_zlp) {
    6fd0:	b91e      	cbnz	r6, 6fda <usb_dc_ep_write+0x62>
    6fd2:	7feb      	ldrb	r3, [r5, #31]
    6fd4:	b10b      	cbz	r3, 6fda <usb_dc_ep_write+0x62>
		ep_ctx->trans_zlp = false;
    6fd6:	2300      	movs	r3, #0
    6fd8:	77eb      	strb	r3, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    6fda:	7aab      	ldrb	r3, [r5, #10]
    6fdc:	b963      	cbnz	r3, 6ff8 <usb_dc_ep_write+0x80>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    6fde:	b15e      	cbz	r6, 6ff8 <usb_dc_ep_write+0x80>
    6fe0:	4a64      	ldr	r2, [pc, #400]	; (7174 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x174>)
    6fe2:	8952      	ldrh	r2, [r2, #10]
    6fe4:	4296      	cmp	r6, r2
    6fe6:	d207      	bcs.n	6ff8 <usb_dc_ep_write+0x80>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    6fe8:	6869      	ldr	r1, [r5, #4]
    6fea:	fbb6 f2f1 	udiv	r2, r6, r1
    6fee:	fb01 6212 	mls	r2, r1, r2, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    6ff2:	b90a      	cbnz	r2, 6ff8 <usb_dc_ep_write+0x80>
			ep_ctx->trans_zlp = true;
    6ff4:	2201      	movs	r2, #1
    6ff6:	77ea      	strb	r2, [r5, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    6ff8:	b923      	cbnz	r3, 7004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    6ffa:	f002 fef5 	bl	9de8 <nrfx_usbd_last_setup_dir_get>
    6ffe:	4284      	cmp	r4, r0
    7000:	f040 8095 	bne.w	712e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12e>
	ep_ctx->write_in_progress = true;
    7004:	2301      	movs	r3, #1
    7006:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    7008:	f8c7 9004 	str.w	r9, [r7, #4]
    700c:	60be      	str	r6, [r7, #8]
    700e:	2300      	movs	r3, #0
    7010:	60fb      	str	r3, [r7, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    7012:	1d39      	adds	r1, r7, #4
    7014:	4620      	mov	r0, r4
    7016:	f002 fc01 	bl	981c <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    701a:	4b58      	ldr	r3, [pc, #352]	; (717c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17c>)
    701c:	4298      	cmp	r0, r3
    701e:	f000 8093 	beq.w	7148 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x148>
		ep_ctx->write_in_progress = false;
    7022:	2300      	movs	r3, #0
    7024:	77ab      	strb	r3, [r5, #30]
		if (ret_bytes) {
    7026:	f1b8 0f00 	cmp.w	r8, #0
    702a:	d001      	beq.n	7030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>
			*ret_bytes = 0;
    702c:	f8c8 3000 	str.w	r3, [r8]
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
    7030:	466d      	mov	r5, sp
    7032:	b088      	sub	sp, #32
    7034:	466b      	mov	r3, sp
    7036:	f113 0210 	adds.w	r2, r3, #16
    703a:	d07f      	beq.n	713c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13c>
    703c:	210c      	movs	r1, #12
    703e:	b13a      	cbz	r2, 7050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>
    7040:	460c      	mov	r4, r1
    7042:	2904      	cmp	r1, #4
    7044:	dd01      	ble.n	704a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a>
    7046:	4e4e      	ldr	r6, [pc, #312]	; (7180 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x180>)
    7048:	615e      	str	r6, [r3, #20]
    704a:	2c08      	cmp	r4, #8
    704c:	dd00      	ble.n	7050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>
    704e:	6198      	str	r0, [r3, #24]
    7050:	290b      	cmp	r1, #11
    7052:	dd76      	ble.n	7142 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x142>
    7054:	240c      	movs	r4, #12
    7056:	b13a      	cbz	r2, 7068 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68>
    7058:	2103      	movs	r1, #3
    705a:	7039      	strb	r1, [r7, #0]
    705c:	2100      	movs	r1, #0
    705e:	7079      	strb	r1, [r7, #1]
    7060:	70b9      	strb	r1, [r7, #2]
    7062:	70f9      	strb	r1, [r7, #3]
    7064:	6838      	ldr	r0, [r7, #0]
    7066:	6118      	str	r0, [r3, #16]
    7068:	2100      	movs	r1, #0
    706a:	f36f 0100 	bfc	r1, #0, #1
    706e:	f36f 0141 	bfc	r1, #1, #1
    7072:	f36f 0182 	bfc	r1, #2, #1
    7076:	f36f 01c5 	bfc	r1, #3, #3
    707a:	2301      	movs	r3, #1
    707c:	f363 1188 	bfi	r1, r3, #6, #3
    7080:	f3c4 030a 	ubfx	r3, r4, #0, #11
    7084:	f363 2153 	bfi	r1, r3, #9, #11
    7088:	f36f 511f 	bfc	r1, #20, #12
    708c:	2300      	movs	r3, #0
    708e:	483d      	ldr	r0, [pc, #244]	; (7184 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x184>)
    7090:	f7fa fe7a 	bl	1d88 <z_impl_z_log_msg_static_create>
    7094:	46ad      	mov	sp, r5
		result = -EIO;
    7096:	f06f 0404 	mvn.w	r4, #4
	return z_impl_k_mutex_unlock(mutex);
    709a:	4837      	ldr	r0, [pc, #220]	; (7178 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x178>)
    709c:	f003 fde8 	bl	ac70 <z_impl_k_mutex_unlock>
}
    70a0:	4620      	mov	r0, r4
    70a2:	3714      	adds	r7, #20
    70a4:	46bd      	mov	sp, r7
    70a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    70aa:	466d      	mov	r5, sp
    70ac:	b088      	sub	sp, #32
    70ae:	466b      	mov	r3, sp
    70b0:	f113 0210 	adds.w	r2, r3, #16
    70b4:	d02f      	beq.n	7116 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x116>
    70b6:	210c      	movs	r1, #12
    70b8:	b13a      	cbz	r2, 70ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xca>
    70ba:	4608      	mov	r0, r1
    70bc:	2904      	cmp	r1, #4
    70be:	dd01      	ble.n	70c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    70c0:	4e31      	ldr	r6, [pc, #196]	; (7188 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x188>)
    70c2:	615e      	str	r6, [r3, #20]
    70c4:	2808      	cmp	r0, #8
    70c6:	dd00      	ble.n	70ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xca>
    70c8:	619c      	str	r4, [r3, #24]
    70ca:	290b      	cmp	r1, #11
    70cc:	dd26      	ble.n	711c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11c>
    70ce:	240c      	movs	r4, #12
    70d0:	b13a      	cbz	r2, 70e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe2>
    70d2:	2103      	movs	r1, #3
    70d4:	7039      	strb	r1, [r7, #0]
    70d6:	2100      	movs	r1, #0
    70d8:	7079      	strb	r1, [r7, #1]
    70da:	70b9      	strb	r1, [r7, #2]
    70dc:	70f9      	strb	r1, [r7, #3]
    70de:	6838      	ldr	r0, [r7, #0]
    70e0:	6118      	str	r0, [r3, #16]
    70e2:	2100      	movs	r1, #0
    70e4:	f36f 0100 	bfc	r1, #0, #1
    70e8:	f36f 0141 	bfc	r1, #1, #1
    70ec:	f36f 0182 	bfc	r1, #2, #1
    70f0:	f36f 01c5 	bfc	r1, #3, #3
    70f4:	2301      	movs	r3, #1
    70f6:	f363 1188 	bfi	r1, r3, #6, #3
    70fa:	f3c4 040a 	ubfx	r4, r4, #0, #11
    70fe:	f364 2153 	bfi	r1, r4, #9, #11
    7102:	f36f 511f 	bfc	r1, #20, #12
    7106:	2300      	movs	r3, #0
    7108:	481e      	ldr	r0, [pc, #120]	; (7184 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x184>)
    710a:	f7fa fe3d 	bl	1d88 <z_impl_z_log_msg_static_create>
    710e:	46ad      	mov	sp, r5
		return -EINVAL;
    7110:	f06f 0415 	mvn.w	r4, #21
    7114:	e7c4      	b.n	70a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    7116:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    711a:	e7cd      	b.n	70b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb8>
    711c:	f06f 041b 	mvn.w	r4, #27
    7120:	e7d6      	b.n	70d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd0>
    7122:	4815      	ldr	r0, [pc, #84]	; (7178 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x178>)
    7124:	f003 fda4 	bl	ac70 <z_impl_k_mutex_unlock>
		return -EAGAIN;
    7128:	f06f 040a 	mvn.w	r4, #10
    712c:	e7b8      	b.n	70a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>
		nrfx_usbd_setup_clear();
    712e:	f002 fe4b 	bl	9dc8 <nrfx_usbd_setup_clear>
    7132:	4811      	ldr	r0, [pc, #68]	; (7178 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x178>)
    7134:	f003 fd9c 	bl	ac70 <z_impl_k_mutex_unlock>
		return 0;
    7138:	2400      	movs	r4, #0
    713a:	e7b1      	b.n	70a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
    713c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    7140:	e77d      	b.n	703e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e>
    7142:	f06f 041b 	mvn.w	r4, #27
    7146:	e786      	b.n	7056 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x56>
		if (ret_bytes) {
    7148:	f1b8 0f00 	cmp.w	r8, #0
    714c:	d003      	beq.n	7156 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x156>
			*ret_bytes = data_len;
    714e:	f8c8 6000 	str.w	r6, [r8]
	int result = 0;
    7152:	2400      	movs	r4, #0
    7154:	e7a1      	b.n	709a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9a>
    7156:	2400      	movs	r4, #0
    7158:	e79f      	b.n	709a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9a>
		return -ENODEV;
    715a:	f06f 0412 	mvn.w	r4, #18
    715e:	e79f      	b.n	70a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>
    7160:	f06f 0412 	mvn.w	r4, #18
    7164:	e79c      	b.n	70a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>
		return -EINVAL;
    7166:	f06f 0415 	mvn.w	r4, #21
    716a:	e799      	b.n	70a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>
		return -EINVAL;
    716c:	f06f 0415 	mvn.w	r4, #21
    7170:	e796      	b.n	70a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>
    7172:	bf00      	nop
    7174:	20001304 	.word	0x20001304
    7178:	2000133c 	.word	0x2000133c
    717c:	0bad0000 	.word	0x0bad0000
    7180:	00010e9c 	.word	0x00010e9c
    7184:	0000fec4 	.word	0x0000fec4
    7188:	00010e7c 	.word	0x00010e7c

0000718c <usb_dc_ep_read_wait>:
{
    718c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7190:	b083      	sub	sp, #12
    7192:	af00      	add	r7, sp, #0
    7194:	4699      	mov	r9, r3
	return get_usbd_ctx()->attached;
    7196:	4b4e      	ldr	r3, [pc, #312]	; (72d0 <usb_dc_ep_read_wait+0x144>)
    7198:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    719c:	2b00      	cmp	r3, #0
    719e:	f000 808a 	beq.w	72b6 <usb_dc_ep_read_wait+0x12a>
    71a2:	4606      	mov	r6, r0
    71a4:	460d      	mov	r5, r1
    71a6:	4690      	mov	r8, r2
	return get_usbd_ctx()->ready;
    71a8:	4b49      	ldr	r3, [pc, #292]	; (72d0 <usb_dc_ep_read_wait+0x144>)
    71aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    71ae:	2b00      	cmp	r3, #0
    71b0:	f000 8084 	beq.w	72bc <usb_dc_ep_read_wait+0x130>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    71b4:	f010 0f80 	tst.w	r0, #128	; 0x80
    71b8:	f040 8083 	bne.w	72c2 <usb_dc_ep_read_wait+0x136>
	if (!data && max_data_len) {
    71bc:	b369      	cbz	r1, 721a <usb_dc_ep_read_wait+0x8e>
	ep_ctx = endpoint_ctx(ep);
    71be:	4630      	mov	r0, r6
    71c0:	f7fe fe0a 	bl	5dd8 <endpoint_ctx>
	if (!ep_ctx) {
    71c4:	4604      	mov	r4, r0
    71c6:	2800      	cmp	r0, #0
    71c8:	d07e      	beq.n	72c8 <usb_dc_ep_read_wait+0x13c>
	if (!ep_ctx->cfg.en) {
    71ca:	7a03      	ldrb	r3, [r0, #8]
    71cc:	b353      	cbz	r3, 7224 <usb_dc_ep_read_wait+0x98>
	return z_impl_k_mutex_lock(mutex, timeout);
    71ce:	f04f 32ff 	mov.w	r2, #4294967295
    71d2:	f04f 33ff 	mov.w	r3, #4294967295
    71d6:	483f      	ldr	r0, [pc, #252]	; (72d4 <usb_dc_ep_read_wait+0x148>)
    71d8:	f003 fcc6 	bl	ab68 <z_impl_k_mutex_lock>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    71dc:	68e3      	ldr	r3, [r4, #12]
    71de:	4646      	mov	r6, r8
    71e0:	4598      	cmp	r8, r3
    71e2:	bf28      	it	cs
    71e4:	461e      	movcs	r6, r3
	if (!data && !max_data_len) {
    71e6:	2d00      	cmp	r5, #0
    71e8:	d058      	beq.n	729c <usb_dc_ep_read_wait+0x110>
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    71ea:	4632      	mov	r2, r6
    71ec:	69a1      	ldr	r1, [r4, #24]
    71ee:	4628      	mov	r0, r5
    71f0:	f006 fde4 	bl	ddbc <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    71f4:	69a3      	ldr	r3, [r4, #24]
    71f6:	4433      	add	r3, r6
    71f8:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    71fa:	68e3      	ldr	r3, [r4, #12]
    71fc:	1b9b      	subs	r3, r3, r6
    71fe:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    7200:	f1b9 0f00 	cmp.w	r9, #0
    7204:	d001      	beq.n	720a <usb_dc_ep_read_wait+0x7e>
		*read_bytes = bytes_to_copy;
    7206:	f8c9 6000 	str.w	r6, [r9]
	return z_impl_k_mutex_unlock(mutex);
    720a:	4832      	ldr	r0, [pc, #200]	; (72d4 <usb_dc_ep_read_wait+0x148>)
    720c:	f003 fd30 	bl	ac70 <z_impl_k_mutex_unlock>
	return 0;
    7210:	2000      	movs	r0, #0
}
    7212:	370c      	adds	r7, #12
    7214:	46bd      	mov	sp, r7
    7216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!data && max_data_len) {
    721a:	2a00      	cmp	r2, #0
    721c:	d0cf      	beq.n	71be <usb_dc_ep_read_wait+0x32>
		return -EINVAL;
    721e:	f06f 0015 	mvn.w	r0, #21
    7222:	e7f6      	b.n	7212 <usb_dc_ep_read_wait+0x86>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    7224:	466d      	mov	r5, sp
    7226:	b088      	sub	sp, #32
    7228:	466b      	mov	r3, sp
    722a:	f113 0210 	adds.w	r2, r3, #16
    722e:	d02f      	beq.n	7290 <usb_dc_ep_read_wait+0x104>
    7230:	210c      	movs	r1, #12
    7232:	b13a      	cbz	r2, 7244 <usb_dc_ep_read_wait+0xb8>
    7234:	4608      	mov	r0, r1
    7236:	2904      	cmp	r1, #4
    7238:	dd01      	ble.n	723e <usb_dc_ep_read_wait+0xb2>
    723a:	4c27      	ldr	r4, [pc, #156]	; (72d8 <usb_dc_ep_read_wait+0x14c>)
    723c:	615c      	str	r4, [r3, #20]
    723e:	2808      	cmp	r0, #8
    7240:	dd00      	ble.n	7244 <usb_dc_ep_read_wait+0xb8>
    7242:	619e      	str	r6, [r3, #24]
    7244:	290b      	cmp	r1, #11
    7246:	dd26      	ble.n	7296 <usb_dc_ep_read_wait+0x10a>
    7248:	240c      	movs	r4, #12
    724a:	b13a      	cbz	r2, 725c <usb_dc_ep_read_wait+0xd0>
    724c:	2103      	movs	r1, #3
    724e:	7139      	strb	r1, [r7, #4]
    7250:	2100      	movs	r1, #0
    7252:	7179      	strb	r1, [r7, #5]
    7254:	71b9      	strb	r1, [r7, #6]
    7256:	71f9      	strb	r1, [r7, #7]
    7258:	6878      	ldr	r0, [r7, #4]
    725a:	6118      	str	r0, [r3, #16]
    725c:	2100      	movs	r1, #0
    725e:	f36f 0100 	bfc	r1, #0, #1
    7262:	f36f 0141 	bfc	r1, #1, #1
    7266:	f36f 0182 	bfc	r1, #2, #1
    726a:	f36f 01c5 	bfc	r1, #3, #3
    726e:	2301      	movs	r3, #1
    7270:	f363 1188 	bfi	r1, r3, #6, #3
    7274:	f3c4 040a 	ubfx	r4, r4, #0, #11
    7278:	f364 2153 	bfi	r1, r4, #9, #11
    727c:	f36f 511f 	bfc	r1, #20, #12
    7280:	2300      	movs	r3, #0
    7282:	4816      	ldr	r0, [pc, #88]	; (72dc <usb_dc_ep_read_wait+0x150>)
    7284:	f7fa fd80 	bl	1d88 <z_impl_z_log_msg_static_create>
    7288:	46ad      	mov	sp, r5
		return -EINVAL;
    728a:	f06f 0015 	mvn.w	r0, #21
    728e:	e7c0      	b.n	7212 <usb_dc_ep_read_wait+0x86>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    7290:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    7294:	e7cd      	b.n	7232 <usb_dc_ep_read_wait+0xa6>
    7296:	f06f 041b 	mvn.w	r4, #27
    729a:	e7d6      	b.n	724a <usb_dc_ep_read_wait+0xbe>
	if (!data && !max_data_len) {
    729c:	f1b8 0f00 	cmp.w	r8, #0
    72a0:	d1a3      	bne.n	71ea <usb_dc_ep_read_wait+0x5e>
		if (read_bytes) {
    72a2:	f1b9 0f00 	cmp.w	r9, #0
    72a6:	d001      	beq.n	72ac <usb_dc_ep_read_wait+0x120>
			*read_bytes = ep_ctx->buf.len;
    72a8:	f8c9 3000 	str.w	r3, [r9]
    72ac:	4809      	ldr	r0, [pc, #36]	; (72d4 <usb_dc_ep_read_wait+0x148>)
    72ae:	f003 fcdf 	bl	ac70 <z_impl_k_mutex_unlock>
		return 0;
    72b2:	2000      	movs	r0, #0
    72b4:	e7ad      	b.n	7212 <usb_dc_ep_read_wait+0x86>
		return -ENODEV;
    72b6:	f06f 0012 	mvn.w	r0, #18
    72ba:	e7aa      	b.n	7212 <usb_dc_ep_read_wait+0x86>
    72bc:	f06f 0012 	mvn.w	r0, #18
    72c0:	e7a7      	b.n	7212 <usb_dc_ep_read_wait+0x86>
		return -EINVAL;
    72c2:	f06f 0015 	mvn.w	r0, #21
    72c6:	e7a4      	b.n	7212 <usb_dc_ep_read_wait+0x86>
		return -EINVAL;
    72c8:	f06f 0015 	mvn.w	r0, #21
    72cc:	e7a1      	b.n	7212 <usb_dc_ep_read_wait+0x86>
    72ce:	bf00      	nop
    72d0:	20001304 	.word	0x20001304
    72d4:	2000133c 	.word	0x2000133c
    72d8:	00010e7c 	.word	0x00010e7c
    72dc:	0000fec4 	.word	0x0000fec4

000072e0 <usb_dc_ep_read_continue>:
	return get_usbd_ctx()->attached;
    72e0:	4b46      	ldr	r3, [pc, #280]	; (73fc <usb_dc_ep_read_continue+0x11c>)
    72e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    72e6:	2b00      	cmp	r3, #0
    72e8:	d07b      	beq.n	73e2 <usb_dc_ep_read_continue+0x102>
{
    72ea:	b5f0      	push	{r4, r5, r6, r7, lr}
    72ec:	b083      	sub	sp, #12
    72ee:	af00      	add	r7, sp, #0
    72f0:	4605      	mov	r5, r0
	return get_usbd_ctx()->ready;
    72f2:	4b42      	ldr	r3, [pc, #264]	; (73fc <usb_dc_ep_read_continue+0x11c>)
    72f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    72f8:	2b00      	cmp	r3, #0
    72fa:	d075      	beq.n	73e8 <usb_dc_ep_read_continue+0x108>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    72fc:	f010 0f80 	tst.w	r0, #128	; 0x80
    7300:	d175      	bne.n	73ee <usb_dc_ep_read_continue+0x10e>
	ep_ctx = endpoint_ctx(ep);
    7302:	f7fe fd69 	bl	5dd8 <endpoint_ctx>
	if (!ep_ctx) {
    7306:	4604      	mov	r4, r0
    7308:	2800      	cmp	r0, #0
    730a:	d073      	beq.n	73f4 <usb_dc_ep_read_continue+0x114>
	if (!ep_ctx->cfg.en) {
    730c:	7a03      	ldrb	r3, [r0, #8]
    730e:	b1b3      	cbz	r3, 733e <usb_dc_ep_read_continue+0x5e>
	return z_impl_k_mutex_lock(mutex, timeout);
    7310:	f04f 32ff 	mov.w	r2, #4294967295
    7314:	f04f 33ff 	mov.w	r3, #4294967295
    7318:	4839      	ldr	r0, [pc, #228]	; (7400 <usb_dc_ep_read_continue+0x120>)
    731a:	f003 fc25 	bl	ab68 <z_impl_k_mutex_lock>
	if (!ep_ctx->buf.len) {
    731e:	68e3      	ldr	r3, [r4, #12]
    7320:	b933      	cbnz	r3, 7330 <usb_dc_ep_read_continue+0x50>
		ep_ctx->buf.curr = ep_ctx->buf.data;
    7322:	6963      	ldr	r3, [r4, #20]
    7324:	61a3      	str	r3, [r4, #24]
		ep_ctx->read_complete = true;
    7326:	2301      	movs	r3, #1
    7328:	7723      	strb	r3, [r4, #28]
		if (ep_ctx->read_pending) {
    732a:	7f63      	ldrb	r3, [r4, #29]
    732c:	2b00      	cmp	r3, #0
    732e:	d142      	bne.n	73b6 <usb_dc_ep_read_continue+0xd6>
	return z_impl_k_mutex_unlock(mutex);
    7330:	4833      	ldr	r0, [pc, #204]	; (7400 <usb_dc_ep_read_continue+0x120>)
    7332:	f003 fc9d 	bl	ac70 <z_impl_k_mutex_unlock>
	return 0;
    7336:	2000      	movs	r0, #0
}
    7338:	370c      	adds	r7, #12
    733a:	46bd      	mov	sp, r7
    733c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    733e:	466e      	mov	r6, sp
    7340:	b088      	sub	sp, #32
    7342:	466b      	mov	r3, sp
    7344:	f113 0210 	adds.w	r2, r3, #16
    7348:	d02f      	beq.n	73aa <usb_dc_ep_read_continue+0xca>
    734a:	210c      	movs	r1, #12
    734c:	b13a      	cbz	r2, 735e <usb_dc_ep_read_continue+0x7e>
    734e:	4608      	mov	r0, r1
    7350:	2904      	cmp	r1, #4
    7352:	dd01      	ble.n	7358 <usb_dc_ep_read_continue+0x78>
    7354:	4c2b      	ldr	r4, [pc, #172]	; (7404 <usb_dc_ep_read_continue+0x124>)
    7356:	615c      	str	r4, [r3, #20]
    7358:	2808      	cmp	r0, #8
    735a:	dd00      	ble.n	735e <usb_dc_ep_read_continue+0x7e>
    735c:	619d      	str	r5, [r3, #24]
    735e:	290b      	cmp	r1, #11
    7360:	dd26      	ble.n	73b0 <usb_dc_ep_read_continue+0xd0>
    7362:	240c      	movs	r4, #12
    7364:	b13a      	cbz	r2, 7376 <usb_dc_ep_read_continue+0x96>
    7366:	2103      	movs	r1, #3
    7368:	7139      	strb	r1, [r7, #4]
    736a:	2100      	movs	r1, #0
    736c:	7179      	strb	r1, [r7, #5]
    736e:	71b9      	strb	r1, [r7, #6]
    7370:	71f9      	strb	r1, [r7, #7]
    7372:	6878      	ldr	r0, [r7, #4]
    7374:	6118      	str	r0, [r3, #16]
    7376:	2100      	movs	r1, #0
    7378:	f36f 0100 	bfc	r1, #0, #1
    737c:	f36f 0141 	bfc	r1, #1, #1
    7380:	f36f 0182 	bfc	r1, #2, #1
    7384:	f36f 01c5 	bfc	r1, #3, #3
    7388:	2301      	movs	r3, #1
    738a:	f363 1188 	bfi	r1, r3, #6, #3
    738e:	f3c4 040a 	ubfx	r4, r4, #0, #11
    7392:	f364 2153 	bfi	r1, r4, #9, #11
    7396:	f36f 511f 	bfc	r1, #20, #12
    739a:	2300      	movs	r3, #0
    739c:	481a      	ldr	r0, [pc, #104]	; (7408 <usb_dc_ep_read_continue+0x128>)
    739e:	f7fa fcf3 	bl	1d88 <z_impl_z_log_msg_static_create>
    73a2:	46b5      	mov	sp, r6
		return -EINVAL;
    73a4:	f06f 0015 	mvn.w	r0, #21
    73a8:	e7c6      	b.n	7338 <usb_dc_ep_read_continue+0x58>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    73aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    73ae:	e7cd      	b.n	734c <usb_dc_ep_read_continue+0x6c>
    73b0:	f06f 041b 	mvn.w	r4, #27
    73b4:	e7d6      	b.n	7364 <usb_dc_ep_read_continue+0x84>
			struct usbd_event *ev = usbd_evt_alloc();
    73b6:	f7fe fd85 	bl	5ec4 <usbd_evt_alloc>
			if (!ev) {
    73ba:	4601      	mov	r1, r0
    73bc:	b158      	cbz	r0, 73d6 <usb_dc_ep_read_continue+0xf6>
			ev->evt_type = USBD_EVT_EP;
    73be:	2301      	movs	r3, #1
    73c0:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    73c2:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    73c4:	7303      	strb	r3, [r0, #12]
	k_fifo_put(&usbd_evt_fifo, ev);
    73c6:	4811      	ldr	r0, [pc, #68]	; (740c <usb_dc_ep_read_continue+0x12c>)
    73c8:	f007 fffd 	bl	f3c6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    73cc:	4910      	ldr	r1, [pc, #64]	; (7410 <usb_dc_ep_read_continue+0x130>)
    73ce:	4811      	ldr	r0, [pc, #68]	; (7414 <usb_dc_ep_read_continue+0x134>)
    73d0:	f008 f8ac 	bl	f52c <k_work_submit_to_queue>
}
    73d4:	e7ac      	b.n	7330 <usb_dc_ep_read_continue+0x50>
    73d6:	480a      	ldr	r0, [pc, #40]	; (7400 <usb_dc_ep_read_continue+0x120>)
    73d8:	f003 fc4a 	bl	ac70 <z_impl_k_mutex_unlock>
				return -ENOMEM;
    73dc:	f06f 000b 	mvn.w	r0, #11
    73e0:	e7aa      	b.n	7338 <usb_dc_ep_read_continue+0x58>
		return -ENODEV;
    73e2:	f06f 0012 	mvn.w	r0, #18
}
    73e6:	4770      	bx	lr
		return -ENODEV;
    73e8:	f06f 0012 	mvn.w	r0, #18
    73ec:	e7a4      	b.n	7338 <usb_dc_ep_read_continue+0x58>
		return -EINVAL;
    73ee:	f06f 0015 	mvn.w	r0, #21
    73f2:	e7a1      	b.n	7338 <usb_dc_ep_read_continue+0x58>
		return -EINVAL;
    73f4:	f06f 0015 	mvn.w	r0, #21
    73f8:	e79e      	b.n	7338 <usb_dc_ep_read_continue+0x58>
    73fa:	bf00      	nop
    73fc:	20001304 	.word	0x20001304
    7400:	2000133c 	.word	0x2000133c
    7404:	00010e7c 	.word	0x00010e7c
    7408:	0000fec4 	.word	0x0000fec4
    740c:	20000264 	.word	0x20000264
    7410:	2000132c 	.word	0x2000132c
    7414:	20000910 	.word	0x20000910

00007418 <usb_dc_ep_set_callback>:
	return get_usbd_ctx()->attached;
    7418:	4b08      	ldr	r3, [pc, #32]	; (743c <usb_dc_ep_set_callback+0x24>)
    741a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    741e:	b13b      	cbz	r3, 7430 <usb_dc_ep_set_callback+0x18>
{
    7420:	b510      	push	{r4, lr}
    7422:	460c      	mov	r4, r1
	ep_ctx = endpoint_ctx(ep);
    7424:	f7fe fcd8 	bl	5dd8 <endpoint_ctx>
	if (!ep_ctx) {
    7428:	b128      	cbz	r0, 7436 <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
    742a:	6004      	str	r4, [r0, #0]
	return 0;
    742c:	2000      	movs	r0, #0
}
    742e:	bd10      	pop	{r4, pc}
		return -ENODEV;
    7430:	f06f 0012 	mvn.w	r0, #18
}
    7434:	4770      	bx	lr
		return -EINVAL;
    7436:	f06f 0015 	mvn.w	r0, #21
    743a:	e7f8      	b.n	742e <usb_dc_ep_set_callback+0x16>
    743c:	20001304 	.word	0x20001304

00007440 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    7440:	4b01      	ldr	r3, [pc, #4]	; (7448 <usb_dc_set_status_callback+0x8>)
    7442:	6018      	str	r0, [r3, #0]
}
    7444:	4770      	bx	lr
    7446:	bf00      	nop
    7448:	20001304 	.word	0x20001304

0000744c <usb_dc_ep_mps>:
{
    744c:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    744e:	4b07      	ldr	r3, [pc, #28]	; (746c <usb_dc_ep_mps+0x20>)
    7450:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    7454:	b123      	cbz	r3, 7460 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    7456:	f7fe fcbf 	bl	5dd8 <endpoint_ctx>
	if (!ep_ctx) {
    745a:	b120      	cbz	r0, 7466 <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    745c:	6840      	ldr	r0, [r0, #4]
}
    745e:	bd08      	pop	{r3, pc}
		return -ENODEV;
    7460:	f06f 0012 	mvn.w	r0, #18
    7464:	e7fb      	b.n	745e <usb_dc_ep_mps+0x12>
		return -EINVAL;
    7466:	f06f 0015 	mvn.w	r0, #21
    746a:	e7f8      	b.n	745e <usb_dc_ep_mps+0x12>
    746c:	20001304 	.word	0x20001304

00007470 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    7470:	4800      	ldr	r0, [pc, #0]	; (7474 <get_hf_flags+0x4>)
    7472:	4770      	bx	lr
    7474:	20001be8 	.word	0x20001be8

00007478 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    7478:	4b03      	ldr	r3, [pc, #12]	; (7488 <get_subsys+0x10>)
    747a:	1ac0      	subs	r0, r0, r3
    747c:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    747e:	4b03      	ldr	r3, [pc, #12]	; (748c <get_subsys+0x14>)
    7480:	fb03 f000 	mul.w	r0, r3, r0
    7484:	4770      	bx	lr
    7486:	bf00      	nop
    7488:	20001ba8 	.word	0x20001ba8
    748c:	b6db6db7 	.word	0xb6db6db7

00007490 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    7490:	b538      	push	{r3, r4, r5, lr}
    7492:	4605      	mov	r5, r0
    7494:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    7496:	f7ff ffef 	bl	7478 <get_subsys>
    749a:	4601      	mov	r1, r0
    749c:	2240      	movs	r2, #64	; 0x40
    749e:	4803      	ldr	r0, [pc, #12]	; (74ac <onoff_stop+0x1c>)
    74a0:	f006 fe8d 	bl	e1be <stop>
    74a4:	4601      	mov	r1, r0
	notify(mgr, res);
    74a6:	4628      	mov	r0, r5
    74a8:	47a0      	blx	r4
}
    74aa:	bd38      	pop	{r3, r4, r5, pc}
    74ac:	0000fc1c 	.word	0x0000fc1c

000074b0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    74b0:	b530      	push	{r4, r5, lr}
    74b2:	b083      	sub	sp, #12
    74b4:	4605      	mov	r5, r0
    74b6:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    74b8:	f7ff ffde 	bl	7478 <get_subsys>
    74bc:	4601      	mov	r1, r0
    74be:	2340      	movs	r3, #64	; 0x40
    74c0:	9300      	str	r3, [sp, #0]
    74c2:	4623      	mov	r3, r4
    74c4:	4a05      	ldr	r2, [pc, #20]	; (74dc <onoff_start+0x2c>)
    74c6:	4806      	ldr	r0, [pc, #24]	; (74e0 <onoff_start+0x30>)
    74c8:	f006 fe93 	bl	e1f2 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    74cc:	1e01      	subs	r1, r0, #0
    74ce:	db01      	blt.n	74d4 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    74d0:	b003      	add	sp, #12
    74d2:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    74d4:	4628      	mov	r0, r5
    74d6:	47a0      	blx	r4
}
    74d8:	e7fa      	b.n	74d0 <onoff_start+0x20>
    74da:	bf00      	nop
    74dc:	0000e23b 	.word	0x0000e23b
    74e0:	0000fc1c 	.word	0x0000fc1c

000074e4 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    74e4:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    74e6:	b110      	cbz	r0, 74ee <clock_event_handler+0xa>
    74e8:	2801      	cmp	r0, #1
    74ea:	d00d      	beq.n	7508 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    74ec:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    74ee:	2100      	movs	r1, #0
    74f0:	4808      	ldr	r0, [pc, #32]	; (7514 <clock_event_handler+0x30>)
    74f2:	f006 fded 	bl	e0d0 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    74f6:	6883      	ldr	r3, [r0, #8]
    74f8:	f013 0f07 	tst.w	r3, #7
    74fc:	d1f6      	bne.n	74ec <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    74fe:	2100      	movs	r1, #0
    7500:	4804      	ldr	r0, [pc, #16]	; (7514 <clock_event_handler+0x30>)
    7502:	f006 fe4a 	bl	e19a <clkstarted_handle>
    7506:	e7f1      	b.n	74ec <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    7508:	2101      	movs	r1, #1
    750a:	4802      	ldr	r0, [pc, #8]	; (7514 <clock_event_handler+0x30>)
    750c:	f006 fe45 	bl	e19a <clkstarted_handle>
}
    7510:	e7ec      	b.n	74ec <clock_event_handler+0x8>
    7512:	bf00      	nop
    7514:	0000fc1c 	.word	0x0000fc1c

00007518 <generic_hfclk_start>:
{
    7518:	b510      	push	{r4, lr}
    751a:	b082      	sub	sp, #8
	__asm__ volatile(
    751c:	f04f 0320 	mov.w	r3, #32
    7520:	f3ef 8411 	mrs	r4, BASEPRI
    7524:	f383 8812 	msr	BASEPRI_MAX, r3
    7528:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    752c:	4a14      	ldr	r2, [pc, #80]	; (7580 <generic_hfclk_start+0x68>)
    752e:	6813      	ldr	r3, [r2, #0]
    7530:	f043 0102 	orr.w	r1, r3, #2
    7534:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    7536:	f013 0f01 	tst.w	r3, #1
    753a:	d109      	bne.n	7550 <generic_hfclk_start+0x38>
	bool already_started = false;
    753c:	2300      	movs	r3, #0
	__asm__ volatile(
    753e:	f384 8811 	msr	BASEPRI, r4
    7542:	f3bf 8f6f 	isb	sy
	if (already_started) {
    7546:	b9b3      	cbnz	r3, 7576 <generic_hfclk_start+0x5e>
	hfclk_start();
    7548:	f006 fe7f 	bl	e24a <hfclk_start>
}
    754c:	b002      	add	sp, #8
    754e:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    7550:	f10d 0207 	add.w	r2, sp, #7
    7554:	2101      	movs	r1, #1
    7556:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    755a:	f006 fd96 	bl	e08a <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    755e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7562:	2b01      	cmp	r3, #1
    7564:	d001      	beq.n	756a <generic_hfclk_start+0x52>
	bool already_started = false;
    7566:	2300      	movs	r3, #0
    7568:	e7e9      	b.n	753e <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
    756a:	f7ff ff81 	bl	7470 <get_hf_flags>
    756e:	f006 fe01 	bl	e174 <set_on_state>
			already_started = true;
    7572:	2301      	movs	r3, #1
    7574:	e7e3      	b.n	753e <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
    7576:	2100      	movs	r1, #0
    7578:	4802      	ldr	r0, [pc, #8]	; (7584 <generic_hfclk_start+0x6c>)
    757a:	f006 fe0e 	bl	e19a <clkstarted_handle>
		return;
    757e:	e7e5      	b.n	754c <generic_hfclk_start+0x34>
    7580:	20001bf8 	.word	0x20001bf8
    7584:	0000fc1c 	.word	0x0000fc1c

00007588 <generic_hfclk_stop>:
{
    7588:	b510      	push	{r4, lr}
	__asm__ volatile(
    758a:	f04f 0320 	mov.w	r3, #32
    758e:	f3ef 8411 	mrs	r4, BASEPRI
    7592:	f383 8812 	msr	BASEPRI_MAX, r3
    7596:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    759a:	4a08      	ldr	r2, [pc, #32]	; (75bc <generic_hfclk_stop+0x34>)
    759c:	6813      	ldr	r3, [r2, #0]
    759e:	f023 0102 	bic.w	r1, r3, #2
    75a2:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    75a4:	f013 0f01 	tst.w	r3, #1
    75a8:	d004      	beq.n	75b4 <generic_hfclk_stop+0x2c>
	__asm__ volatile(
    75aa:	f384 8811 	msr	BASEPRI, r4
    75ae:	f3bf 8f6f 	isb	sy
}
    75b2:	bd10      	pop	{r4, pc}
		hfclk_stop();
    75b4:	f006 fe53 	bl	e25e <hfclk_stop>
    75b8:	e7f7      	b.n	75aa <generic_hfclk_stop+0x22>
    75ba:	bf00      	nop
    75bc:	20001bf8 	.word	0x20001bf8

000075c0 <lfclk_spinwait>:
{
    75c0:	b570      	push	{r4, r5, r6, lr}
    75c2:	b082      	sub	sp, #8
    75c4:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    75c6:	2801      	cmp	r0, #1
    75c8:	d107      	bne.n	75da <lfclk_spinwait+0x1a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    75ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    75ce:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    75d2:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    75d6:	2b01      	cmp	r3, #1
    75d8:	d04c      	beq.n	7674 <lfclk_spinwait+0xb4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    75da:	f007 fe0a 	bl	f1f2 <k_is_in_isr>
    75de:	4604      	mov	r4, r0
    75e0:	b918      	cbnz	r0, 75ea <lfclk_spinwait+0x2a>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    75e2:	4b28      	ldr	r3, [pc, #160]	; (7684 <lfclk_spinwait+0xc4>)
    75e4:	781b      	ldrb	r3, [r3, #0]
    75e6:	2b00      	cmp	r3, #0
    75e8:	d139      	bne.n	765e <lfclk_spinwait+0x9e>
	__asm__ volatile(
    75ea:	f04f 0320 	mov.w	r3, #32
    75ee:	f3ef 8611 	mrs	r6, BASEPRI
    75f2:	f383 8812 	msr	BASEPRI_MAX, r3
    75f6:	f3bf 8f6f 	isb	sy
    75fa:	2401      	movs	r4, #1
	if (!isr_mode) {
    75fc:	b924      	cbnz	r4, 7608 <lfclk_spinwait+0x48>
    p_reg->INTENCLR = mask;
    75fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7602:	2202      	movs	r2, #2
    7604:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    7608:	aa01      	add	r2, sp, #4
    760a:	2100      	movs	r1, #0
    760c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    7610:	f006 fd3b 	bl	e08a <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    7614:	b120      	cbz	r0, 7620 <lfclk_spinwait+0x60>
		 && ((type == target_type)
    7616:	9b01      	ldr	r3, [sp, #4]
	while (!(nrfx_clock_is_running(d, (void *)&type)
    7618:	2b01      	cmp	r3, #1
    761a:	d026      	beq.n	766a <lfclk_spinwait+0xaa>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    761c:	2d01      	cmp	r5, #1
    761e:	d024      	beq.n	766a <lfclk_spinwait+0xaa>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    7620:	b1fc      	cbz	r4, 7662 <lfclk_spinwait+0xa2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    7622:	4630      	mov	r0, r6
    7624:	f7fd f894 	bl	4750 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    7628:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    762c:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    7630:	2b00      	cmp	r3, #0
    7632:	d1e9      	bne.n	7608 <lfclk_spinwait+0x48>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    7634:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7638:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    763c:	2b00      	cmp	r3, #0
    763e:	d0e3      	beq.n	7608 <lfclk_spinwait+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7640:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7644:	2200      	movs	r2, #0
    7646:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    764a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    764e:	2201      	movs	r2, #1
    7650:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7654:	490c      	ldr	r1, [pc, #48]	; (7688 <lfclk_spinwait+0xc8>)
    7656:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    765a:	609a      	str	r2, [r3, #8]
}
    765c:	e7d4      	b.n	7608 <lfclk_spinwait+0x48>
	int key = isr_mode ? irq_lock() : 0;
    765e:	2600      	movs	r6, #0
    7660:	e7cc      	b.n	75fc <lfclk_spinwait+0x3c>
				k_msleep(1);
    7662:	2001      	movs	r0, #1
    7664:	f006 fe05 	bl	e272 <k_msleep>
    7668:	e7de      	b.n	7628 <lfclk_spinwait+0x68>
	if (isr_mode) {
    766a:	b12c      	cbz	r4, 7678 <lfclk_spinwait+0xb8>
	__asm__ volatile(
    766c:	f386 8811 	msr	BASEPRI, r6
    7670:	f3bf 8f6f 	isb	sy
}
    7674:	b002      	add	sp, #8
    7676:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    7678:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    767c:	2202      	movs	r2, #2
    767e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    7682:	e7f7      	b.n	7674 <lfclk_spinwait+0xb4>
    7684:	200023a3 	.word	0x200023a3
    7688:	e000e100 	.word	0xe000e100

0000768c <api_blocking_start>:
{
    768c:	b500      	push	{lr}
    768e:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    7690:	f8cd d000 	str.w	sp, [sp]
    7694:	f8cd d004 	str.w	sp, [sp, #4]
    7698:	2300      	movs	r3, #0
    769a:	9302      	str	r3, [sp, #8]
    769c:	2301      	movs	r3, #1
    769e:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    76a0:	466b      	mov	r3, sp
    76a2:	4a07      	ldr	r2, [pc, #28]	; (76c0 <api_blocking_start+0x34>)
    76a4:	f006 fdc1 	bl	e22a <api_start>
	if (err < 0) {
    76a8:	2800      	cmp	r0, #0
    76aa:	db05      	blt.n	76b8 <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    76ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    76b0:	2300      	movs	r3, #0
    76b2:	4668      	mov	r0, sp
    76b4:	f003 fb7c 	bl	adb0 <z_impl_k_sem_take>
}
    76b8:	b005      	add	sp, #20
    76ba:	f85d fb04 	ldr.w	pc, [sp], #4
    76be:	bf00      	nop
    76c0:	0000e29f 	.word	0x0000e29f

000076c4 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    76c4:	b570      	push	{r4, r5, r6, lr}
    76c6:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    76c8:	2200      	movs	r2, #0
    76ca:	2101      	movs	r1, #1
    76cc:	4610      	mov	r0, r2
    76ce:	f006 facd 	bl	dc6c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    76d2:	4811      	ldr	r0, [pc, #68]	; (7718 <clk_init+0x54>)
    76d4:	f000 ff2e 	bl	8534 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    76d8:	4b10      	ldr	r3, [pc, #64]	; (771c <clk_init+0x58>)
    76da:	4298      	cmp	r0, r3
    76dc:	d119      	bne.n	7712 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    76de:	f000 ff3b 	bl	8558 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    76e2:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    76e4:	2c01      	cmp	r4, #1
    76e6:	d812      	bhi.n	770e <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    76e8:	4621      	mov	r1, r4
    76ea:	4630      	mov	r0, r6
    76ec:	f006 fcf0 	bl	e0d0 <get_sub_data>
    76f0:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    76f2:	4621      	mov	r1, r4
    76f4:	4630      	mov	r0, r6
    76f6:	f006 fcf8 	bl	e0ea <get_onoff_manager>
    76fa:	4909      	ldr	r1, [pc, #36]	; (7720 <clk_init+0x5c>)
    76fc:	f004 ff3c 	bl	c578 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    7700:	2800      	cmp	r0, #0
    7702:	db05      	blt.n	7710 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    7704:	2301      	movs	r3, #1
    7706:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    7708:	441c      	add	r4, r3
    770a:	b2e4      	uxtb	r4, r4
    770c:	e7ea      	b.n	76e4 <clk_init+0x20>
	}

	return 0;
    770e:	2000      	movs	r0, #0
}
    7710:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    7712:	f06f 0004 	mvn.w	r0, #4
    7716:	e7fb      	b.n	7710 <clk_init+0x4c>
    7718:	000074e5 	.word	0x000074e5
    771c:	0bad0000 	.word	0x0bad0000
    7720:	00010ecc 	.word	0x00010ecc

00007724 <z_nrf_clock_control_get_onoff>:
{
    7724:	b508      	push	{r3, lr}
	return get_onoff_manager(CLOCK_DEVICE,
    7726:	b2c1      	uxtb	r1, r0
    7728:	4801      	ldr	r0, [pc, #4]	; (7730 <z_nrf_clock_control_get_onoff+0xc>)
    772a:	f006 fcde 	bl	e0ea <get_onoff_manager>
}
    772e:	bd08      	pop	{r3, pc}
    7730:	0000fc1c 	.word	0x0000fc1c

00007734 <z_nrf_clock_control_lf_on>:
{
    7734:	b510      	push	{r4, lr}
    7736:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    7738:	4b10      	ldr	r3, [pc, #64]	; (777c <z_nrf_clock_control_lf_on+0x48>)
    773a:	2101      	movs	r1, #1
    773c:	f3bf 8f5b 	dmb	ish
    7740:	e853 2f00 	ldrex	r2, [r3]
    7744:	e843 1000 	strex	r0, r1, [r3]
    7748:	2800      	cmp	r0, #0
    774a:	d1f9      	bne.n	7740 <z_nrf_clock_control_lf_on+0xc>
    774c:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    7750:	b11a      	cbz	r2, 775a <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    7752:	1e63      	subs	r3, r4, #1
    7754:	2b01      	cmp	r3, #1
    7756:	d90d      	bls.n	7774 <z_nrf_clock_control_lf_on+0x40>
}
    7758:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    775a:	4809      	ldr	r0, [pc, #36]	; (7780 <z_nrf_clock_control_lf_on+0x4c>)
    775c:	f006 fcc5 	bl	e0ea <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    7760:	4908      	ldr	r1, [pc, #32]	; (7784 <z_nrf_clock_control_lf_on+0x50>)
    7762:	2300      	movs	r3, #0
    7764:	604b      	str	r3, [r1, #4]
    7766:	608b      	str	r3, [r1, #8]
    7768:	60cb      	str	r3, [r1, #12]
    776a:	2301      	movs	r3, #1
    776c:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    776e:	f004 ff20 	bl	c5b2 <onoff_request>
    7772:	e7ee      	b.n	7752 <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    7774:	4620      	mov	r0, r4
    7776:	f7ff ff23 	bl	75c0 <lfclk_spinwait>
		break;
    777a:	e7ed      	b.n	7758 <z_nrf_clock_control_lf_on+0x24>
    777c:	20001ba4 	.word	0x20001ba4
    7780:	0000fc1c 	.word	0x0000fc1c
    7784:	20001b94 	.word	0x20001b94

00007788 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    7788:	b510      	push	{r4, lr}
    778a:	4604      	mov	r4, r0
			 */
			return c;
		}
	}

	if ('\n' == c) {
    778c:	280a      	cmp	r0, #10
    778e:	d006      	beq.n	779e <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    7790:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    7792:	4806      	ldr	r0, [pc, #24]	; (77ac <console_out+0x24>)
    7794:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    7796:	685b      	ldr	r3, [r3, #4]
    7798:	4798      	blx	r3
		/* As errors cannot be returned, ignore the return value */
		(void)pm_device_runtime_put(uart_console_dev);
	}

	return c;
}
    779a:	4620      	mov	r0, r4
    779c:	bd10      	pop	{r4, pc}
	const struct uart_driver_api *api =
    779e:	4803      	ldr	r0, [pc, #12]	; (77ac <console_out+0x24>)
    77a0:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    77a2:	685b      	ldr	r3, [r3, #4]
    77a4:	210d      	movs	r1, #13
    77a6:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    77a8:	e7f2      	b.n	7790 <console_out+0x8>
    77aa:	bf00      	nop
    77ac:	0000fc7c 	.word	0x0000fc7c

000077b0 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    77b0:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    77b2:	4c04      	ldr	r4, [pc, #16]	; (77c4 <uart_console_hook_install+0x14>)
    77b4:	4620      	mov	r0, r4
    77b6:	f7fe fad7 	bl	5d68 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    77ba:	4620      	mov	r0, r4
    77bc:	f7f9 fbc4 	bl	f48 <__printk_hook_install>
#endif
}
    77c0:	bd10      	pop	{r4, pc}
    77c2:	bf00      	nop
    77c4:	00007789 	.word	0x00007789

000077c8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    77c8:	b508      	push	{r3, lr}
    77ca:	4805      	ldr	r0, [pc, #20]	; (77e0 <uart_console_init+0x18>)
    77cc:	f007 fca0 	bl	f110 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    77d0:	b118      	cbz	r0, 77da <uart_console_init+0x12>
		return -ENODEV;
	}

	uart_console_hook_install();
    77d2:	f7ff ffed 	bl	77b0 <uart_console_hook_install>

	return 0;
    77d6:	2000      	movs	r0, #0
}
    77d8:	bd08      	pop	{r3, pc}
		return -ENODEV;
    77da:	f06f 0012 	mvn.w	r0, #18
    77de:	e7fb      	b.n	77d8 <uart_console_init+0x10>
    77e0:	0000fc7c 	.word	0x0000fc7c

000077e4 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    77e4:	b128      	cbz	r0, 77f2 <get_dev+0xe>
    77e6:	2801      	cmp	r0, #1
    77e8:	d101      	bne.n	77ee <get_dev+0xa>
    77ea:	4803      	ldr	r0, [pc, #12]	; (77f8 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    77ec:	4770      	bx	lr
	const struct device *dev = NULL;
    77ee:	2000      	movs	r0, #0
    77f0:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    77f2:	4802      	ldr	r0, [pc, #8]	; (77fc <get_dev+0x18>)
    77f4:	4770      	bx	lr
    77f6:	bf00      	nop
    77f8:	0000fc34 	.word	0x0000fc34
    77fc:	0000fc4c 	.word	0x0000fc4c

00007800 <gpio_nrfx_pin_interrupt_configure>:
{
    7800:	b5f0      	push	{r4, r5, r6, r7, lr}
    7802:	b085      	sub	sp, #20
    7804:	460e      	mov	r6, r1
    7806:	4619      	mov	r1, r3
	return port->config;
    7808:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    780a:	7b1b      	ldrb	r3, [r3, #12]
    780c:	f006 051f 	and.w	r5, r6, #31
    7810:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    7814:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    7818:	d022      	beq.n	7860 <gpio_nrfx_pin_interrupt_configure+0x60>
    781a:	4607      	mov	r7, r0
    781c:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    781e:	2300      	movs	r3, #0
    7820:	9301      	str	r3, [sp, #4]
    7822:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
    7824:	4610      	mov	r0, r2
    7826:	f006 fe1c 	bl	e462 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    782a:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
    782e:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    7830:	6899      	ldr	r1, [r3, #8]
    7832:	40f1      	lsrs	r1, r6
    7834:	f011 0f01 	tst.w	r1, #1
    7838:	d102      	bne.n	7840 <gpio_nrfx_pin_interrupt_configure+0x40>
    783a:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
    783e:	d014      	beq.n	786a <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    7840:	2300      	movs	r3, #0
    7842:	aa01      	add	r2, sp, #4
    7844:	4619      	mov	r1, r3
    7846:	4628      	mov	r0, r5
    7848:	f001 f928 	bl	8a9c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    784c:	4b1b      	ldr	r3, [pc, #108]	; (78bc <gpio_nrfx_pin_interrupt_configure+0xbc>)
    784e:	4298      	cmp	r0, r3
    7850:	d131      	bne.n	78b6 <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    7852:	2101      	movs	r1, #1
    7854:	4628      	mov	r0, r5
    7856:	f001 fa81 	bl	8d5c <nrfx_gpiote_trigger_enable>
	return 0;
    785a:	2000      	movs	r0, #0
}
    785c:	b005      	add	sp, #20
    785e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    7860:	4628      	mov	r0, r5
    7862:	f001 faad 	bl	8dc0 <nrfx_gpiote_trigger_disable>
		return 0;
    7866:	2000      	movs	r0, #0
    7868:	e7f8      	b.n	785c <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    786a:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
    786e:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7870:	2a01      	cmp	r2, #1
    7872:	d014      	beq.n	789e <gpio_nrfx_pin_interrupt_configure+0x9e>
        case 0: return NRF_P0;
    7874:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    7878:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    787c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    7880:	f013 0f01 	tst.w	r3, #1
    7884:	d1dc      	bne.n	7840 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    7886:	f10d 010f 	add.w	r1, sp, #15
    788a:	4628      	mov	r0, r5
    788c:	f001 fa0a 	bl	8ca4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    7890:	4b0b      	ldr	r3, [pc, #44]	; (78c0 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    7892:	4298      	cmp	r0, r3
    7894:	d005      	beq.n	78a2 <gpio_nrfx_pin_interrupt_configure+0xa2>
		trigger_config.p_in_channel = &ch;
    7896:	f10d 030f 	add.w	r3, sp, #15
    789a:	9302      	str	r3, [sp, #8]
    789c:	e7d0      	b.n	7840 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
    789e:	4a09      	ldr	r2, [pc, #36]	; (78c4 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    78a0:	e7ea      	b.n	7878 <gpio_nrfx_pin_interrupt_configure+0x78>
			err = nrfx_gpiote_channel_alloc(&ch);
    78a2:	f10d 000f 	add.w	r0, sp, #15
    78a6:	f001 fa51 	bl	8d4c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    78aa:	4b04      	ldr	r3, [pc, #16]	; (78bc <gpio_nrfx_pin_interrupt_configure+0xbc>)
    78ac:	4298      	cmp	r0, r3
    78ae:	d0f2      	beq.n	7896 <gpio_nrfx_pin_interrupt_configure+0x96>
				return -ENOMEM;
    78b0:	f06f 000b 	mvn.w	r0, #11
    78b4:	e7d2      	b.n	785c <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
    78b6:	f06f 0015 	mvn.w	r0, #21
    78ba:	e7cf      	b.n	785c <gpio_nrfx_pin_interrupt_configure+0x5c>
    78bc:	0bad0000 	.word	0x0bad0000
    78c0:	0bad0004 	.word	0x0bad0004
    78c4:	50000300 	.word	0x50000300

000078c8 <gpio_nrfx_pin_configure>:
{
    78c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    78cc:	b086      	sub	sp, #24
    78ce:	460e      	mov	r6, r1
    78d0:	4614      	mov	r4, r2
	return port->config;
    78d2:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    78d6:	f898 300c 	ldrb.w	r3, [r8, #12]
    78da:	f001 051f 	and.w	r5, r1, #31
    78de:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    78e2:	f10d 0117 	add.w	r1, sp, #23
    78e6:	4628      	mov	r0, r5
    78e8:	f001 f9dc 	bl	8ca4 <nrfx_gpiote_channel_get>
    78ec:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    78ee:	f414 3f40 	tst.w	r4, #196608	; 0x30000
    78f2:	d03a      	beq.n	796a <gpio_nrfx_pin_configure+0xa2>
	nrfx_gpiote_trigger_config_t trigger_config = {
    78f4:	2100      	movs	r1, #0
    78f6:	9103      	str	r1, [sp, #12]
    78f8:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    78fa:	460b      	mov	r3, r1
    78fc:	aa03      	add	r2, sp, #12
    78fe:	4628      	mov	r0, r5
    7900:	f001 f8cc 	bl	8a9c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    7904:	4b33      	ldr	r3, [pc, #204]	; (79d4 <gpio_nrfx_pin_configure+0x10c>)
    7906:	4298      	cmp	r0, r3
    7908:	d161      	bne.n	79ce <gpio_nrfx_pin_configure+0x106>
	if (free_ch) {
    790a:	429f      	cmp	r7, r3
    790c:	d03d      	beq.n	798a <gpio_nrfx_pin_configure+0xc2>
	if (flags & GPIO_OUTPUT) {
    790e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
    7912:	d049      	beq.n	79a8 <gpio_nrfx_pin_configure+0xe0>
		int rv = get_drive(flags, &drive);
    7914:	f10d 0103 	add.w	r1, sp, #3
    7918:	4620      	mov	r0, r4
    791a:	f006 fd27 	bl	e36c <get_drive>
		if (rv != 0) {
    791e:	4607      	mov	r7, r0
    7920:	bb50      	cbnz	r0, 7978 <gpio_nrfx_pin_configure+0xb0>
		nrfx_gpiote_output_config_t output_config = {
    7922:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7926:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    792a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
    792e:	bf0c      	ite	eq
    7930:	2301      	moveq	r3, #1
    7932:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    7934:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    7938:	4620      	mov	r0, r4
    793a:	f006 fd5a 	bl	e3f2 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    793e:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    7942:	f414 2f00 	tst.w	r4, #524288	; 0x80000
    7946:	d025      	beq.n	7994 <gpio_nrfx_pin_configure+0xcc>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    7948:	f8d8 2004 	ldr.w	r2, [r8, #4]
    794c:	2301      	movs	r3, #1
    794e:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    7950:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    7954:	2200      	movs	r2, #0
    7956:	a901      	add	r1, sp, #4
    7958:	4628      	mov	r0, r5
    795a:	f001 f933 	bl	8bc4 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    795e:	4b1d      	ldr	r3, [pc, #116]	; (79d4 <gpio_nrfx_pin_configure+0x10c>)
    7960:	4298      	cmp	r0, r3
    7962:	d009      	beq.n	7978 <gpio_nrfx_pin_configure+0xb0>
    7964:	f06f 0715 	mvn.w	r7, #21
    7968:	e006      	b.n	7978 <gpio_nrfx_pin_configure+0xb0>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    796a:	4628      	mov	r0, r5
    796c:	f001 fa4a 	bl	8e04 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    7970:	4b18      	ldr	r3, [pc, #96]	; (79d4 <gpio_nrfx_pin_configure+0x10c>)
    7972:	429f      	cmp	r7, r3
    7974:	d004      	beq.n	7980 <gpio_nrfx_pin_configure+0xb8>
		return 0;
    7976:	2700      	movs	r7, #0
}
    7978:	4638      	mov	r0, r7
    797a:	b006      	add	sp, #24
    797c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
    7980:	f89d 0017 	ldrb.w	r0, [sp, #23]
    7984:	f001 f9da 	bl	8d3c <nrfx_gpiote_channel_free>
    7988:	e7f5      	b.n	7976 <gpio_nrfx_pin_configure+0xae>
		err = nrfx_gpiote_channel_free(ch);
    798a:	f89d 0017 	ldrb.w	r0, [sp, #23]
    798e:	f001 f9d5 	bl	8d3c <nrfx_gpiote_channel_free>
    7992:	e7bc      	b.n	790e <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    7994:	f414 2f80 	tst.w	r4, #262144	; 0x40000
    7998:	d0dc      	beq.n	7954 <gpio_nrfx_pin_configure+0x8c>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    799a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    799e:	2301      	movs	r3, #1
    79a0:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
    79a2:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    79a6:	e7d5      	b.n	7954 <gpio_nrfx_pin_configure+0x8c>
		.pull = get_pull(flags)
    79a8:	4620      	mov	r0, r4
    79aa:	f006 fd22 	bl	e3f2 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    79ae:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    79b2:	2300      	movs	r3, #0
    79b4:	461a      	mov	r2, r3
    79b6:	a902      	add	r1, sp, #8
    79b8:	4628      	mov	r0, r5
    79ba:	f001 f86f 	bl	8a9c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    79be:	4b05      	ldr	r3, [pc, #20]	; (79d4 <gpio_nrfx_pin_configure+0x10c>)
    79c0:	4298      	cmp	r0, r3
    79c2:	d101      	bne.n	79c8 <gpio_nrfx_pin_configure+0x100>
    79c4:	2700      	movs	r7, #0
    79c6:	e7d7      	b.n	7978 <gpio_nrfx_pin_configure+0xb0>
    79c8:	f06f 0715 	mvn.w	r7, #21
    79cc:	e7d4      	b.n	7978 <gpio_nrfx_pin_configure+0xb0>
		return -EINVAL;
    79ce:	f06f 0715 	mvn.w	r7, #21
    79d2:	e7d1      	b.n	7978 <gpio_nrfx_pin_configure+0xb0>
    79d4:	0bad0000 	.word	0x0bad0000

000079d8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    79d8:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    79da:	f001 f9a5 	bl	8d28 <nrfx_gpiote_is_init>
    79de:	b108      	cbz	r0, 79e4 <gpio_nrfx_init+0xc>
		return 0;
    79e0:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    79e2:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    79e4:	f001 f976 	bl	8cd4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    79e8:	4b08      	ldr	r3, [pc, #32]	; (7a0c <gpio_nrfx_init+0x34>)
    79ea:	4298      	cmp	r0, r3
    79ec:	d10a      	bne.n	7a04 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    79ee:	2100      	movs	r1, #0
    79f0:	4807      	ldr	r0, [pc, #28]	; (7a10 <gpio_nrfx_init+0x38>)
    79f2:	f001 f951 	bl	8c98 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    79f6:	2200      	movs	r2, #0
    79f8:	2105      	movs	r1, #5
    79fa:	2006      	movs	r0, #6
    79fc:	f006 f936 	bl	dc6c <z_arm_irq_priority_set>
	return 0;
    7a00:	2000      	movs	r0, #0
    7a02:	e7ee      	b.n	79e2 <gpio_nrfx_init+0xa>
		return -EIO;
    7a04:	f06f 0004 	mvn.w	r0, #4
    7a08:	e7eb      	b.n	79e2 <gpio_nrfx_init+0xa>
    7a0a:	bf00      	nop
    7a0c:	0bad0000 	.word	0x0bad0000
    7a10:	0000e49b 	.word	0x0000e49b

00007a14 <nrf_gpio_pin_write>:
    if (value == 0)
    7a14:	b969      	cbnz	r1, 7a32 <nrf_gpio_pin_write+0x1e>
    *p_pin = pin_number & 0x1F;
    7a16:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    7a1a:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7a1c:	2801      	cmp	r0, #1
    7a1e:	d006      	beq.n	7a2e <nrf_gpio_pin_write+0x1a>
        case 0: return NRF_P0;
    7a20:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7a24:	2301      	movs	r3, #1
    7a26:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
    7a28:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    7a2c:	4770      	bx	lr
        case 1: return NRF_P1;
    7a2e:	4a08      	ldr	r2, [pc, #32]	; (7a50 <nrf_gpio_pin_write+0x3c>)
    7a30:	e7f8      	b.n	7a24 <nrf_gpio_pin_write+0x10>
    *p_pin = pin_number & 0x1F;
    7a32:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    7a36:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7a38:	2801      	cmp	r0, #1
    7a3a:	d006      	beq.n	7a4a <nrf_gpio_pin_write+0x36>
        case 0: return NRF_P0;
    7a3c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7a40:	2301      	movs	r3, #1
    7a42:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    7a44:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
    7a48:	4770      	bx	lr
        case 1: return NRF_P1;
    7a4a:	4a01      	ldr	r2, [pc, #4]	; (7a50 <nrf_gpio_pin_write+0x3c>)
    7a4c:	e7f8      	b.n	7a40 <nrf_gpio_pin_write+0x2c>
    7a4e:	bf00      	nop
    7a50:	50000300 	.word	0x50000300

00007a54 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    7a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7a58:	b083      	sub	sp, #12
    7a5a:	4680      	mov	r8, r0
    7a5c:	468a      	mov	sl, r1
    7a5e:	4693      	mov	fp, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    7a60:	2400      	movs	r4, #0
    7a62:	e02c      	b.n	7abe <pinctrl_configure_pins+0x6a>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
    7a64:	f04f 35ff 	mov.w	r5, #4294967295
    7a68:	e035      	b.n	7ad6 <pinctrl_configure_pins+0x82>
		}

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = pin;
    7a6a:	f8cb 550c 	str.w	r5, [fp, #1292]	; 0x50c
			write = 1U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    7a6e:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    7a70:	9601      	str	r6, [sp, #4]
			write = 1U;
    7a72:	4631      	mov	r1, r6
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
    7a74:	2d7f      	cmp	r5, #127	; 0x7f
    7a76:	d020      	beq.n	7aba <pinctrl_configure_pins+0x66>
			if (write != NO_WRITE) {
    7a78:	f1b1 3fff 	cmp.w	r1, #4294967295
    7a7c:	f040 8090 	bne.w	7ba0 <pinctrl_configure_pins+0x14c>
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    7a80:	f858 2009 	ldr.w	r2, [r8, r9]
    7a84:	f412 5f00 	tst.w	r2, #8192	; 0x2000
    7a88:	d002      	beq.n	7a90 <pinctrl_configure_pins+0x3c>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    7a8a:	2601      	movs	r6, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
    7a8c:	2300      	movs	r3, #0
    7a8e:	9301      	str	r3, [sp, #4]
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    7a90:	f3c2 12c1 	ubfx	r2, r2, #7, #2
    *p_pin = pin_number & 0x1F;
    7a94:	f005 011f 	and.w	r1, r5, #31
    return pin_number >> 5;
    7a98:	096d      	lsrs	r5, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7a9a:	2d01      	cmp	r5, #1
    7a9c:	f000 8084 	beq.w	7ba8 <pinctrl_configure_pins+0x154>
        case 0: return NRF_P0;
    7aa0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    7aa4:	9b01      	ldr	r3, [sp, #4]
    7aa6:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    7aaa:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7aae:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    7ab2:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    7ab6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    7aba:	3401      	adds	r4, #1
    7abc:	b2e4      	uxtb	r4, r4
    7abe:	4554      	cmp	r4, sl
    7ac0:	d274      	bcs.n	7bac <pinctrl_configure_pins+0x158>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    7ac2:	ea4f 0984 	mov.w	r9, r4, lsl #2
    7ac6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
    7aca:	f3c3 2743 	ubfx	r7, r3, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
    7ace:	f003 057f 	and.w	r5, r3, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
    7ad2:	2d7f      	cmp	r5, #127	; 0x7f
    7ad4:	d0c6      	beq.n	7a64 <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
    7ad6:	0c1b      	lsrs	r3, r3, #16
    7ad8:	2b0c      	cmp	r3, #12
    7ada:	d869      	bhi.n	7bb0 <pinctrl_configure_pins+0x15c>
    7adc:	a201      	add	r2, pc, #4	; (adr r2, 7ae4 <pinctrl_configure_pins+0x90>)
    7ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7ae2:	bf00      	nop
    7ae4:	00007a6b 	.word	0x00007a6b
    7ae8:	00007b19 	.word	0x00007b19
    7aec:	00007b27 	.word	0x00007b27
    7af0:	00007b33 	.word	0x00007b33
    7af4:	00007b41 	.word	0x00007b41
    7af8:	00007b4f 	.word	0x00007b4f
    7afc:	00007b5b 	.word	0x00007b5b
    7b00:	00007bb1 	.word	0x00007bb1
    7b04:	00007bb1 	.word	0x00007bb1
    7b08:	00007bb1 	.word	0x00007bb1
    7b0c:	00007bb1 	.word	0x00007bb1
    7b10:	00007b69 	.word	0x00007b69
    7b14:	00007b79 	.word	0x00007b79
			NRF_PSEL_UART(reg, RXD) = pin;
    7b18:	f8cb 5514 	str.w	r5, [fp, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    7b1c:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    7b1e:	9601      	str	r6, [sp, #4]
		uint32_t write = NO_WRITE;
    7b20:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    7b24:	e7a6      	b.n	7a74 <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, RTS) = pin;
    7b26:	f8cb 5508 	str.w	r5, [fp, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    7b2a:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    7b2c:	9601      	str	r6, [sp, #4]
			write = 1U;
    7b2e:	4631      	mov	r1, r6
			break;
    7b30:	e7a0      	b.n	7a74 <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, CTS) = pin;
    7b32:	f8cb 5510 	str.w	r5, [fp, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    7b36:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    7b38:	9601      	str	r6, [sp, #4]
		uint32_t write = NO_WRITE;
    7b3a:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    7b3e:	e799      	b.n	7a74 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    7b40:	f8cb 5508 	str.w	r5, [fp, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    7b44:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    7b46:	2301      	movs	r3, #1
    7b48:	9301      	str	r3, [sp, #4]
			write = 0U;
    7b4a:	4631      	mov	r1, r6
			break;
    7b4c:	e792      	b.n	7a74 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    7b4e:	f8cb 550c 	str.w	r5, [fp, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    7b52:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    7b54:	9601      	str	r6, [sp, #4]
			write = 0U;
    7b56:	2100      	movs	r1, #0
			break;
    7b58:	e78c      	b.n	7a74 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    7b5a:	f8cb 5510 	str.w	r5, [fp, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    7b5e:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    7b60:	9601      	str	r6, [sp, #4]
		uint32_t write = NO_WRITE;
    7b62:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    7b66:	e785      	b.n	7a74 <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    7b68:	f8cb 5508 	str.w	r5, [fp, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    7b6c:	b167      	cbz	r7, 7b88 <pinctrl_configure_pins+0x134>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    7b6e:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    7b70:	9601      	str	r6, [sp, #4]
		uint32_t write = NO_WRITE;
    7b72:	f04f 31ff 	mov.w	r1, #4294967295
    7b76:	e77d      	b.n	7a74 <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    7b78:	f8cb 550c 	str.w	r5, [fp, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    7b7c:	b157      	cbz	r7, 7b94 <pinctrl_configure_pins+0x140>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    7b7e:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    7b80:	9601      	str	r6, [sp, #4]
		uint32_t write = NO_WRITE;
    7b82:	f04f 31ff 	mov.w	r1, #4294967295
    7b86:	e775      	b.n	7a74 <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    7b88:	463e      	mov	r6, r7
			dir = NRF_GPIO_PIN_DIR_INPUT;
    7b8a:	9701      	str	r7, [sp, #4]
		uint32_t write = NO_WRITE;
    7b8c:	f04f 31ff 	mov.w	r1, #4294967295
				drive = NRF_DRIVE_S0D1;
    7b90:	2706      	movs	r7, #6
    7b92:	e76f      	b.n	7a74 <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    7b94:	463e      	mov	r6, r7
			dir = NRF_GPIO_PIN_DIR_INPUT;
    7b96:	9701      	str	r7, [sp, #4]
		uint32_t write = NO_WRITE;
    7b98:	f04f 31ff 	mov.w	r1, #4294967295
				drive = NRF_DRIVE_S0D1;
    7b9c:	2706      	movs	r7, #6
    7b9e:	e769      	b.n	7a74 <pinctrl_configure_pins+0x20>
				nrf_gpio_pin_write(pin, write);
    7ba0:	4628      	mov	r0, r5
    7ba2:	f7ff ff37 	bl	7a14 <nrf_gpio_pin_write>
    7ba6:	e76b      	b.n	7a80 <pinctrl_configure_pins+0x2c>
        case 1: return NRF_P1;
    7ba8:	4804      	ldr	r0, [pc, #16]	; (7bbc <pinctrl_configure_pins+0x168>)
    7baa:	e77b      	b.n	7aa4 <pinctrl_configure_pins+0x50>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    7bac:	2000      	movs	r0, #0
    7bae:	e001      	b.n	7bb4 <pinctrl_configure_pins+0x160>
		switch (NRF_GET_FUN(pins[i])) {
    7bb0:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    7bb4:	b003      	add	sp, #12
    7bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7bba:	bf00      	nop
    7bbc:	50000300 	.word	0x50000300

00007bc0 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    7bc0:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    7bc2:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    7bc4:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    7bc8:	d06f      	beq.n	7caa <baudrate_set+0xea>
    7bca:	d83a      	bhi.n	7c42 <baudrate_set+0x82>
    7bcc:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    7bd0:	d06e      	beq.n	7cb0 <baudrate_set+0xf0>
    7bd2:	d90a      	bls.n	7bea <baudrate_set+0x2a>
    7bd4:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    7bd8:	d075      	beq.n	7cc6 <baudrate_set+0x106>
    7bda:	d924      	bls.n	7c26 <baudrate_set+0x66>
    7bdc:	f647 2312 	movw	r3, #31250	; 0x7a12
    7be0:	4299      	cmp	r1, r3
    7be2:	d12b      	bne.n	7c3c <baudrate_set+0x7c>
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
#if defined(UARTE_BAUDRATE_BAUDRATE_Baud31250)
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    7be4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    7be8:	e013      	b.n	7c12 <baudrate_set+0x52>
	switch (baudrate) {
    7bea:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    7bee:	d061      	beq.n	7cb4 <baudrate_set+0xf4>
    7bf0:	d907      	bls.n	7c02 <baudrate_set+0x42>
    7bf2:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    7bf6:	d063      	beq.n	7cc0 <baudrate_set+0x100>
    7bf8:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    7bfc:	d110      	bne.n	7c20 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    7bfe:	4b3c      	ldr	r3, [pc, #240]	; (7cf0 <baudrate_set+0x130>)
    7c00:	e007      	b.n	7c12 <baudrate_set+0x52>
	switch (baudrate) {
    7c02:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    7c06:	d058      	beq.n	7cba <baudrate_set+0xfa>
    7c08:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    7c0c:	d105      	bne.n	7c1a <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    7c0e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    7c12:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    7c16:	2000      	movs	r0, #0
    7c18:	4770      	bx	lr
	switch (baudrate) {
    7c1a:	f06f 0015 	mvn.w	r0, #21
    7c1e:	4770      	bx	lr
    7c20:	f06f 0015 	mvn.w	r0, #21
    7c24:	4770      	bx	lr
    7c26:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    7c2a:	d04e      	beq.n	7cca <baudrate_set+0x10a>
    7c2c:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    7c30:	d101      	bne.n	7c36 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    7c32:	4b30      	ldr	r3, [pc, #192]	; (7cf4 <baudrate_set+0x134>)
    7c34:	e7ed      	b.n	7c12 <baudrate_set+0x52>
	switch (baudrate) {
    7c36:	f06f 0015 	mvn.w	r0, #21
    7c3a:	4770      	bx	lr
    7c3c:	f06f 0015 	mvn.w	r0, #21
    7c40:	4770      	bx	lr
    7c42:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    7c46:	d042      	beq.n	7cce <baudrate_set+0x10e>
    7c48:	d909      	bls.n	7c5e <baudrate_set+0x9e>
    7c4a:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    7c4e:	d046      	beq.n	7cde <baudrate_set+0x11e>
    7c50:	d91f      	bls.n	7c92 <baudrate_set+0xd2>
    7c52:	4b29      	ldr	r3, [pc, #164]	; (7cf8 <baudrate_set+0x138>)
    7c54:	4299      	cmp	r1, r3
    7c56:	d148      	bne.n	7cea <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    7c58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7c5c:	e7d9      	b.n	7c12 <baudrate_set+0x52>
	switch (baudrate) {
    7c5e:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    7c62:	d037      	beq.n	7cd4 <baudrate_set+0x114>
    7c64:	d905      	bls.n	7c72 <baudrate_set+0xb2>
    7c66:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    7c6a:	d10f      	bne.n	7c8c <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    7c6c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    7c70:	e7cf      	b.n	7c12 <baudrate_set+0x52>
	switch (baudrate) {
    7c72:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    7c76:	4299      	cmp	r1, r3
    7c78:	d02e      	beq.n	7cd8 <baudrate_set+0x118>
    7c7a:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    7c7e:	d102      	bne.n	7c86 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    7c80:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    7c84:	e7c5      	b.n	7c12 <baudrate_set+0x52>
	switch (baudrate) {
    7c86:	f06f 0015 	mvn.w	r0, #21
    7c8a:	4770      	bx	lr
    7c8c:	f06f 0015 	mvn.w	r0, #21
    7c90:	4770      	bx	lr
    7c92:	4b1a      	ldr	r3, [pc, #104]	; (7cfc <baudrate_set+0x13c>)
    7c94:	4299      	cmp	r1, r3
    7c96:	d025      	beq.n	7ce4 <baudrate_set+0x124>
    7c98:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    7c9c:	d102      	bne.n	7ca4 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    7c9e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    7ca2:	e7b6      	b.n	7c12 <baudrate_set+0x52>
	switch (baudrate) {
    7ca4:	f06f 0015 	mvn.w	r0, #21
    7ca8:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    7caa:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    7cae:	e7b0      	b.n	7c12 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    7cb0:	4b13      	ldr	r3, [pc, #76]	; (7d00 <baudrate_set+0x140>)
    7cb2:	e7ae      	b.n	7c12 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    7cb4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    7cb8:	e7ab      	b.n	7c12 <baudrate_set+0x52>
	switch (baudrate) {
    7cba:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    7cbe:	e7a8      	b.n	7c12 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    7cc0:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    7cc4:	e7a5      	b.n	7c12 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    7cc6:	4b0f      	ldr	r3, [pc, #60]	; (7d04 <baudrate_set+0x144>)
    7cc8:	e7a3      	b.n	7c12 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    7cca:	4b0f      	ldr	r3, [pc, #60]	; (7d08 <baudrate_set+0x148>)
    7ccc:	e7a1      	b.n	7c12 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    7cce:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    7cd2:	e79e      	b.n	7c12 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    7cd4:	4b0d      	ldr	r3, [pc, #52]	; (7d0c <baudrate_set+0x14c>)
    7cd6:	e79c      	b.n	7c12 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    7cd8:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    7cdc:	e799      	b.n	7c12 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    7cde:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    7ce2:	e796      	b.n	7c12 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    7ce4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    7ce8:	e793      	b.n	7c12 <baudrate_set+0x52>
	switch (baudrate) {
    7cea:	f06f 0015 	mvn.w	r0, #21
}
    7cee:	4770      	bx	lr
    7cf0:	0013b000 	.word	0x0013b000
    7cf4:	004ea000 	.word	0x004ea000
    7cf8:	000f4240 	.word	0x000f4240
    7cfc:	0003d090 	.word	0x0003d090
    7d00:	00275000 	.word	0x00275000
    7d04:	0075c000 	.word	0x0075c000
    7d08:	003af000 	.word	0x003af000
    7d0c:	013a9000 	.word	0x013a9000

00007d10 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    7d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7d12:	4605      	mov	r5, r0
    7d14:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
    7d16:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    7d18:	f007 fa6b 	bl	f1f2 <k_is_in_isr>
    7d1c:	b910      	cbnz	r0, 7d24 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    7d1e:	4b12      	ldr	r3, [pc, #72]	; (7d68 <uarte_nrfx_poll_out+0x58>)
    7d20:	781b      	ldrb	r3, [r3, #0]
    7d22:	b983      	cbnz	r3, 7d46 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    7d24:	f04f 0320 	mov.w	r3, #32
    7d28:	f3ef 8411 	mrs	r4, BASEPRI
    7d2c:	f383 8812 	msr	BASEPRI_MAX, r3
    7d30:	f3bf 8f6f 	isb	sy
	unsigned int key;

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    7d34:	4628      	mov	r0, r5
    7d36:	f006 fce0 	bl	e6fa <is_tx_ready>
    7d3a:	b940      	cbnz	r0, 7d4e <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    7d3c:	f384 8811 	msr	BASEPRI, r4
    7d40:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    7d44:	e7ee      	b.n	7d24 <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    7d46:	4628      	mov	r0, r5
    7d48:	f006 fe08 	bl	e95c <wait_tx_ready>
    7d4c:	4604      	mov	r4, r0
	}

	*data->char_out = c;
    7d4e:	697b      	ldr	r3, [r7, #20]
    7d50:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
    7d52:	2201      	movs	r2, #1
    7d54:	6979      	ldr	r1, [r7, #20]
    7d56:	4628      	mov	r0, r5
    7d58:	f006 fce9 	bl	e72e <tx_start>
	__asm__ volatile(
    7d5c:	f384 8811 	msr	BASEPRI, r4
    7d60:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    7d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7d66:	bf00      	nop
    7d68:	200023a3 	.word	0x200023a3

00007d6c <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    7d6c:	b530      	push	{r4, r5, lr}
    7d6e:	b089      	sub	sp, #36	; 0x24
    7d70:	4604      	mov	r4, r0
    7d72:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    7d74:	f101 001c 	add.w	r0, r1, #28
    7d78:	f001 f946 	bl	9008 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    7d7c:	4b1d      	ldr	r3, [pc, #116]	; (7df4 <endtx_stoptx_ppi_init+0x88>)
    7d7e:	4298      	cmp	r0, r3
    7d80:	d112      	bne.n	7da8 <endtx_stoptx_ppi_init+0x3c>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    7d82:	7f2b      	ldrb	r3, [r5, #28]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    7d84:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    7d88:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    7d8a:	4a1b      	ldr	r2, [pc, #108]	; (7df8 <endtx_stoptx_ppi_init+0x8c>)
    7d8c:	33a2      	adds	r3, #162	; 0xa2
    7d8e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    7d92:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7d96:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    7d98:	7f29      	ldrb	r1, [r5, #28]
    7d9a:	2301      	movs	r3, #1
    7d9c:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    7d9e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    7da2:	2000      	movs	r0, #0
}
    7da4:	b009      	add	sp, #36	; 0x24
    7da6:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
    7da8:	4b14      	ldr	r3, [pc, #80]	; (7dfc <endtx_stoptx_ppi_init+0x90>)
    7daa:	9307      	str	r3, [sp, #28]
    7dac:	2302      	movs	r3, #2
    7dae:	f88d 3004 	strb.w	r3, [sp, #4]
    7db2:	2300      	movs	r3, #0
    7db4:	f88d 3005 	strb.w	r3, [sp, #5]
    7db8:	f88d 3006 	strb.w	r3, [sp, #6]
    7dbc:	f88d 3007 	strb.w	r3, [sp, #7]
    7dc0:	9a01      	ldr	r2, [sp, #4]
    7dc2:	9206      	str	r2, [sp, #24]
    7dc4:	4619      	mov	r1, r3
    7dc6:	f363 0100 	bfi	r1, r3, #0, #1
    7dca:	f363 0141 	bfi	r1, r3, #1, #1
    7dce:	f363 0182 	bfi	r1, r3, #2, #1
    7dd2:	f363 01c5 	bfi	r1, r3, #3, #3
    7dd6:	2201      	movs	r2, #1
    7dd8:	f362 1188 	bfi	r1, r2, #6, #3
    7ddc:	2208      	movs	r2, #8
    7dde:	f362 2153 	bfi	r1, r2, #9, #11
    7de2:	f363 511f 	bfi	r1, r3, #20, #12
    7de6:	aa06      	add	r2, sp, #24
    7de8:	4805      	ldr	r0, [pc, #20]	; (7e00 <endtx_stoptx_ppi_init+0x94>)
    7dea:	f7f9 ffcd 	bl	1d88 <z_impl_z_log_msg_static_create>
		return -EIO;
    7dee:	f06f 0004 	mvn.w	r0, #4
    7df2:	e7d7      	b.n	7da4 <endtx_stoptx_ppi_init+0x38>
    7df4:	0bad0000 	.word	0x0bad0000
    7df8:	4001f000 	.word	0x4001f000
    7dfc:	00010fa0 	.word	0x00010fa0
    7e00:	0000fea4 	.word	0x0000fea4

00007e04 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    7e04:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    7e08:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    7e0c:	4b01      	ldr	r3, [pc, #4]	; (7e14 <set_comparator+0x10>)
    7e0e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    7e12:	4770      	bx	lr
    7e14:	40011000 	.word	0x40011000

00007e18 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7e18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7e1c:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    7e1e:	4a02      	ldr	r2, [pc, #8]	; (7e28 <event_enable+0x10>)
    7e20:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    7e24:	4770      	bx	lr
    7e26:	bf00      	nop
    7e28:	40011000 	.word	0x40011000

00007e2c <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7e2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7e30:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    7e32:	4a02      	ldr	r2, [pc, #8]	; (7e3c <event_disable+0x10>)
    7e34:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    7e38:	4770      	bx	lr
    7e3a:	bf00      	nop
    7e3c:	40011000 	.word	0x40011000

00007e40 <counter>:
     return p_reg->COUNTER;
    7e40:	4b01      	ldr	r3, [pc, #4]	; (7e48 <counter+0x8>)
    7e42:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    7e46:	4770      	bx	lr
    7e48:	40011000 	.word	0x40011000

00007e4c <set_alarm>:
 * @param[in] chan A channel for which a new CC value is to be set.
 *
 * @param[in] req_cc Requested CC register value to be set.
 */
static void set_alarm(int32_t chan, uint32_t req_cc)
{
    7e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e50:	4606      	mov	r6, r0
    7e52:	4688      	mov	r8, r1
	 * (however, even if such spurious event was generated, it would be
	 * properly filtered out in process_channel(), where the target time
	 * is checked).
	 * Clear also the event as it may already be generated at this point.
	 */
	event_disable(chan);
    7e54:	f7ff ffea 	bl	7e2c <event_disable>
	event_clear(chan);
    7e58:	4630      	mov	r0, r6
    7e5a:	f006 fe28 	bl	eaae <event_clear>
	uint32_t cc_val = req_cc;
    7e5e:	4645      	mov	r5, r8
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    7e60:	2703      	movs	r7, #3
    7e62:	e001      	b.n	7e68 <set_alarm+0x1c>
				} else {
					break;
				}
			}

			cc_val = now + cc_inc;
    7e64:	193d      	adds	r5, r7, r4
			cc_inc++;
    7e66:	3701      	adds	r7, #1
		set_comparator(chan, cc_val);
    7e68:	4629      	mov	r1, r5
    7e6a:	4630      	mov	r0, r6
    7e6c:	f7ff ffca 	bl	7e04 <set_comparator>
		event_enable(chan);
    7e70:	4630      	mov	r0, r6
    7e72:	f7ff ffd1 	bl	7e18 <event_enable>
		now = counter();
    7e76:	f7ff ffe3 	bl	7e40 <counter>
    7e7a:	4604      	mov	r4, r0
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    7e7c:	1cc1      	adds	r1, r0, #3
    7e7e:	4628      	mov	r0, r5
    7e80:	f006 fe04 	bl	ea8c <counter_sub>
    7e84:	4b0b      	ldr	r3, [pc, #44]	; (7eb4 <set_alarm+0x68>)
    7e86:	4298      	cmp	r0, r3
    7e88:	d911      	bls.n	7eae <set_alarm+0x62>
			if (event_check(chan)) {
    7e8a:	4630      	mov	r0, r6
    7e8c:	f006 fe02 	bl	ea94 <event_check>
    7e90:	2800      	cmp	r0, #0
    7e92:	d0e7      	beq.n	7e64 <set_alarm+0x18>
				now = counter();
    7e94:	f7ff ffd4 	bl	7e40 <counter>
    7e98:	4604      	mov	r4, r0
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    7e9a:	4641      	mov	r1, r8
    7e9c:	f006 fdf6 	bl	ea8c <counter_sub>
    7ea0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    7ea4:	d903      	bls.n	7eae <set_alarm+0x62>
					event_clear(chan);
    7ea6:	4630      	mov	r0, r6
    7ea8:	f006 fe01 	bl	eaae <event_clear>
    7eac:	e7da      	b.n	7e64 <set_alarm+0x18>
		} else {
			break;
		}
	}
}
    7eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7eb2:	bf00      	nop
    7eb4:	007ffffd 	.word	0x007ffffd

00007eb8 <int_event_disable_rtc>:
    p_reg->INTENCLR = mask;
    7eb8:	4b03      	ldr	r3, [pc, #12]	; (7ec8 <int_event_disable_rtc+0x10>)
    7eba:	4a04      	ldr	r2, [pc, #16]	; (7ecc <int_event_disable_rtc+0x14>)
    7ebc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    7ec0:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	/* Reset interrupt enabling to expected reset values */
	nrf_rtc_int_disable(RTC, mask);

	/* Reset event routing enabling to expected reset values */
	nrf_rtc_event_disable(RTC, mask);
}
    7ec4:	4770      	bx	lr
    7ec6:	bf00      	nop
    7ec8:	40011000 	.word	0x40011000
    7ecc:	000f0003 	.word	0x000f0003

00007ed0 <compare_int_lock>:
{
    7ed0:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    7ed2:	2301      	movs	r3, #1
    7ed4:	4083      	lsls	r3, r0
    7ed6:	ea6f 0c03 	mvn.w	ip, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7eda:	4a0e      	ldr	r2, [pc, #56]	; (7f14 <compare_int_lock+0x44>)
    7edc:	f3bf 8f5b 	dmb	ish
    7ee0:	e852 1f00 	ldrex	r1, [r2]
    7ee4:	ea01 0e0c 	and.w	lr, r1, ip
    7ee8:	e842 e400 	strex	r4, lr, [r2]
    7eec:	2c00      	cmp	r4, #0
    7eee:	d1f7      	bne.n	7ee0 <compare_int_lock+0x10>
    7ef0:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7ef4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    7ef8:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    7efa:	4807      	ldr	r0, [pc, #28]	; (7f18 <compare_int_lock+0x48>)
    7efc:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    7f00:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7f04:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    7f08:	420b      	tst	r3, r1
}
    7f0a:	bf14      	ite	ne
    7f0c:	2001      	movne	r0, #1
    7f0e:	2000      	moveq	r0, #0
    7f10:	bd10      	pop	{r4, pc}
    7f12:	bf00      	nop
    7f14:	20001c38 	.word	0x20001c38
    7f18:	40011000 	.word	0x40011000

00007f1c <channel_processing_check_and_clear>:
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    7f1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7f20:	4083      	lsls	r3, r0
    return p_reg->INTENSET & mask;
    7f22:	4a14      	ldr	r2, [pc, #80]	; (7f74 <channel_processing_check_and_clear+0x58>)
    7f24:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    7f28:	4213      	tst	r3, r2
    7f2a:	d101      	bne.n	7f30 <channel_processing_check_and_clear+0x14>
	return false;
    7f2c:	2000      	movs	r0, #0
}
    7f2e:	4770      	bx	lr
{
    7f30:	b510      	push	{r4, lr}
    7f32:	4604      	mov	r4, r0
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    7f34:	2301      	movs	r3, #1
    7f36:	4083      	lsls	r3, r0
    7f38:	43db      	mvns	r3, r3
    7f3a:	490f      	ldr	r1, [pc, #60]	; (7f78 <channel_processing_check_and_clear+0x5c>)
    7f3c:	f3bf 8f5b 	dmb	ish
    7f40:	e851 2f00 	ldrex	r2, [r1]
    7f44:	ea02 0003 	and.w	r0, r2, r3
    7f48:	e841 0c00 	strex	ip, r0, [r1]
    7f4c:	f1bc 0f00 	cmp.w	ip, #0
    7f50:	d1f6      	bne.n	7f40 <channel_processing_check_and_clear+0x24>
    7f52:	f3bf 8f5b 	dmb	ish
    7f56:	fa22 f304 	lsr.w	r3, r2, r4
    7f5a:	f013 0f01 	tst.w	r3, #1
    7f5e:	d103      	bne.n	7f68 <channel_processing_check_and_clear+0x4c>
		    event_check(chan)) {
    7f60:	4620      	mov	r0, r4
    7f62:	f006 fd97 	bl	ea94 <event_check>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    7f66:	b118      	cbz	r0, 7f70 <channel_processing_check_and_clear+0x54>
			event_clear(chan);
    7f68:	4620      	mov	r0, r4
    7f6a:	f006 fda0 	bl	eaae <event_clear>
			return true;
    7f6e:	2001      	movs	r0, #1
}
    7f70:	bd10      	pop	{r4, pc}
    7f72:	bf00      	nop
    7f74:	40011000 	.word	0x40011000
    7f78:	20001c34 	.word	0x20001c34

00007f7c <compare_int_unlock>:
	if (key) {
    7f7c:	b901      	cbnz	r1, 7f80 <compare_int_unlock+0x4>
}
    7f7e:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    7f80:	2301      	movs	r3, #1
    7f82:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7f84:	4a11      	ldr	r2, [pc, #68]	; (7fcc <compare_int_unlock+0x50>)
    7f86:	f3bf 8f5b 	dmb	ish
    7f8a:	e852 cf00 	ldrex	ip, [r2]
    7f8e:	ea4c 0c03 	orr.w	ip, ip, r3
    7f92:	e842 c100 	strex	r1, ip, [r2]
    7f96:	2900      	cmp	r1, #0
    7f98:	d1f7      	bne.n	7f8a <compare_int_unlock+0xe>
    7f9a:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7f9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7fa2:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    7fa4:	4a0a      	ldr	r2, [pc, #40]	; (7fd0 <compare_int_unlock+0x54>)
    7fa6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7faa:	f3bf 8f5b 	dmb	ish
    7fae:	4b09      	ldr	r3, [pc, #36]	; (7fd4 <compare_int_unlock+0x58>)
    7fb0:	681b      	ldr	r3, [r3, #0]
    7fb2:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    7fb6:	40c3      	lsrs	r3, r0
    7fb8:	f013 0f01 	tst.w	r3, #1
    7fbc:	d0df      	beq.n	7f7e <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7fbe:	4b06      	ldr	r3, [pc, #24]	; (7fd8 <compare_int_unlock+0x5c>)
    7fc0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    7fc4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    7fc8:	e7d9      	b.n	7f7e <compare_int_unlock+0x2>
    7fca:	bf00      	nop
    7fcc:	20001c38 	.word	0x20001c38
    7fd0:	40011000 	.word	0x40011000
    7fd4:	20001c34 	.word	0x20001c34
    7fd8:	e000e100 	.word	0xe000e100

00007fdc <sys_clock_timeout_handler>:
{
    7fdc:	b538      	push	{r3, r4, r5, lr}
    7fde:	4614      	mov	r4, r2
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    7fe0:	4610      	mov	r0, r2
    7fe2:	4619      	mov	r1, r3
    7fe4:	f006 fd6f 	bl	eac6 <absolute_time_to_cc>
    7fe8:	4602      	mov	r2, r0
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    7fea:	490d      	ldr	r1, [pc, #52]	; (8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>)
    7fec:	680b      	ldr	r3, [r1, #0]
    7fee:	1ae0      	subs	r0, r4, r3
	last_count += dticks * CYC_PER_TICK;
    7ff0:	181b      	adds	r3, r3, r0
    7ff2:	684c      	ldr	r4, [r1, #4]
    7ff4:	f144 0400 	adc.w	r4, r4, #0
    7ff8:	600b      	str	r3, [r1, #0]
    7ffa:	604c      	str	r4, [r1, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    7ffc:	f5a2 1300 	sub.w	r3, r2, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    8000:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    8004:	d209      	bcs.n	801a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    8006:	4b07      	ldr	r3, [pc, #28]	; (8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>)
    8008:	681b      	ldr	r3, [r3, #0]
    800a:	0a19      	lsrs	r1, r3, #8
    800c:	061b      	lsls	r3, r3, #24
    800e:	18d4      	adds	r4, r2, r3
    8010:	f141 0500 	adc.w	r5, r1, #0
    8014:	4b04      	ldr	r3, [pc, #16]	; (8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>)
    8016:	e9c3 4500 	strd	r4, r5, [r3]
	sys_clock_announce(dticks);
    801a:	f003 fcf9 	bl	ba10 <sys_clock_announce>
}
    801e:	bd38      	pop	{r3, r4, r5, pc}
    8020:	200009f0 	.word	0x200009f0
    8024:	20001c3c 	.word	0x20001c3c
    8028:	200009f8 	.word	0x200009f8

0000802c <z_nrf_rtc_timer_read>:
{
    802c:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    802e:	4b0d      	ldr	r3, [pc, #52]	; (8064 <z_nrf_rtc_timer_read+0x38>)
    8030:	681c      	ldr	r4, [r3, #0]
    8032:	0a25      	lsrs	r5, r4, #8
    8034:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    8036:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    803a:	f7ff ff01 	bl	7e40 <counter>
    803e:	4603      	mov	r3, r0
	val += cntr;
    8040:	1900      	adds	r0, r0, r4
    8042:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    8046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    804a:	d20a      	bcs.n	8062 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    804c:	4b06      	ldr	r3, [pc, #24]	; (8068 <z_nrf_rtc_timer_read+0x3c>)
    804e:	e9d3 2300 	ldrd	r2, r3, [r3]
    8052:	4290      	cmp	r0, r2
    8054:	eb71 0303 	sbcs.w	r3, r1, r3
    8058:	d203      	bcs.n	8062 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    805a:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    805e:	f141 0100 	adc.w	r1, r1, #0
}
    8062:	bd38      	pop	{r3, r4, r5, pc}
    8064:	20001c3c 	.word	0x20001c3c
    8068:	200009f8 	.word	0x200009f8

0000806c <compare_set_nolocks>:
{
    806c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    806e:	4606      	mov	r6, r0
    8070:	4614      	mov	r4, r2
    8072:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    8074:	4610      	mov	r0, r2
    8076:	4619      	mov	r1, r3
    8078:	f006 fd25 	bl	eac6 <absolute_time_to_cc>
    807c:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    807e:	f7ff ffd5 	bl	802c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    8082:	42a0      	cmp	r0, r4
    8084:	eb71 0305 	sbcs.w	r3, r1, r5
    8088:	d215      	bcs.n	80b6 <compare_set_nolocks+0x4a>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    808a:	1a20      	subs	r0, r4, r0
    808c:	eb65 0101 	sbc.w	r1, r5, r1
    8090:	4b17      	ldr	r3, [pc, #92]	; (80f0 <compare_set_nolocks+0x84>)
    8092:	4298      	cmp	r0, r3
    8094:	f171 0100 	sbcs.w	r1, r1, #0
    8098:	d227      	bcs.n	80ea <compare_set_nolocks+0x7e>
		if (target_time != cc_data[chan].target_time) {
    809a:	4b16      	ldr	r3, [pc, #88]	; (80f4 <compare_set_nolocks+0x88>)
    809c:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    80a0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    80a4:	42ab      	cmp	r3, r5
    80a6:	bf08      	it	eq
    80a8:	42a2      	cmpeq	r2, r4
    80aa:	d012      	beq.n	80d2 <compare_set_nolocks+0x66>
			set_alarm(chan, cc_value);
    80ac:	4639      	mov	r1, r7
    80ae:	4630      	mov	r0, r6
    80b0:	f7ff fecc 	bl	7e4c <set_alarm>
    80b4:	e00d      	b.n	80d2 <compare_set_nolocks+0x66>
		atomic_or(&force_isr_mask, BIT(chan));
    80b6:	2301      	movs	r3, #1
    80b8:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    80ba:	4a0f      	ldr	r2, [pc, #60]	; (80f8 <compare_set_nolocks+0x8c>)
    80bc:	f3bf 8f5b 	dmb	ish
    80c0:	e852 0f00 	ldrex	r0, [r2]
    80c4:	4318      	orrs	r0, r3
    80c6:	e842 0100 	strex	r1, r0, [r2]
    80ca:	2900      	cmp	r1, #0
    80cc:	d1f8      	bne.n	80c0 <compare_set_nolocks+0x54>
    80ce:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    80d2:	4b08      	ldr	r3, [pc, #32]	; (80f4 <compare_set_nolocks+0x88>)
    80d4:	0132      	lsls	r2, r6, #4
    80d6:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    80da:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    80de:	9906      	ldr	r1, [sp, #24]
    80e0:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    80e2:	9b07      	ldr	r3, [sp, #28]
    80e4:	6073      	str	r3, [r6, #4]
	return ret;
    80e6:	2000      	movs	r0, #0
}
    80e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    80ea:	f06f 0015 	mvn.w	r0, #21
    80ee:	e7fb      	b.n	80e8 <compare_set_nolocks+0x7c>
    80f0:	00800001 	.word	0x00800001
    80f4:	200009e0 	.word	0x200009e0
    80f8:	20001c34 	.word	0x20001c34

000080fc <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    80fc:	b530      	push	{r4, r5, lr}
    80fe:	b083      	sub	sp, #12
			CLOCK_CONTROL_NRF_LF_START_NOWAIT :
			(IS_ENABLED(CONFIG_SYSTEM_CLOCK_WAIT_FOR_AVAILABILITY) ?
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	int_event_disable_rtc();
    8100:	f7ff feda 	bl	7eb8 <int_event_disable_rtc>
    p_reg->PRESCALER = val;
    8104:	2300      	movs	r3, #0
    8106:	4a1d      	ldr	r2, [pc, #116]	; (817c <sys_clock_driver_init+0x80>)
    8108:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    810c:	2b00      	cmp	r3, #0
    810e:	dd24      	ble.n	815a <sys_clock_driver_init+0x5e>
    p_reg->INTENSET = mask;
    8110:	4c1a      	ldr	r4, [pc, #104]	; (817c <sys_clock_driver_init+0x80>)
    8112:	2502      	movs	r5, #2
    8114:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8118:	4b19      	ldr	r3, [pc, #100]	; (8180 <sys_clock_driver_init+0x84>)
    811a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    811e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    8122:	2200      	movs	r2, #0
    8124:	2101      	movs	r1, #1
    8126:	2011      	movs	r0, #17
    8128:	f005 fda0 	bl	dc6c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    812c:	2011      	movs	r0, #17
    812e:	f005 fd93 	bl	dc58 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    8132:	2301      	movs	r3, #1
    8134:	60a3      	str	r3, [r4, #8]
    8136:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    8138:	4a12      	ldr	r2, [pc, #72]	; (8184 <sys_clock_driver_init+0x88>)
    813a:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    813c:	2400      	movs	r4, #0
    813e:	9401      	str	r4, [sp, #4]
    8140:	4b11      	ldr	r3, [pc, #68]	; (8188 <sys_clock_driver_init+0x8c>)
    8142:	9300      	str	r3, [sp, #0]
    8144:	4a11      	ldr	r2, [pc, #68]	; (818c <sys_clock_driver_init+0x90>)
    8146:	2300      	movs	r3, #0
    8148:	4620      	mov	r0, r4
    814a:	f006 fccd 	bl	eae8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    814e:	4628      	mov	r0, r5
    8150:	f7ff faf0 	bl	7734 <z_nrf_clock_control_lf_on>

	return 0;
}
    8154:	4620      	mov	r0, r4
    8156:	b003      	add	sp, #12
    8158:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    815a:	4a0d      	ldr	r2, [pc, #52]	; (8190 <sys_clock_driver_init+0x94>)
    815c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    8160:	f04f 30ff 	mov.w	r0, #4294967295
    8164:	f04f 31ff 	mov.w	r1, #4294967295
    8168:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    816c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    8170:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    8172:	4902      	ldr	r1, [pc, #8]	; (817c <sys_clock_driver_init+0x80>)
    8174:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    8178:	3301      	adds	r3, #1
    817a:	e7c7      	b.n	810c <sys_clock_driver_init+0x10>
    817c:	40011000 	.word	0x40011000
    8180:	e000e100 	.word	0xe000e100
    8184:	20001c38 	.word	0x20001c38
    8188:	00007fdd 	.word	0x00007fdd
    818c:	007fffff 	.word	0x007fffff
    8190:	200009e0 	.word	0x200009e0

00008194 <process_channel>:
{
    8194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8198:	b082      	sub	sp, #8
    819a:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    819c:	f7ff febe 	bl	7f1c <channel_processing_check_and_clear>
    81a0:	b910      	cbnz	r0, 81a8 <process_channel+0x14>
}
    81a2:	b002      	add	sp, #8
    81a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    81a8:	f7ff ff40 	bl	802c <z_nrf_rtc_timer_read>
    81ac:	4682      	mov	sl, r0
    81ae:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
    81b0:	f006 fc8c 	bl	eacc <full_int_lock>
    81b4:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
    81b6:	4b15      	ldr	r3, [pc, #84]	; (820c <process_channel+0x78>)
    81b8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    81bc:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    81c0:	45c2      	cmp	sl, r8
    81c2:	eb75 0509 	sbcs.w	r5, r5, r9
    81c6:	d20b      	bcs.n	81e0 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    81c8:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
    81ca:	4630      	mov	r0, r6
    81cc:	f006 fc87 	bl	eade <full_int_unlock>
		if (handler) {
    81d0:	2d00      	cmp	r5, #0
    81d2:	d0e6      	beq.n	81a2 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    81d4:	9700      	str	r7, [sp, #0]
    81d6:	4642      	mov	r2, r8
    81d8:	464b      	mov	r3, r9
    81da:	4620      	mov	r0, r4
    81dc:	47a8      	blx	r5
}
    81de:	e7e0      	b.n	81a2 <process_channel+0xe>
			handler = cc_data[chan].callback;
    81e0:	4a0a      	ldr	r2, [pc, #40]	; (820c <process_channel+0x78>)
    81e2:	0123      	lsls	r3, r4, #4
    81e4:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    81e8:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
    81ea:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    81ec:	2000      	movs	r0, #0
    81ee:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    81f0:	f04f 32ff 	mov.w	r2, #4294967295
    81f4:	f04f 33ff 	mov.w	r3, #4294967295
    81f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    81fc:	4620      	mov	r0, r4
    81fe:	f7ff fe15 	bl	7e2c <event_disable>
			event_clear(chan);
    8202:	4620      	mov	r0, r4
    8204:	f006 fc53 	bl	eaae <event_clear>
    8208:	e7df      	b.n	81ca <process_channel+0x36>
    820a:	bf00      	nop
    820c:	200009e0 	.word	0x200009e0

00008210 <rtc_nrf_isr>:
{
    8210:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    8212:	4b0e      	ldr	r3, [pc, #56]	; (824c <rtc_nrf_isr+0x3c>)
    8214:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    8218:	f013 0f02 	tst.w	r3, #2
    821c:	d00d      	beq.n	823a <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    821e:	4b0b      	ldr	r3, [pc, #44]	; (824c <rtc_nrf_isr+0x3c>)
    8220:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    8224:	b14b      	cbz	r3, 823a <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    8226:	4b09      	ldr	r3, [pc, #36]	; (824c <rtc_nrf_isr+0x3c>)
    8228:	2200      	movs	r2, #0
    822a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    822e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    8232:	4a07      	ldr	r2, [pc, #28]	; (8250 <rtc_nrf_isr+0x40>)
    8234:	6813      	ldr	r3, [r2, #0]
    8236:	3301      	adds	r3, #1
    8238:	6013      	str	r3, [r2, #0]
{
    823a:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    823c:	2c00      	cmp	r4, #0
    823e:	dd00      	ble.n	8242 <rtc_nrf_isr+0x32>
}
    8240:	bd10      	pop	{r4, pc}
		process_channel(chan);
    8242:	4620      	mov	r0, r4
    8244:	f7ff ffa6 	bl	8194 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    8248:	3401      	adds	r4, #1
    824a:	e7f7      	b.n	823c <rtc_nrf_isr+0x2c>
    824c:	40011000 	.word	0x40011000
    8250:	20001c3c 	.word	0x20001c3c

00008254 <sys_clock_set_timeout>:
{
    8254:	b510      	push	{r4, lr}
    8256:	b082      	sub	sp, #8
	if (ticks == K_TICKS_FOREVER) {
    8258:	f1b0 3fff 	cmp.w	r0, #4294967295
    825c:	d006      	beq.n	826c <sys_clock_set_timeout+0x18>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    825e:	2801      	cmp	r0, #1
    8260:	dd09      	ble.n	8276 <sys_clock_set_timeout+0x22>
    8262:	4b15      	ldr	r3, [pc, #84]	; (82b8 <sys_clock_set_timeout+0x64>)
    8264:	4298      	cmp	r0, r3
    8266:	dc24      	bgt.n	82b2 <sys_clock_set_timeout+0x5e>
    8268:	4604      	mov	r4, r0
    826a:	e005      	b.n	8278 <sys_clock_set_timeout+0x24>
		sys_busy = false;
    826c:	4b13      	ldr	r3, [pc, #76]	; (82bc <sys_clock_set_timeout+0x68>)
    826e:	2200      	movs	r2, #0
    8270:	701a      	strb	r2, [r3, #0]
		cyc = MAX_TICKS * CYC_PER_TICK;
    8272:	4c13      	ldr	r4, [pc, #76]	; (82c0 <sys_clock_set_timeout+0x6c>)
    8274:	e003      	b.n	827e <sys_clock_set_timeout+0x2a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    8276:	2401      	movs	r4, #1
		sys_busy = true;
    8278:	4b10      	ldr	r3, [pc, #64]	; (82bc <sys_clock_set_timeout+0x68>)
    827a:	2201      	movs	r2, #1
    827c:	701a      	strb	r2, [r3, #0]
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    827e:	f7ff fed5 	bl	802c <z_nrf_rtc_timer_read>
    8282:	4b10      	ldr	r3, [pc, #64]	; (82c4 <sys_clock_set_timeout+0x70>)
    8284:	681a      	ldr	r2, [r3, #0]
    8286:	685b      	ldr	r3, [r3, #4]
    8288:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    828a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    828e:	d300      	bcc.n	8292 <sys_clock_set_timeout+0x3e>
		cyc = 0;
    8290:	2400      	movs	r4, #0
	cyc += unannounced;
    8292:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    8294:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    8298:	d300      	bcc.n	829c <sys_clock_set_timeout+0x48>
		cyc = MAX_CYCLES;
    829a:	4c09      	ldr	r4, [pc, #36]	; (82c0 <sys_clock_set_timeout+0x6c>)
	uint64_t target_time = cyc + last_count;
    829c:	2000      	movs	r0, #0
    829e:	1912      	adds	r2, r2, r4
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    82a0:	9001      	str	r0, [sp, #4]
    82a2:	4909      	ldr	r1, [pc, #36]	; (82c8 <sys_clock_set_timeout+0x74>)
    82a4:	9100      	str	r1, [sp, #0]
    82a6:	f143 0300 	adc.w	r3, r3, #0
    82aa:	f006 fc1d 	bl	eae8 <compare_set>
}
    82ae:	b002      	add	sp, #8
    82b0:	bd10      	pop	{r4, pc}
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    82b2:	4c03      	ldr	r4, [pc, #12]	; (82c0 <sys_clock_set_timeout+0x6c>)
    82b4:	e7e0      	b.n	8278 <sys_clock_set_timeout+0x24>
    82b6:	bf00      	nop
    82b8:	007ffffe 	.word	0x007ffffe
    82bc:	2000239c 	.word	0x2000239c
    82c0:	007fffff 	.word	0x007fffff
    82c4:	200009f0 	.word	0x200009f0
    82c8:	00007fdd 	.word	0x00007fdd

000082cc <sys_clock_elapsed>:
{
    82cc:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    82ce:	f7ff fead 	bl	802c <z_nrf_rtc_timer_read>
    82d2:	4b02      	ldr	r3, [pc, #8]	; (82dc <sys_clock_elapsed+0x10>)
    82d4:	681b      	ldr	r3, [r3, #0]
}
    82d6:	1ac0      	subs	r0, r0, r3
    82d8:	bd08      	pop	{r3, pc}
    82da:	bf00      	nop
    82dc:	200009f0 	.word	0x200009f0

000082e0 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    82e0:	b510      	push	{r4, lr}
    82e2:	b088      	sub	sp, #32
	z_impl_log_panic();
    82e4:	f7f9 fc58 	bl	1b98 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    82e8:	4b13      	ldr	r3, [pc, #76]	; (8338 <k_sys_fatal_error_handler+0x58>)
    82ea:	9307      	str	r3, [sp, #28]
    82ec:	2302      	movs	r3, #2
    82ee:	f88d 3004 	strb.w	r3, [sp, #4]
    82f2:	2400      	movs	r4, #0
    82f4:	f88d 4005 	strb.w	r4, [sp, #5]
    82f8:	f88d 4006 	strb.w	r4, [sp, #6]
    82fc:	f88d 4007 	strb.w	r4, [sp, #7]
    8300:	9b01      	ldr	r3, [sp, #4]
    8302:	9306      	str	r3, [sp, #24]
    8304:	4621      	mov	r1, r4
    8306:	f364 0100 	bfi	r1, r4, #0, #1
    830a:	f364 0141 	bfi	r1, r4, #1, #1
    830e:	f364 0182 	bfi	r1, r4, #2, #1
    8312:	f364 01c5 	bfi	r1, r4, #3, #3
    8316:	2301      	movs	r3, #1
    8318:	f363 1188 	bfi	r1, r3, #6, #3
    831c:	2308      	movs	r3, #8
    831e:	f363 2153 	bfi	r1, r3, #9, #11
    8322:	f364 511f 	bfi	r1, r4, #20, #12
    8326:	4623      	mov	r3, r4
    8328:	aa06      	add	r2, sp, #24
    832a:	4804      	ldr	r0, [pc, #16]	; (833c <k_sys_fatal_error_handler+0x5c>)
    832c:	f7f9 fd2c 	bl	1d88 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
    8330:	4620      	mov	r0, r4
    8332:	f005 fd93 	bl	de5c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    8336:	bf00      	nop
    8338:	00011068 	.word	0x00011068
    833c:	0000fe64 	.word	0x0000fe64

00008340 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    8340:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    8344:	4905      	ldr	r1, [pc, #20]	; (835c <__NVIC_SystemReset+0x1c>)
    8346:	68ca      	ldr	r2, [r1, #12]
    8348:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    834c:	4b04      	ldr	r3, [pc, #16]	; (8360 <__NVIC_SystemReset+0x20>)
    834e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    8350:	60cb      	str	r3, [r1, #12]
    8352:	f3bf 8f4f 	dsb	sy
    __NOP();
    8356:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    8358:	e7fd      	b.n	8356 <__NVIC_SystemReset+0x16>
    835a:	bf00      	nop
    835c:	e000ed00 	.word	0xe000ed00
    8360:	05fa0004 	.word	0x05fa0004

00008364 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8364:	4b02      	ldr	r3, [pc, #8]	; (8370 <nvmc_wait+0xc>)
    8366:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    836a:	2b00      	cmp	r3, #0
    836c:	d0fa      	beq.n	8364 <nvmc_wait>
}
    836e:	4770      	bx	lr
    8370:	4001e000 	.word	0x4001e000

00008374 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    8374:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    8376:	4b03      	ldr	r3, [pc, #12]	; (8384 <nvmc_config+0x10>)
    8378:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    837c:	f7ff fff2 	bl	8364 <nvmc_wait>
}
    8380:	bd08      	pop	{r3, pc}
    8382:	bf00      	nop
    8384:	4001e000 	.word	0x4001e000

00008388 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    8388:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    838a:	f006 fbca 	bl	eb22 <nrf52_errata_36>
    838e:	b140      	cbz	r0, 83a2 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    8390:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8394:	2200      	movs	r2, #0
    8396:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    839a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    839e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    83a2:	f006 fbc8 	bl	eb36 <nrf52_errata_66>
    83a6:	2800      	cmp	r0, #0
    83a8:	d046      	beq.n	8438 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    83aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    83ae:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    83b2:	4b3a      	ldr	r3, [pc, #232]	; (849c <SystemInit+0x114>)
    83b4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    83b8:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    83bc:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    83c0:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    83c4:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    83c8:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    83cc:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    83d0:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    83d4:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    83d8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    83dc:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    83e0:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    83e4:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    83e8:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    83ec:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    83f0:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    83f4:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    83f8:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    83fc:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    8400:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    8404:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8408:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    840c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    8410:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    8414:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8418:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    841c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    8420:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    8424:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8428:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    842c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    8430:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    8434:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    8438:	f006 fb87 	bl	eb4a <nrf52_errata_136>
    843c:	b160      	cbz	r0, 8458 <SystemInit+0xd0>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    843e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8442:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8446:	f013 0f01 	tst.w	r3, #1
    844a:	d005      	beq.n	8458 <SystemInit+0xd0>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    844c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8450:	f06f 0201 	mvn.w	r2, #1
    8454:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    nrf52_handle_approtect();
    8458:	f006 fb90 	bl	eb7c <nrf52_handle_approtect>

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    845c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8460:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    8464:	2b00      	cmp	r3, #0
    8466:	db06      	blt.n	8476 <SystemInit+0xee>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    8468:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    846c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    8470:	2b00      	cmp	r3, #0
    8472:	db00      	blt.n	8476 <SystemInit+0xee>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    8474:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    8476:	2001      	movs	r0, #1
    8478:	f7ff ff7c 	bl	8374 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    847c:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    8480:	2512      	movs	r5, #18
    8482:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    8486:	f7ff ff6d 	bl	8364 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    848a:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    848e:	f7ff ff69 	bl	8364 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    8492:	2000      	movs	r0, #0
    8494:	f7ff ff6e 	bl	8374 <nvmc_config>
            NVIC_SystemReset();
    8498:	f7ff ff52 	bl	8340 <__NVIC_SystemReset>
    849c:	4000c000 	.word	0x4000c000

000084a0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    84a0:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    84a2:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    84a4:	fab4 f384 	clz	r3, r4
    84a8:	f1c3 031f 	rsb	r3, r3, #31
    84ac:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    84b0:	2b00      	cmp	r3, #0
    84b2:	db16      	blt.n	84e2 <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    84b4:	2201      	movs	r2, #1
    84b6:	fa02 f303 	lsl.w	r3, r2, r3
    84ba:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    84be:	f3bf 8f5b 	dmb	ish
    84c2:	e850 2f00 	ldrex	r2, [r0]
    84c6:	42a2      	cmp	r2, r4
    84c8:	d104      	bne.n	84d4 <nrfx_flag32_alloc+0x34>
    84ca:	e840 3e00 	strex	lr, r3, [r0]
    84ce:	f1be 0f00 	cmp.w	lr, #0
    84d2:	d1f6      	bne.n	84c2 <nrfx_flag32_alloc+0x22>
    84d4:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    84d8:	d1e3      	bne.n	84a2 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    84da:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    84de:	4802      	ldr	r0, [pc, #8]	; (84e8 <nrfx_flag32_alloc+0x48>)
}
    84e0:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    84e2:	4802      	ldr	r0, [pc, #8]	; (84ec <nrfx_flag32_alloc+0x4c>)
    84e4:	e7fc      	b.n	84e0 <nrfx_flag32_alloc+0x40>
    84e6:	bf00      	nop
    84e8:	0bad0000 	.word	0x0bad0000
    84ec:	0bad0002 	.word	0x0bad0002

000084f0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    84f0:	6803      	ldr	r3, [r0, #0]
    84f2:	40cb      	lsrs	r3, r1
    84f4:	f013 0f01 	tst.w	r3, #1
    84f8:	d115      	bne.n	8526 <nrfx_flag32_free+0x36>
{
    84fa:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    84fc:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    84fe:	2301      	movs	r3, #1
    8500:	408b      	lsls	r3, r1
    8502:	4313      	orrs	r3, r2
    8504:	f3bf 8f5b 	dmb	ish
    8508:	e850 cf00 	ldrex	ip, [r0]
    850c:	4594      	cmp	ip, r2
    850e:	d104      	bne.n	851a <nrfx_flag32_free+0x2a>
    8510:	e840 3e00 	strex	lr, r3, [r0]
    8514:	f1be 0f00 	cmp.w	lr, #0
    8518:	d1f6      	bne.n	8508 <nrfx_flag32_free+0x18>
    851a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    851e:	d1ed      	bne.n	84fc <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    8520:	4802      	ldr	r0, [pc, #8]	; (852c <nrfx_flag32_free+0x3c>)
}
    8522:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    8526:	4802      	ldr	r0, [pc, #8]	; (8530 <nrfx_flag32_free+0x40>)
}
    8528:	4770      	bx	lr
    852a:	bf00      	nop
    852c:	0bad0000 	.word	0x0bad0000
    8530:	0bad0004 	.word	0x0bad0004

00008534 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    8534:	4b05      	ldr	r3, [pc, #20]	; (854c <nrfx_clock_init+0x18>)
    8536:	791b      	ldrb	r3, [r3, #4]
    8538:	b92b      	cbnz	r3, 8546 <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    853a:	4b04      	ldr	r3, [pc, #16]	; (854c <nrfx_clock_init+0x18>)
    853c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    853e:	2201      	movs	r2, #1
    8540:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    8542:	4803      	ldr	r0, [pc, #12]	; (8550 <nrfx_clock_init+0x1c>)
    8544:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    8546:	4803      	ldr	r0, [pc, #12]	; (8554 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    8548:	4770      	bx	lr
    854a:	bf00      	nop
    854c:	20001c40 	.word	0x20001c40
    8550:	0bad0000 	.word	0x0bad0000
    8554:	0bad000c 	.word	0x0bad000c

00008558 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    8558:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    nrfx_power_clock_irq_init();
    855a:	f006 fb48 	bl	ebee <nrfx_power_clock_irq_init>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    855e:	f006 fb44 	bl	ebea <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    8562:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8566:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    856a:	4b02      	ldr	r3, [pc, #8]	; (8574 <nrfx_clock_enable+0x1c>)
    856c:	2201      	movs	r2, #1
    856e:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    8570:	bd08      	pop	{r3, pc}
    8572:	bf00      	nop
    8574:	2000239d 	.word	0x2000239d

00008578 <nrfx_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    8578:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    857a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    857e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    8582:	b163      	cbz	r3, 859e <nrfx_clock_irq_handler+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8584:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8588:	2000      	movs	r0, #0
    858a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    858e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    8592:	2201      	movs	r2, #1
    8594:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    8598:	4b13      	ldr	r3, [pc, #76]	; (85e8 <nrfx_clock_irq_handler+0x70>)
    859a:	681b      	ldr	r3, [r3, #0]
    859c:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    859e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    85a2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    85a6:	b19b      	cbz	r3, 85d0 <nrfx_clock_irq_handler+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    85a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    85ac:	2200      	movs	r2, #0
    85ae:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    85b2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    85b6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    85ba:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    85be:	f012 0f03 	tst.w	r2, #3
    85c2:	d106      	bne.n	85d2 <nrfx_clock_irq_handler+0x5a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    85c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    85c8:	2201      	movs	r2, #1
    85ca:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    85ce:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    85d0:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    85d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    85d6:	2202      	movs	r2, #2
    85d8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    85dc:	4b02      	ldr	r3, [pc, #8]	; (85e8 <nrfx_clock_irq_handler+0x70>)
    85de:	681b      	ldr	r3, [r3, #0]
    85e0:	2001      	movs	r0, #1
    85e2:	4798      	blx	r3
}
    85e4:	e7f4      	b.n	85d0 <nrfx_clock_irq_handler+0x58>
    85e6:	bf00      	nop
    85e8:	20001c40 	.word	0x20001c40

000085ec <nrf_gpio_reconfigure>:
{
    85ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    85ee:	461c      	mov	r4, r3
    85f0:	9f05      	ldr	r7, [sp, #20]
    85f2:	9e06      	ldr	r6, [sp, #24]
    *p_pin = pin_number & 0x1F;
    85f4:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
    85f8:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    85fa:	2801      	cmp	r0, #1
    85fc:	d035      	beq.n	866a <nrf_gpio_reconfigure+0x7e>
        case 0: return NRF_P0;
    85fe:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8602:	f50c 73e0 	add.w	r3, ip, #448	; 0x1c0
    8606:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    860a:	b381      	cbz	r1, 866e <nrf_gpio_reconfigure+0x82>
    860c:	2001      	movs	r0, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    860e:	b382      	cbz	r2, 8672 <nrf_gpio_reconfigure+0x86>
    8610:	f04f 0e02 	mov.w	lr, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    8614:	ea40 000e 	orr.w	r0, r0, lr
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    8618:	b374      	cbz	r4, 8678 <nrf_gpio_reconfigure+0x8c>
    861a:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    861e:	ea40 000e 	orr.w	r0, r0, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    8622:	b367      	cbz	r7, 867e <nrf_gpio_reconfigure+0x92>
    8624:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    8628:	ea40 000e 	orr.w	r0, r0, lr
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    862c:	b356      	cbz	r6, 8684 <nrf_gpio_reconfigure+0x98>
    862e:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    8632:	ea40 000e 	orr.w	r0, r0, lr
    cnf &= ~to_update;
    8636:	ea23 0000 	bic.w	r0, r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    863a:	b331      	cbz	r1, 868a <nrf_gpio_reconfigure+0x9e>
    863c:	780b      	ldrb	r3, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    863e:	b332      	cbz	r2, 868e <nrf_gpio_reconfigure+0xa2>
    8640:	7812      	ldrb	r2, [r2, #0]
    8642:	0052      	lsls	r2, r2, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    8644:	4313      	orrs	r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    8646:	b324      	cbz	r4, 8692 <nrf_gpio_reconfigure+0xa6>
    8648:	7822      	ldrb	r2, [r4, #0]
    864a:	0092      	lsls	r2, r2, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    864c:	4313      	orrs	r3, r2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    864e:	b317      	cbz	r7, 8696 <nrf_gpio_reconfigure+0xaa>
    8650:	783a      	ldrb	r2, [r7, #0]
    8652:	0212      	lsls	r2, r2, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    8654:	4313      	orrs	r3, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    8656:	b306      	cbz	r6, 869a <nrf_gpio_reconfigure+0xae>
    8658:	7832      	ldrb	r2, [r6, #0]
    865a:	0412      	lsls	r2, r2, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    865c:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    865e:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    8660:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
    8664:	f845 302c 	str.w	r3, [r5, ip, lsl #2]
}
    8668:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    866a:	4d0d      	ldr	r5, [pc, #52]	; (86a0 <nrf_gpio_reconfigure+0xb4>)
    866c:	e7c9      	b.n	8602 <nrf_gpio_reconfigure+0x16>
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    866e:	2000      	movs	r0, #0
    8670:	e7cd      	b.n	860e <nrf_gpio_reconfigure+0x22>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    8672:	f04f 0e00 	mov.w	lr, #0
    8676:	e7cd      	b.n	8614 <nrf_gpio_reconfigure+0x28>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    8678:	f04f 0e00 	mov.w	lr, #0
    867c:	e7cf      	b.n	861e <nrf_gpio_reconfigure+0x32>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    867e:	f04f 0e00 	mov.w	lr, #0
    8682:	e7d1      	b.n	8628 <nrf_gpio_reconfigure+0x3c>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    8684:	f04f 0e00 	mov.w	lr, #0
    8688:	e7d3      	b.n	8632 <nrf_gpio_reconfigure+0x46>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    868a:	2300      	movs	r3, #0
    868c:	e7d7      	b.n	863e <nrf_gpio_reconfigure+0x52>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    868e:	2200      	movs	r2, #0
    8690:	e7d8      	b.n	8644 <nrf_gpio_reconfigure+0x58>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    8692:	2200      	movs	r2, #0
    8694:	e7da      	b.n	864c <nrf_gpio_reconfigure+0x60>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    8696:	2200      	movs	r2, #0
    8698:	e7dc      	b.n	8654 <nrf_gpio_reconfigure+0x68>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    869a:	2200      	movs	r2, #0
    869c:	e7de      	b.n	865c <nrf_gpio_reconfigure+0x70>
    869e:	bf00      	nop
    86a0:	50000300 	.word	0x50000300

000086a4 <nrf_gpio_latches_read_and_clear>:
{
    86a4:	b500      	push	{lr}
    86a6:	b083      	sub	sp, #12
    86a8:	4684      	mov	ip, r0
    86aa:	468e      	mov	lr, r1
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    86ac:	4b0d      	ldr	r3, [pc, #52]	; (86e4 <nrf_gpio_latches_read_and_clear+0x40>)
    86ae:	e893 0003 	ldmia.w	r3, {r0, r1}
    86b2:	ab02      	add	r3, sp, #8
    86b4:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    86b8:	4663      	mov	r3, ip
    86ba:	e00b      	b.n	86d4 <nrf_gpio_latches_read_and_clear+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    86bc:	a902      	add	r1, sp, #8
    86be:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    86c2:	f851 1c08 	ldr.w	r1, [r1, #-8]
    86c6:	f8d1 0520 	ldr.w	r0, [r1, #1312]	; 0x520
    86ca:	f842 0b04 	str.w	r0, [r2], #4
        gpio_regs[i]->LATCH = *p_masks;
    86ce:	f8c1 0520 	str.w	r0, [r1, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    86d2:	3301      	adds	r3, #1
    86d4:	eb0c 000e 	add.w	r0, ip, lr
    86d8:	4298      	cmp	r0, r3
    86da:	d8ef      	bhi.n	86bc <nrf_gpio_latches_read_and_clear+0x18>
}
    86dc:	b003      	add	sp, #12
    86de:	f85d fb04 	ldr.w	pc, [sp], #4
    86e2:	bf00      	nop
    86e4:	0000ff48 	.word	0x0000ff48

000086e8 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    86e8:	3008      	adds	r0, #8
    86ea:	4b03      	ldr	r3, [pc, #12]	; (86f8 <pin_in_use+0x10>)
    86ec:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    86f0:	f000 0001 	and.w	r0, r0, #1
    86f4:	4770      	bx	lr
    86f6:	bf00      	nop
    86f8:	2000014c 	.word	0x2000014c

000086fc <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    86fc:	3008      	adds	r0, #8
    86fe:	4b03      	ldr	r3, [pc, #12]	; (870c <pin_in_use_by_te+0x10>)
    8700:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    8704:	f3c0 1040 	ubfx	r0, r0, #5, #1
    8708:	4770      	bx	lr
    870a:	bf00      	nop
    870c:	2000014c 	.word	0x2000014c

00008710 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    8710:	3008      	adds	r0, #8
    8712:	4b04      	ldr	r3, [pc, #16]	; (8724 <pin_has_trigger+0x14>)
    8714:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    8718:	f010 001c 	ands.w	r0, r0, #28
    871c:	bf18      	it	ne
    871e:	2001      	movne	r0, #1
    8720:	4770      	bx	lr
    8722:	bf00      	nop
    8724:	2000014c 	.word	0x2000014c

00008728 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8728:	3008      	adds	r0, #8
    872a:	4b03      	ldr	r3, [pc, #12]	; (8738 <pin_is_output+0x10>)
    872c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    8730:	f3c0 0040 	ubfx	r0, r0, #1, #1
    8734:	4770      	bx	lr
    8736:	bf00      	nop
    8738:	2000014c 	.word	0x2000014c

0000873c <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    873c:	3008      	adds	r0, #8
    873e:	4b02      	ldr	r3, [pc, #8]	; (8748 <pin_te_get+0xc>)
    8740:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    8744:	0b40      	lsrs	r0, r0, #13
    8746:	4770      	bx	lr
    8748:	2000014c 	.word	0x2000014c

0000874c <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    874c:	2200      	movs	r2, #0
    874e:	e004      	b.n	875a <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    8750:	f04f 33ff 	mov.w	r3, #4294967295
    8754:	4283      	cmp	r3, r0
    8756:	d00f      	beq.n	8778 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    8758:	3201      	adds	r2, #1
    875a:	2a29      	cmp	r2, #41	; 0x29
    875c:	d80a      	bhi.n	8774 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    875e:	f102 0308 	add.w	r3, r2, #8
    8762:	4906      	ldr	r1, [pc, #24]	; (877c <handler_in_use+0x30>)
    8764:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    8768:	f413 7f80 	tst.w	r3, #256	; 0x100
    876c:	d0f0      	beq.n	8750 <handler_in_use+0x4>
    876e:	f3c3 2343 	ubfx	r3, r3, #9, #4
    8772:	e7ef      	b.n	8754 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    8774:	2000      	movs	r0, #0
    8776:	4770      	bx	lr
            return true;
    8778:	2001      	movs	r0, #1
}
    877a:	4770      	bx	lr
    877c:	2000014c 	.word	0x2000014c

00008780 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    8780:	2300      	movs	r3, #0
    8782:	b113      	cbz	r3, 878a <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    8784:	f04f 30ff 	mov.w	r0, #4294967295
}
    8788:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    878a:	4a07      	ldr	r2, [pc, #28]	; (87a8 <find_handler+0x28>)
    878c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    8790:	4282      	cmp	r2, r0
    8792:	d001      	beq.n	8798 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    8794:	3301      	adds	r3, #1
    8796:	e7f4      	b.n	8782 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    8798:	4a03      	ldr	r2, [pc, #12]	; (87a8 <find_handler+0x28>)
    879a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    879e:	6852      	ldr	r2, [r2, #4]
    87a0:	428a      	cmp	r2, r1
    87a2:	d1f7      	bne.n	8794 <find_handler+0x14>
            return i;
    87a4:	4618      	mov	r0, r3
    87a6:	4770      	bx	lr
    87a8:	2000014c 	.word	0x2000014c

000087ac <get_initial_sense>:
    return NRFX_SUCCESS;
}

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    87ac:	f100 0208 	add.w	r2, r0, #8
    87b0:	4b0f      	ldr	r3, [pc, #60]	; (87f0 <get_initial_sense+0x44>)
    87b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    87b6:	f3c3 0382 	ubfx	r3, r3, #2, #3
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    87ba:	2b04      	cmp	r3, #4
    87bc:	d012      	beq.n	87e4 <get_initial_sense+0x38>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    87be:	2b05      	cmp	r3, #5
    87c0:	d012      	beq.n	87e8 <get_initial_sense+0x3c>
    *p_pin = pin_number & 0x1F;
    87c2:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    87c6:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    87c8:	2801      	cmp	r0, #1
    87ca:	d009      	beq.n	87e0 <get_initial_sense+0x34>
        case 0: return NRF_P0;
    87cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
    87d0:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    87d4:	40d3      	lsrs	r3, r2
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    87d6:	f013 0f01 	tst.w	r3, #1
    87da:	d007      	beq.n	87ec <get_initial_sense+0x40>
    87dc:	2003      	movs	r0, #3
    87de:	4770      	bx	lr
        case 1: return NRF_P1;
    87e0:	4b04      	ldr	r3, [pc, #16]	; (87f4 <get_initial_sense+0x48>)
    87e2:	e7f5      	b.n	87d0 <get_initial_sense+0x24>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    87e4:	2003      	movs	r0, #3
    87e6:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    87e8:	2002      	movs	r0, #2
    87ea:	4770      	bx	lr
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    87ec:	2002      	movs	r0, #2
    }

    return sense;
}
    87ee:	4770      	bx	lr
    87f0:	2000014c 	.word	0x2000014c
    87f4:	50000300 	.word	0x50000300

000087f8 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    87f8:	3008      	adds	r0, #8
    87fa:	4b06      	ldr	r3, [pc, #24]	; (8814 <channel_handler_get+0x1c>)
    87fc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    8800:	f410 7f80 	tst.w	r0, #256	; 0x100
    8804:	d004      	beq.n	8810 <channel_handler_get+0x18>
    8806:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    880a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    880e:	4770      	bx	lr
        return NULL;
    8810:	2000      	movs	r0, #0
}
    8812:	4770      	bx	lr
    8814:	2000014c 	.word	0x2000014c

00008818 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    8818:	b570      	push	{r4, r5, r6, lr}
    881a:	4604      	mov	r4, r0
    881c:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    881e:	f7ff ffeb 	bl	87f8 <channel_handler_get>

    if (handler)
    8822:	b120      	cbz	r0, 882e <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    8824:	6806      	ldr	r6, [r0, #0]
    8826:	6842      	ldr	r2, [r0, #4]
    8828:	4629      	mov	r1, r5
    882a:	4620      	mov	r0, r4
    882c:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    882e:	4b04      	ldr	r3, [pc, #16]	; (8840 <call_handler+0x28>)
    8830:	689b      	ldr	r3, [r3, #8]
    8832:	b123      	cbz	r3, 883e <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    8834:	4a02      	ldr	r2, [pc, #8]	; (8840 <call_handler+0x28>)
    8836:	68d2      	ldr	r2, [r2, #12]
    8838:	4629      	mov	r1, r5
    883a:	4620      	mov	r0, r4
    883c:	4798      	blx	r3
    }
}
    883e:	bd70      	pop	{r4, r5, r6, pc}
    8840:	2000014c 	.word	0x2000014c

00008844 <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
    8844:	b570      	push	{r4, r5, r6, lr}
    8846:	4606      	mov	r6, r0
    8848:	460c      	mov	r4, r1
    884a:	4615      	mov	r5, r2
    if (is_level(trigger))
    884c:	4608      	mov	r0, r1
    884e:	f006 fae1 	bl	ee14 <is_level>
    8852:	b960      	cbnz	r0, 886e <next_sense_cond_call_handler+0x2a>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    8854:	2d02      	cmp	r5, #2
    8856:	d028      	beq.n	88aa <next_sense_cond_call_handler+0x66>
    8858:	2102      	movs	r1, #2

        nrf_gpio_cfg_sense_set(pin, next_sense);
    885a:	4630      	mov	r0, r6
    885c:	f006 fab2 	bl	edc4 <nrf_gpio_cfg_sense_set>

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    8860:	2c03      	cmp	r4, #3
    8862:	d026      	beq.n	88b2 <next_sense_cond_call_handler+0x6e>
    8864:	2d02      	cmp	r5, #2
    8866:	d022      	beq.n	88ae <next_sense_cond_call_handler+0x6a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    8868:	2d03      	cmp	r5, #3
    886a:	d027      	beq.n	88bc <next_sense_cond_call_handler+0x78>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
    886c:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    886e:	4621      	mov	r1, r4
    8870:	4630      	mov	r0, r6
    8872:	f7ff ffd1 	bl	8818 <call_handler>
    *p_pin = pin_number & 0x1F;
    8876:	f006 031f 	and.w	r3, r6, #31
    return pin_number >> 5;
    887a:	0972      	lsrs	r2, r6, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    887c:	2a01      	cmp	r2, #1
    887e:	d012      	beq.n	88a6 <next_sense_cond_call_handler+0x62>
        case 0: return NRF_P0;
    8880:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    8884:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    8888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    888c:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    8890:	429d      	cmp	r5, r3
    8892:	d1eb      	bne.n	886c <next_sense_cond_call_handler+0x28>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    8894:	2100      	movs	r1, #0
    8896:	4630      	mov	r0, r6
    8898:	f006 fa94 	bl	edc4 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    889c:	4629      	mov	r1, r5
    889e:	4630      	mov	r0, r6
    88a0:	f006 fa90 	bl	edc4 <nrf_gpio_cfg_sense_set>
    88a4:	e7e2      	b.n	886c <next_sense_cond_call_handler+0x28>
        case 1: return NRF_P1;
    88a6:	4a07      	ldr	r2, [pc, #28]	; (88c4 <next_sense_cond_call_handler+0x80>)
    88a8:	e7ec      	b.n	8884 <next_sense_cond_call_handler+0x40>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    88aa:	2103      	movs	r1, #3
    88ac:	e7d5      	b.n	885a <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    88ae:	2c01      	cmp	r4, #1
    88b0:	d1da      	bne.n	8868 <next_sense_cond_call_handler+0x24>
            call_handler(pin, trigger);
    88b2:	4621      	mov	r1, r4
    88b4:	4630      	mov	r0, r6
    88b6:	f7ff ffaf 	bl	8818 <call_handler>
}
    88ba:	e7d7      	b.n	886c <next_sense_cond_call_handler+0x28>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    88bc:	2c02      	cmp	r4, #2
    88be:	d1d5      	bne.n	886c <next_sense_cond_call_handler+0x28>
    88c0:	e7f7      	b.n	88b2 <next_sense_cond_call_handler+0x6e>
    88c2:	bf00      	nop
    88c4:	50000300 	.word	0x50000300

000088c8 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    88c8:	f100 0208 	add.w	r2, r0, #8
    88cc:	4b0e      	ldr	r3, [pc, #56]	; (8908 <release_handler+0x40>)
    88ce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    88d2:	f413 7f80 	tst.w	r3, #256	; 0x100
    88d6:	d016      	beq.n	8906 <release_handler+0x3e>
{
    88d8:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    88da:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    88de:	4610      	mov	r0, r2
    88e0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    88e4:	4a08      	ldr	r2, [pc, #32]	; (8908 <release_handler+0x40>)
    88e6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    88ea:	4620      	mov	r0, r4
    88ec:	f7ff ff2e 	bl	874c <handler_in_use>
    88f0:	b100      	cbz	r0, 88f4 <release_handler+0x2c>
}
    88f2:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    88f4:	4804      	ldr	r0, [pc, #16]	; (8908 <release_handler+0x40>)
    88f6:	2300      	movs	r3, #0
    88f8:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    88fc:	4621      	mov	r1, r4
    88fe:	3068      	adds	r0, #104	; 0x68
    8900:	f7ff fdf6 	bl	84f0 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    8904:	e7f5      	b.n	88f2 <release_handler+0x2a>
    8906:	4770      	bx	lr
    8908:	2000014c 	.word	0x2000014c

0000890c <pin_handler_trigger_uninit>:
{
    890c:	b510      	push	{r4, lr}
    890e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    8910:	f7ff fef4 	bl	86fc <pin_in_use_by_te>
    8914:	b140      	cbz	r0, 8928 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    8916:	4620      	mov	r0, r4
    8918:	f7ff ff10 	bl	873c <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    891c:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    8920:	4b06      	ldr	r3, [pc, #24]	; (893c <pin_handler_trigger_uninit+0x30>)
    8922:	2200      	movs	r2, #0
    8924:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    8928:	4620      	mov	r0, r4
    892a:	f7ff ffcd 	bl	88c8 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    892e:	3408      	adds	r4, #8
    8930:	4b03      	ldr	r3, [pc, #12]	; (8940 <pin_handler_trigger_uninit+0x34>)
    8932:	2200      	movs	r2, #0
    8934:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    8938:	bd10      	pop	{r4, pc}
    893a:	bf00      	nop
    893c:	40006000 	.word	0x40006000
    8940:	2000014c 	.word	0x2000014c

00008944 <pin_handler_set>:
{
    8944:	b570      	push	{r4, r5, r6, lr}
    8946:	b082      	sub	sp, #8
    8948:	4605      	mov	r5, r0
    894a:	460e      	mov	r6, r1
    894c:	4614      	mov	r4, r2
    release_handler(pin);
    894e:	f7ff ffbb 	bl	88c8 <release_handler>
    if (!handler)
    8952:	b326      	cbz	r6, 899e <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    8954:	4621      	mov	r1, r4
    8956:	4630      	mov	r0, r6
    8958:	f7ff ff12 	bl	8780 <find_handler>
    if (handler_id < 0)
    895c:	1e03      	subs	r3, r0, #0
    895e:	db13      	blt.n	8988 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    8960:	4910      	ldr	r1, [pc, #64]	; (89a4 <pin_handler_set+0x60>)
    8962:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    8966:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    896a:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    896c:	f105 0008 	add.w	r0, r5, #8
    8970:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    8974:	025b      	lsls	r3, r3, #9
    8976:	b29b      	uxth	r3, r3
    8978:	4313      	orrs	r3, r2
    897a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    897e:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
    8982:	4809      	ldr	r0, [pc, #36]	; (89a8 <pin_handler_set+0x64>)
}
    8984:	b002      	add	sp, #8
    8986:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    8988:	f10d 0107 	add.w	r1, sp, #7
    898c:	4807      	ldr	r0, [pc, #28]	; (89ac <pin_handler_set+0x68>)
    898e:	f7ff fd87 	bl	84a0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    8992:	4b05      	ldr	r3, [pc, #20]	; (89a8 <pin_handler_set+0x64>)
    8994:	4298      	cmp	r0, r3
    8996:	d1f5      	bne.n	8984 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    8998:	f89d 3007 	ldrb.w	r3, [sp, #7]
    899c:	e7e0      	b.n	8960 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    899e:	4802      	ldr	r0, [pc, #8]	; (89a8 <pin_handler_set+0x64>)
    89a0:	e7f0      	b.n	8984 <pin_handler_set+0x40>
    89a2:	bf00      	nop
    89a4:	2000014c 	.word	0x2000014c
    89a8:	0bad0000 	.word	0x0bad0000
    89ac:	200001b4 	.word	0x200001b4

000089b0 <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
    89b0:	b570      	push	{r4, r5, r6, lr}
    89b2:	b082      	sub	sp, #8
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
    89b4:	466a      	mov	r2, sp
    89b6:	2102      	movs	r1, #2
    89b8:	2000      	movs	r0, #0
    89ba:	f7ff fe73 	bl	86a4 <nrf_gpio_latches_read_and_clear>
    89be:	e040      	b.n	8a42 <port_event_handle+0x92>
    89c0:	4e22      	ldr	r6, [pc, #136]	; (8a4c <port_event_handle+0x9c>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    89c2:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    89c6:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
    89ca:	f3c2 4201 	ubfx	r2, r2, #16, #2
    89ce:	f7ff ff39 	bl	8844 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    89d2:	2301      	movs	r3, #1
    89d4:	40ab      	lsls	r3, r5
    89d6:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
            while (latch[i])
    89da:	ab02      	add	r3, sp, #8
    89dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    89e0:	f853 0c08 	ldr.w	r0, [r3, #-8]
    89e4:	b300      	cbz	r0, 8a28 <port_event_handle+0x78>
                uint32_t pin = NRF_CTZ(latch[i]);
    89e6:	fa90 f0a0 	rbit	r0, r0
    89ea:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    89ee:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    89f2:	f100 0208 	add.w	r2, r0, #8
    89f6:	4b16      	ldr	r3, [pc, #88]	; (8a50 <port_event_handle+0xa0>)
    89f8:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    89fc:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    8a00:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    8a02:	f000 0607 	and.w	r6, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    8a06:	f81d 2005 	ldrb.w	r2, [sp, r5]
    8a0a:	2301      	movs	r3, #1
    8a0c:	40b3      	lsls	r3, r6
    8a0e:	43db      	mvns	r3, r3
    8a10:	b25b      	sxtb	r3, r3
    8a12:	4013      	ands	r3, r2
    8a14:	f80d 3005 	strb.w	r3, [sp, r5]
    *p_pin = pin_number & 0x1F;
    8a18:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
    8a1c:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8a1e:	2b01      	cmp	r3, #1
    8a20:	d0ce      	beq.n	89c0 <port_event_handle+0x10>
        case 0: return NRF_P0;
    8a22:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    8a26:	e7cc      	b.n	89c2 <port_event_handle+0x12>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    8a28:	3401      	adds	r4, #1
    8a2a:	2c01      	cmp	r4, #1
    8a2c:	d9d5      	bls.n	89da <port_event_handle+0x2a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8a2e:	4b09      	ldr	r3, [pc, #36]	; (8a54 <port_event_handle+0xa4>)
    8a30:	2200      	movs	r2, #0
    8a32:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    8a36:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
    8a3a:	4668      	mov	r0, sp
    8a3c:	f006 f9ef 	bl	ee1e <latch_pending_read_and_check>
    8a40:	b108      	cbz	r0, 8a46 <port_event_handle+0x96>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    8a42:	2400      	movs	r4, #0
    8a44:	e7f1      	b.n	8a2a <port_event_handle+0x7a>
}
    8a46:	b002      	add	sp, #8
    8a48:	bd70      	pop	{r4, r5, r6, pc}
    8a4a:	bf00      	nop
    8a4c:	50000300 	.word	0x50000300
    8a50:	2000014c 	.word	0x2000014c
    8a54:	40006000 	.word	0x40006000

00008a58 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    8a58:	b538      	push	{r3, r4, r5, lr}
    8a5a:	4604      	mov	r4, r0
    while (mask)
    8a5c:	e018      	b.n	8a90 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    8a5e:	fa94 f3a4 	rbit	r3, r4
    8a62:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    8a66:	2201      	movs	r2, #1
    8a68:	409a      	lsls	r2, r3
    8a6a:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    8a6e:	4a0a      	ldr	r2, [pc, #40]	; (8a98 <gpiote_evt_handle+0x40>)
    8a70:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    8a74:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    8a78:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    8a7c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    8a80:	f3c0 4001 	ubfx	r0, r0, #16, #2
    8a84:	f006 f9c4 	bl	ee10 <gpiote_polarity_to_trigger>
    8a88:	4601      	mov	r1, r0
    8a8a:	4628      	mov	r0, r5
    8a8c:	f7ff fec4 	bl	8818 <call_handler>
    while (mask)
    8a90:	2c00      	cmp	r4, #0
    8a92:	d1e4      	bne.n	8a5e <gpiote_evt_handle+0x6>
    }
}
    8a94:	bd38      	pop	{r3, r4, r5, pc}
    8a96:	bf00      	nop
    8a98:	40006000 	.word	0x40006000

00008a9c <nrfx_gpiote_input_configure>:
{
    8a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8aa0:	b084      	sub	sp, #16
    8aa2:	4604      	mov	r4, r0
    8aa4:	4615      	mov	r5, r2
    8aa6:	461e      	mov	r6, r3
    if (p_input_config)
    8aa8:	b309      	cbz	r1, 8aee <nrfx_gpiote_input_configure+0x52>
    8aaa:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    8aac:	f006 f99a 	bl	ede4 <pin_is_task_output>
    8ab0:	2800      	cmp	r0, #0
    8ab2:	d13f      	bne.n	8b34 <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    8ab4:	2300      	movs	r3, #0
    8ab6:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    8aba:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    8abe:	9301      	str	r3, [sp, #4]
    8ac0:	9300      	str	r3, [sp, #0]
    8ac2:	463b      	mov	r3, r7
    8ac4:	f10d 020f 	add.w	r2, sp, #15
    8ac8:	f10d 010e 	add.w	r1, sp, #14
    8acc:	4620      	mov	r0, r4
    8ace:	f7ff fd8d 	bl	85ec <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    8ad2:	4a38      	ldr	r2, [pc, #224]	; (8bb4 <nrfx_gpiote_input_configure+0x118>)
    8ad4:	f104 0108 	add.w	r1, r4, #8
    8ad8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    8adc:	f023 0302 	bic.w	r3, r3, #2
    8ae0:	b29b      	uxth	r3, r3
    8ae2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    8ae6:	f043 0301 	orr.w	r3, r3, #1
    8aea:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    8aee:	b1bd      	cbz	r5, 8b20 <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    8af0:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    8af2:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    8af6:	4620      	mov	r0, r4
    8af8:	f7ff fe16 	bl	8728 <pin_is_output>
    8afc:	b1e0      	cbz	r0, 8b38 <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
    8afe:	f1b8 0f00 	cmp.w	r8, #0
    8b02:	d151      	bne.n	8ba8 <nrfx_gpiote_input_configure+0x10c>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    8b04:	4a2b      	ldr	r2, [pc, #172]	; (8bb4 <nrfx_gpiote_input_configure+0x118>)
    8b06:	f104 0108 	add.w	r1, r4, #8
    8b0a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    8b0e:	f023 031c 	bic.w	r3, r3, #28
    8b12:	b29b      	uxth	r3, r3
    8b14:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    8b18:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    8b1c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    8b20:	2e00      	cmp	r6, #0
    8b22:	d045      	beq.n	8bb0 <nrfx_gpiote_input_configure+0x114>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    8b24:	6872      	ldr	r2, [r6, #4]
    8b26:	6831      	ldr	r1, [r6, #0]
    8b28:	4620      	mov	r0, r4
    8b2a:	f7ff ff0b 	bl	8944 <pin_handler_set>
}
    8b2e:	b004      	add	sp, #16
    8b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
    8b34:	4820      	ldr	r0, [pc, #128]	; (8bb8 <nrfx_gpiote_input_configure+0x11c>)
    8b36:	e7fa      	b.n	8b2e <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    8b38:	4a1e      	ldr	r2, [pc, #120]	; (8bb4 <nrfx_gpiote_input_configure+0x118>)
    8b3a:	f104 0108 	add.w	r1, r4, #8
    8b3e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    8b42:	f023 0320 	bic.w	r3, r3, #32
    8b46:	04db      	lsls	r3, r3, #19
    8b48:	0cdb      	lsrs	r3, r3, #19
    8b4a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    8b4e:	f1b8 0f00 	cmp.w	r8, #0
    8b52:	d0d7      	beq.n	8b04 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    8b54:	2f03      	cmp	r7, #3
    8b56:	d829      	bhi.n	8bac <nrfx_gpiote_input_configure+0x110>
                uint8_t ch = *p_trigger_config->p_in_channel;
    8b58:	686b      	ldr	r3, [r5, #4]
    8b5a:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    8b5c:	b937      	cbnz	r7, 8b6c <nrfx_gpiote_input_configure+0xd0>
    p_reg->CONFIG[idx] = 0;
    8b5e:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    8b62:	4b16      	ldr	r3, [pc, #88]	; (8bbc <nrfx_gpiote_input_configure+0x120>)
    8b64:	2200      	movs	r2, #0
    8b66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
#endif
}
    8b6a:	e7cb      	b.n	8b04 <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    8b6c:	4638      	mov	r0, r7
    8b6e:	f006 f950 	bl	ee12 <gpiote_trigger_to_polarity>
    8b72:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    8b74:	4811      	ldr	r0, [pc, #68]	; (8bbc <nrfx_gpiote_input_configure+0x120>)
    8b76:	f505 71a2 	add.w	r1, r5, #324	; 0x144
    8b7a:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    8b7e:	f022 0203 	bic.w	r2, r2, #3
    8b82:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
    8b86:	4622      	mov	r2, r4
    8b88:	4629      	mov	r1, r5
    8b8a:	f006 f8e3 	bl	ed54 <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    8b8e:	4a09      	ldr	r2, [pc, #36]	; (8bb4 <nrfx_gpiote_input_configure+0x118>)
    8b90:	f104 0108 	add.w	r1, r4, #8
    8b94:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    8b98:	036d      	lsls	r5, r5, #13
    8b9a:	b2ad      	uxth	r5, r5
    8b9c:	432b      	orrs	r3, r5
    8b9e:	f043 0320 	orr.w	r3, r3, #32
    8ba2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    8ba6:	e7ad      	b.n	8b04 <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
    8ba8:	4803      	ldr	r0, [pc, #12]	; (8bb8 <nrfx_gpiote_input_configure+0x11c>)
    8baa:	e7c0      	b.n	8b2e <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
    8bac:	4802      	ldr	r0, [pc, #8]	; (8bb8 <nrfx_gpiote_input_configure+0x11c>)
    8bae:	e7be      	b.n	8b2e <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
    8bb0:	4803      	ldr	r0, [pc, #12]	; (8bc0 <nrfx_gpiote_input_configure+0x124>)
    8bb2:	e7bc      	b.n	8b2e <nrfx_gpiote_input_configure+0x92>
    8bb4:	2000014c 	.word	0x2000014c
    8bb8:	0bad0004 	.word	0x0bad0004
    8bbc:	40006000 	.word	0x40006000
    8bc0:	0bad0000 	.word	0x0bad0000

00008bc4 <nrfx_gpiote_output_configure>:
{
    8bc4:	b570      	push	{r4, r5, r6, lr}
    8bc6:	b084      	sub	sp, #16
    8bc8:	4604      	mov	r4, r0
    8bca:	4615      	mov	r5, r2
    if (p_config)
    8bcc:	b329      	cbz	r1, 8c1a <nrfx_gpiote_output_configure+0x56>
    8bce:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    8bd0:	f006 f917 	bl	ee02 <pin_is_input>
    8bd4:	b120      	cbz	r0, 8be0 <nrfx_gpiote_output_configure+0x1c>
    8bd6:	4620      	mov	r0, r4
    8bd8:	f7ff fd90 	bl	86fc <pin_in_use_by_te>
    8bdc:	2800      	cmp	r0, #0
    8bde:	d138      	bne.n	8c52 <nrfx_gpiote_output_configure+0x8e>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    8be0:	4620      	mov	r0, r4
    8be2:	f7ff fd95 	bl	8710 <pin_has_trigger>
    8be6:	b110      	cbz	r0, 8bee <nrfx_gpiote_output_configure+0x2a>
    8be8:	7873      	ldrb	r3, [r6, #1]
    8bea:	2b01      	cmp	r3, #1
    8bec:	d031      	beq.n	8c52 <nrfx_gpiote_output_configure+0x8e>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    8bee:	2301      	movs	r3, #1
    8bf0:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    8bf4:	2300      	movs	r3, #0
    8bf6:	9301      	str	r3, [sp, #4]
    8bf8:	9600      	str	r6, [sp, #0]
    8bfa:	1cb3      	adds	r3, r6, #2
    8bfc:	1c72      	adds	r2, r6, #1
    8bfe:	f10d 010f 	add.w	r1, sp, #15
    8c02:	4620      	mov	r0, r4
    8c04:	f7ff fcf2 	bl	85ec <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    8c08:	4a1f      	ldr	r2, [pc, #124]	; (8c88 <nrfx_gpiote_output_configure+0xc4>)
    8c0a:	f104 0108 	add.w	r1, r4, #8
    8c0e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    8c12:	f043 0303 	orr.w	r3, r3, #3
    8c16:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    8c1a:	b385      	cbz	r5, 8c7e <nrfx_gpiote_output_configure+0xba>
        if (pin_is_input(pin))
    8c1c:	4620      	mov	r0, r4
    8c1e:	f006 f8f0 	bl	ee02 <pin_is_input>
    8c22:	bb70      	cbnz	r0, 8c82 <nrfx_gpiote_output_configure+0xbe>
        uint32_t ch = p_task_config->task_ch;
    8c24:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    8c26:	f506 72a2 	add.w	r2, r6, #324	; 0x144
    8c2a:	4b18      	ldr	r3, [pc, #96]	; (8c8c <nrfx_gpiote_output_configure+0xc8>)
    8c2c:	2100      	movs	r1, #0
    8c2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    8c32:	4a15      	ldr	r2, [pc, #84]	; (8c88 <nrfx_gpiote_output_configure+0xc4>)
    8c34:	f104 0108 	add.w	r1, r4, #8
    8c38:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    8c3c:	f023 0320 	bic.w	r3, r3, #32
    8c40:	04db      	lsls	r3, r3, #19
    8c42:	0cdb      	lsrs	r3, r3, #19
    8c44:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    8c48:	786b      	ldrb	r3, [r5, #1]
    8c4a:	b923      	cbnz	r3, 8c56 <nrfx_gpiote_output_configure+0x92>
    return NRFX_SUCCESS;
    8c4c:	4810      	ldr	r0, [pc, #64]	; (8c90 <nrfx_gpiote_output_configure+0xcc>)
}
    8c4e:	b004      	add	sp, #16
    8c50:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
    8c52:	4810      	ldr	r0, [pc, #64]	; (8c94 <nrfx_gpiote_output_configure+0xd0>)
    8c54:	e7fb      	b.n	8c4e <nrfx_gpiote_output_configure+0x8a>
                                      p_task_config->init_val);
    8c56:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    8c58:	9200      	str	r2, [sp, #0]
    8c5a:	4622      	mov	r2, r4
    8c5c:	4631      	mov	r1, r6
    8c5e:	480b      	ldr	r0, [pc, #44]	; (8c8c <nrfx_gpiote_output_configure+0xc8>)
    8c60:	f006 f891 	bl	ed86 <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    8c64:	4a08      	ldr	r2, [pc, #32]	; (8c88 <nrfx_gpiote_output_configure+0xc4>)
    8c66:	3408      	adds	r4, #8
    8c68:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    8c6c:	0376      	lsls	r6, r6, #13
    8c6e:	b2b6      	uxth	r6, r6
    8c70:	4333      	orrs	r3, r6
    8c72:	f043 0320 	orr.w	r3, r3, #32
    8c76:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    8c7a:	4805      	ldr	r0, [pc, #20]	; (8c90 <nrfx_gpiote_output_configure+0xcc>)
    8c7c:	e7e7      	b.n	8c4e <nrfx_gpiote_output_configure+0x8a>
    8c7e:	4804      	ldr	r0, [pc, #16]	; (8c90 <nrfx_gpiote_output_configure+0xcc>)
    8c80:	e7e5      	b.n	8c4e <nrfx_gpiote_output_configure+0x8a>
            return NRFX_ERROR_INVALID_PARAM;
    8c82:	4804      	ldr	r0, [pc, #16]	; (8c94 <nrfx_gpiote_output_configure+0xd0>)
    8c84:	e7e3      	b.n	8c4e <nrfx_gpiote_output_configure+0x8a>
    8c86:	bf00      	nop
    8c88:	2000014c 	.word	0x2000014c
    8c8c:	40006000 	.word	0x40006000
    8c90:	0bad0000 	.word	0x0bad0000
    8c94:	0bad0004 	.word	0x0bad0004

00008c98 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    8c98:	4b01      	ldr	r3, [pc, #4]	; (8ca0 <nrfx_gpiote_global_callback_set+0x8>)
    8c9a:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    8c9c:	60d9      	str	r1, [r3, #12]
}
    8c9e:	4770      	bx	lr
    8ca0:	2000014c 	.word	0x2000014c

00008ca4 <nrfx_gpiote_channel_get>:
{
    8ca4:	b538      	push	{r3, r4, r5, lr}
    8ca6:	4604      	mov	r4, r0
    8ca8:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    8caa:	f7ff fd27 	bl	86fc <pin_in_use_by_te>
    8cae:	b140      	cbz	r0, 8cc2 <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    8cb0:	f104 0008 	add.w	r0, r4, #8
    8cb4:	4b04      	ldr	r3, [pc, #16]	; (8cc8 <nrfx_gpiote_channel_get+0x24>)
    8cb6:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    8cba:	0b5b      	lsrs	r3, r3, #13
    8cbc:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    8cbe:	4803      	ldr	r0, [pc, #12]	; (8ccc <nrfx_gpiote_channel_get+0x28>)
}
    8cc0:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    8cc2:	4803      	ldr	r0, [pc, #12]	; (8cd0 <nrfx_gpiote_channel_get+0x2c>)
    8cc4:	e7fc      	b.n	8cc0 <nrfx_gpiote_channel_get+0x1c>
    8cc6:	bf00      	nop
    8cc8:	2000014c 	.word	0x2000014c
    8ccc:	0bad0000 	.word	0x0bad0000
    8cd0:	0bad0004 	.word	0x0bad0004

00008cd4 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    8cd4:	4b0f      	ldr	r3, [pc, #60]	; (8d14 <nrfx_gpiote_init+0x40>)
    8cd6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
    8cda:	b10b      	cbz	r3, 8ce0 <nrfx_gpiote_init+0xc>
        return err_code;
    8cdc:	480e      	ldr	r0, [pc, #56]	; (8d18 <nrfx_gpiote_init+0x44>)
}
    8cde:	4770      	bx	lr
{
    8ce0:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    8ce2:	4c0e      	ldr	r4, [pc, #56]	; (8d1c <nrfx_gpiote_init+0x48>)
    8ce4:	2254      	movs	r2, #84	; 0x54
    8ce6:	2100      	movs	r1, #0
    8ce8:	4620      	mov	r0, r4
    8cea:	f005 f896 	bl	de1a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    8cee:	2006      	movs	r0, #6
    8cf0:	f004 ffb2 	bl	dc58 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8cf4:	4b0a      	ldr	r3, [pc, #40]	; (8d20 <nrfx_gpiote_init+0x4c>)
    8cf6:	2200      	movs	r2, #0
    8cf8:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    8cfc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    8d00:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    8d04:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    8d08:	2301      	movs	r3, #1
    8d0a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    8d0e:	65a3      	str	r3, [r4, #88]	; 0x58
    return err_code;
    8d10:	4804      	ldr	r0, [pc, #16]	; (8d24 <nrfx_gpiote_init+0x50>)
}
    8d12:	bd10      	pop	{r4, pc}
    8d14:	2000014c 	.word	0x2000014c
    8d18:	0bad0005 	.word	0x0bad0005
    8d1c:	2000015c 	.word	0x2000015c
    8d20:	40006000 	.word	0x40006000
    8d24:	0bad0000 	.word	0x0bad0000

00008d28 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    8d28:	4b03      	ldr	r3, [pc, #12]	; (8d38 <nrfx_gpiote_is_init+0x10>)
    8d2a:	f893 006c 	ldrb.w	r0, [r3, #108]	; 0x6c
}
    8d2e:	3800      	subs	r0, #0
    8d30:	bf18      	it	ne
    8d32:	2001      	movne	r0, #1
    8d34:	4770      	bx	lr
    8d36:	bf00      	nop
    8d38:	2000014c 	.word	0x2000014c

00008d3c <nrfx_gpiote_channel_free>:
{
    8d3c:	b508      	push	{r3, lr}
    8d3e:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    8d40:	4801      	ldr	r0, [pc, #4]	; (8d48 <nrfx_gpiote_channel_free+0xc>)
    8d42:	f7ff fbd5 	bl	84f0 <nrfx_flag32_free>
}
    8d46:	bd08      	pop	{r3, pc}
    8d48:	200001b0 	.word	0x200001b0

00008d4c <nrfx_gpiote_channel_alloc>:
{
    8d4c:	b508      	push	{r3, lr}
    8d4e:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    8d50:	4801      	ldr	r0, [pc, #4]	; (8d58 <nrfx_gpiote_channel_alloc+0xc>)
    8d52:	f7ff fba5 	bl	84a0 <nrfx_flag32_alloc>
}
    8d56:	bd08      	pop	{r3, pc}
    8d58:	200001b0 	.word	0x200001b0

00008d5c <nrfx_gpiote_trigger_enable>:
{
    8d5c:	b538      	push	{r3, r4, r5, lr}
    8d5e:	4604      	mov	r4, r0
    8d60:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    8d62:	f7ff fccb 	bl	86fc <pin_in_use_by_te>
    8d66:	b300      	cbz	r0, 8daa <nrfx_gpiote_trigger_enable+0x4e>
    8d68:	4620      	mov	r0, r4
    8d6a:	f006 f84a 	bl	ee02 <pin_is_input>
    8d6e:	b1e0      	cbz	r0, 8daa <nrfx_gpiote_trigger_enable+0x4e>
        uint8_t ch = pin_te_get(pin);
    8d70:	4620      	mov	r0, r4
    8d72:	f7ff fce3 	bl	873c <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    8d76:	0083      	lsls	r3, r0, #2
    8d78:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    8d7c:	b29b      	uxth	r3, r3
    8d7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8d82:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8d86:	2200      	movs	r2, #0
    8d88:	601a      	str	r2, [r3, #0]
    8d8a:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    8d8c:	4a0b      	ldr	r2, [pc, #44]	; (8dbc <nrfx_gpiote_trigger_enable+0x60>)
    8d8e:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    8d92:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    8d96:	f043 0301 	orr.w	r3, r3, #1
    8d9a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    8d9e:	b15d      	cbz	r5, 8db8 <nrfx_gpiote_trigger_enable+0x5c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    8da0:	2301      	movs	r3, #1
    8da2:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    8da4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    8da8:	e006      	b.n	8db8 <nrfx_gpiote_trigger_enable+0x5c>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    8daa:	4620      	mov	r0, r4
    8dac:	f7ff fcfe 	bl	87ac <get_initial_sense>
    8db0:	4601      	mov	r1, r0
    8db2:	4620      	mov	r0, r4
    8db4:	f006 f806 	bl	edc4 <nrf_gpio_cfg_sense_set>
}
    8db8:	bd38      	pop	{r3, r4, r5, pc}
    8dba:	bf00      	nop
    8dbc:	40006000 	.word	0x40006000

00008dc0 <nrfx_gpiote_trigger_disable>:
{
    8dc0:	b510      	push	{r4, lr}
    8dc2:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    8dc4:	f7ff fc9a 	bl	86fc <pin_in_use_by_te>
    8dc8:	b1a0      	cbz	r0, 8df4 <nrfx_gpiote_trigger_disable+0x34>
    8dca:	4620      	mov	r0, r4
    8dcc:	f006 f819 	bl	ee02 <pin_is_input>
    8dd0:	b180      	cbz	r0, 8df4 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    8dd2:	4620      	mov	r0, r4
    8dd4:	f7ff fcb2 	bl	873c <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    8dd8:	2201      	movs	r2, #1
    8dda:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    8ddc:	4b08      	ldr	r3, [pc, #32]	; (8e00 <nrfx_gpiote_trigger_disable+0x40>)
    8dde:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    8de2:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    8de6:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    8dea:	f022 0203 	bic.w	r2, r2, #3
    8dee:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    8df2:	e003      	b.n	8dfc <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    8df4:	2100      	movs	r1, #0
    8df6:	4620      	mov	r0, r4
    8df8:	f005 ffe4 	bl	edc4 <nrf_gpio_cfg_sense_set>
}
    8dfc:	bd10      	pop	{r4, pc}
    8dfe:	bf00      	nop
    8e00:	40006000 	.word	0x40006000

00008e04 <nrfx_gpiote_pin_uninit>:
{
    8e04:	b510      	push	{r4, lr}
    8e06:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    8e08:	f7ff fc6e 	bl	86e8 <pin_in_use>
    8e0c:	b908      	cbnz	r0, 8e12 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    8e0e:	480c      	ldr	r0, [pc, #48]	; (8e40 <nrfx_gpiote_pin_uninit+0x3c>)
}
    8e10:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    8e12:	4620      	mov	r0, r4
    8e14:	f7ff ffd4 	bl	8dc0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    8e18:	4620      	mov	r0, r4
    8e1a:	f7ff fd77 	bl	890c <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
    8e1e:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    8e22:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8e24:	2c01      	cmp	r4, #1
    8e26:	d008      	beq.n	8e3a <nrfx_gpiote_pin_uninit+0x36>
        case 0: return NRF_P0;
    8e28:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    8e2c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    8e30:	2102      	movs	r1, #2
    8e32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return NRFX_SUCCESS;
    8e36:	4803      	ldr	r0, [pc, #12]	; (8e44 <nrfx_gpiote_pin_uninit+0x40>)
    8e38:	e7ea      	b.n	8e10 <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
    8e3a:	4a03      	ldr	r2, [pc, #12]	; (8e48 <nrfx_gpiote_pin_uninit+0x44>)
    8e3c:	e7f6      	b.n	8e2c <nrfx_gpiote_pin_uninit+0x28>
    8e3e:	bf00      	nop
    8e40:	0bad0004 	.word	0x0bad0004
    8e44:	0bad0000 	.word	0x0bad0000
    8e48:	50000300 	.word	0x50000300

00008e4c <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    8e4c:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    8e4e:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    8e50:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    8e54:	2100      	movs	r1, #0
    uint32_t status = 0;
    8e56:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    8e58:	e003      	b.n	8e62 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    8e5a:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    8e5c:	3304      	adds	r3, #4
    8e5e:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    8e60:	3101      	adds	r1, #1
    8e62:	2907      	cmp	r1, #7
    8e64:	d814      	bhi.n	8e90 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8e66:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    8e6a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    8e6e:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    8e70:	2a00      	cmp	r2, #0
    8e72:	d0f2      	beq.n	8e5a <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    8e74:	4a0c      	ldr	r2, [pc, #48]	; (8ea8 <nrfx_gpiote_irq_handler+0x5c>)
    8e76:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    8e7a:	4210      	tst	r0, r2
    8e7c:	d0ed      	beq.n	8e5a <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    8e7e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    8e82:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8e86:	2500      	movs	r5, #0
    8e88:	6015      	str	r5, [r2, #0]
    8e8a:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    8e8c:	4304      	orrs	r4, r0
    8e8e:	e7e4      	b.n	8e5a <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8e90:	4b05      	ldr	r3, [pc, #20]	; (8ea8 <nrfx_gpiote_irq_handler+0x5c>)
    8e92:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    8e96:	b91b      	cbnz	r3, 8ea0 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    8e98:	4620      	mov	r0, r4
    8e9a:	f7ff fddd 	bl	8a58 <gpiote_evt_handle>
}
    8e9e:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    8ea0:	f7ff fd86 	bl	89b0 <port_event_handle>
    8ea4:	e7f8      	b.n	8e98 <nrfx_gpiote_irq_handler+0x4c>
    8ea6:	bf00      	nop
    8ea8:	40006000 	.word	0x40006000

00008eac <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    8eac:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    8eae:	4b0b      	ldr	r3, [pc, #44]	; (8edc <nrfx_power_init+0x30>)
    8eb0:	781b      	ldrb	r3, [r3, #0]
    8eb2:	b98b      	cbnz	r3, 8ed8 <nrfx_power_init+0x2c>
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
    8eb4:	7803      	ldrb	r3, [r0, #0]
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    8eb6:	f013 0f01 	tst.w	r3, #1
    8eba:	d00b      	beq.n	8ed4 <nrfx_power_init+0x28>
    8ebc:	2201      	movs	r2, #1
    8ebe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8ec2:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
        *((volatile uint32_t *)0x50004728ul) = 0x1;
    }
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();
    8ec6:	f005 ffbd 	bl	ee44 <nrfx_power_clock_irq_init>

    m_initialized = true;
    8eca:	4b04      	ldr	r3, [pc, #16]	; (8edc <nrfx_power_init+0x30>)
    8ecc:	2201      	movs	r2, #1
    8ece:	701a      	strb	r2, [r3, #0]
    return NRFX_SUCCESS;
    8ed0:	4803      	ldr	r0, [pc, #12]	; (8ee0 <nrfx_power_init+0x34>)
}
    8ed2:	bd08      	pop	{r3, pc}
    8ed4:	2200      	movs	r2, #0
    8ed6:	e7f2      	b.n	8ebe <nrfx_power_init+0x12>
        return NRFX_ERROR_ALREADY_INITIALIZED;
    8ed8:	4802      	ldr	r0, [pc, #8]	; (8ee4 <nrfx_power_init+0x38>)
    8eda:	e7fa      	b.n	8ed2 <nrfx_power_init+0x26>
    8edc:	2000239e 	.word	0x2000239e
    8ee0:	0bad0000 	.word	0x0bad0000
    8ee4:	0bad000c 	.word	0x0bad000c

00008ee8 <nrfx_power_usbevt_uninit>:
                                     NRF_POWER_INT_USBREMOVED_MASK  |
                                     NRF_POWER_INT_USBPWRRDY_MASK);
}

void nrfx_power_usbevt_uninit(void)
{
    8ee8:	b508      	push	{r3, lr}
    nrfx_power_usbevt_disable();
    8eea:	f005 ffbb 	bl	ee64 <nrfx_power_usbevt_disable>
    m_usbevt_handler = NULL;
    8eee:	4b02      	ldr	r3, [pc, #8]	; (8ef8 <nrfx_power_usbevt_uninit+0x10>)
    8ef0:	2200      	movs	r2, #0
    8ef2:	601a      	str	r2, [r3, #0]
}
    8ef4:	bd08      	pop	{r3, pc}
    8ef6:	bf00      	nop
    8ef8:	20001c48 	.word	0x20001c48

00008efc <nrfx_power_usbevt_init>:
{
    8efc:	b510      	push	{r4, lr}
    8efe:	4604      	mov	r4, r0
    nrfx_power_usbevt_uninit();
    8f00:	f7ff fff2 	bl	8ee8 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
    8f04:	6823      	ldr	r3, [r4, #0]
    8f06:	b10b      	cbz	r3, 8f0c <nrfx_power_usbevt_init+0x10>
        m_usbevt_handler = p_config->handler;
    8f08:	4a01      	ldr	r2, [pc, #4]	; (8f10 <nrfx_power_usbevt_init+0x14>)
    8f0a:	6013      	str	r3, [r2, #0]
}
    8f0c:	bd10      	pop	{r4, pc}
    8f0e:	bf00      	nop
    8f10:	20001c48 	.word	0x20001c48

00008f14 <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    8f14:	b510      	push	{r4, lr}
    return p_reg->INTENSET;
    8f16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8f1a:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    8f1e:	f014 0f04 	tst.w	r4, #4
    8f22:	d00c      	beq.n	8f3e <nrfx_power_irq_handler+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8f24:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    if (ret)
    8f28:	b14b      	cbz	r3, 8f3e <nrfx_power_irq_handler+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8f2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8f2e:	2200      	movs	r2, #0
    8f30:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    8f34:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    8f38:	4b30      	ldr	r3, [pc, #192]	; (8ffc <nrfx_power_irq_handler+0xe8>)
    8f3a:	681b      	ldr	r3, [r3, #0]
    8f3c:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    8f3e:	f014 0f20 	tst.w	r4, #32
    8f42:	d00e      	beq.n	8f62 <nrfx_power_irq_handler+0x4e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8f44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8f48:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    if (ret)
    8f4c:	b14b      	cbz	r3, 8f62 <nrfx_power_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8f4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8f52:	2000      	movs	r0, #0
    8f54:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
    8f58:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    8f5c:	4b28      	ldr	r3, [pc, #160]	; (9000 <nrfx_power_irq_handler+0xec>)
    8f5e:	681b      	ldr	r3, [r3, #0]
    8f60:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    8f62:	f014 0f40 	tst.w	r4, #64	; 0x40
    8f66:	d00f      	beq.n	8f88 <nrfx_power_irq_handler+0x74>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8f68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8f6c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    if (ret)
    8f70:	b153      	cbz	r3, 8f88 <nrfx_power_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8f72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8f76:	2200      	movs	r2, #0
    8f78:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    8f7c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    8f80:	4b1f      	ldr	r3, [pc, #124]	; (9000 <nrfx_power_irq_handler+0xec>)
    8f82:	681b      	ldr	r3, [r3, #0]
    8f84:	2001      	movs	r0, #1
    8f86:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    8f88:	f014 0f80 	tst.w	r4, #128	; 0x80
    8f8c:	d00e      	beq.n	8fac <nrfx_power_irq_handler+0x98>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8f8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8f92:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    if (ret)
    8f96:	b14b      	cbz	r3, 8fac <nrfx_power_irq_handler+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8f98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8f9c:	2000      	movs	r0, #0
    8f9e:	f8c3 011c 	str.w	r0, [r3, #284]	; 0x11c
    8fa2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    8fa6:	4b17      	ldr	r3, [pc, #92]	; (9004 <nrfx_power_irq_handler+0xf0>)
    8fa8:	681b      	ldr	r3, [r3, #0]
    8faa:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    8fac:	f414 7f80 	tst.w	r4, #256	; 0x100
    8fb0:	d00f      	beq.n	8fd2 <nrfx_power_irq_handler+0xbe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8fb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8fb6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
    if (ret)
    8fba:	b153      	cbz	r3, 8fd2 <nrfx_power_irq_handler+0xbe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8fbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8fc0:	2200      	movs	r2, #0
    8fc2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    8fc6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    8fca:	4b0e      	ldr	r3, [pc, #56]	; (9004 <nrfx_power_irq_handler+0xf0>)
    8fcc:	681b      	ldr	r3, [r3, #0]
    8fce:	2001      	movs	r0, #1
    8fd0:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    8fd2:	f414 7f00 	tst.w	r4, #512	; 0x200
    8fd6:	d00f      	beq.n	8ff8 <nrfx_power_irq_handler+0xe4>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8fd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8fdc:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    if (ret)
    8fe0:	b153      	cbz	r3, 8ff8 <nrfx_power_irq_handler+0xe4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8fe2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8fe6:	2200      	movs	r2, #0
    8fe8:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    8fec:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    8ff0:	4b04      	ldr	r3, [pc, #16]	; (9004 <nrfx_power_irq_handler+0xf0>)
    8ff2:	681b      	ldr	r3, [r3, #0]
    8ff4:	2002      	movs	r0, #2
    8ff6:	4798      	blx	r3
    }
#endif
}
    8ff8:	bd10      	pop	{r4, pc}
    8ffa:	bf00      	nop
    8ffc:	20001c50 	.word	0x20001c50
    9000:	20001c4c 	.word	0x20001c4c
    9004:	20001c48 	.word	0x20001c48

00009008 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    9008:	b508      	push	{r3, lr}
    900a:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    900c:	4801      	ldr	r0, [pc, #4]	; (9014 <nrfx_ppi_channel_alloc+0xc>)
    900e:	f7ff fa47 	bl	84a0 <nrfx_flag32_alloc>
}
    9012:	bd08      	pop	{r3, pc}
    9014:	200001bc 	.word	0x200001bc

00009018 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    9018:	b500      	push	{lr}
    901a:	b083      	sub	sp, #12
    m_bus_suspend = false;
    901c:	2300      	movs	r3, #0
    901e:	4a07      	ldr	r2, [pc, #28]	; (903c <ev_usbreset_handler+0x24>)
    9020:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    9022:	4a07      	ldr	r2, [pc, #28]	; (9040 <ev_usbreset_handler+0x28>)
    9024:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
    9026:	9301      	str	r3, [sp, #4]
    9028:	2301      	movs	r3, #1
    902a:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    902e:	4b05      	ldr	r3, [pc, #20]	; (9044 <ev_usbreset_handler+0x2c>)
    9030:	681b      	ldr	r3, [r3, #0]
    9032:	a801      	add	r0, sp, #4
    9034:	4798      	blx	r3
}
    9036:	b003      	add	sp, #12
    9038:	f85d fb04 	ldr.w	pc, [sp], #4
    903c:	200023a1 	.word	0x200023a1
    9040:	200023a0 	.word	0x200023a0
    9044:	20001e94 	.word	0x20001e94

00009048 <ev_sof_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }

static void ev_sof_handler(void)
{
    9048:	b500      	push	{lr}
    904a:	b083      	sub	sp, #12
    nrfx_usbd_evt_t evt =  {
    904c:	2300      	movs	r3, #0
    904e:	f88d 3004 	strb.w	r3, [sp, #4]
        (((p_reg->ISOSPLIT) & USBD_ISOSPLIT_SPLIT_Msk) >> USBD_ISOSPLIT_SPLIT_Pos);
}

NRF_STATIC_INLINE uint32_t nrf_usbd_framecntr_get(NRF_USBD_Type const * p_reg)
{
    return p_reg->FRAMECNTR;
    9052:	4b0c      	ldr	r3, [pc, #48]	; (9084 <ev_sof_handler+0x3c>)
    9054:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    9058:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    905c:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    if (size_isoout == 0)
    9060:	b163      	cbz	r3, 907c <ev_sof_handler+0x34>

    /* Process isochronous endpoints */
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    if (nrf_usbd_episoout_size_get(NRF_USBD, NRFX_USBD_EPOUT8) != NRF_USBD_EPISOOUT_NO_DATA)
    {
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    9062:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
    }
    m_ep_ready |= iso_ready_mask;
    9066:	4a08      	ldr	r2, [pc, #32]	; (9088 <ev_sof_handler+0x40>)
    9068:	6813      	ldr	r3, [r2, #0]
    906a:	430b      	orrs	r3, r1
    906c:	6013      	str	r3, [r2, #0]

    m_event_handler(&evt);
    906e:	4b07      	ldr	r3, [pc, #28]	; (908c <ev_sof_handler+0x44>)
    9070:	681b      	ldr	r3, [r3, #0]
    9072:	a801      	add	r0, sp, #4
    9074:	4798      	blx	r3
}
    9076:	b003      	add	sp, #12
    9078:	f85d fb04 	ldr.w	pc, [sp], #4
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    907c:	f44f 7180 	mov.w	r1, #256	; 0x100
    9080:	e7f1      	b.n	9066 <ev_sof_handler+0x1e>
    9082:	bf00      	nop
    9084:	40027000 	.word	0x40027000
    9088:	20001e90 	.word	0x20001e90
    908c:	20001e94 	.word	0x20001e94

00009090 <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    9090:	b510      	push	{r4, lr}
    9092:	b082      	sub	sp, #8
    return p_reg->EVENTCAUSE;
    9094:	4b1e      	ldr	r3, [pc, #120]	; (9110 <ev_usbevent_handler+0x80>)
    9096:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    909a:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    909e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    90a2:	f414 7f80 	tst.w	r4, #256	; 0x100
    90a6:	d00b      	beq.n	90c0 <ev_usbevent_handler+0x30>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    90a8:	4b1a      	ldr	r3, [pc, #104]	; (9114 <ev_usbevent_handler+0x84>)
    90aa:	2201      	movs	r2, #1
    90ac:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    90ae:	2300      	movs	r3, #0
    90b0:	9301      	str	r3, [sp, #4]
    90b2:	2302      	movs	r3, #2
    90b4:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    90b8:	4b17      	ldr	r3, [pc, #92]	; (9118 <ev_usbevent_handler+0x88>)
    90ba:	681b      	ldr	r3, [r3, #0]
    90bc:	a801      	add	r0, sp, #4
    90be:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    90c0:	f414 7f00 	tst.w	r4, #512	; 0x200
    90c4:	d00a      	beq.n	90dc <ev_usbevent_handler+0x4c>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    90c6:	2300      	movs	r3, #0
    90c8:	4a12      	ldr	r2, [pc, #72]	; (9114 <ev_usbevent_handler+0x84>)
    90ca:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
    90cc:	9301      	str	r3, [sp, #4]
    90ce:	2303      	movs	r3, #3
    90d0:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    90d4:	4b10      	ldr	r3, [pc, #64]	; (9118 <ev_usbevent_handler+0x88>)
    90d6:	681b      	ldr	r3, [r3, #0]
    90d8:	a801      	add	r0, sp, #4
    90da:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    90dc:	f414 6f80 	tst.w	r4, #1024	; 0x400
    90e0:	d013      	beq.n	910a <ev_usbevent_handler+0x7a>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    90e2:	4b0c      	ldr	r3, [pc, #48]	; (9114 <ev_usbevent_handler+0x84>)
    90e4:	781b      	ldrb	r3, [r3, #0]
    90e6:	b183      	cbz	r3, 910a <ev_usbevent_handler+0x7a>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    90e8:	2200      	movs	r2, #0
    90ea:	4b0a      	ldr	r3, [pc, #40]	; (9114 <ev_usbevent_handler+0x84>)
    90ec:	701a      	strb	r2, [r3, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    90ee:	4b08      	ldr	r3, [pc, #32]	; (9110 <ev_usbevent_handler+0x80>)
    90f0:	2101      	movs	r1, #1
    90f2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    90f6:	6599      	str	r1, [r3, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    90f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    90fa:	9201      	str	r2, [sp, #4]
    90fc:	2304      	movs	r3, #4
    90fe:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    9102:	4b05      	ldr	r3, [pc, #20]	; (9118 <ev_usbevent_handler+0x88>)
    9104:	681b      	ldr	r3, [r3, #0]
    9106:	a801      	add	r0, sp, #4
    9108:	4798      	blx	r3
        }
    }
}
    910a:	b002      	add	sp, #8
    910c:	bd10      	pop	{r4, pc}
    910e:	bf00      	nop
    9110:	40027000 	.word	0x40027000
    9114:	200023a1 	.word	0x200023a1
    9118:	20001e94 	.word	0x20001e94

0000911c <usbd_errata_171_begin>:
	__asm__ volatile(
    911c:	f04f 0220 	mov.w	r2, #32
    9120:	f3ef 8311 	mrs	r3, BASEPRI
    9124:	f382 8812 	msr	BASEPRI_MAX, r2
    9128:	f3bf 8f6f 	isb	sy
 * @brief Begin errata 171.
 */
static inline void usbd_errata_171_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    912c:	4a0b      	ldr	r2, [pc, #44]	; (915c <usbd_errata_171_begin+0x40>)
    912e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
    9132:	b972      	cbnz	r2, 9152 <usbd_errata_171_begin+0x36>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9134:	4a09      	ldr	r2, [pc, #36]	; (915c <usbd_errata_171_begin+0x40>)
    9136:	f249 3175 	movw	r1, #37749	; 0x9375
    913a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    913e:	20c0      	movs	r0, #192	; 0xc0
    9140:	f8c2 0c14 	str.w	r0, [r2, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9144:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
	__asm__ volatile(
    9148:	f383 8811 	msr	BASEPRI, r3
    914c:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    9150:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    9152:	4a02      	ldr	r2, [pc, #8]	; (915c <usbd_errata_171_begin+0x40>)
    9154:	21c0      	movs	r1, #192	; 0xc0
    9156:	f8c2 1c14 	str.w	r1, [r2, #3092]	; 0xc14
    915a:	e7f5      	b.n	9148 <usbd_errata_171_begin+0x2c>
    915c:	4006e000 	.word	0x4006e000

00009160 <usbd_errata_171_end>:
	__asm__ volatile(
    9160:	f04f 0220 	mov.w	r2, #32
    9164:	f3ef 8311 	mrs	r3, BASEPRI
    9168:	f382 8812 	msr	BASEPRI_MAX, r2
    916c:	f3bf 8f6f 	isb	sy
 * @brief End errata 171.
 */
static inline void usbd_errata_171_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    9170:	4a0b      	ldr	r2, [pc, #44]	; (91a0 <usbd_errata_171_end+0x40>)
    9172:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
    9176:	b972      	cbnz	r2, 9196 <usbd_errata_171_end+0x36>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9178:	4a09      	ldr	r2, [pc, #36]	; (91a0 <usbd_errata_171_end+0x40>)
    917a:	f249 3175 	movw	r1, #37749	; 0x9375
    917e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    9182:	2000      	movs	r0, #0
    9184:	f8c2 0c14 	str.w	r0, [r2, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9188:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
	__asm__ volatile(
    918c:	f383 8811 	msr	BASEPRI, r3
    9190:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    9194:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    9196:	4a02      	ldr	r2, [pc, #8]	; (91a0 <usbd_errata_171_end+0x40>)
    9198:	2100      	movs	r1, #0
    919a:	f8c2 1c14 	str.w	r1, [r2, #3092]	; 0xc14
    919e:	e7f5      	b.n	918c <usbd_errata_171_end+0x2c>
    91a0:	4006e000 	.word	0x4006e000

000091a4 <usbd_errata_187_211_begin>:
	__asm__ volatile(
    91a4:	f04f 0220 	mov.w	r2, #32
    91a8:	f3ef 8311 	mrs	r3, BASEPRI
    91ac:	f382 8812 	msr	BASEPRI_MAX, r2
    91b0:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    91b4:	4a0b      	ldr	r2, [pc, #44]	; (91e4 <usbd_errata_187_211_begin+0x40>)
    91b6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
    91ba:	b972      	cbnz	r2, 91da <usbd_errata_187_211_begin+0x36>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    91bc:	4a09      	ldr	r2, [pc, #36]	; (91e4 <usbd_errata_187_211_begin+0x40>)
    91be:	f249 3175 	movw	r1, #37749	; 0x9375
    91c2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    91c6:	2003      	movs	r0, #3
    91c8:	f8c2 0d14 	str.w	r0, [r2, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    91cc:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
	__asm__ volatile(
    91d0:	f383 8811 	msr	BASEPRI, r3
    91d4:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    91d8:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    91da:	4a02      	ldr	r2, [pc, #8]	; (91e4 <usbd_errata_187_211_begin+0x40>)
    91dc:	2103      	movs	r1, #3
    91de:	f8c2 1d14 	str.w	r1, [r2, #3348]	; 0xd14
    91e2:	e7f5      	b.n	91d0 <usbd_errata_187_211_begin+0x2c>
    91e4:	4006e000 	.word	0x4006e000

000091e8 <usbd_errata_187_211_end>:
	__asm__ volatile(
    91e8:	f04f 0220 	mov.w	r2, #32
    91ec:	f3ef 8311 	mrs	r3, BASEPRI
    91f0:	f382 8812 	msr	BASEPRI_MAX, r2
    91f4:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    91f8:	4a0b      	ldr	r2, [pc, #44]	; (9228 <usbd_errata_187_211_end+0x40>)
    91fa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
    91fe:	b972      	cbnz	r2, 921e <usbd_errata_187_211_end+0x36>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9200:	4a09      	ldr	r2, [pc, #36]	; (9228 <usbd_errata_187_211_end+0x40>)
    9202:	f249 3175 	movw	r1, #37749	; 0x9375
    9206:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    920a:	2000      	movs	r0, #0
    920c:	f8c2 0d14 	str.w	r0, [r2, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9210:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
	__asm__ volatile(
    9214:	f383 8811 	msr	BASEPRI, r3
    9218:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    921c:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    921e:	4a02      	ldr	r2, [pc, #8]	; (9228 <usbd_errata_187_211_end+0x40>)
    9220:	2100      	movs	r1, #0
    9222:	f8c2 1d14 	str.w	r1, [r2, #3348]	; 0xd14
    9226:	e7f5      	b.n	9214 <usbd_errata_187_211_end+0x2c>
    9228:	4006e000 	.word	0x4006e000

0000922c <usbd_enable>:

/**
 * @brief Enable USBD peripheral.
 */
static void usbd_enable(void)
{
    922c:	b510      	push	{r4, lr}
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    922e:	f005 fe6c 	bl	ef0a <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    9232:	b9d8      	cbnz	r0, 926c <usbd_enable+0x40>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
    9234:	f005 fe67 	bl	ef06 <nrf52_errata_171>
    {
        usbd_errata_187_211_begin();
    }

    if (nrfx_usbd_errata_171())
    9238:	4604      	mov	r4, r0
    923a:	b9d0      	cbnz	r0, 9272 <usbd_enable+0x46>
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    923c:	4b11      	ldr	r3, [pc, #68]	; (9284 <usbd_enable+0x58>)
    923e:	2201      	movs	r2, #1
    9240:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    9244:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    9248:	4b0e      	ldr	r3, [pc, #56]	; (9284 <usbd_enable+0x58>)
    924a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    924e:	f413 6f00 	tst.w	r3, #2048	; 0x800
    9252:	d0f9      	beq.n	9248 <usbd_enable+0x1c>
    p_reg->EVENTCAUSE = flags;
    9254:	4b0b      	ldr	r3, [pc, #44]	; (9284 <usbd_enable+0x58>)
    9256:	f44f 6200 	mov.w	r2, #2048	; 0x800
    925a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    925e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    nrf_usbd_enable(NRF_USBD);

    /* Waiting for peripheral to enable, this should take a few us */
    usbd_eventcause_wait_and_clear(NRF_USBD_EVENTCAUSE_READY_MASK);

    if (nrfx_usbd_errata_171())
    9262:	b94c      	cbnz	r4, 9278 <usbd_enable+0x4c>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    9264:	f005 fe51 	bl	ef0a <nrf52_errata_187>
    {
        usbd_errata_171_end();
    }

    if (nrfx_usbd_errata_187())
    9268:	b948      	cbnz	r0, 927e <usbd_enable+0x52>
    {
        usbd_errata_187_211_end();
    }
}
    926a:	bd10      	pop	{r4, pc}
        usbd_errata_187_211_begin();
    926c:	f7ff ff9a 	bl	91a4 <usbd_errata_187_211_begin>
    9270:	e7e0      	b.n	9234 <usbd_enable+0x8>
        usbd_errata_171_begin();
    9272:	f7ff ff53 	bl	911c <usbd_errata_171_begin>
    9276:	e7e1      	b.n	923c <usbd_enable+0x10>
        usbd_errata_171_end();
    9278:	f7ff ff72 	bl	9160 <usbd_errata_171_end>
    927c:	e7f2      	b.n	9264 <usbd_enable+0x38>
        usbd_errata_187_211_end();
    927e:	f7ff ffb3 	bl	91e8 <usbd_errata_187_211_end>
}
    9282:	e7f2      	b.n	926a <usbd_enable+0x3e>
    9284:	40027000 	.word	0x40027000

00009288 <nrf_usbd_epin_dma_handler>:
{
    9288:	b510      	push	{r4, lr}
    928a:	4604      	mov	r4, r0
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    928c:	f005 fe47 	bl	ef1e <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9290:	b118      	cbz	r0, 929a <nrf_usbd_epin_dma_handler+0x12>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9292:	4b21      	ldr	r3, [pc, #132]	; (9318 <nrf_usbd_epin_dma_handler+0x90>)
    9294:	2200      	movs	r2, #0
    9296:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = false;
    929a:	4b20      	ldr	r3, [pc, #128]	; (931c <nrf_usbd_epin_dma_handler+0x94>)
    929c:	2200      	movs	r2, #0
    929e:	701a      	strb	r2, [r3, #0]
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    92a0:	b262      	sxtb	r2, r4
    92a2:	2a00      	cmp	r2, #0
    92a4:	db1e      	blt.n	92e4 <nrf_usbd_epin_dma_handler+0x5c>
    92a6:	4b1e      	ldr	r3, [pc, #120]	; (9320 <nrf_usbd_epin_dma_handler+0x98>)
    92a8:	f004 000f 	and.w	r0, r4, #15
    92ac:	0104      	lsls	r4, r0, #4
    92ae:	eb03 1100 	add.w	r1, r3, r0, lsl #4
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    92b2:	7b89      	ldrb	r1, [r1, #14]
    92b4:	2903      	cmp	r1, #3
    92b6:	d017      	beq.n	92e8 <nrf_usbd_epin_dma_handler+0x60>
    else if (p_state->handler.feeder == NULL)
    92b8:	591b      	ldr	r3, [r3, r4]
    92ba:	bb43      	cbnz	r3, 930e <nrf_usbd_epin_dma_handler+0x86>
    return NRFX_USBD_EP_BITPOS(ep);
    92bc:	2a00      	cmp	r2, #0
    92be:	db29      	blt.n	9314 <nrf_usbd_epin_dma_handler+0x8c>
    92c0:	2210      	movs	r2, #16
    92c2:	4402      	add	r2, r0
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    92c4:	2301      	movs	r3, #1
    92c6:	4093      	lsls	r3, r2
    92c8:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    92ca:	4a16      	ldr	r2, [pc, #88]	; (9324 <nrf_usbd_epin_dma_handler+0x9c>)
    92cc:	f3bf 8f5b 	dmb	ish
    92d0:	e852 0f00 	ldrex	r0, [r2]
    92d4:	4018      	ands	r0, r3
    92d6:	e842 0100 	strex	r1, r0, [r2]
    92da:	2900      	cmp	r1, #0
    92dc:	d1f8      	bne.n	92d0 <nrf_usbd_epin_dma_handler+0x48>
    92de:	f3bf 8f5b 	dmb	ish
}
    92e2:	e014      	b.n	930e <nrf_usbd_epin_dma_handler+0x86>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    92e4:	4b10      	ldr	r3, [pc, #64]	; (9328 <nrf_usbd_epin_dma_handler+0xa0>)
    92e6:	e7df      	b.n	92a8 <nrf_usbd_epin_dma_handler+0x20>
    return NRFX_USBD_EP_BITPOS(ep);
    92e8:	2a00      	cmp	r2, #0
    92ea:	db11      	blt.n	9310 <nrf_usbd_epin_dma_handler+0x88>
    92ec:	2210      	movs	r2, #16
    92ee:	4402      	add	r2, r0
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    92f0:	2301      	movs	r3, #1
    92f2:	4093      	lsls	r3, r2
    92f4:	43db      	mvns	r3, r3
    92f6:	4a0b      	ldr	r2, [pc, #44]	; (9324 <nrf_usbd_epin_dma_handler+0x9c>)
    92f8:	f3bf 8f5b 	dmb	ish
    92fc:	e852 0f00 	ldrex	r0, [r2]
    9300:	4018      	ands	r0, r3
    9302:	e842 0100 	strex	r1, r0, [r2]
    9306:	2900      	cmp	r1, #0
    9308:	d1f8      	bne.n	92fc <nrf_usbd_epin_dma_handler+0x74>
    930a:	f3bf 8f5b 	dmb	ish
}
    930e:	bd10      	pop	{r4, pc}
    return NRFX_USBD_EP_BITPOS(ep);
    9310:	2200      	movs	r2, #0
    9312:	e7ec      	b.n	92ee <nrf_usbd_epin_dma_handler+0x66>
    9314:	2200      	movs	r2, #0
    9316:	e7d4      	b.n	92c2 <nrf_usbd_epin_dma_handler+0x3a>
    9318:	40027000 	.word	0x40027000
    931c:	2000239f 	.word	0x2000239f
    9320:	20001d6c 	.word	0x20001d6c
    9324:	20001e8c 	.word	0x20001e8c
    9328:	20001dfc 	.word	0x20001dfc

0000932c <nrf_usbd_ep0in_dma_handler>:
{
    932c:	b508      	push	{r3, lr}
    932e:	f005 fdf6 	bl	ef1e <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9332:	b118      	cbz	r0, 933c <nrf_usbd_ep0in_dma_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9334:	4b16      	ldr	r3, [pc, #88]	; (9390 <nrf_usbd_ep0in_dma_handler+0x64>)
    9336:	2200      	movs	r2, #0
    9338:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = false;
    933c:	4b15      	ldr	r3, [pc, #84]	; (9394 <nrf_usbd_ep0in_dma_handler+0x68>)
    933e:	2200      	movs	r2, #0
    9340:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9342:	4b15      	ldr	r3, [pc, #84]	; (9398 <nrf_usbd_ep0in_dma_handler+0x6c>)
    9344:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
    9348:	2b03      	cmp	r3, #3
    934a:	d004      	beq.n	9356 <nrf_usbd_ep0in_dma_handler+0x2a>
    else if (p_state->handler.feeder == NULL)
    934c:	4b12      	ldr	r3, [pc, #72]	; (9398 <nrf_usbd_ep0in_dma_handler+0x6c>)
    934e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    9352:	b173      	cbz	r3, 9372 <nrf_usbd_ep0in_dma_handler+0x46>
}
    9354:	bd08      	pop	{r3, pc}
    9356:	4b11      	ldr	r3, [pc, #68]	; (939c <nrf_usbd_ep0in_dma_handler+0x70>)
    9358:	f3bf 8f5b 	dmb	ish
    935c:	e853 1f00 	ldrex	r1, [r3]
    9360:	f021 0101 	bic.w	r1, r1, #1
    9364:	e843 1200 	strex	r2, r1, [r3]
    9368:	2a00      	cmp	r2, #0
    936a:	d1f7      	bne.n	935c <nrf_usbd_ep0in_dma_handler+0x30>
    936c:	f3bf 8f5b 	dmb	ish
    9370:	e7f0      	b.n	9354 <nrf_usbd_ep0in_dma_handler+0x28>
    9372:	4b0a      	ldr	r3, [pc, #40]	; (939c <nrf_usbd_ep0in_dma_handler+0x70>)
    9374:	f3bf 8f5b 	dmb	ish
    9378:	e853 1f00 	ldrex	r1, [r3]
    937c:	f021 0101 	bic.w	r1, r1, #1
    9380:	e843 1200 	strex	r2, r1, [r3]
    9384:	2a00      	cmp	r2, #0
    9386:	d1f7      	bne.n	9378 <nrf_usbd_ep0in_dma_handler+0x4c>
    9388:	f3bf 8f5b 	dmb	ish
    938c:	e7e2      	b.n	9354 <nrf_usbd_ep0in_dma_handler+0x28>
    938e:	bf00      	nop
    9390:	40027000 	.word	0x40027000
    9394:	2000239f 	.word	0x2000239f
    9398:	20001d6c 	.word	0x20001d6c
    939c:	20001e8c 	.word	0x20001e8c

000093a0 <usbd_ep_data_handler>:
{
    93a0:	b530      	push	{r4, r5, lr}
    93a2:	b083      	sub	sp, #12
    93a4:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    93a6:	2501      	movs	r5, #1
    93a8:	408d      	lsls	r5, r1
    93aa:	4a1f      	ldr	r2, [pc, #124]	; (9428 <usbd_ep_data_handler+0x88>)
    93ac:	6813      	ldr	r3, [r2, #0]
    93ae:	432b      	orrs	r3, r5
    93b0:	6013      	str	r3, [r2, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    93b2:	f010 0f80 	tst.w	r0, #128	; 0x80
    93b6:	d111      	bne.n	93dc <usbd_ep_data_handler+0x3c>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    93b8:	4b1c      	ldr	r3, [pc, #112]	; (942c <usbd_ep_data_handler+0x8c>)
    93ba:	681b      	ldr	r3, [r3, #0]
    93bc:	421d      	tst	r5, r3
    93be:	d10b      	bne.n	93d8 <usbd_ep_data_handler+0x38>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    93c0:	2306      	movs	r3, #6
    93c2:	f88d 3004 	strb.w	r3, [sp, #4]
    93c6:	f88d 0006 	strb.w	r0, [sp, #6]
    93ca:	2301      	movs	r3, #1
    93cc:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    93d0:	4b17      	ldr	r3, [pc, #92]	; (9430 <usbd_ep_data_handler+0x90>)
    93d2:	681b      	ldr	r3, [r3, #0]
    93d4:	a801      	add	r0, sp, #4
    93d6:	4798      	blx	r3
}
    93d8:	b003      	add	sp, #12
    93da:	bd30      	pop	{r4, r5, pc}
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    93dc:	f000 030f 	and.w	r3, r0, #15
    93e0:	4a14      	ldr	r2, [pc, #80]	; (9434 <usbd_ep_data_handler+0x94>)
    93e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    93e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    93ea:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    93ee:	681a      	ldr	r2, [r3, #0]
    if (ret)
    93f0:	b132      	cbz	r2, 9400 <usbd_ep_data_handler+0x60>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    93f2:	2200      	movs	r2, #0
    93f4:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    93f6:	681b      	ldr	r3, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
    93f8:	2880      	cmp	r0, #128	; 0x80
    93fa:	d012      	beq.n	9422 <usbd_ep_data_handler+0x82>
                nrf_usbd_epin_dma_handler(ep);
    93fc:	f7ff ff44 	bl	9288 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    9400:	4b0a      	ldr	r3, [pc, #40]	; (942c <usbd_ep_data_handler+0x8c>)
    9402:	681b      	ldr	r3, [r3, #0]
    9404:	421d      	tst	r5, r3
    9406:	d1e7      	bne.n	93d8 <usbd_ep_data_handler+0x38>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9408:	2306      	movs	r3, #6
    940a:	f88d 3004 	strb.w	r3, [sp, #4]
    940e:	f88d 4006 	strb.w	r4, [sp, #6]
    9412:	2300      	movs	r3, #0
    9414:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    9418:	4b05      	ldr	r3, [pc, #20]	; (9430 <usbd_ep_data_handler+0x90>)
    941a:	681b      	ldr	r3, [r3, #0]
    941c:	a801      	add	r0, sp, #4
    941e:	4798      	blx	r3
    9420:	e7da      	b.n	93d8 <usbd_ep_data_handler+0x38>
                nrf_usbd_ep0in_dma_handler();
    9422:	f7ff ff83 	bl	932c <nrf_usbd_ep0in_dma_handler>
    9426:	e7eb      	b.n	9400 <usbd_ep_data_handler+0x60>
    9428:	20001e90 	.word	0x20001e90
    942c:	20001e8c 	.word	0x20001e8c
    9430:	20001e94 	.word	0x20001e94
    9434:	000110d8 	.word	0x000110d8

00009438 <ev_setup_data_handler>:
{
    9438:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    943a:	4b07      	ldr	r3, [pc, #28]	; (9458 <ev_setup_data_handler+0x20>)
    943c:	7818      	ldrb	r0, [r3, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    943e:	f993 3000 	ldrsb.w	r3, [r3]
    9442:	2b00      	cmp	r3, #0
    9444:	db06      	blt.n	9454 <ev_setup_data_handler+0x1c>
    9446:	2310      	movs	r3, #16
    9448:	f000 010f 	and.w	r1, r0, #15
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    944c:	4419      	add	r1, r3
    944e:	f7ff ffa7 	bl	93a0 <usbd_ep_data_handler>
}
    9452:	bd08      	pop	{r3, pc}
    return NRFX_USBD_EP_BITPOS(ep);
    9454:	2300      	movs	r3, #0
    9456:	e7f7      	b.n	9448 <ev_setup_data_handler+0x10>
    9458:	200023a0 	.word	0x200023a0

0000945c <nrf_usbd_epoutiso_dma_handler>:
{
    945c:	b510      	push	{r4, lr}
    945e:	b082      	sub	sp, #8
    9460:	4604      	mov	r4, r0
    9462:	f005 fd5c 	bl	ef1e <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9466:	b118      	cbz	r0, 9470 <nrf_usbd_epoutiso_dma_handler+0x14>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9468:	4b1c      	ldr	r3, [pc, #112]	; (94dc <nrf_usbd_epoutiso_dma_handler+0x80>)
    946a:	2200      	movs	r2, #0
    946c:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = false;
    9470:	4b1b      	ldr	r3, [pc, #108]	; (94e0 <nrf_usbd_epoutiso_dma_handler+0x84>)
    9472:	2200      	movs	r2, #0
    9474:	701a      	strb	r2, [r3, #0]
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9476:	b261      	sxtb	r1, r4
    9478:	4291      	cmp	r1, r2
    947a:	db2d      	blt.n	94d8 <nrf_usbd_epoutiso_dma_handler+0x7c>
    947c:	4a19      	ldr	r2, [pc, #100]	; (94e4 <nrf_usbd_epoutiso_dma_handler+0x88>)
    947e:	f004 030f 	and.w	r3, r4, #15
    9482:	ea4f 1c03 	mov.w	ip, r3, lsl #4
    9486:	eb02 1003 	add.w	r0, r2, r3, lsl #4
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    948a:	7b80      	ldrb	r0, [r0, #14]
    948c:	2803      	cmp	r0, #3
    948e:	d021      	beq.n	94d4 <nrf_usbd_epoutiso_dma_handler+0x78>
    else if (p_state->handler.consumer == NULL)
    9490:	f852 200c 	ldr.w	r2, [r2, ip]
    9494:	b9f2      	cbnz	r2, 94d4 <nrf_usbd_epoutiso_dma_handler+0x78>
    return NRFX_USBD_EP_BITPOS(ep);
    9496:	2900      	cmp	r1, #0
    9498:	db00      	blt.n	949c <nrf_usbd_epoutiso_dma_handler+0x40>
    949a:	2210      	movs	r2, #16
    949c:	441a      	add	r2, r3
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    949e:	2301      	movs	r3, #1
    94a0:	4093      	lsls	r3, r2
    94a2:	43db      	mvns	r3, r3
    94a4:	4a10      	ldr	r2, [pc, #64]	; (94e8 <nrf_usbd_epoutiso_dma_handler+0x8c>)
    94a6:	f3bf 8f5b 	dmb	ish
    94aa:	e852 0f00 	ldrex	r0, [r2]
    94ae:	4018      	ands	r0, r3
    94b0:	e842 0100 	strex	r1, r0, [r2]
    94b4:	2900      	cmp	r1, #0
    94b6:	d1f8      	bne.n	94aa <nrf_usbd_epoutiso_dma_handler+0x4e>
    94b8:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    94bc:	2306      	movs	r3, #6
    94be:	f88d 3004 	strb.w	r3, [sp, #4]
    94c2:	f88d 4006 	strb.w	r4, [sp, #6]
    94c6:	2300      	movs	r3, #0
    94c8:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    94cc:	4b07      	ldr	r3, [pc, #28]	; (94ec <nrf_usbd_epoutiso_dma_handler+0x90>)
    94ce:	681b      	ldr	r3, [r3, #0]
    94d0:	a801      	add	r0, sp, #4
    94d2:	4798      	blx	r3
}
    94d4:	b002      	add	sp, #8
    94d6:	bd10      	pop	{r4, pc}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    94d8:	4a05      	ldr	r2, [pc, #20]	; (94f0 <nrf_usbd_epoutiso_dma_handler+0x94>)
    94da:	e7d0      	b.n	947e <nrf_usbd_epoutiso_dma_handler+0x22>
    94dc:	40027000 	.word	0x40027000
    94e0:	2000239f 	.word	0x2000239f
    94e4:	20001d6c 	.word	0x20001d6c
    94e8:	20001e8c 	.word	0x20001e8c
    94ec:	20001e94 	.word	0x20001e94
    94f0:	20001dfc 	.word	0x20001dfc

000094f4 <nrf_usbd_epiniso_dma_handler>:
{
    94f4:	b510      	push	{r4, lr}
    94f6:	b082      	sub	sp, #8
    94f8:	4604      	mov	r4, r0
    94fa:	f005 fd10 	bl	ef1e <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    94fe:	b118      	cbz	r0, 9508 <nrf_usbd_epiniso_dma_handler+0x14>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9500:	4b27      	ldr	r3, [pc, #156]	; (95a0 <nrf_usbd_epiniso_dma_handler+0xac>)
    9502:	2200      	movs	r2, #0
    9504:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = false;
    9508:	4b26      	ldr	r3, [pc, #152]	; (95a4 <nrf_usbd_epiniso_dma_handler+0xb0>)
    950a:	2200      	movs	r2, #0
    950c:	701a      	strb	r2, [r3, #0]
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    950e:	b261      	sxtb	r1, r4
    9510:	4291      	cmp	r1, r2
    9512:	db2c      	blt.n	956e <nrf_usbd_epiniso_dma_handler+0x7a>
    9514:	4a24      	ldr	r2, [pc, #144]	; (95a8 <nrf_usbd_epiniso_dma_handler+0xb4>)
    9516:	f004 030f 	and.w	r3, r4, #15
    951a:	ea4f 1c03 	mov.w	ip, r3, lsl #4
    951e:	eb02 1003 	add.w	r0, r2, r3, lsl #4
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9522:	7b80      	ldrb	r0, [r0, #14]
    9524:	2803      	cmp	r0, #3
    9526:	d024      	beq.n	9572 <nrf_usbd_epiniso_dma_handler+0x7e>
    else if (p_state->handler.feeder == NULL)
    9528:	f852 200c 	ldr.w	r2, [r2, ip]
    952c:	bba2      	cbnz	r2, 9598 <nrf_usbd_epiniso_dma_handler+0xa4>
    return NRFX_USBD_EP_BITPOS(ep);
    952e:	2900      	cmp	r1, #0
    9530:	db00      	blt.n	9534 <nrf_usbd_epiniso_dma_handler+0x40>
    9532:	2210      	movs	r2, #16
    9534:	441a      	add	r2, r3
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9536:	2301      	movs	r3, #1
    9538:	4093      	lsls	r3, r2
    953a:	43db      	mvns	r3, r3
    953c:	4a1b      	ldr	r2, [pc, #108]	; (95ac <nrf_usbd_epiniso_dma_handler+0xb8>)
    953e:	f3bf 8f5b 	dmb	ish
    9542:	e852 0f00 	ldrex	r0, [r2]
    9546:	4018      	ands	r0, r3
    9548:	e842 0100 	strex	r1, r0, [r2]
    954c:	2900      	cmp	r1, #0
    954e:	d1f8      	bne.n	9542 <nrf_usbd_epiniso_dma_handler+0x4e>
    9550:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9554:	2306      	movs	r3, #6
    9556:	f88d 3004 	strb.w	r3, [sp, #4]
    955a:	f88d 4006 	strb.w	r4, [sp, #6]
    955e:	2300      	movs	r3, #0
    9560:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    9564:	4b12      	ldr	r3, [pc, #72]	; (95b0 <nrf_usbd_epiniso_dma_handler+0xbc>)
    9566:	681b      	ldr	r3, [r3, #0]
    9568:	a801      	add	r0, sp, #4
    956a:	4798      	blx	r3
}
    956c:	e014      	b.n	9598 <nrf_usbd_epiniso_dma_handler+0xa4>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    956e:	4a11      	ldr	r2, [pc, #68]	; (95b4 <nrf_usbd_epiniso_dma_handler+0xc0>)
    9570:	e7d1      	b.n	9516 <nrf_usbd_epiniso_dma_handler+0x22>
    return NRFX_USBD_EP_BITPOS(ep);
    9572:	2900      	cmp	r1, #0
    9574:	db12      	blt.n	959c <nrf_usbd_epiniso_dma_handler+0xa8>
    9576:	2210      	movs	r2, #16
    9578:	441a      	add	r2, r3
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    957a:	2301      	movs	r3, #1
    957c:	4093      	lsls	r3, r2
    957e:	43db      	mvns	r3, r3
    9580:	4a0a      	ldr	r2, [pc, #40]	; (95ac <nrf_usbd_epiniso_dma_handler+0xb8>)
    9582:	f3bf 8f5b 	dmb	ish
    9586:	e852 0f00 	ldrex	r0, [r2]
    958a:	4018      	ands	r0, r3
    958c:	e842 0100 	strex	r1, r0, [r2]
    9590:	2900      	cmp	r1, #0
    9592:	d1f8      	bne.n	9586 <nrf_usbd_epiniso_dma_handler+0x92>
    9594:	f3bf 8f5b 	dmb	ish
}
    9598:	b002      	add	sp, #8
    959a:	bd10      	pop	{r4, pc}
    return NRFX_USBD_EP_BITPOS(ep);
    959c:	2200      	movs	r2, #0
    959e:	e7eb      	b.n	9578 <nrf_usbd_epiniso_dma_handler+0x84>
    95a0:	40027000 	.word	0x40027000
    95a4:	2000239f 	.word	0x2000239f
    95a8:	20001d6c 	.word	0x20001d6c
    95ac:	20001e8c 	.word	0x20001e8c
    95b0:	20001e94 	.word	0x20001e94
    95b4:	20001dfc 	.word	0x20001dfc

000095b8 <nrfx_usbd_isoinconfig_set>:
}

NRF_STATIC_INLINE void nrf_usbd_isoinconfig_set(NRF_USBD_Type *        p_reg,
                                                nrf_usbd_isoinconfig_t config)
{
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    95b8:	4b01      	ldr	r3, [pc, #4]	; (95c0 <nrfx_usbd_isoinconfig_set+0x8>)
    95ba:	f8c3 0530 	str.w	r0, [r3, #1328]	; 0x530
}
    95be:	4770      	bx	lr
    95c0:	40027000 	.word	0x40027000

000095c4 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    95c4:	2300      	movs	r3, #0
    95c6:	4a02      	ldr	r2, [pc, #8]	; (95d0 <nrfx_usbd_uninit+0xc>)
    95c8:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    95ca:	4a02      	ldr	r2, [pc, #8]	; (95d4 <nrfx_usbd_uninit+0x10>)
    95cc:	7013      	strb	r3, [r2, #0]
    return;
}
    95ce:	4770      	bx	lr
    95d0:	20001e94 	.word	0x20001e94
    95d4:	200023a2 	.word	0x200023a2

000095d8 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
    95d8:	b510      	push	{r4, lr}
    p_reg->EVENTCAUSE = flags;
    95da:	4b2a      	ldr	r3, [pc, #168]	; (9684 <nrfx_usbd_enable+0xac>)
    95dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
    95e0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    95e4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    /* Prepare for READY event receiving */
    nrf_usbd_eventcause_clear(NRF_USBD, NRF_USBD_EVENTCAUSE_READY_MASK);

    usbd_enable();
    95e8:	f7ff fe20 	bl	922c <usbd_enable>
}

/* Errata: Unexpected behavior after reset. **/
static inline bool nrfx_usbd_errata_223(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_223();
    95ec:	f005 fc99 	bl	ef22 <nrf52_errata_223>

    if (nrfx_usbd_errata_223() && m_first_enable)
    95f0:	b110      	cbz	r0, 95f8 <nrfx_usbd_enable+0x20>
    95f2:	4b25      	ldr	r3, [pc, #148]	; (9688 <nrfx_usbd_enable+0xb0>)
    95f4:	781b      	ldrb	r3, [r3, #0]
    95f6:	bb9b      	cbnz	r3, 9660 <nrfx_usbd_enable+0x88>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    95f8:	f005 fc87 	bl	ef0a <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    95fc:	2800      	cmp	r0, #0
    95fe:	d13a      	bne.n	9676 <nrfx_usbd_enable+0x9e>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
    9600:	f005 fc7f 	bl	ef02 <nrf52_errata_166>
#endif
    {
        usbd_errata_187_211_begin();
    }

    if (nrfx_usbd_errata_166())
    9604:	b158      	cbz	r0, 961e <nrfx_usbd_enable+0x46>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
    9606:	4b1f      	ldr	r3, [pc, #124]	; (9684 <nrfx_usbd_enable+0xac>)
    9608:	f240 72e3 	movw	r2, #2019	; 0x7e3
    960c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
    9610:	2240      	movs	r2, #64	; 0x40
    9612:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
    9616:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    961a:	f3bf 8f4f 	dsb	sy
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    961e:	4b19      	ldr	r3, [pc, #100]	; (9684 <nrfx_usbd_enable+0xac>)
    9620:	2280      	movs	r2, #128	; 0x80
    9622:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_ZERODATA);
    }
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    9626:	2000      	movs	r0, #0
    9628:	f7ff ffc6 	bl	95b8 <nrfx_usbd_isoinconfig_set>
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    962c:	4b17      	ldr	r3, [pc, #92]	; (968c <nrfx_usbd_enable+0xb4>)
    962e:	f240 12ff 	movw	r2, #511	; 0x1ff
    9632:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
    9634:	4b16      	ldr	r3, [pc, #88]	; (9690 <nrfx_usbd_enable+0xb8>)
    9636:	2200      	movs	r2, #0
    9638:	601a      	str	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    963a:	f005 fc70 	bl	ef1e <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    963e:	b118      	cbz	r0, 9648 <nrfx_usbd_enable+0x70>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9640:	4b10      	ldr	r3, [pc, #64]	; (9684 <nrfx_usbd_enable+0xac>)
    9642:	2200      	movs	r2, #0
    9644:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = false;
    9648:	2300      	movs	r3, #0
    964a:	4a12      	ldr	r2, [pc, #72]	; (9694 <nrfx_usbd_enable+0xbc>)
    964c:	7013      	strb	r3, [r2, #0]
    usbd_dma_pending_clear();
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    964e:	4a12      	ldr	r2, [pc, #72]	; (9698 <nrfx_usbd_enable+0xc0>)
    9650:	7013      	strb	r3, [r2, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    9652:	4b12      	ldr	r3, [pc, #72]	; (969c <nrfx_usbd_enable+0xc4>)
    9654:	2202      	movs	r2, #2
    9656:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    9658:	f005 fc57 	bl	ef0a <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    965c:	b970      	cbnz	r0, 967c <nrfx_usbd_enable+0xa4>
#endif
    {
        usbd_errata_187_211_end();
    }
}
    965e:	bd10      	pop	{r4, pc}
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    9660:	4b08      	ldr	r3, [pc, #32]	; (9684 <nrfx_usbd_enable+0xac>)
    9662:	2400      	movs	r4, #0
    9664:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    9668:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
         usbd_enable();
    966c:	f7ff fdde 	bl	922c <usbd_enable>
         m_first_enable = false;
    9670:	4b05      	ldr	r3, [pc, #20]	; (9688 <nrfx_usbd_enable+0xb0>)
    9672:	701c      	strb	r4, [r3, #0]
    9674:	e7c0      	b.n	95f8 <nrfx_usbd_enable+0x20>
        usbd_errata_187_211_begin();
    9676:	f7ff fd95 	bl	91a4 <usbd_errata_187_211_begin>
    967a:	e7c1      	b.n	9600 <nrfx_usbd_enable+0x28>
        usbd_errata_187_211_end();
    967c:	f7ff fdb4 	bl	91e8 <usbd_errata_187_211_end>
}
    9680:	e7ed      	b.n	965e <nrfx_usbd_enable+0x86>
    9682:	bf00      	nop
    9684:	40027000 	.word	0x40027000
    9688:	200001c8 	.word	0x200001c8
    968c:	20001e90 	.word	0x20001e90
    9690:	20001e8c 	.word	0x20001e8c
    9694:	2000239f 	.word	0x2000239f
    9698:	200023a0 	.word	0x200023a0
    969c:	200023a2 	.word	0x200023a2

000096a0 <nrfx_usbd_start>:
    }
#endif
}

void nrfx_usbd_start(bool enable_sof)
{
    96a0:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    96a2:	4b09      	ldr	r3, [pc, #36]	; (96c8 <nrfx_usbd_start+0x28>)
    96a4:	2200      	movs	r2, #0
    96a6:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_ENDEPOUT0_MASK    |
       NRF_USBD_INT_USBEVENT_MASK     |
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
    96a8:	b960      	cbnz	r0, 96c4 <nrfx_usbd_start+0x24>
    uint32_t ints_to_enable =
    96aa:	4b08      	ldr	r3, [pc, #32]	; (96cc <nrfx_usbd_start+0x2c>)
    p_reg->INTENSET = mask;
    96ac:	4c08      	ldr	r4, [pc, #32]	; (96d0 <nrfx_usbd_start+0x30>)
    96ae:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    96b2:	2027      	movs	r0, #39	; 0x27
    96b4:	f004 fad0 	bl	dc58 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    96b8:	2301      	movs	r3, #1
    96ba:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    96be:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    96c2:	bd10      	pop	{r4, pc}
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
    96c4:	4b03      	ldr	r3, [pc, #12]	; (96d4 <nrfx_usbd_start+0x34>)
    96c6:	e7f1      	b.n	96ac <nrfx_usbd_start+0xc>
    96c8:	200023a1 	.word	0x200023a1
    96cc:	01c01407 	.word	0x01c01407
    96d0:	40027000 	.word	0x40027000
    96d4:	01e01407 	.word	0x01e01407

000096d8 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    96d8:	4b03      	ldr	r3, [pc, #12]	; (96e8 <nrfx_usbd_is_enabled+0x10>)
    96da:	7818      	ldrb	r0, [r3, #0]
}
    96dc:	2801      	cmp	r0, #1
    96de:	bf94      	ite	ls
    96e0:	2000      	movls	r0, #0
    96e2:	2001      	movhi	r0, #1
    96e4:	4770      	bx	lr
    96e6:	bf00      	nop
    96e8:	200023a2 	.word	0x200023a2

000096ec <nrfx_usbd_suspend>:
	__asm__ volatile(
    96ec:	f04f 0220 	mov.w	r2, #32
    96f0:	f3ef 8311 	mrs	r3, BASEPRI
    96f4:	f382 8812 	msr	BASEPRI_MAX, r2
    96f8:	f3bf 8f6f 	isb	sy
bool nrfx_usbd_suspend(void)
{
    bool suspended = false;

    NRFX_CRITICAL_SECTION_ENTER();
    if (m_bus_suspend)
    96fc:	4a11      	ldr	r2, [pc, #68]	; (9744 <nrfx_usbd_suspend+0x58>)
    96fe:	7812      	ldrb	r2, [r2, #0]
    9700:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    9704:	b1c2      	cbz	r2, 9738 <nrfx_usbd_suspend+0x4c>
    return p_reg->EVENTCAUSE;
    9706:	4a10      	ldr	r2, [pc, #64]	; (9748 <nrfx_usbd_suspend+0x5c>)
    9708:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
    {
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    970c:	f412 7f00 	tst.w	r2, #512	; 0x200
    9710:	d111      	bne.n	9736 <nrfx_usbd_suspend+0x4a>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    9712:	4a0d      	ldr	r2, [pc, #52]	; (9748 <nrfx_usbd_suspend+0x5c>)
    9714:	2101      	movs	r1, #1
    9716:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    971a:	f8d2 152c 	ldr.w	r1, [r2, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    971e:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
        {
            nrf_usbd_lowpower_enable(NRF_USBD);
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    9722:	f412 7f00 	tst.w	r2, #512	; 0x200
    9726:	d007      	beq.n	9738 <nrfx_usbd_suspend+0x4c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    9728:	4a07      	ldr	r2, [pc, #28]	; (9748 <nrfx_usbd_suspend+0x5c>)
    972a:	2000      	movs	r0, #0
    972c:	f8c2 052c 	str.w	r0, [r2, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    9730:	f8d2 252c 	ldr.w	r2, [r2, #1324]	; 0x52c
}
    9734:	e000      	b.n	9738 <nrfx_usbd_suspend+0x4c>
    bool suspended = false;
    9736:	2000      	movs	r0, #0
	__asm__ volatile(
    9738:	f383 8811 	msr	BASEPRI, r3
    973c:	f3bf 8f6f 	isb	sy
        }
    }
    NRFX_CRITICAL_SECTION_EXIT();

    return suspended;
}
    9740:	4770      	bx	lr
    9742:	bf00      	nop
    9744:	200023a1 	.word	0x200023a1
    9748:	40027000 	.word	0x40027000

0000974c <nrfx_usbd_ep_max_packet_size_set>:
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    974c:	f010 0f80 	tst.w	r0, #128	; 0x80
    9750:	d106      	bne.n	9760 <nrfx_usbd_ep_max_packet_size_set+0x14>
    9752:	4b04      	ldr	r3, [pc, #16]	; (9764 <nrfx_usbd_ep_max_packet_size_set+0x18>)
        NRF_USBD_EP_NR_GET(ep));
    9754:	f000 000f 	and.w	r0, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9758:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    /* Packet size cannot be higher than maximum buffer size */
    NRFX_ASSERT((NRF_USBD_EPISO_CHECK(ep) && (size <= usbd_ep_iso_capacity(ep))) ||
                (!NRF_USBD_EPISO_CHECK(ep) && (size <= NRFX_USBD_EPSIZE)));

    usbd_ep_state_t * p_state = ep_state_access(ep);
    p_state->max_packet_size = size;
    975c:	8199      	strh	r1, [r3, #12]
}
    975e:	4770      	bx	lr
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9760:	4b01      	ldr	r3, [pc, #4]	; (9768 <nrfx_usbd_ep_max_packet_size_set+0x1c>)
    9762:	e7f7      	b.n	9754 <nrfx_usbd_ep_max_packet_size_set+0x8>
    9764:	20001d6c 	.word	0x20001d6c
    9768:	20001dfc 	.word	0x20001dfc

0000976c <nrfx_usbd_init>:
{
    976c:	b570      	push	{r4, r5, r6, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    976e:	4b25      	ldr	r3, [pc, #148]	; (9804 <nrfx_usbd_init+0x98>)
    9770:	781c      	ldrb	r4, [r3, #0]
    9772:	2c00      	cmp	r4, #0
    9774:	d144      	bne.n	9800 <nrfx_usbd_init+0x94>
    m_event_handler = event_handler;
    9776:	4b24      	ldr	r3, [pc, #144]	; (9808 <nrfx_usbd_init+0x9c>)
    9778:	6018      	str	r0, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    977a:	4b22      	ldr	r3, [pc, #136]	; (9804 <nrfx_usbd_init+0x98>)
    977c:	2201      	movs	r2, #1
    977e:	701a      	strb	r2, [r3, #0]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    9780:	4625      	mov	r5, r4
    9782:	e012      	b.n	97aa <nrfx_usbd_init+0x3e>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    9784:	2140      	movs	r1, #64	; 0x40
    9786:	4630      	mov	r0, r6
    9788:	f7ff ffe0 	bl	974c <nrfx_usbd_ep_max_packet_size_set>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    978c:	f016 0f80 	tst.w	r6, #128	; 0x80
    9790:	d115      	bne.n	97be <nrfx_usbd_init+0x52>
    9792:	491e      	ldr	r1, [pc, #120]	; (980c <nrfx_usbd_init+0xa0>)
        NRF_USBD_EP_NR_GET(ep));
    9794:	f005 030f 	and.w	r3, r5, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9798:	0118      	lsls	r0, r3, #4
    979a:	eb01 1303 	add.w	r3, r1, r3, lsl #4
        p_state->status = NRFX_USBD_EP_OK;
    979e:	2200      	movs	r2, #0
    97a0:	739a      	strb	r2, [r3, #14]
        p_state->handler.feeder = NULL;
    97a2:	500a      	str	r2, [r1, r0]
        p_state->transfer_cnt = 0;
    97a4:	609a      	str	r2, [r3, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    97a6:	3501      	adds	r5, #1
    97a8:	b2ed      	uxtb	r5, r5
    97aa:	2d08      	cmp	r5, #8
    97ac:	d81c      	bhi.n	97e8 <nrfx_usbd_init+0x7c>
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    97ae:	f045 0680 	orr.w	r6, r5, #128	; 0x80
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    97b2:	f015 0f08 	tst.w	r5, #8
    97b6:	d0e5      	beq.n	9784 <nrfx_usbd_init+0x18>
    97b8:	f240 11ff 	movw	r1, #511	; 0x1ff
    97bc:	e7e3      	b.n	9786 <nrfx_usbd_init+0x1a>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    97be:	4914      	ldr	r1, [pc, #80]	; (9810 <nrfx_usbd_init+0xa4>)
    97c0:	e7e8      	b.n	9794 <nrfx_usbd_init+0x28>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    97c2:	2140      	movs	r1, #64	; 0x40
    97c4:	4620      	mov	r0, r4
    97c6:	f7ff ffc1 	bl	974c <nrfx_usbd_ep_max_packet_size_set>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    97ca:	f014 0f80 	tst.w	r4, #128	; 0x80
    97ce:	d113      	bne.n	97f8 <nrfx_usbd_init+0x8c>
    97d0:	490e      	ldr	r1, [pc, #56]	; (980c <nrfx_usbd_init+0xa0>)
        NRF_USBD_EP_NR_GET(ep));
    97d2:	f004 030f 	and.w	r3, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    97d6:	0118      	lsls	r0, r3, #4
    97d8:	eb01 1303 	add.w	r3, r1, r3, lsl #4
        p_state->status = NRFX_USBD_EP_OK;
    97dc:	2200      	movs	r2, #0
    97de:	739a      	strb	r2, [r3, #14]
        p_state->handler.consumer = NULL;
    97e0:	500a      	str	r2, [r1, r0]
        p_state->transfer_cnt = 0;
    97e2:	609a      	str	r2, [r3, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    97e4:	3401      	adds	r4, #1
    97e6:	b2e4      	uxtb	r4, r4
    97e8:	2c08      	cmp	r4, #8
    97ea:	d807      	bhi.n	97fc <nrfx_usbd_init+0x90>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    97ec:	f014 0f08 	tst.w	r4, #8
    97f0:	d0e7      	beq.n	97c2 <nrfx_usbd_init+0x56>
    97f2:	f240 11ff 	movw	r1, #511	; 0x1ff
    97f6:	e7e5      	b.n	97c4 <nrfx_usbd_init+0x58>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    97f8:	4905      	ldr	r1, [pc, #20]	; (9810 <nrfx_usbd_init+0xa4>)
    97fa:	e7ea      	b.n	97d2 <nrfx_usbd_init+0x66>
    return NRFX_SUCCESS;
    97fc:	4805      	ldr	r0, [pc, #20]	; (9814 <nrfx_usbd_init+0xa8>)
}
    97fe:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_INVALID_STATE;
    9800:	4805      	ldr	r0, [pc, #20]	; (9818 <nrfx_usbd_init+0xac>)
    9802:	e7fc      	b.n	97fe <nrfx_usbd_init+0x92>
    9804:	200023a2 	.word	0x200023a2
    9808:	20001e94 	.word	0x20001e94
    980c:	20001d6c 	.word	0x20001d6c
    9810:	20001dfc 	.word	0x20001dfc
    9814:	0bad0000 	.word	0x0bad0000
    9818:	0bad0005 	.word	0x0bad0005

0000981c <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    981c:	b570      	push	{r4, r5, r6, lr}
    return NRFX_USBD_EP_BITPOS(ep);
    981e:	b245      	sxtb	r5, r0
    9820:	2d00      	cmp	r5, #0
    9822:	db12      	blt.n	984a <nrfx_usbd_ep_transfer+0x2e>
    9824:	2310      	movs	r3, #16
    9826:	f000 020f 	and.w	r2, r0, #15
    982a:	18d4      	adds	r4, r2, r3
	__asm__ volatile(
    982c:	f04f 0320 	mov.w	r3, #32
    9830:	f3ef 8c11 	mrs	ip, BASEPRI
    9834:	f383 8812 	msr	BASEPRI_MAX, r3
    9838:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    983c:	b93a      	cbnz	r2, 984e <nrfx_usbd_ep_transfer+0x32>
    983e:	4b2f      	ldr	r3, [pc, #188]	; (98fc <nrfx_usbd_ep_transfer+0xe0>)
    9840:	781b      	ldrb	r3, [r3, #0]
    9842:	4283      	cmp	r3, r0
    9844:	d003      	beq.n	984e <nrfx_usbd_ep_transfer+0x32>
    {
        ret = NRFX_ERROR_INVALID_ADDR;
    9846:	482e      	ldr	r0, [pc, #184]	; (9900 <nrfx_usbd_ep_transfer+0xe4>)
    9848:	e052      	b.n	98f0 <nrfx_usbd_ep_transfer+0xd4>
    return NRFX_USBD_EP_BITPOS(ep);
    984a:	2300      	movs	r3, #0
    984c:	e7eb      	b.n	9826 <nrfx_usbd_ep_transfer+0xa>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    984e:	4b2d      	ldr	r3, [pc, #180]	; (9904 <nrfx_usbd_ep_transfer+0xe8>)
    9850:	681b      	ldr	r3, [r3, #0]
    9852:	43db      	mvns	r3, r3
    9854:	b29b      	uxth	r3, r3
    9856:	482c      	ldr	r0, [pc, #176]	; (9908 <nrfx_usbd_ep_transfer+0xec>)
    9858:	6800      	ldr	r0, [r0, #0]
    985a:	4303      	orrs	r3, r0
    985c:	f04f 0e01 	mov.w	lr, #1
    9860:	fa0e fe04 	lsl.w	lr, lr, r4
    9864:	ea13 0f0e 	tst.w	r3, lr
    9868:	d141      	bne.n	98ee <nrfx_usbd_ep_transfer+0xd2>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    986a:	2d00      	cmp	r5, #0
    986c:	db1e      	blt.n	98ac <nrfx_usbd_ep_transfer+0x90>
    986e:	4827      	ldr	r0, [pc, #156]	; (990c <nrfx_usbd_ep_transfer+0xf0>)
    9870:	0116      	lsls	r6, r2, #4
    9872:	eb00 1402 	add.w	r4, r0, r2, lsl #4
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
    9876:	2d00      	cmp	r5, #0
    9878:	db1a      	blt.n	98b0 <nrfx_usbd_ep_transfer+0x94>
                }
            }
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    987a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    987e:	4b24      	ldr	r3, [pc, #144]	; (9910 <nrfx_usbd_ep_transfer+0xf4>)
    9880:	eb03 0382 	add.w	r3, r3, r2, lsl #2
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    9884:	4a23      	ldr	r2, [pc, #140]	; (9914 <nrfx_usbd_ep_transfer+0xf8>)
    9886:	5182      	str	r2, [r0, r6]
        }
        *p_context = *p_transfer;
    9888:	c907      	ldmia	r1, {r0, r1, r2}
    988a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
    988e:	6063      	str	r3, [r4, #4]

        p_state->transfer_cnt = 0;
    9890:	2300      	movs	r3, #0
    9892:	60a3      	str	r3, [r4, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    9894:	73a3      	strb	r3, [r4, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    9896:	4a1c      	ldr	r2, [pc, #112]	; (9908 <nrfx_usbd_ep_transfer+0xec>)
    9898:	6813      	ldr	r3, [r2, #0]
    989a:	ea43 030e 	orr.w	r3, r3, lr
    989e:	6013      	str	r3, [r2, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    98a0:	4b1d      	ldr	r3, [pc, #116]	; (9918 <nrfx_usbd_ep_transfer+0xfc>)
    98a2:	2280      	movs	r2, #128	; 0x80
    98a4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        ret = NRFX_SUCCESS;
    98a8:	481c      	ldr	r0, [pc, #112]	; (991c <nrfx_usbd_ep_transfer+0x100>)
}
    98aa:	e021      	b.n	98f0 <nrfx_usbd_ep_transfer+0xd4>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    98ac:	481c      	ldr	r0, [pc, #112]	; (9920 <nrfx_usbd_ep_transfer+0x104>)
    98ae:	e7df      	b.n	9870 <nrfx_usbd_ep_transfer+0x54>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    98b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    98b4:	4b1b      	ldr	r3, [pc, #108]	; (9924 <nrfx_usbd_ep_transfer+0x108>)
    98b6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    98ba:	680a      	ldr	r2, [r1, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    98bc:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
    98c0:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    98c4:	d006      	beq.n	98d4 <nrfx_usbd_ep_transfer+0xb8>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    98c6:	688a      	ldr	r2, [r1, #8]
    98c8:	f012 0f01 	tst.w	r2, #1
    98cc:	d10c      	bne.n	98e8 <nrfx_usbd_ep_transfer+0xcc>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
    98ce:	4a16      	ldr	r2, [pc, #88]	; (9928 <nrfx_usbd_ep_transfer+0x10c>)
    98d0:	6022      	str	r2, [r4, #0]
                        NRFX_LOG_DEBUG(
    98d2:	e7d9      	b.n	9888 <nrfx_usbd_ep_transfer+0x6c>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    98d4:	688a      	ldr	r2, [r1, #8]
    98d6:	f012 0f01 	tst.w	r2, #1
    98da:	d102      	bne.n	98e2 <nrfx_usbd_ep_transfer+0xc6>
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
    98dc:	4a13      	ldr	r2, [pc, #76]	; (992c <nrfx_usbd_ep_transfer+0x110>)
    98de:	6022      	str	r2, [r4, #0]
                        NRFX_LOG_DEBUG(
    98e0:	e7d2      	b.n	9888 <nrfx_usbd_ep_transfer+0x6c>
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
    98e2:	4a13      	ldr	r2, [pc, #76]	; (9930 <nrfx_usbd_ep_transfer+0x114>)
    98e4:	6022      	str	r2, [r4, #0]
                        NRFX_LOG_DEBUG(
    98e6:	e7cf      	b.n	9888 <nrfx_usbd_ep_transfer+0x6c>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
    98e8:	4a12      	ldr	r2, [pc, #72]	; (9934 <nrfx_usbd_ep_transfer+0x118>)
    98ea:	6022      	str	r2, [r4, #0]
                        NRFX_LOG_DEBUG(
    98ec:	e7cc      	b.n	9888 <nrfx_usbd_ep_transfer+0x6c>
        ret = NRFX_ERROR_BUSY;
    98ee:	4812      	ldr	r0, [pc, #72]	; (9938 <nrfx_usbd_ep_transfer+0x11c>)
	__asm__ volatile(
    98f0:	f38c 8811 	msr	BASEPRI, ip
    98f4:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    98f8:	bd70      	pop	{r4, r5, r6, pc}
    98fa:	bf00      	nop
    98fc:	200023a0 	.word	0x200023a0
    9900:	0bad000a 	.word	0x0bad000a
    9904:	20001e90 	.word	0x20001e90
    9908:	20001e8c 	.word	0x20001e8c
    990c:	20001d6c 	.word	0x20001d6c
    9910:	20001c94 	.word	0x20001c94
    9914:	0000ef37 	.word	0x0000ef37
    9918:	e000e100 	.word	0xe000e100
    991c:	0bad0000 	.word	0x0bad0000
    9920:	20001dfc 	.word	0x20001dfc
    9924:	20001d00 	.word	0x20001d00
    9928:	0000f025 	.word	0x0000f025
    992c:	0000ef6d 	.word	0x0000ef6d
    9930:	0000ef8f 	.word	0x0000ef8f
    9934:	0000f063 	.word	0x0000f063
    9938:	0bad000b 	.word	0x0bad000b

0000993c <nrfx_usbd_feeder_buffer_get>:
}

void * nrfx_usbd_feeder_buffer_get(void)
{
    return m_tx_buffer;
}
    993c:	4800      	ldr	r0, [pc, #0]	; (9940 <nrfx_usbd_feeder_buffer_get+0x4>)
    993e:	4770      	bx	lr
    9940:	20001c54 	.word	0x20001c54

00009944 <nrfx_usbd_ep_status_get>:

nrfx_usbd_ep_status_t nrfx_usbd_ep_status_get(nrfx_usbd_ep_t ep, size_t * p_size)
{
    9944:	b500      	push	{lr}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9946:	f010 0f80 	tst.w	r0, #128	; 0x80
    994a:	d11c      	bne.n	9986 <nrfx_usbd_ep_status_get+0x42>
    994c:	4a10      	ldr	r2, [pc, #64]	; (9990 <nrfx_usbd_ep_status_get+0x4c>)
        NRF_USBD_EP_NR_GET(ep));
    994e:	f000 000f 	and.w	r0, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9952:	ea4f 1c00 	mov.w	ip, r0, lsl #4
    9956:	eb02 1000 	add.w	r0, r2, r0, lsl #4
	__asm__ volatile(
    995a:	f04f 0e20 	mov.w	lr, #32
    995e:	f3ef 8311 	mrs	r3, BASEPRI
    9962:	f38e 8812 	msr	BASEPRI_MAX, lr
    9966:	f3bf 8f6f 	isb	sy
    nrfx_usbd_ep_status_t ret;

    usbd_ep_state_t const * p_state = ep_state_access(ep);
    NRFX_CRITICAL_SECTION_ENTER();
    *p_size = p_state->transfer_cnt;
    996a:	f8d0 e008 	ldr.w	lr, [r0, #8]
    996e:	f8c1 e000 	str.w	lr, [r1]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    9972:	f852 200c 	ldr.w	r2, [r2, ip]
    9976:	b142      	cbz	r2, 998a <nrfx_usbd_ep_status_get+0x46>
    9978:	2004      	movs	r0, #4
	__asm__ volatile(
    997a:	f383 8811 	msr	BASEPRI, r3
    997e:	f3bf 8f6f 	isb	sy
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    9982:	f85d fb04 	ldr.w	pc, [sp], #4
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9986:	4a03      	ldr	r2, [pc, #12]	; (9994 <nrfx_usbd_ep_status_get+0x50>)
    9988:	e7e1      	b.n	994e <nrfx_usbd_ep_status_get+0xa>
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    998a:	7b80      	ldrb	r0, [r0, #14]
    998c:	e7f5      	b.n	997a <nrfx_usbd_ep_status_get+0x36>
    998e:	bf00      	nop
    9990:	20001d6c 	.word	0x20001d6c
    9994:	20001dfc 	.word	0x20001dfc

00009998 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    9998:	f010 0f08 	tst.w	r0, #8
    999c:	d107      	bne.n	99ae <nrfx_usbd_epout_size_get+0x16>
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    999e:	f000 000f 	and.w	r0, r0, #15
    99a2:	f500 7094 	add.w	r0, r0, #296	; 0x128
    99a6:	4b06      	ldr	r3, [pc, #24]	; (99c0 <nrfx_usbd_epout_size_get+0x28>)
    99a8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    99ac:	4770      	bx	lr
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    99ae:	4b04      	ldr	r3, [pc, #16]	; (99c0 <nrfx_usbd_epout_size_get+0x28>)
    99b0:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
        if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) ==
    99b4:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    99b8:	d100      	bne.n	99bc <nrfx_usbd_epout_size_get+0x24>
    99ba:	4770      	bx	lr
            size_isoout = 0;
    99bc:	2000      	movs	r0, #0

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    99be:	4770      	bx	lr
    99c0:	40027000 	.word	0x40027000

000099c4 <usbd_dmareq_process>:
    if (!m_dma_pending)
    99c4:	4b5b      	ldr	r3, [pc, #364]	; (9b34 <usbd_dmareq_process+0x170>)
    99c6:	781b      	ldrb	r3, [r3, #0]
    99c8:	2b00      	cmp	r3, #0
    99ca:	f040 80b1 	bne.w	9b30 <usbd_dmareq_process+0x16c>
{
    99ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    99d2:	b085      	sub	sp, #20
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    99d4:	4b58      	ldr	r3, [pc, #352]	; (9b38 <usbd_dmareq_process+0x174>)
    99d6:	681b      	ldr	r3, [r3, #0]
    99d8:	4a58      	ldr	r2, [pc, #352]	; (9b3c <usbd_dmareq_process+0x178>)
    99da:	6812      	ldr	r2, [r2, #0]
    99dc:	4013      	ands	r3, r2
    99de:	f000 80a4 	beq.w	9b2a <usbd_dmareq_process+0x166>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    99e2:	f013 2001 	ands.w	r0, r3, #16777472	; 0x1000100
    99e6:	d00d      	beq.n	9a04 <usbd_dmareq_process+0x40>
                pos = usbd_dma_scheduler_algorithm(req & USBD_EPISO_BIT_MASK);
    99e8:	f005 fae6 	bl	efb8 <usbd_dma_scheduler_algorithm>
    99ec:	4606      	mov	r6, r0
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    99ee:	2e0f      	cmp	r6, #15
    99f0:	d910      	bls.n	9a14 <usbd_dmareq_process+0x50>
    99f2:	f1a6 0310 	sub.w	r3, r6, #16
    99f6:	b2df      	uxtb	r7, r3
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    99f8:	f013 0f80 	tst.w	r3, #128	; 0x80
    99fc:	d107      	bne.n	9a0e <usbd_dmareq_process+0x4a>
    99fe:	f8df a140 	ldr.w	sl, [pc, #320]	; 9b40 <usbd_dmareq_process+0x17c>
    9a02:	e00c      	b.n	9a1e <usbd_dmareq_process+0x5a>
                pos = usbd_dma_scheduler_algorithm(req);
    9a04:	4618      	mov	r0, r3
    9a06:	f005 fad7 	bl	efb8 <usbd_dma_scheduler_algorithm>
    9a0a:	4606      	mov	r6, r0
    9a0c:	e7ef      	b.n	99ee <usbd_dmareq_process+0x2a>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9a0e:	f8df a134 	ldr.w	sl, [pc, #308]	; 9b44 <usbd_dmareq_process+0x180>
    9a12:	e004      	b.n	9a1e <usbd_dmareq_process+0x5a>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9a14:	f066 077f 	orn	r7, r6, #127	; 0x7f
    9a18:	b2ff      	uxtb	r7, r7
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9a1a:	f8df a128 	ldr.w	sl, [pc, #296]	; 9b44 <usbd_dmareq_process+0x180>
    9a1e:	f007 040f 	and.w	r4, r7, #15
    9a22:	ea4f 1b04 	mov.w	fp, r4, lsl #4
    9a26:	eb0a 1804 	add.w	r8, sl, r4, lsl #4
            if (NRF_USBD_EPIN_CHECK(ep))
    9a2a:	b27d      	sxtb	r5, r7
    9a2c:	2d00      	cmp	r5, #0
    9a2e:	db3d      	blt.n	9aac <usbd_dmareq_process+0xe8>
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    9a30:	4638      	mov	r0, r7
    9a32:	f7ff ffb1 	bl	9998 <nrfx_usbd_epout_size_get>
    9a36:	4681      	mov	r9, r0
                continue_transfer = p_state->handler.consumer(
    9a38:	f85a a00b 	ldr.w	sl, [sl, fp]
    9a3c:	4603      	mov	r3, r0
    9a3e:	f8b8 200c 	ldrh.w	r2, [r8, #12]
    9a42:	f8d8 1004 	ldr.w	r1, [r8, #4]
    9a46:	a802      	add	r0, sp, #8
    9a48:	47d0      	blx	sl
                if (transfer.p_data.rx == NULL)
    9a4a:	9b02      	ldr	r3, [sp, #8]
    9a4c:	b113      	cbz	r3, 9a54 <usbd_dmareq_process+0x90>
                else if (transfer.size < rx_size)
    9a4e:	9b03      	ldr	r3, [sp, #12]
    9a50:	454b      	cmp	r3, r9
    9a52:	d339      	bcc.n	9ac8 <usbd_dmareq_process+0x104>
                if (!continue_transfer)
    9a54:	b910      	cbnz	r0, 9a5c <usbd_dmareq_process+0x98>
                    p_state->handler.consumer = NULL;
    9a56:	2300      	movs	r3, #0
    9a58:	f8c8 3000 	str.w	r3, [r8]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    9a5c:	f005 fa5f 	bl	ef1e <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9a60:	b118      	cbz	r0, 9a6a <usbd_dmareq_process+0xa6>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
    9a62:	4b39      	ldr	r3, [pc, #228]	; (9b48 <usbd_dmareq_process+0x184>)
    9a64:	2282      	movs	r2, #130	; 0x82
    9a66:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
    9a6a:	2301      	movs	r3, #1
    9a6c:	4a31      	ldr	r2, [pc, #196]	; (9b34 <usbd_dmareq_process+0x170>)
    9a6e:	7013      	strb	r3, [r2, #0]
            m_ep_ready &= ~(1U << pos);
    9a70:	40b3      	lsls	r3, r6
    9a72:	4932      	ldr	r1, [pc, #200]	; (9b3c <usbd_dmareq_process+0x178>)
    9a74:	680a      	ldr	r2, [r1, #0]
    9a76:	ea22 0203 	bic.w	r2, r2, r3
    9a7a:	600a      	str	r2, [r1, #0]
            p_state->transfer_cnt += transfer.size;
    9a7c:	f8d8 2008 	ldr.w	r2, [r8, #8]
    9a80:	9b03      	ldr	r3, [sp, #12]
    9a82:	441a      	add	r2, r3
    9a84:	f8c8 2008 	str.w	r2, [r8, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    9a88:	9a02      	ldr	r2, [sp, #8]
    9a8a:	4639      	mov	r1, r7
    9a8c:	482e      	ldr	r0, [pc, #184]	; (9b48 <usbd_dmareq_process+0x184>)
    9a8e:	f005 fa0f 	bl	eeb0 <nrf_usbd_ep_easydma_set>
    return (nrf_usbd_task_t)(
    9a92:	2d00      	cmp	r5, #0
    9a94:	db36      	blt.n	9b04 <usbd_dmareq_process+0x140>
    9a96:	2328      	movs	r3, #40	; 0x28
    9a98:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    9a9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9aa0:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9aa4:	2201      	movs	r2, #1
    9aa6:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    9aa8:	681b      	ldr	r3, [r3, #0]
}
    9aaa:	e03a      	b.n	9b22 <usbd_dmareq_process+0x15e>
                continue_transfer = p_state->handler.feeder(
    9aac:	f85a 300b 	ldr.w	r3, [sl, fp]
    9ab0:	f8b8 200c 	ldrh.w	r2, [r8, #12]
    9ab4:	f8d8 1004 	ldr.w	r1, [r8, #4]
    9ab8:	a802      	add	r0, sp, #8
    9aba:	4798      	blx	r3
                if (!continue_transfer)
    9abc:	2800      	cmp	r0, #0
    9abe:	d1cd      	bne.n	9a5c <usbd_dmareq_process+0x98>
                    p_state->handler.feeder = NULL;
    9ac0:	2300      	movs	r3, #0
    9ac2:	f8c8 3000 	str.w	r3, [r8]
    9ac6:	e7c9      	b.n	9a5c <usbd_dmareq_process+0x98>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    9ac8:	2202      	movs	r2, #2
    9aca:	f888 200e 	strb.w	r2, [r8, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    9ace:	2301      	movs	r3, #1
    9ad0:	40b3      	lsls	r3, r6
    9ad2:	43db      	mvns	r3, r3
    9ad4:	4918      	ldr	r1, [pc, #96]	; (9b38 <usbd_dmareq_process+0x174>)
    9ad6:	f3bf 8f5b 	dmb	ish
    9ada:	e851 4f00 	ldrex	r4, [r1]
    9ade:	401c      	ands	r4, r3
    9ae0:	e841 4000 	strex	r0, r4, [r1]
    9ae4:	2800      	cmp	r0, #0
    9ae6:	d1f8      	bne.n	9ada <usbd_dmareq_process+0x116>
    9ae8:	f3bf 8f5b 	dmb	ish
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    9aec:	2306      	movs	r3, #6
    9aee:	f88d 3004 	strb.w	r3, [sp, #4]
    9af2:	f88d 7006 	strb.w	r7, [sp, #6]
    9af6:	f88d 2007 	strb.w	r2, [sp, #7]
                    m_event_handler(&evt);
    9afa:	4b14      	ldr	r3, [pc, #80]	; (9b4c <usbd_dmareq_process+0x188>)
    9afc:	681b      	ldr	r3, [r3, #0]
    9afe:	a801      	add	r0, sp, #4
    9b00:	4798      	blx	r3
                    continue;
    9b02:	e767      	b.n	99d4 <usbd_dmareq_process+0x10>
    return (nrf_usbd_task_t)(
    9b04:	2304      	movs	r3, #4
    9b06:	e7c7      	b.n	9a98 <usbd_dmareq_process+0xd4>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    9b08:	4b11      	ldr	r3, [pc, #68]	; (9b50 <usbd_dmareq_process+0x18c>)
    9b0a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    9b0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9b12:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    9b16:	681b      	ldr	r3, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    9b18:	b93b      	cbnz	r3, 9b2a <usbd_dmareq_process+0x166>
    9b1a:	4b0b      	ldr	r3, [pc, #44]	; (9b48 <usbd_dmareq_process+0x184>)
    9b1c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    9b20:	b91b      	cbnz	r3, 9b2a <usbd_dmareq_process+0x166>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    9b22:	2d00      	cmp	r5, #0
    9b24:	dbf0      	blt.n	9b08 <usbd_dmareq_process+0x144>
    9b26:	4b0b      	ldr	r3, [pc, #44]	; (9b54 <usbd_dmareq_process+0x190>)
    9b28:	e7ef      	b.n	9b0a <usbd_dmareq_process+0x146>
}
    9b2a:	b005      	add	sp, #20
    9b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9b30:	4770      	bx	lr
    9b32:	bf00      	nop
    9b34:	2000239f 	.word	0x2000239f
    9b38:	20001e8c 	.word	0x20001e8c
    9b3c:	20001e90 	.word	0x20001e90
    9b40:	20001d6c 	.word	0x20001d6c
    9b44:	20001dfc 	.word	0x20001dfc
    9b48:	40027000 	.word	0x40027000
    9b4c:	20001e94 	.word	0x20001e94
    9b50:	000110d8 	.word	0x000110d8
    9b54:	000110c4 	.word	0x000110c4

00009b58 <ev_epdata_handler>:
{
    9b58:	b510      	push	{r4, lr}
    return p_reg->EPDATASTATUS;
    9b5a:	4b0f      	ldr	r3, [pc, #60]	; (9b98 <ev_epdata_handler+0x40>)
    9b5c:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    9b60:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
    NRFX_LOG_DEBUG("USBD event: EndpointEPStatus: %x", dataepstatus);
    9b64:	e008      	b.n	9b78 <ev_epdata_handler+0x20>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9b66:	f042 0080 	orr.w	r0, r2, #128	; 0x80
        dataepstatus &= ~(1UL << bitpos);
    9b6a:	b2d2      	uxtb	r2, r2
    9b6c:	2301      	movs	r3, #1
    9b6e:	4093      	lsls	r3, r2
    9b70:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    9b74:	f7ff fc14 	bl	93a0 <usbd_ep_data_handler>
    while (dataepstatus)
    9b78:	b154      	cbz	r4, 9b90 <ev_epdata_handler+0x38>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    9b7a:	fa94 f2a4 	rbit	r2, r4
    9b7e:	fab2 f282 	clz	r2, r2
    9b82:	4611      	mov	r1, r2
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9b84:	2a0f      	cmp	r2, #15
    9b86:	d9ee      	bls.n	9b66 <ev_epdata_handler+0xe>
    9b88:	f1a2 0010 	sub.w	r0, r2, #16
    9b8c:	b2c0      	uxtb	r0, r0
    9b8e:	e7ec      	b.n	9b6a <ev_epdata_handler+0x12>
        usbd_dmareq_process();
    9b90:	f7ff ff18 	bl	99c4 <usbd_dmareq_process>
}
    9b94:	bd10      	pop	{r4, pc}
    9b96:	bf00      	nop
    9b98:	40027000 	.word	0x40027000

00009b9c <nrf_usbd_epout_dma_handler>:
{
    9b9c:	b510      	push	{r4, lr}
    9b9e:	b082      	sub	sp, #8
    9ba0:	4604      	mov	r4, r0
    9ba2:	f005 f9bc 	bl	ef1e <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9ba6:	b118      	cbz	r0, 9bb0 <nrf_usbd_epout_dma_handler+0x14>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9ba8:	4b28      	ldr	r3, [pc, #160]	; (9c4c <nrf_usbd_epout_dma_handler+0xb0>)
    9baa:	2200      	movs	r2, #0
    9bac:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = false;
    9bb0:	4b27      	ldr	r3, [pc, #156]	; (9c50 <nrf_usbd_epout_dma_handler+0xb4>)
    9bb2:	2200      	movs	r2, #0
    9bb4:	701a      	strb	r2, [r3, #0]
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9bb6:	b261      	sxtb	r1, r4
    9bb8:	4291      	cmp	r1, r2
    9bba:	db2c      	blt.n	9c16 <nrf_usbd_epout_dma_handler+0x7a>
    9bbc:	4a25      	ldr	r2, [pc, #148]	; (9c54 <nrf_usbd_epout_dma_handler+0xb8>)
    9bbe:	f004 030f 	and.w	r3, r4, #15
    9bc2:	ea4f 1c03 	mov.w	ip, r3, lsl #4
    9bc6:	eb02 1003 	add.w	r0, r2, r3, lsl #4
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9bca:	7b80      	ldrb	r0, [r0, #14]
    9bcc:	2803      	cmp	r0, #3
    9bce:	d024      	beq.n	9c1a <nrf_usbd_epout_dma_handler+0x7e>
    else if (p_state->handler.consumer == NULL)
    9bd0:	f852 200c 	ldr.w	r2, [r2, ip]
    9bd4:	bba2      	cbnz	r2, 9c40 <nrf_usbd_epout_dma_handler+0xa4>
    return NRFX_USBD_EP_BITPOS(ep);
    9bd6:	2900      	cmp	r1, #0
    9bd8:	db00      	blt.n	9bdc <nrf_usbd_epout_dma_handler+0x40>
    9bda:	2210      	movs	r2, #16
    9bdc:	441a      	add	r2, r3
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9bde:	2301      	movs	r3, #1
    9be0:	4093      	lsls	r3, r2
    9be2:	43db      	mvns	r3, r3
    9be4:	4a1c      	ldr	r2, [pc, #112]	; (9c58 <nrf_usbd_epout_dma_handler+0xbc>)
    9be6:	f3bf 8f5b 	dmb	ish
    9bea:	e852 0f00 	ldrex	r0, [r2]
    9bee:	4018      	ands	r0, r3
    9bf0:	e842 0100 	strex	r1, r0, [r2]
    9bf4:	2900      	cmp	r1, #0
    9bf6:	d1f8      	bne.n	9bea <nrf_usbd_epout_dma_handler+0x4e>
    9bf8:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9bfc:	2306      	movs	r3, #6
    9bfe:	f88d 3004 	strb.w	r3, [sp, #4]
    9c02:	f88d 4006 	strb.w	r4, [sp, #6]
    9c06:	2300      	movs	r3, #0
    9c08:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    9c0c:	4b13      	ldr	r3, [pc, #76]	; (9c5c <nrf_usbd_epout_dma_handler+0xc0>)
    9c0e:	681b      	ldr	r3, [r3, #0]
    9c10:	a801      	add	r0, sp, #4
    9c12:	4798      	blx	r3
    9c14:	e014      	b.n	9c40 <nrf_usbd_epout_dma_handler+0xa4>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9c16:	4a12      	ldr	r2, [pc, #72]	; (9c60 <nrf_usbd_epout_dma_handler+0xc4>)
    9c18:	e7d1      	b.n	9bbe <nrf_usbd_epout_dma_handler+0x22>
    return NRFX_USBD_EP_BITPOS(ep);
    9c1a:	2900      	cmp	r1, #0
    9c1c:	db14      	blt.n	9c48 <nrf_usbd_epout_dma_handler+0xac>
    9c1e:	2210      	movs	r2, #16
    9c20:	441a      	add	r2, r3
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9c22:	2301      	movs	r3, #1
    9c24:	4093      	lsls	r3, r2
    9c26:	43db      	mvns	r3, r3
    9c28:	4a0b      	ldr	r2, [pc, #44]	; (9c58 <nrf_usbd_epout_dma_handler+0xbc>)
    9c2a:	f3bf 8f5b 	dmb	ish
    9c2e:	e852 0f00 	ldrex	r0, [r2]
    9c32:	4018      	ands	r0, r3
    9c34:	e842 0100 	strex	r1, r0, [r2]
    9c38:	2900      	cmp	r1, #0
    9c3a:	d1f8      	bne.n	9c2e <nrf_usbd_epout_dma_handler+0x92>
    9c3c:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    9c40:	f7ff fec0 	bl	99c4 <usbd_dmareq_process>
}
    9c44:	b002      	add	sp, #8
    9c46:	bd10      	pop	{r4, pc}
    return NRFX_USBD_EP_BITPOS(ep);
    9c48:	2200      	movs	r2, #0
    9c4a:	e7e9      	b.n	9c20 <nrf_usbd_epout_dma_handler+0x84>
    9c4c:	40027000 	.word	0x40027000
    9c50:	2000239f 	.word	0x2000239f
    9c54:	20001d6c 	.word	0x20001d6c
    9c58:	20001e8c 	.word	0x20001e8c
    9c5c:	20001e94 	.word	0x20001e94
    9c60:	20001dfc 	.word	0x20001dfc

00009c64 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    9c64:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    9c68:	4b01      	ldr	r3, [pc, #4]	; (9c70 <nrfx_usbd_ep_stall+0xc>)
    9c6a:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    9c6e:	4770      	bx	lr
    9c70:	40027000 	.word	0x40027000

00009c74 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    9c74:	f010 0f08 	tst.w	r0, #8
    9c78:	d117      	bne.n	9caa <nrfx_usbd_ep_stall_check+0x36>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    9c7a:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    9c7e:	f010 0f80 	tst.w	r0, #128	; 0x80
    9c82:	d10c      	bne.n	9c9e <nrfx_usbd_ep_stall_check+0x2a>
        return p_reg->HALTED.EPOUT[epnr];
    9c84:	f503 7388 	add.w	r3, r3, #272	; 0x110
    9c88:	009b      	lsls	r3, r3, #2
    9c8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9c8e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    9c92:	6858      	ldr	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    9c94:	2801      	cmp	r0, #1
    9c96:	bf14      	ite	ne
    9c98:	2000      	movne	r0, #0
    9c9a:	2001      	moveq	r0, #1
    9c9c:	4770      	bx	lr
        return p_reg->HALTED.EPIN[epnr];
    9c9e:	f503 7384 	add.w	r3, r3, #264	; 0x108
    9ca2:	4a03      	ldr	r2, [pc, #12]	; (9cb0 <nrfx_usbd_ep_stall_check+0x3c>)
    9ca4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    9ca8:	e7f4      	b.n	9c94 <nrfx_usbd_ep_stall_check+0x20>
        return false;
    9caa:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    9cac:	4770      	bx	lr
    9cae:	bf00      	nop
    9cb0:	40027000 	.word	0x40027000

00009cb4 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    9cb4:	4b04      	ldr	r3, [pc, #16]	; (9cc8 <nrfx_usbd_ep_dtoggle_clear+0x14>)
    9cb6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    9cba:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    9cbe:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    9cc2:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    9cc6:	4770      	bx	lr
    9cc8:	40027000 	.word	0x40027000

00009ccc <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    9ccc:	b510      	push	{r4, lr}
    9cce:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    9cd0:	2208      	movs	r2, #8
    9cd2:	2100      	movs	r1, #0
    9cd4:	f004 f8a1 	bl	de1a <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    9cd8:	4b11      	ldr	r3, [pc, #68]	; (9d20 <nrfx_usbd_setup_get+0x54>)
    9cda:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    9cde:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    9ce0:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    9ce4:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    9ce6:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    9cea:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    9cec:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    9cf0:	0209      	lsls	r1, r1, #8
    9cf2:	b289      	uxth	r1, r1
    9cf4:	430a      	orrs	r2, r1
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    9cf6:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    9cf8:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    9cfc:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    9cfe:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    9d02:	0209      	lsls	r1, r1, #8
    9d04:	b289      	uxth	r1, r1
    9d06:	430a      	orrs	r2, r1
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    9d08:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    9d0a:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    9d0e:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    9d10:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    9d14:	021b      	lsls	r3, r3, #8
    9d16:	b29b      	uxth	r3, r3
    9d18:	4313      	orrs	r3, r2
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    9d1a:	80e3      	strh	r3, [r4, #6]
}
    9d1c:	bd10      	pop	{r4, pc}
    9d1e:	bf00      	nop
    9d20:	40027000 	.word	0x40027000

00009d24 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9d24:	4b02      	ldr	r3, [pc, #8]	; (9d30 <nrfx_usbd_setup_data_clear+0xc>)
    9d26:	2201      	movs	r2, #1
    9d28:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    9d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    9d2c:	4770      	bx	lr
    9d2e:	bf00      	nop
    9d30:	40027000 	.word	0x40027000

00009d34 <nrf_usbd_ep0out_dma_handler>:
{
    9d34:	b500      	push	{lr}
    9d36:	b083      	sub	sp, #12
    9d38:	f005 f8f1 	bl	ef1e <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9d3c:	b118      	cbz	r0, 9d46 <nrf_usbd_ep0out_dma_handler+0x12>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9d3e:	4b1d      	ldr	r3, [pc, #116]	; (9db4 <nrf_usbd_ep0out_dma_handler+0x80>)
    9d40:	2200      	movs	r2, #0
    9d42:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = false;
    9d46:	4b1c      	ldr	r3, [pc, #112]	; (9db8 <nrf_usbd_ep0out_dma_handler+0x84>)
    9d48:	2200      	movs	r2, #0
    9d4a:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9d4c:	4b1b      	ldr	r3, [pc, #108]	; (9dbc <nrf_usbd_ep0out_dma_handler+0x88>)
    9d4e:	7b9b      	ldrb	r3, [r3, #14]
    9d50:	2b03      	cmp	r3, #3
    9d52:	d005      	beq.n	9d60 <nrf_usbd_ep0out_dma_handler+0x2c>
    else if (p_state->handler.consumer == NULL)
    9d54:	4b19      	ldr	r3, [pc, #100]	; (9dbc <nrf_usbd_ep0out_dma_handler+0x88>)
    9d56:	681b      	ldr	r3, [r3, #0]
    9d58:	b183      	cbz	r3, 9d7c <nrf_usbd_ep0out_dma_handler+0x48>
        nrfx_usbd_setup_data_clear();
    9d5a:	f7ff ffe3 	bl	9d24 <nrfx_usbd_setup_data_clear>
}
    9d5e:	e026      	b.n	9dae <nrf_usbd_ep0out_dma_handler+0x7a>
    9d60:	4b17      	ldr	r3, [pc, #92]	; (9dc0 <nrf_usbd_ep0out_dma_handler+0x8c>)
    9d62:	f3bf 8f5b 	dmb	ish
    9d66:	e853 1f00 	ldrex	r1, [r3]
    9d6a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
    9d6e:	e843 1200 	strex	r2, r1, [r3]
    9d72:	2a00      	cmp	r2, #0
    9d74:	d1f7      	bne.n	9d66 <nrf_usbd_ep0out_dma_handler+0x32>
    9d76:	f3bf 8f5b 	dmb	ish
    9d7a:	e018      	b.n	9dae <nrf_usbd_ep0out_dma_handler+0x7a>
    9d7c:	4b10      	ldr	r3, [pc, #64]	; (9dc0 <nrf_usbd_ep0out_dma_handler+0x8c>)
    9d7e:	f3bf 8f5b 	dmb	ish
    9d82:	e853 1f00 	ldrex	r1, [r3]
    9d86:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
    9d8a:	e843 1200 	strex	r2, r1, [r3]
    9d8e:	2a00      	cmp	r2, #0
    9d90:	d1f7      	bne.n	9d82 <nrf_usbd_ep0out_dma_handler+0x4e>
    9d92:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9d96:	2306      	movs	r3, #6
    9d98:	f88d 3004 	strb.w	r3, [sp, #4]
    9d9c:	2300      	movs	r3, #0
    9d9e:	f88d 3006 	strb.w	r3, [sp, #6]
    9da2:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    9da6:	4b07      	ldr	r3, [pc, #28]	; (9dc4 <nrf_usbd_ep0out_dma_handler+0x90>)
    9da8:	681b      	ldr	r3, [r3, #0]
    9daa:	a801      	add	r0, sp, #4
    9dac:	4798      	blx	r3
}
    9dae:	b003      	add	sp, #12
    9db0:	f85d fb04 	ldr.w	pc, [sp], #4
    9db4:	40027000 	.word	0x40027000
    9db8:	2000239f 	.word	0x2000239f
    9dbc:	20001d6c 	.word	0x20001d6c
    9dc0:	20001e8c 	.word	0x20001e8c
    9dc4:	20001e94 	.word	0x20001e94

00009dc8 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9dc8:	4b02      	ldr	r3, [pc, #8]	; (9dd4 <nrfx_usbd_setup_clear+0xc>)
    9dca:	2201      	movs	r2, #1
    9dcc:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    9dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    9dd0:	4770      	bx	lr
    9dd2:	bf00      	nop
    9dd4:	40027000 	.word	0x40027000

00009dd8 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9dd8:	4b02      	ldr	r3, [pc, #8]	; (9de4 <nrfx_usbd_setup_stall+0xc>)
    9dda:	2201      	movs	r2, #1
    9ddc:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    9dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    9de0:	4770      	bx	lr
    9de2:	bf00      	nop
    9de4:	40027000 	.word	0x40027000

00009de8 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    9de8:	4b01      	ldr	r3, [pc, #4]	; (9df0 <nrfx_usbd_last_setup_dir_get+0x8>)
    9dea:	7818      	ldrb	r0, [r3, #0]
    9dec:	4770      	bx	lr
    9dee:	bf00      	nop
    9df0:	200023a0 	.word	0x200023a0

00009df4 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    9df4:	b410      	push	{r4}
	__asm__ volatile(
    9df6:	f04f 0220 	mov.w	r2, #32
    9dfa:	f3ef 8311 	mrs	r3, BASEPRI
    9dfe:	f382 8812 	msr	BASEPRI_MAX, r2
    9e02:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_EP_BITPOS(ep);
    9e06:	f010 0f80 	tst.w	r0, #128	; 0x80
    9e0a:	d11d      	bne.n	9e48 <nrfx_usbd_transfer_out_drop+0x54>
    9e0c:	2110      	movs	r1, #16
    9e0e:	f000 020f 	and.w	r2, r0, #15
    9e12:	4411      	add	r1, r2
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    9e14:	f04f 0c01 	mov.w	ip, #1
    9e18:	fa0c fc01 	lsl.w	ip, ip, r1
    9e1c:	4c0b      	ldr	r4, [pc, #44]	; (9e4c <nrfx_usbd_transfer_out_drop+0x58>)
    9e1e:	6821      	ldr	r1, [r4, #0]
    9e20:	ea21 010c 	bic.w	r1, r1, ip
    9e24:	6021      	str	r1, [r4, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    9e26:	f010 0f08 	tst.w	r0, #8
    9e2a:	d107      	bne.n	9e3c <nrfx_usbd_transfer_out_drop+0x48>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    9e2c:	4908      	ldr	r1, [pc, #32]	; (9e50 <nrfx_usbd_transfer_out_drop+0x5c>)
    9e2e:	f502 7294 	add.w	r2, r2, #296	; 0x128
    9e32:	2000      	movs	r0, #0
    9e34:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    9e38:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
	__asm__ volatile(
    9e3c:	f383 8811 	msr	BASEPRI, r3
    9e40:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    9e44:	bc10      	pop	{r4}
    9e46:	4770      	bx	lr
    return NRFX_USBD_EP_BITPOS(ep);
    9e48:	2100      	movs	r1, #0
    9e4a:	e7e0      	b.n	9e0e <nrfx_usbd_transfer_out_drop+0x1a>
    9e4c:	20001e90 	.word	0x20001e90
    9e50:	40027000 	.word	0x40027000

00009e54 <usbd_ep_abort>:
{
    9e54:	b570      	push	{r4, r5, r6, lr}
    9e56:	b082      	sub	sp, #8
	__asm__ volatile(
    9e58:	f04f 0320 	mov.w	r3, #32
    9e5c:	f3ef 8511 	mrs	r5, BASEPRI
    9e60:	f383 8812 	msr	BASEPRI_MAX, r3
    9e64:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9e68:	b242      	sxtb	r2, r0
    9e6a:	2a00      	cmp	r2, #0
    9e6c:	db23      	blt.n	9eb6 <usbd_ep_abort+0x62>
    9e6e:	4c3a      	ldr	r4, [pc, #232]	; (9f58 <usbd_ep_abort+0x104>)
    9e70:	f000 030f 	and.w	r3, r0, #15
    9e74:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    9e78:	2a00      	cmp	r2, #0
    9e7a:	db21      	blt.n	9ec0 <usbd_ep_abort+0x6c>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    9e7c:	4a37      	ldr	r2, [pc, #220]	; (9f5c <usbd_ep_abort+0x108>)
    9e7e:	6812      	ldr	r2, [r2, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    9e80:	f103 0110 	add.w	r1, r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    9e84:	2301      	movs	r3, #1
    9e86:	408b      	lsls	r3, r1
    9e88:	ea33 0202 	bics.w	r2, r3, r2
    9e8c:	d115      	bne.n	9eba <usbd_ep_abort+0x66>
            p_state->handler.consumer = NULL;
    9e8e:	2200      	movs	r2, #0
    9e90:	6022      	str	r2, [r4, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9e92:	4932      	ldr	r1, [pc, #200]	; (9f5c <usbd_ep_abort+0x108>)
    9e94:	680a      	ldr	r2, [r1, #0]
    9e96:	ea22 0203 	bic.w	r2, r2, r3
    9e9a:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    9e9c:	4930      	ldr	r1, [pc, #192]	; (9f60 <usbd_ep_abort+0x10c>)
    9e9e:	680a      	ldr	r2, [r1, #0]
    9ea0:	ea22 0203 	bic.w	r2, r2, r3
    9ea4:	600a      	str	r2, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
    9ea6:	2303      	movs	r3, #3
    9ea8:	73a3      	strb	r3, [r4, #14]
	__asm__ volatile(
    9eaa:	f385 8811 	msr	BASEPRI, r5
    9eae:	f3bf 8f6f 	isb	sy
}
    9eb2:	b002      	add	sp, #8
    9eb4:	bd70      	pop	{r4, r5, r6, pc}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9eb6:	4c2b      	ldr	r4, [pc, #172]	; (9f64 <usbd_ep_abort+0x110>)
    9eb8:	e7da      	b.n	9e70 <usbd_ep_abort+0x1c>
            nrfx_usbd_transfer_out_drop(ep);
    9eba:	f7ff ff9b 	bl	9df4 <nrfx_usbd_transfer_out_drop>
    9ebe:	e7f2      	b.n	9ea6 <usbd_ep_abort+0x52>
        if(!NRF_USBD_EPISO_CHECK(ep))
    9ec0:	f010 0f08 	tst.w	r0, #8
    9ec4:	d113      	bne.n	9eee <usbd_ep_abort+0x9a>
            if(ep != NRFX_USBD_EPIN0)
    9ec6:	2880      	cmp	r0, #128	; 0x80
    9ec8:	d034      	beq.n	9f34 <usbd_ep_abort+0xe0>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    9eca:	f203 32da 	addw	r2, r3, #986	; 0x3da
    9ece:	0052      	lsls	r2, r2, #1
    9ed0:	4925      	ldr	r1, [pc, #148]	; (9f68 <usbd_ep_abort+0x114>)
    9ed2:	f8c1 2800 	str.w	r2, [r1, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9ed6:	f8d1 2804 	ldr.w	r2, [r1, #2052]	; 0x804
    9eda:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    9edc:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9ee0:	f8d1 6804 	ldr.w	r6, [r1, #2052]	; 0x804
    9ee4:	4332      	orrs	r2, r6
    9ee6:	f8c1 2804 	str.w	r2, [r1, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    9eea:	f8d1 2804 	ldr.w	r2, [r1, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    9eee:	4a1c      	ldr	r2, [pc, #112]	; (9f60 <usbd_ep_abort+0x10c>)
    9ef0:	6811      	ldr	r1, [r2, #0]
    9ef2:	4a1a      	ldr	r2, [pc, #104]	; (9f5c <usbd_ep_abort+0x108>)
    9ef4:	6816      	ldr	r6, [r2, #0]
    9ef6:	ea66 0c01 	orn	ip, r6, r1
    9efa:	2201      	movs	r2, #1
    9efc:	fa02 f303 	lsl.w	r3, r2, r3
    9f00:	ea1c 0f03 	tst.w	ip, r3
    9f04:	d0d1      	beq.n	9eaa <usbd_ep_abort+0x56>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9f06:	ea26 0603 	bic.w	r6, r6, r3
    9f0a:	4a14      	ldr	r2, [pc, #80]	; (9f5c <usbd_ep_abort+0x108>)
    9f0c:	6016      	str	r6, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    9f0e:	4319      	orrs	r1, r3
    9f10:	4b13      	ldr	r3, [pc, #76]	; (9f60 <usbd_ep_abort+0x10c>)
    9f12:	6019      	str	r1, [r3, #0]
            p_state->handler.feeder = NULL;
    9f14:	2300      	movs	r3, #0
    9f16:	6023      	str	r3, [r4, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    9f18:	2303      	movs	r3, #3
    9f1a:	73a3      	strb	r3, [r4, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    9f1c:	2206      	movs	r2, #6
    9f1e:	f88d 2004 	strb.w	r2, [sp, #4]
    9f22:	f88d 0006 	strb.w	r0, [sp, #6]
    9f26:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    9f2a:	4b10      	ldr	r3, [pc, #64]	; (9f6c <usbd_ep_abort+0x118>)
    9f2c:	681b      	ldr	r3, [r3, #0]
    9f2e:	a801      	add	r0, sp, #4
    9f30:	4798      	blx	r3
    9f32:	e7ba      	b.n	9eaa <usbd_ep_abort+0x56>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    9f34:	490c      	ldr	r1, [pc, #48]	; (9f68 <usbd_ep_abort+0x114>)
    9f36:	f240 72b4 	movw	r2, #1972	; 0x7b4
    9f3a:	f8c1 2800 	str.w	r2, [r1, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9f3e:	f8d1 2804 	ldr.w	r2, [r1, #2052]	; 0x804
    9f42:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    9f44:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9f48:	f8d1 6804 	ldr.w	r6, [r1, #2052]	; 0x804
    9f4c:	4332      	orrs	r2, r6
    9f4e:	f8c1 2804 	str.w	r2, [r1, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    9f52:	f8d1 2804 	ldr.w	r2, [r1, #2052]	; 0x804
    9f56:	e7ca      	b.n	9eee <usbd_ep_abort+0x9a>
    9f58:	20001d6c 	.word	0x20001d6c
    9f5c:	20001e8c 	.word	0x20001e8c
    9f60:	20001e90 	.word	0x20001e90
    9f64:	20001dfc 	.word	0x20001dfc
    9f68:	40027000 	.word	0x40027000
    9f6c:	20001e94 	.word	0x20001e94

00009f70 <ev_setup_handler>:
{
    9f70:	b510      	push	{r4, lr}
    9f72:	b082      	sub	sp, #8
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    9f74:	4b20      	ldr	r3, [pc, #128]	; (9ff8 <ev_setup_handler+0x88>)
    9f76:	f8d3 4480 	ldr.w	r4, [r3, #1152]	; 0x480
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    9f7a:	4b20      	ldr	r3, [pc, #128]	; (9ffc <ev_setup_handler+0x8c>)
    9f7c:	681b      	ldr	r3, [r3, #0]
    9f7e:	43db      	mvns	r3, r3
    9f80:	b29b      	uxth	r3, r3
    9f82:	4a1f      	ldr	r2, [pc, #124]	; (a000 <ev_setup_handler+0x90>)
    9f84:	6812      	ldr	r2, [r2, #0]
    9f86:	4313      	orrs	r3, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    9f88:	4a1e      	ldr	r2, [pc, #120]	; (a004 <ev_setup_handler+0x94>)
    9f8a:	7810      	ldrb	r0, [r2, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    9f8c:	f992 2000 	ldrsb.w	r2, [r2]
    9f90:	2a00      	cmp	r2, #0
    9f92:	db2a      	blt.n	9fea <ev_setup_handler+0x7a>
    9f94:	2210      	movs	r2, #16
    9f96:	f000 010f 	and.w	r1, r0, #15
    9f9a:	4411      	add	r1, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    9f9c:	2201      	movs	r2, #1
    9f9e:	408a      	lsls	r2, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    9fa0:	4213      	tst	r3, r2
    9fa2:	d124      	bne.n	9fee <ev_setup_handler+0x7e>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    9fa4:	f014 0f80 	tst.w	r4, #128	; 0x80
    9fa8:	d124      	bne.n	9ff4 <ev_setup_handler+0x84>
    9faa:	2200      	movs	r2, #0
    m_last_setup_dir =
    9fac:	4b15      	ldr	r3, [pc, #84]	; (a004 <ev_setup_handler+0x94>)
    9fae:	701a      	strb	r2, [r3, #0]
    9fb0:	4b13      	ldr	r3, [pc, #76]	; (a000 <ev_setup_handler+0x90>)
    9fb2:	f3bf 8f5b 	dmb	ish
    9fb6:	e853 1f00 	ldrex	r1, [r3]
    9fba:	f021 1101 	bic.w	r1, r1, #65537	; 0x10001
    9fbe:	e843 1200 	strex	r2, r1, [r3]
    9fc2:	2a00      	cmp	r2, #0
    9fc4:	d1f7      	bne.n	9fb6 <ev_setup_handler+0x46>
    9fc6:	f3bf 8f5b 	dmb	ish
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    9fca:	4a0c      	ldr	r2, [pc, #48]	; (9ffc <ev_setup_handler+0x8c>)
    9fcc:	6813      	ldr	r3, [r2, #0]
    9fce:	f043 0301 	orr.w	r3, r3, #1
    9fd2:	6013      	str	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
    9fd4:	2300      	movs	r3, #0
    9fd6:	9301      	str	r3, [sp, #4]
    9fd8:	2305      	movs	r3, #5
    9fda:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
    9fde:	4b0a      	ldr	r3, [pc, #40]	; (a008 <ev_setup_handler+0x98>)
    9fe0:	681b      	ldr	r3, [r3, #0]
    9fe2:	a801      	add	r0, sp, #4
    9fe4:	4798      	blx	r3
}
    9fe6:	b002      	add	sp, #8
    9fe8:	bd10      	pop	{r4, pc}
    return NRFX_USBD_EP_BITPOS(ep);
    9fea:	2200      	movs	r2, #0
    9fec:	e7d3      	b.n	9f96 <ev_setup_handler+0x26>
        usbd_ep_abort(m_last_setup_dir);
    9fee:	f7ff ff31 	bl	9e54 <usbd_ep_abort>
    9ff2:	e7d7      	b.n	9fa4 <ev_setup_handler+0x34>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    9ff4:	2280      	movs	r2, #128	; 0x80
    9ff6:	e7d9      	b.n	9fac <ev_setup_handler+0x3c>
    9ff8:	40027000 	.word	0x40027000
    9ffc:	20001e90 	.word	0x20001e90
    a000:	20001e8c 	.word	0x20001e8c
    a004:	200023a0 	.word	0x200023a0
    a008:	20001e94 	.word	0x20001e94

0000a00c <nrfx_usbd_irq_handler>:
{
    a00c:	b570      	push	{r4, r5, r6, lr}
    return p_reg->INTENSET;
    a00e:	4b1c      	ldr	r3, [pc, #112]	; (a080 <nrfx_usbd_irq_handler+0x74>)
    a010:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    uint32_t active = 0;
    a014:	2400      	movs	r4, #0
    while (to_process)
    a016:	e003      	b.n	a020 <nrfx_usbd_irq_handler+0x14>
        to_process &= ~(1UL << event_nr);
    a018:	2301      	movs	r3, #1
    a01a:	408b      	lsls	r3, r1
    a01c:	ea22 0203 	bic.w	r2, r2, r3
    while (to_process)
    a020:	b1a2      	cbz	r2, a04c <nrfx_usbd_irq_handler+0x40>
        if (nrf_usbd_event_get_and_clear(NRF_USBD,
    a022:	fa92 f1a2 	rbit	r1, r2
    a026:	fab1 f181 	clz	r1, r1
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    a02a:	f101 0340 	add.w	r3, r1, #64	; 0x40
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    a02e:	009b      	lsls	r3, r3, #2
    a030:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a034:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    a038:	6818      	ldr	r0, [r3, #0]
    if (ret)
    a03a:	2800      	cmp	r0, #0
    a03c:	d0ec      	beq.n	a018 <nrfx_usbd_irq_handler+0xc>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    a03e:	2000      	movs	r0, #0
    a040:	6018      	str	r0, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    a042:	681b      	ldr	r3, [r3, #0]
            active |= 1UL << event_nr;
    a044:	2301      	movs	r3, #1
    a046:	408b      	lsls	r3, r1
    a048:	431c      	orrs	r4, r3
    a04a:	e7e5      	b.n	a018 <nrfx_usbd_irq_handler+0xc>
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    a04c:	f404 0600 	and.w	r6, r4, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    a050:	f424 0400 	bic.w	r4, r4, #8388608	; 0x800000
    while (active)
    a054:	e00b      	b.n	a06e <nrfx_usbd_irq_handler+0x62>
        m_isr[event_nr]();
    a056:	fa94 f5a4 	rbit	r5, r4
    a05a:	fab5 f585 	clz	r5, r5
    a05e:	4b09      	ldr	r3, [pc, #36]	; (a084 <nrfx_usbd_irq_handler+0x78>)
    a060:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    a064:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    a066:	2301      	movs	r3, #1
    a068:	40ab      	lsls	r3, r5
    a06a:	ea24 0403 	bic.w	r4, r4, r3
    while (active)
    a06e:	2c00      	cmp	r4, #0
    a070:	d1f1      	bne.n	a056 <nrfx_usbd_irq_handler+0x4a>
    usbd_dmareq_process();
    a072:	f7ff fca7 	bl	99c4 <usbd_dmareq_process>
    if (setup_active)
    a076:	b906      	cbnz	r6, a07a <nrfx_usbd_irq_handler+0x6e>
}
    a078:	bd70      	pop	{r4, r5, r6, pc}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    a07a:	f7ff ff79 	bl	9f70 <ev_setup_handler>
}
    a07e:	e7fb      	b.n	a078 <nrfx_usbd_irq_handler+0x6c>
    a080:	40027000 	.word	0x40027000
    a084:	000110ec 	.word	0x000110ec

0000a088 <usbd_ep_abort_all>:
{
    a088:	b538      	push	{r3, r4, r5, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    a08a:	4b12      	ldr	r3, [pc, #72]	; (a0d4 <usbd_ep_abort_all+0x4c>)
    a08c:	885b      	ldrh	r3, [r3, #2]
    a08e:	4a12      	ldr	r2, [pc, #72]	; (a0d8 <usbd_ep_abort_all+0x50>)
    a090:	6814      	ldr	r4, [r2, #0]
    a092:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    while (0 != ep_waiting)
    a096:	e009      	b.n	a0ac <usbd_ep_abort_all+0x24>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    a098:	f045 0080 	orr.w	r0, r5, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    a09c:	f010 0f08 	tst.w	r0, #8
    a0a0:	d00f      	beq.n	a0c2 <usbd_ep_abort_all+0x3a>
        ep_waiting &= ~(1U << bitpos);
    a0a2:	b2ed      	uxtb	r5, r5
    a0a4:	2301      	movs	r3, #1
    a0a6:	40ab      	lsls	r3, r5
    a0a8:	ea24 0403 	bic.w	r4, r4, r3
    while (0 != ep_waiting)
    a0ac:	b164      	cbz	r4, a0c8 <usbd_ep_abort_all+0x40>
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    a0ae:	fa94 f5a4 	rbit	r5, r4
    a0b2:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    a0b6:	2d0f      	cmp	r5, #15
    a0b8:	d9ee      	bls.n	a098 <usbd_ep_abort_all+0x10>
    a0ba:	f1a5 0010 	sub.w	r0, r5, #16
    a0be:	b2c0      	uxtb	r0, r0
    a0c0:	e7ec      	b.n	a09c <usbd_ep_abort_all+0x14>
            usbd_ep_abort(bit2ep(bitpos));
    a0c2:	f7ff fec7 	bl	9e54 <usbd_ep_abort>
    a0c6:	e7ec      	b.n	a0a2 <usbd_ep_abort_all+0x1a>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    a0c8:	4b02      	ldr	r3, [pc, #8]	; (a0d4 <usbd_ep_abort_all+0x4c>)
    a0ca:	f240 12ff 	movw	r2, #511	; 0x1ff
    a0ce:	601a      	str	r2, [r3, #0]
}
    a0d0:	bd38      	pop	{r3, r4, r5, pc}
    a0d2:	bf00      	nop
    a0d4:	20001e90 	.word	0x20001e90
    a0d8:	20001e8c 	.word	0x20001e8c

0000a0dc <nrfx_usbd_stop>:
{
    a0dc:	b510      	push	{r4, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a0de:	4b0c      	ldr	r3, [pc, #48]	; (a110 <nrfx_usbd_stop+0x34>)
    a0e0:	2280      	movs	r2, #128	; 0x80
    a0e2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    a0e6:	2027      	movs	r0, #39	; 0x27
    a0e8:	f7fa fc90 	bl	4a0c <arch_irq_is_enabled>
    a0ec:	b900      	cbnz	r0, a0f0 <nrfx_usbd_stop+0x14>
}
    a0ee:	bd10      	pop	{r4, pc}
        usbd_ep_abort_all();
    a0f0:	f7ff ffca 	bl	a088 <usbd_ep_abort_all>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    a0f4:	4c07      	ldr	r4, [pc, #28]	; (a114 <nrfx_usbd_stop+0x38>)
    a0f6:	2300      	movs	r3, #0
    a0f8:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    a0fc:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
    a100:	2027      	movs	r0, #39	; 0x27
    a102:	f003 fdae 	bl	dc62 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    a106:	f04f 33ff 	mov.w	r3, #4294967295
    a10a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
    a10e:	e7ee      	b.n	a0ee <nrfx_usbd_stop+0x12>
    a110:	e000e100 	.word	0xe000e100
    a114:	40027000 	.word	0x40027000

0000a118 <nrfx_usbd_disable>:
{
    a118:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    a11a:	f7ff ffdf 	bl	a0dc <nrfx_usbd_stop>
    return p_reg->INTENSET;
    a11e:	4b0c      	ldr	r3, [pc, #48]	; (a150 <nrfx_usbd_disable+0x38>)
    a120:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    a124:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    a128:	2200      	movs	r2, #0
    a12a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    a12e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    a132:	f004 fef4 	bl	ef1e <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    a136:	b118      	cbz	r0, a140 <nrfx_usbd_disable+0x28>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    a138:	4b05      	ldr	r3, [pc, #20]	; (a150 <nrfx_usbd_disable+0x38>)
    a13a:	2200      	movs	r2, #0
    a13c:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = false;
    a140:	4b04      	ldr	r3, [pc, #16]	; (a154 <nrfx_usbd_disable+0x3c>)
    a142:	2200      	movs	r2, #0
    a144:	701a      	strb	r2, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    a146:	4b04      	ldr	r3, [pc, #16]	; (a158 <nrfx_usbd_disable+0x40>)
    a148:	2201      	movs	r2, #1
    a14a:	701a      	strb	r2, [r3, #0]
}
    a14c:	bd08      	pop	{r3, pc}
    a14e:	bf00      	nop
    a150:	40027000 	.word	0x40027000
    a154:	2000239f 	.word	0x2000239f
    a158:	200023a2 	.word	0x200023a2

0000a15c <nrfx_usbd_ep_disable>:
{
    a15c:	b510      	push	{r4, lr}
    a15e:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
    a160:	f7ff fe78 	bl	9e54 <usbd_ep_abort>
    nrf_usbd_ep_disable(NRF_USBD, ep_to_hal(ep));
    a164:	4621      	mov	r1, r4
    a166:	4809      	ldr	r0, [pc, #36]	; (a18c <nrfx_usbd_ep_disable+0x30>)
    a168:	f004 fe89 	bl	ee7e <nrf_usbd_ep_disable>
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    a16c:	f014 0f80 	tst.w	r4, #128	; 0x80
    a170:	d109      	bne.n	a186 <nrfx_usbd_ep_disable+0x2a>
    a172:	4b07      	ldr	r3, [pc, #28]	; (a190 <nrfx_usbd_ep_disable+0x34>)
    a174:	f004 040f 	and.w	r4, r4, #15
    a178:	5d1a      	ldrb	r2, [r3, r4]
    a17a:	2301      	movs	r3, #1
    a17c:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    a17e:	4a03      	ldr	r2, [pc, #12]	; (a18c <nrfx_usbd_ep_disable+0x30>)
    a180:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    a184:	bd10      	pop	{r4, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    a186:	4b03      	ldr	r3, [pc, #12]	; (a194 <nrfx_usbd_ep_disable+0x38>)
    a188:	e7f4      	b.n	a174 <nrfx_usbd_ep_disable+0x18>
    a18a:	bf00      	nop
    a18c:	40027000 	.word	0x40027000
    a190:	000110ac 	.word	0x000110ac
    a194:	000110b8 	.word	0x000110b8

0000a198 <nrfx_usbd_ep_enable>:
{
    a198:	b538      	push	{r3, r4, r5, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    a19a:	b241      	sxtb	r1, r0
    a19c:	2900      	cmp	r1, #0
    a19e:	db22      	blt.n	a1e6 <nrfx_usbd_ep_enable+0x4e>
    a1a0:	4b25      	ldr	r3, [pc, #148]	; (a238 <nrfx_usbd_ep_enable+0xa0>)
    a1a2:	f000 040f 	and.w	r4, r0, #15
    a1a6:	5d1a      	ldrb	r2, [r3, r4]
    a1a8:	2301      	movs	r3, #1
    a1aa:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
    a1ac:	4a23      	ldr	r2, [pc, #140]	; (a23c <nrfx_usbd_ep_enable+0xa4>)
    a1ae:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
    a1b2:	2900      	cmp	r1, #0
    a1b4:	db19      	blt.n	a1ea <nrfx_usbd_ep_enable+0x52>
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    a1b6:	4b21      	ldr	r3, [pc, #132]	; (a23c <nrfx_usbd_ep_enable+0xa4>)
    a1b8:	f8d3 3514 	ldr.w	r3, [r3, #1300]	; 0x514
    a1bc:	40e3      	lsrs	r3, r4
    a1be:	f003 0301 	and.w	r3, r3, #1
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    a1c2:	b97b      	cbnz	r3, a1e4 <nrfx_usbd_ep_enable+0x4c>
    if (NRF_USBD_EPIN_CHECK(ep))
    a1c4:	2900      	cmp	r1, #0
    a1c6:	db16      	blt.n	a1f6 <nrfx_usbd_ep_enable+0x5e>
        p_reg->EPOUTEN |= 1UL << epnr;
    a1c8:	4d1c      	ldr	r5, [pc, #112]	; (a23c <nrfx_usbd_ep_enable+0xa4>)
    a1ca:	f8d5 3514 	ldr.w	r3, [r5, #1300]	; 0x514
    a1ce:	2201      	movs	r2, #1
    a1d0:	40a2      	lsls	r2, r4
    a1d2:	4313      	orrs	r3, r2
    a1d4:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    a1d8:	b124      	cbz	r4, a1e4 <nrfx_usbd_ep_enable+0x4c>
    a1da:	2900      	cmp	r1, #0
    a1dc:	db02      	blt.n	a1e4 <nrfx_usbd_ep_enable+0x4c>
        NRF_USBD_EPOUT_CHECK(ep) &&
    a1de:	f010 0f08 	tst.w	r0, #8
    a1e2:	d011      	beq.n	a208 <nrfx_usbd_ep_enable+0x70>
}
    a1e4:	bd38      	pop	{r3, r4, r5, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    a1e6:	4b16      	ldr	r3, [pc, #88]	; (a240 <nrfx_usbd_ep_enable+0xa8>)
    a1e8:	e7db      	b.n	a1a2 <nrfx_usbd_ep_enable+0xa>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    a1ea:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    a1ee:	40e3      	lsrs	r3, r4
    a1f0:	f003 0301 	and.w	r3, r3, #1
    a1f4:	e7e5      	b.n	a1c2 <nrfx_usbd_ep_enable+0x2a>
        p_reg->EPINEN |= 1UL << epnr;
    a1f6:	4d11      	ldr	r5, [pc, #68]	; (a23c <nrfx_usbd_ep_enable+0xa4>)
    a1f8:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
    a1fc:	2201      	movs	r2, #1
    a1fe:	40a2      	lsls	r2, r4
    a200:	4313      	orrs	r3, r2
    a202:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
    a206:	e7e7      	b.n	a1d8 <nrfx_usbd_ep_enable+0x40>
	__asm__ volatile(
    a208:	f04f 0320 	mov.w	r3, #32
    a20c:	f3ef 8511 	mrs	r5, BASEPRI
    a210:	f383 8812 	msr	BASEPRI_MAX, r3
    a214:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    a218:	f7ff fdec 	bl	9df4 <nrfx_usbd_transfer_out_drop>
    return NRFX_USBD_EP_BITPOS(ep);
    a21c:	3410      	adds	r4, #16
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    a21e:	2201      	movs	r2, #1
    a220:	40a2      	lsls	r2, r4
    a222:	4908      	ldr	r1, [pc, #32]	; (a244 <nrfx_usbd_ep_enable+0xac>)
    a224:	680b      	ldr	r3, [r1, #0]
    a226:	ea23 0302 	bic.w	r3, r3, r2
    a22a:	600b      	str	r3, [r1, #0]
	__asm__ volatile(
    a22c:	f385 8811 	msr	BASEPRI, r5
    a230:	f3bf 8f6f 	isb	sy
}
    a234:	e7d6      	b.n	a1e4 <nrfx_usbd_ep_enable+0x4c>
    a236:	bf00      	nop
    a238:	000110ac 	.word	0x000110ac
    a23c:	40027000 	.word	0x40027000
    a240:	000110b8 	.word	0x000110b8
    a244:	20001e8c 	.word	0x20001e8c

0000a248 <nrfx_usbd_ep_stall_clear>:
{
    a248:	b510      	push	{r4, lr}
    a24a:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    a24c:	f010 0f80 	tst.w	r0, #128	; 0x80
    a250:	d003      	beq.n	a25a <nrfx_usbd_ep_stall_clear+0x12>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    a252:	4b06      	ldr	r3, [pc, #24]	; (a26c <nrfx_usbd_ep_stall_clear+0x24>)
    a254:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    a258:	bd10      	pop	{r4, pc}
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    a25a:	f7ff fd0b 	bl	9c74 <nrfx_usbd_ep_stall_check>
    a25e:	2800      	cmp	r0, #0
    a260:	d0f7      	beq.n	a252 <nrfx_usbd_ep_stall_clear+0xa>
        nrfx_usbd_transfer_out_drop(ep);
    a262:	4620      	mov	r0, r4
    a264:	f7ff fdc6 	bl	9df4 <nrfx_usbd_transfer_out_drop>
    a268:	e7f3      	b.n	a252 <nrfx_usbd_ep_stall_clear+0xa>
    a26a:	bf00      	nop
    a26c:	40027000 	.word	0x40027000

0000a270 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    a270:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    a272:	4c11      	ldr	r4, [pc, #68]	; (a2b8 <_DoInit+0x48>)
    a274:	2303      	movs	r3, #3
    a276:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    a278:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    a27a:	4a10      	ldr	r2, [pc, #64]	; (a2bc <_DoInit+0x4c>)
    a27c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    a27e:	4b10      	ldr	r3, [pc, #64]	; (a2c0 <_DoInit+0x50>)
    a280:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    a282:	f44f 6380 	mov.w	r3, #1024	; 0x400
    a286:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    a288:	2300      	movs	r3, #0
    a28a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    a28c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    a28e:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    a290:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    a292:	4a0c      	ldr	r2, [pc, #48]	; (a2c4 <_DoInit+0x54>)
    a294:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    a296:	2210      	movs	r2, #16
    a298:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    a29a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    a29c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    a29e:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    a2a0:	4909      	ldr	r1, [pc, #36]	; (a2c8 <_DoInit+0x58>)
    a2a2:	1de0      	adds	r0, r4, #7
    a2a4:	f003 fd53 	bl	dd4e <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    a2a8:	4908      	ldr	r1, [pc, #32]	; (a2cc <_DoInit+0x5c>)
    a2aa:	4620      	mov	r0, r4
    a2ac:	f003 fd4f 	bl	dd4e <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    a2b0:	2320      	movs	r3, #32
    a2b2:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    a2b4:	bd10      	pop	{r4, pc}
    a2b6:	bf00      	nop
    a2b8:	200022a8 	.word	0x200022a8
    a2bc:	0001115c 	.word	0x0001115c
    a2c0:	20001ea8 	.word	0x20001ea8
    a2c4:	20001e98 	.word	0x20001e98
    a2c8:	00011168 	.word	0x00011168
    a2cc:	0001116c 	.word	0x0001116c

0000a2d0 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    a2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a2d4:	4604      	mov	r4, r0
    a2d6:	460e      	mov	r6, r1
    a2d8:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    a2da:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    a2de:	4a2d      	ldr	r2, [pc, #180]	; (a394 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    a2e0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    a2e4:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    a2e6:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    a2e8:	42bb      	cmp	r3, r7
    a2ea:	d84c      	bhi.n	a386 <SEGGER_RTT_WriteSkipNoLock+0xb6>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    a2ec:	eb00 0140 	add.w	r1, r0, r0, lsl #1
    a2f0:	4a28      	ldr	r2, [pc, #160]	; (a394 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    a2f2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    a2f6:	f8d2 8020 	ldr.w	r8, [r2, #32]
    a2fa:	eba8 0907 	sub.w	r9, r8, r7
    a2fe:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    a302:	4295      	cmp	r5, r2
    a304:	d904      	bls.n	a310 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    a306:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    a308:	429d      	cmp	r5, r3
    a30a:	d916      	bls.n	a33a <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    a30c:	2000      	movs	r0, #0
    a30e:	e03f      	b.n	a390 <SEGGER_RTT_WriteSkipNoLock+0xc0>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    a310:	f8df 8080 	ldr.w	r8, [pc, #128]	; a394 <SEGGER_RTT_WriteSkipNoLock+0xc4>
    a314:	1c63      	adds	r3, r4, #1
    a316:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a31a:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    a31e:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    a320:	462a      	mov	r2, r5
    a322:	4631      	mov	r1, r6
    a324:	4438      	add	r0, r7
    a326:	f003 fd49 	bl	ddbc <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    a32a:	442f      	add	r7, r5
    a32c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    a330:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
    a334:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    a336:	2001      	movs	r0, #1
    a338:	e02a      	b.n	a390 <SEGGER_RTT_WriteSkipNoLock+0xc0>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    a33a:	1c43      	adds	r3, r0, #1
    a33c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a340:	4a14      	ldr	r2, [pc, #80]	; (a394 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    a342:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    a346:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    a348:	464a      	mov	r2, r9
    a34a:	4631      	mov	r1, r6
    a34c:	4438      	add	r0, r7
    a34e:	f003 fd35 	bl	ddbc <memcpy>
      NumBytes -= Rem;
    a352:	eba7 0808 	sub.w	r8, r7, r8
      if (NumBytes) {
    a356:	eb18 0505 	adds.w	r5, r8, r5
    a35a:	d107      	bne.n	a36c <SEGGER_RTT_WriteSkipNoLock+0x9c>
      pRing->WrOff = NumBytes;
    a35c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    a360:	4b0c      	ldr	r3, [pc, #48]	; (a394 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    a362:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    a366:	625d      	str	r5, [r3, #36]	; 0x24
      return 1;
    a368:	2001      	movs	r0, #1
    a36a:	e011      	b.n	a390 <SEGGER_RTT_WriteSkipNoLock+0xc0>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    a36c:	1c63      	adds	r3, r4, #1
    a36e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a372:	4a08      	ldr	r2, [pc, #32]	; (a394 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    a374:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
    a378:	462a      	mov	r2, r5
    a37a:	eb06 0109 	add.w	r1, r6, r9
    a37e:	6858      	ldr	r0, [r3, #4]
    a380:	f003 fd1c 	bl	ddbc <memcpy>
    a384:	e7ea      	b.n	a35c <SEGGER_RTT_WriteSkipNoLock+0x8c>
    Avail = RdOff - WrOff - 1u;
    a386:	1bdb      	subs	r3, r3, r7
    a388:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    a38a:	42ab      	cmp	r3, r5
    a38c:	d2c0      	bcs.n	a310 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    a38e:	2000      	movs	r0, #0
}
    a390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a394:	200022a8 	.word	0x200022a8

0000a398 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    a398:	4b06      	ldr	r3, [pc, #24]	; (a3b4 <SEGGER_RTT_HasDataUp+0x1c>)
    a39a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    a39e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    a3a2:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    a3a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    a3a8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    a3ac:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    a3ae:	1a80      	subs	r0, r0, r2
    a3b0:	4770      	bx	lr
    a3b2:	bf00      	nop
    a3b4:	200022a8 	.word	0x200022a8

0000a3b8 <zephyr_rtt_mutex_lock>:
}

#ifdef CONFIG_MULTITHREADING

void zephyr_rtt_mutex_lock(void)
{
    a3b8:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    a3ba:	f04f 32ff 	mov.w	r2, #4294967295
    a3be:	f04f 33ff 	mov.w	r3, #4294967295
    a3c2:	4802      	ldr	r0, [pc, #8]	; (a3cc <zephyr_rtt_mutex_lock+0x14>)
    a3c4:	f000 fbd0 	bl	ab68 <z_impl_k_mutex_lock>
	k_mutex_lock(&rtt_term_mutex, K_FOREVER);
}
    a3c8:	bd08      	pop	{r3, pc}
    a3ca:	bf00      	nop
    a3cc:	2000022c 	.word	0x2000022c

0000a3d0 <zephyr_rtt_mutex_unlock>:

void zephyr_rtt_mutex_unlock(void)
{
    a3d0:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
    a3d2:	4802      	ldr	r0, [pc, #8]	; (a3dc <zephyr_rtt_mutex_unlock+0xc>)
    a3d4:	f000 fc4c 	bl	ac70 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&rtt_term_mutex);
}
    a3d8:	bd08      	pop	{r3, pc}
    a3da:	bf00      	nop
    a3dc:	2000022c 	.word	0x2000022c

0000a3e0 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    a3e0:	4b03      	ldr	r3, [pc, #12]	; (a3f0 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    a3e2:	e000      	b.n	a3e6 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    a3e4:	3318      	adds	r3, #24
	while (dev < __device_end) {
    a3e6:	4a03      	ldr	r2, [pc, #12]	; (a3f4 <z_device_state_init+0x14>)
    a3e8:	4293      	cmp	r3, r2
    a3ea:	d3fb      	bcc.n	a3e4 <z_device_state_init+0x4>
	}
}
    a3ec:	4770      	bx	lr
    a3ee:	bf00      	nop
    a3f0:	0000fc1c 	.word	0x0000fc1c
    a3f4:	0000fc94 	.word	0x0000fc94

0000a3f8 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    a3f8:	2804      	cmp	r0, #4
    a3fa:	d80c      	bhi.n	a416 <reason_to_str+0x1e>
    a3fc:	e8df f000 	tbb	[pc, r0]
    a400:	07050d03 	.word	0x07050d03
    a404:	09          	.byte	0x09
    a405:	00          	.byte	0x00
    a406:	4806      	ldr	r0, [pc, #24]	; (a420 <reason_to_str+0x28>)
    a408:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
    a40a:	4806      	ldr	r0, [pc, #24]	; (a424 <reason_to_str+0x2c>)
    a40c:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
    a40e:	4806      	ldr	r0, [pc, #24]	; (a428 <reason_to_str+0x30>)
    a410:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    a412:	4806      	ldr	r0, [pc, #24]	; (a42c <reason_to_str+0x34>)
    a414:	4770      	bx	lr
	default:
		return "Unknown error";
    a416:	4806      	ldr	r0, [pc, #24]	; (a430 <reason_to_str+0x38>)
    a418:	4770      	bx	lr
		return "Unhandled interrupt";
    a41a:	4806      	ldr	r0, [pc, #24]	; (a434 <reason_to_str+0x3c>)
	}
}
    a41c:	4770      	bx	lr
    a41e:	bf00      	nop
    a420:	00011178 	.word	0x00011178
    a424:	0001119c 	.word	0x0001119c
    a428:	000111ac 	.word	0x000111ac
    a42c:	000111b8 	.word	0x000111b8
    a430:	000111c8 	.word	0x000111c8
    a434:	00011188 	.word	0x00011188

0000a438 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    a438:	b130      	cbz	r0, a448 <thread_name_get+0x10>
{
    a43a:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    a43c:	f004 fedf 	bl	f1fe <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    a440:	b120      	cbz	r0, a44c <thread_name_get+0x14>
    a442:	7803      	ldrb	r3, [r0, #0]
    a444:	b123      	cbz	r3, a450 <thread_name_get+0x18>
}
    a446:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    a448:	4802      	ldr	r0, [pc, #8]	; (a454 <thread_name_get+0x1c>)
}
    a44a:	4770      	bx	lr
		thread_name = "unknown";
    a44c:	4801      	ldr	r0, [pc, #4]	; (a454 <thread_name_get+0x1c>)
    a44e:	e7fa      	b.n	a446 <thread_name_get+0xe>
    a450:	4800      	ldr	r0, [pc, #0]	; (a454 <thread_name_get+0x1c>)
	return thread_name;
    a452:	e7f8      	b.n	a446 <thread_name_get+0xe>
    a454:	000111d8 	.word	0x000111d8

0000a458 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    a458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a45c:	b089      	sub	sp, #36	; 0x24
    a45e:	af00      	add	r7, sp, #0
    a460:	4606      	mov	r6, r0
    a462:	460c      	mov	r4, r1
	__asm__ volatile(
    a464:	f04f 0320 	mov.w	r3, #32
    a468:	f3ef 8811 	mrs	r8, BASEPRI
    a46c:	f383 8812 	msr	BASEPRI_MAX, r3
    a470:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    a474:	f001 f9be 	bl	b7f4 <z_impl_z_current_get>
    a478:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    a47a:	4630      	mov	r0, r6
    a47c:	f7ff ffbc 	bl	a3f8 <reason_to_str>
    a480:	46e9      	mov	r9, sp
    a482:	2301      	movs	r3, #1
    a484:	713b      	strb	r3, [r7, #4]
    a486:	2303      	movs	r3, #3
    a488:	717b      	strb	r3, [r7, #5]
    a48a:	b08a      	sub	sp, #40	; 0x28
    a48c:	46ec      	mov	ip, sp
    a48e:	f11c 0210 	adds.w	r2, ip, #16
    a492:	d021      	beq.n	a4d8 <z_fatal_error+0x80>
    a494:	f04f 0e16 	mov.w	lr, #22
    a498:	b152      	cbz	r2, a4b0 <z_fatal_error+0x58>
    a49a:	4673      	mov	r3, lr
    a49c:	f1be 0f04 	cmp.w	lr, #4
    a4a0:	dd02      	ble.n	a4a8 <z_fatal_error+0x50>
    a4a2:	4972      	ldr	r1, [pc, #456]	; (a66c <z_fatal_error+0x214>)
    a4a4:	f8cc 1014 	str.w	r1, [ip, #20]
    a4a8:	2b08      	cmp	r3, #8
    a4aa:	dd01      	ble.n	a4b0 <z_fatal_error+0x58>
    a4ac:	f8cc 6018 	str.w	r6, [ip, #24]
    a4b0:	2301      	movs	r3, #1
    a4b2:	703b      	strb	r3, [r7, #0]
    a4b4:	2303      	movs	r3, #3
    a4b6:	707b      	strb	r3, [r7, #1]
    a4b8:	b1da      	cbz	r2, a4f2 <z_fatal_error+0x9a>
    a4ba:	4673      	mov	r3, lr
    a4bc:	f1be 0f0c 	cmp.w	lr, #12
    a4c0:	dd01      	ble.n	a4c6 <z_fatal_error+0x6e>
    a4c2:	f8cc 001c 	str.w	r0, [ip, #28]
    a4c6:	2b10      	cmp	r3, #16
    a4c8:	dd02      	ble.n	a4d0 <z_fatal_error+0x78>
    a4ca:	2300      	movs	r3, #0
    a4cc:	f8cc 3020 	str.w	r3, [ip, #32]
    a4d0:	f10c 0324 	add.w	r3, ip, #36	; 0x24
    a4d4:	2100      	movs	r1, #0
    a4d6:	e00a      	b.n	a4ee <z_fatal_error+0x96>
    a4d8:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
    a4dc:	e7dc      	b.n	a498 <z_fatal_error+0x40>
    a4de:	f101 0020 	add.w	r0, r1, #32
    a4e2:	4438      	add	r0, r7
    a4e4:	f810 0c20 	ldrb.w	r0, [r0, #-32]
    a4e8:	f803 0b01 	strb.w	r0, [r3], #1
    a4ec:	3101      	adds	r1, #1
    a4ee:	2901      	cmp	r1, #1
    a4f0:	d9f5      	bls.n	a4de <z_fatal_error+0x86>
    a4f2:	f1be 0f15 	cmp.w	lr, #21
    a4f6:	dd50      	ble.n	a59a <z_fatal_error+0x142>
    a4f8:	2316      	movs	r3, #22
    a4fa:	b14a      	cbz	r2, a510 <z_fatal_error+0xb8>
    a4fc:	2105      	movs	r1, #5
    a4fe:	7139      	strb	r1, [r7, #4]
    a500:	2100      	movs	r1, #0
    a502:	7179      	strb	r1, [r7, #5]
    a504:	71b9      	strb	r1, [r7, #6]
    a506:	2101      	movs	r1, #1
    a508:	71f9      	strb	r1, [r7, #7]
    a50a:	6878      	ldr	r0, [r7, #4]
    a50c:	f8cc 0010 	str.w	r0, [ip, #16]
    a510:	2100      	movs	r1, #0
    a512:	f36f 0100 	bfc	r1, #0, #1
    a516:	f36f 0141 	bfc	r1, #1, #1
    a51a:	f36f 0182 	bfc	r1, #2, #1
    a51e:	f36f 01c5 	bfc	r1, #3, #3
    a522:	2001      	movs	r0, #1
    a524:	f360 1188 	bfi	r1, r0, #6, #3
    a528:	f3c3 030a 	ubfx	r3, r3, #0, #11
    a52c:	f363 2153 	bfi	r1, r3, #9, #11
    a530:	f36f 511f 	bfc	r1, #20, #12
    a534:	2300      	movs	r3, #0
    a536:	484e      	ldr	r0, [pc, #312]	; (a670 <z_fatal_error+0x218>)
    a538:	f7f7 fc26 	bl	1d88 <z_impl_z_log_msg_static_create>
    a53c:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    a53e:	b11c      	cbz	r4, a548 <z_fatal_error+0xf0>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    a540:	69e3      	ldr	r3, [r4, #28]
    a542:	f3c3 0308 	ubfx	r3, r3, #0, #9
    a546:	bb5b      	cbnz	r3, a5a0 <z_fatal_error+0x148>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    a548:	4628      	mov	r0, r5
    a54a:	f7ff ff75 	bl	a438 <thread_name_get>
    a54e:	46e9      	mov	r9, sp
    a550:	2301      	movs	r3, #1
    a552:	713b      	strb	r3, [r7, #4]
    a554:	2303      	movs	r3, #3
    a556:	717b      	strb	r3, [r7, #5]
    a558:	b08a      	sub	sp, #40	; 0x28
    a55a:	46ec      	mov	ip, sp
    a55c:	f11c 0210 	adds.w	r2, ip, #16
    a560:	d03f      	beq.n	a5e2 <z_fatal_error+0x18a>
    a562:	f04f 0e12 	mov.w	lr, #18
    a566:	b152      	cbz	r2, a57e <z_fatal_error+0x126>
    a568:	4673      	mov	r3, lr
    a56a:	f1be 0f04 	cmp.w	lr, #4
    a56e:	dd02      	ble.n	a576 <z_fatal_error+0x11e>
    a570:	4940      	ldr	r1, [pc, #256]	; (a674 <z_fatal_error+0x21c>)
    a572:	f8cc 1014 	str.w	r1, [ip, #20]
    a576:	2b08      	cmp	r3, #8
    a578:	dd01      	ble.n	a57e <z_fatal_error+0x126>
    a57a:	f8cc 5018 	str.w	r5, [ip, #24]
    a57e:	2301      	movs	r3, #1
    a580:	703b      	strb	r3, [r7, #0]
    a582:	2303      	movs	r3, #3
    a584:	707b      	strb	r3, [r7, #1]
    a586:	b3ca      	cbz	r2, a5fc <z_fatal_error+0x1a4>
    a588:	f1be 0f0c 	cmp.w	lr, #12
    a58c:	dd01      	ble.n	a592 <z_fatal_error+0x13a>
    a58e:	f8cc 001c 	str.w	r0, [ip, #28]
    a592:	f10c 0320 	add.w	r3, ip, #32
    a596:	2100      	movs	r1, #0
    a598:	e02e      	b.n	a5f8 <z_fatal_error+0x1a0>
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    a59a:	f06f 031b 	mvn.w	r3, #27
    a59e:	e7ac      	b.n	a4fa <z_fatal_error+0xa2>
		LOG_ERR("Fault during interrupt handling\n");
    a5a0:	4b35      	ldr	r3, [pc, #212]	; (a678 <z_fatal_error+0x220>)
    a5a2:	61fb      	str	r3, [r7, #28]
    a5a4:	2302      	movs	r3, #2
    a5a6:	713b      	strb	r3, [r7, #4]
    a5a8:	2300      	movs	r3, #0
    a5aa:	717b      	strb	r3, [r7, #5]
    a5ac:	71bb      	strb	r3, [r7, #6]
    a5ae:	71fb      	strb	r3, [r7, #7]
    a5b0:	687a      	ldr	r2, [r7, #4]
    a5b2:	61ba      	str	r2, [r7, #24]
    a5b4:	4619      	mov	r1, r3
    a5b6:	f363 0100 	bfi	r1, r3, #0, #1
    a5ba:	f363 0141 	bfi	r1, r3, #1, #1
    a5be:	f363 0182 	bfi	r1, r3, #2, #1
    a5c2:	f363 01c5 	bfi	r1, r3, #3, #3
    a5c6:	2201      	movs	r2, #1
    a5c8:	f362 1188 	bfi	r1, r2, #6, #3
    a5cc:	2208      	movs	r2, #8
    a5ce:	f362 2153 	bfi	r1, r2, #9, #11
    a5d2:	f363 511f 	bfi	r1, r3, #20, #12
    a5d6:	f107 0218 	add.w	r2, r7, #24
    a5da:	4825      	ldr	r0, [pc, #148]	; (a670 <z_fatal_error+0x218>)
    a5dc:	f7f7 fbd4 	bl	1d88 <z_impl_z_log_msg_static_create>
    a5e0:	e7b2      	b.n	a548 <z_fatal_error+0xf0>
	LOG_ERR("Current thread: %p (%s)", thread,
    a5e2:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
    a5e6:	e7be      	b.n	a566 <z_fatal_error+0x10e>
    a5e8:	f101 0020 	add.w	r0, r1, #32
    a5ec:	4438      	add	r0, r7
    a5ee:	f810 0c20 	ldrb.w	r0, [r0, #-32]
    a5f2:	f803 0b01 	strb.w	r0, [r3], #1
    a5f6:	3101      	adds	r1, #1
    a5f8:	2901      	cmp	r1, #1
    a5fa:	d9f5      	bls.n	a5e8 <z_fatal_error+0x190>
    a5fc:	f1be 0f11 	cmp.w	lr, #17
    a600:	dd31      	ble.n	a666 <z_fatal_error+0x20e>
    a602:	2312      	movs	r3, #18
    a604:	b14a      	cbz	r2, a61a <z_fatal_error+0x1c2>
    a606:	2104      	movs	r1, #4
    a608:	7139      	strb	r1, [r7, #4]
    a60a:	2100      	movs	r1, #0
    a60c:	7179      	strb	r1, [r7, #5]
    a60e:	71b9      	strb	r1, [r7, #6]
    a610:	2101      	movs	r1, #1
    a612:	71f9      	strb	r1, [r7, #7]
    a614:	6878      	ldr	r0, [r7, #4]
    a616:	f8cc 0010 	str.w	r0, [ip, #16]
    a61a:	2100      	movs	r1, #0
    a61c:	f36f 0100 	bfc	r1, #0, #1
    a620:	f36f 0141 	bfc	r1, #1, #1
    a624:	f36f 0182 	bfc	r1, #2, #1
    a628:	f36f 01c5 	bfc	r1, #3, #3
    a62c:	2001      	movs	r0, #1
    a62e:	f360 1188 	bfi	r1, r0, #6, #3
    a632:	f3c3 030a 	ubfx	r3, r3, #0, #11
    a636:	f363 2153 	bfi	r1, r3, #9, #11
    a63a:	f36f 511f 	bfc	r1, #20, #12
    a63e:	2300      	movs	r3, #0
    a640:	480b      	ldr	r0, [pc, #44]	; (a670 <z_fatal_error+0x218>)
    a642:	f7f7 fba1 	bl	1d88 <z_impl_z_log_msg_static_create>
    a646:	46cd      	mov	sp, r9

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    a648:	4621      	mov	r1, r4
    a64a:	4630      	mov	r0, r6
    a64c:	f7fd fe48 	bl	82e0 <k_sys_fatal_error_handler>
	__asm__ volatile(
    a650:	f388 8811 	msr	BASEPRI, r8
    a654:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    a658:	4628      	mov	r0, r5
    a65a:	f7fb fa25 	bl	5aa8 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    a65e:	3724      	adds	r7, #36	; 0x24
    a660:	46bd      	mov	sp, r7
    a662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_ERR("Current thread: %p (%s)", thread,
    a666:	f06f 031b 	mvn.w	r3, #27
    a66a:	e7cb      	b.n	a604 <z_fatal_error+0x1ac>
    a66c:	000111e0 	.word	0x000111e0
    a670:	0000fe8c 	.word	0x0000fe8c
    a674:	0001122c 	.word	0x0001122c
    a678:	00011208 	.word	0x00011208

0000a67c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
    a67c:	b570      	push	{r4, r5, r6, lr}
    a67e:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a680:	4b12      	ldr	r3, [pc, #72]	; (a6cc <z_sys_init_run_level+0x50>)
    a682:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    a686:	e009      	b.n	a69c <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    a688:	4243      	negs	r3, r0
    a68a:	e017      	b.n	a6bc <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    a68c:	68ea      	ldr	r2, [r5, #12]
    a68e:	7013      	strb	r3, [r2, #0]
			}
			dev->state->initialized = true;
    a690:	68ea      	ldr	r2, [r5, #12]
    a692:	7853      	ldrb	r3, [r2, #1]
    a694:	f043 0301 	orr.w	r3, r3, #1
    a698:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a69a:	3408      	adds	r4, #8
    a69c:	1c73      	adds	r3, r6, #1
    a69e:	4a0b      	ldr	r2, [pc, #44]	; (a6cc <z_sys_init_run_level+0x50>)
    a6a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6a4:	42a3      	cmp	r3, r4
    a6a6:	d910      	bls.n	a6ca <z_sys_init_run_level+0x4e>
		const struct device *dev = entry->dev;
    a6a8:	6865      	ldr	r5, [r4, #4]
		if (dev != NULL) {
    a6aa:	b15d      	cbz	r5, a6c4 <z_sys_init_run_level+0x48>
			int rc = entry->init_fn.dev(dev);
    a6ac:	6823      	ldr	r3, [r4, #0]
    a6ae:	4628      	mov	r0, r5
    a6b0:	4798      	blx	r3
			if (rc != 0) {
    a6b2:	4603      	mov	r3, r0
    a6b4:	2800      	cmp	r0, #0
    a6b6:	d0eb      	beq.n	a690 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    a6b8:	2800      	cmp	r0, #0
    a6ba:	dbe5      	blt.n	a688 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    a6bc:	2bff      	cmp	r3, #255	; 0xff
    a6be:	dde5      	ble.n	a68c <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    a6c0:	23ff      	movs	r3, #255	; 0xff
    a6c2:	e7e3      	b.n	a68c <z_sys_init_run_level+0x10>
			if (rc == 0) {
				/* Run automatic device runtime enablement */
				(void)pm_device_runtime_auto_enable(dev);
			}
		} else {
			(void)entry->init_fn.sys();
    a6c4:	6823      	ldr	r3, [r4, #0]
    a6c6:	4798      	blx	r3
    a6c8:	e7e7      	b.n	a69a <z_sys_init_run_level+0x1e>
		}
	}
}
    a6ca:	bd70      	pop	{r4, r5, r6, pc}
    a6cc:	00011254 	.word	0x00011254

0000a6d0 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    a6d0:	b510      	push	{r4, lr}
    a6d2:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    a6d4:	23b0      	movs	r3, #176	; 0xb0
    a6d6:	4c11      	ldr	r4, [pc, #68]	; (a71c <init_idle_thread+0x4c>)
    a6d8:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
    a6dc:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    a6e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    a6e4:	4b0e      	ldr	r3, [pc, #56]	; (a720 <init_idle_thread+0x50>)
    a6e6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	z_setup_new_thread(thread, stack,
    a6ea:	4a0e      	ldr	r2, [pc, #56]	; (a724 <init_idle_thread+0x54>)
    a6ec:	9205      	str	r2, [sp, #20]
    a6ee:	2201      	movs	r2, #1
    a6f0:	9204      	str	r2, [sp, #16]
    a6f2:	220f      	movs	r2, #15
    a6f4:	9203      	str	r2, [sp, #12]
    a6f6:	2200      	movs	r2, #0
    a6f8:	9202      	str	r2, [sp, #8]
    a6fa:	9201      	str	r2, [sp, #4]
    a6fc:	9300      	str	r3, [sp, #0]
    a6fe:	4b0a      	ldr	r3, [pc, #40]	; (a728 <init_idle_thread+0x58>)
    a700:	f44f 72a0 	mov.w	r2, #320	; 0x140
    a704:	4909      	ldr	r1, [pc, #36]	; (a72c <init_idle_thread+0x5c>)
    a706:	eb01 11cc 	add.w	r1, r1, ip, lsl #7
    a70a:	4620      	mov	r0, r4
    a70c:	f000 f960 	bl	a9d0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a710:	7b63      	ldrb	r3, [r4, #13]
    a712:	f023 0304 	bic.w	r3, r3, #4
    a716:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    a718:	b006      	add	sp, #24
    a71a:	bd10      	pop	{r4, pc}
    a71c:	20000a00 	.word	0x20000a00
    a720:	20002350 	.word	0x20002350
    a724:	00011244 	.word	0x00011244
    a728:	0000ab2d 	.word	0x0000ab2d
    a72c:	200037c0 	.word	0x200037c0

0000a730 <bg_thread_main>:
{
    a730:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    a732:	4b0a      	ldr	r3, [pc, #40]	; (a75c <bg_thread_main+0x2c>)
    a734:	2201      	movs	r2, #1
    a736:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    a738:	2003      	movs	r0, #3
    a73a:	f7ff ff9f 	bl	a67c <z_sys_init_run_level>
	boot_banner();
    a73e:	f001 faaf 	bl	bca0 <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    a742:	2004      	movs	r0, #4
    a744:	f7ff ff9a 	bl	a67c <z_sys_init_run_level>
	z_init_static_threads();
    a748:	f000 f9a6 	bl	aa98 <z_init_static_threads>
	(void)main();
    a74c:	f7f5 fec0 	bl	4d0 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    a750:	4a03      	ldr	r2, [pc, #12]	; (a760 <bg_thread_main+0x30>)
    a752:	7b13      	ldrb	r3, [r2, #12]
    a754:	f023 0301 	bic.w	r3, r3, #1
    a758:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    a75a:	bd08      	pop	{r3, pc}
    a75c:	200023a3 	.word	0x200023a3
    a760:	20000ab0 	.word	0x20000ab0

0000a764 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    a764:	b508      	push	{r3, lr}
    a766:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    a768:	4a01      	ldr	r2, [pc, #4]	; (a770 <switch_to_main_thread+0xc>)
    a76a:	4802      	ldr	r0, [pc, #8]	; (a774 <switch_to_main_thread+0x10>)
    a76c:	f7fa fa1a 	bl	4ba4 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    a770:	0000a731 	.word	0x0000a731
    a774:	20000ab0 	.word	0x20000ab0

0000a778 <z_bss_zero>:
{
    a778:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    a77a:	4803      	ldr	r0, [pc, #12]	; (a788 <z_bss_zero+0x10>)
    a77c:	4a03      	ldr	r2, [pc, #12]	; (a78c <z_bss_zero+0x14>)
    a77e:	1a12      	subs	r2, r2, r0
    a780:	2100      	movs	r1, #0
    a782:	f004 fcd5 	bl	f130 <z_early_memset>
}
    a786:	bd08      	pop	{r3, pc}
    a788:	20000350 	.word	0x20000350
    a78c:	200023a4 	.word	0x200023a4

0000a790 <z_init_cpu>:
{
    a790:	b510      	push	{r4, lr}
    a792:	4604      	mov	r4, r0
	init_idle_thread(id);
    a794:	f7ff ff9c 	bl	a6d0 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    a798:	23b0      	movs	r3, #176	; 0xb0
    a79a:	490b      	ldr	r1, [pc, #44]	; (a7c8 <z_init_cpu+0x38>)
    a79c:	fb03 1104 	mla	r1, r3, r4, r1
    a7a0:	4a0a      	ldr	r2, [pc, #40]	; (a7cc <z_init_cpu+0x3c>)
    a7a2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    a7a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    a7aa:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    a7ac:	741c      	strb	r4, [r3, #16]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    a7ae:	eb04 1144 	add.w	r1, r4, r4, lsl #5
    a7b2:	4b07      	ldr	r3, [pc, #28]	; (a7d0 <z_init_cpu+0x40>)
    a7b4:	eb03 1381 	add.w	r3, r3, r1, lsl #6
    a7b8:	f503 6304 	add.w	r3, r3, #2112	; 0x840
	_kernel.cpus[id].irq_stack =
    a7bc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    a7c0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    a7c4:	6053      	str	r3, [r2, #4]
}
    a7c6:	bd10      	pop	{r4, pc}
    a7c8:	20000a00 	.word	0x20000a00
    a7cc:	20002350 	.word	0x20002350
    a7d0:	20002f80 	.word	0x20002f80

0000a7d4 <prepare_multithreading>:
{
    a7d4:	b570      	push	{r4, r5, r6, lr}
    a7d6:	b086      	sub	sp, #24
	z_sched_init();
    a7d8:	f000 ff12 	bl	b600 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    a7dc:	4d10      	ldr	r5, [pc, #64]	; (a820 <prepare_multithreading+0x4c>)
    a7de:	4b11      	ldr	r3, [pc, #68]	; (a824 <prepare_multithreading+0x50>)
    a7e0:	619d      	str	r5, [r3, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a7e2:	4b11      	ldr	r3, [pc, #68]	; (a828 <prepare_multithreading+0x54>)
    a7e4:	9305      	str	r3, [sp, #20]
    a7e6:	2301      	movs	r3, #1
    a7e8:	9304      	str	r3, [sp, #16]
    a7ea:	2400      	movs	r4, #0
    a7ec:	9403      	str	r4, [sp, #12]
    a7ee:	9402      	str	r4, [sp, #8]
    a7f0:	9401      	str	r4, [sp, #4]
    a7f2:	9400      	str	r4, [sp, #0]
    a7f4:	4b0d      	ldr	r3, [pc, #52]	; (a82c <prepare_multithreading+0x58>)
    a7f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a7fa:	490d      	ldr	r1, [pc, #52]	; (a830 <prepare_multithreading+0x5c>)
    a7fc:	4628      	mov	r0, r5
    a7fe:	f000 f8e7 	bl	a9d0 <z_setup_new_thread>
    a802:	4606      	mov	r6, r0
    a804:	7b6b      	ldrb	r3, [r5, #13]
    a806:	f023 0304 	bic.w	r3, r3, #4
    a80a:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    a80c:	4628      	mov	r0, r5
    a80e:	f004 ff3a 	bl	f686 <z_ready_thread>
	z_init_cpu(0);
    a812:	4620      	mov	r0, r4
    a814:	f7ff ffbc 	bl	a790 <z_init_cpu>
}
    a818:	4630      	mov	r0, r6
    a81a:	b006      	add	sp, #24
    a81c:	bd70      	pop	{r4, r5, r6, pc}
    a81e:	bf00      	nop
    a820:	20000ab0 	.word	0x20000ab0
    a824:	20002350 	.word	0x20002350
    a828:	0001124c 	.word	0x0001124c
    a82c:	0000a731 	.word	0x0000a731
    a830:	20003940 	.word	0x20003940

0000a834 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    a834:	b500      	push	{lr}
    a836:	b0ad      	sub	sp, #180	; 0xb4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    a838:	2000      	movs	r0, #0
    a83a:	f7ff ff1f 	bl	a67c <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    a83e:	4b1e      	ldr	r3, [pc, #120]	; (a8b8 <z_cstart+0x84>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    a840:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    a844:	4c1d      	ldr	r4, [pc, #116]	; (a8bc <z_cstart+0x88>)
    a846:	6963      	ldr	r3, [r4, #20]
    a848:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    a84c:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a84e:	23e0      	movs	r3, #224	; 0xe0
    a850:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    a854:	2500      	movs	r5, #0
    a856:	77e5      	strb	r5, [r4, #31]
    a858:	7625      	strb	r5, [r4, #24]
    a85a:	7665      	strb	r5, [r4, #25]
    a85c:	76a5      	strb	r5, [r4, #26]
    a85e:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    a862:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a864:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    a868:	6263      	str	r3, [r4, #36]	; 0x24
    a86a:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    a86e:	f7fb f881 	bl	5974 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    a872:	f7f9 ff59 	bl	4728 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    a876:	f04f 33ff 	mov.w	r3, #4294967295
    a87a:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    a87c:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    a87e:	f7fb fa51 	bl	5d24 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    a882:	f7fb f92b 	bl	5adc <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    a886:	f7f7 f8ef 	bl	1a68 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    a88a:	2401      	movs	r4, #1
    a88c:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    a890:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    a894:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    a896:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
    a898:	9529      	str	r5, [sp, #164]	; 0xa4

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    a89a:	4b09      	ldr	r3, [pc, #36]	; (a8c0 <z_cstart+0x8c>)
    a89c:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    a8a0:	f7ff fd9e 	bl	a3e0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    a8a4:	4620      	mov	r0, r4
    a8a6:	f7ff fee9 	bl	a67c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    a8aa:	2002      	movs	r0, #2
    a8ac:	f7ff fee6 	bl	a67c <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    a8b0:	f7ff ff90 	bl	a7d4 <prepare_multithreading>
    a8b4:	f7ff ff56 	bl	a764 <switch_to_main_thread>
    a8b8:	200037c0 	.word	0x200037c0
    a8bc:	e000ed00 	.word	0xe000ed00
    a8c0:	20002350 	.word	0x20002350

0000a8c4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
    a8c4:	b510      	push	{r4, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a8c6:	4c06      	ldr	r4, [pc, #24]	; (a8e0 <init_mem_slab_module+0x1c>)
	int rc = 0;
    a8c8:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a8ca:	e000      	b.n	a8ce <init_mem_slab_module+0xa>
    a8cc:	341c      	adds	r4, #28
    a8ce:	4b05      	ldr	r3, [pc, #20]	; (a8e4 <init_mem_slab_module+0x20>)
    a8d0:	429c      	cmp	r4, r3
    a8d2:	d204      	bcs.n	a8de <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    a8d4:	4620      	mov	r0, r4
    a8d6:	f004 fc33 	bl	f140 <create_free_list>
		if (rc < 0) {
    a8da:	2800      	cmp	r0, #0
    a8dc:	daf6      	bge.n	a8cc <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    a8de:	bd10      	pop	{r4, pc}
    a8e0:	20000210 	.word	0x20000210
    a8e4:	2000022c 	.word	0x2000022c

0000a8e8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    a8e8:	b530      	push	{r4, r5, lr}
    a8ea:	b083      	sub	sp, #12
    a8ec:	460d      	mov	r5, r1
	__asm__ volatile(
    a8ee:	f04f 0120 	mov.w	r1, #32
    a8f2:	f3ef 8c11 	mrs	ip, BASEPRI
    a8f6:	f381 8812 	msr	BASEPRI_MAX, r1
    a8fa:	f3bf 8f6f 	isb	sy
    a8fe:	4661      	mov	r1, ip
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    a900:	6944      	ldr	r4, [r0, #20]
    a902:	b164      	cbz	r4, a91e <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
    a904:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    a906:	6823      	ldr	r3, [r4, #0]
    a908:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    a90a:	6983      	ldr	r3, [r0, #24]
    a90c:	3301      	adds	r3, #1
    a90e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    a910:	2000      	movs	r0, #0
	__asm__ volatile(
    a912:	f381 8811 	msr	BASEPRI, r1
    a916:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    a91a:	b003      	add	sp, #12
    a91c:	bd30      	pop	{r4, r5, pc}
    a91e:	f100 0e08 	add.w	lr, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    a922:	ea53 0402 	orrs.w	r4, r3, r2
    a926:	d104      	bne.n	a932 <k_mem_slab_alloc+0x4a>
		*mem = NULL;
    a928:	2300      	movs	r3, #0
    a92a:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    a92c:	f06f 000b 	mvn.w	r0, #11
    a930:	e7ef      	b.n	a912 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    a932:	9200      	str	r2, [sp, #0]
    a934:	9301      	str	r3, [sp, #4]
    a936:	4602      	mov	r2, r0
    a938:	4670      	mov	r0, lr
    a93a:	f000 fd5b 	bl	b3f4 <z_pend_curr>
		if (result == 0) {
    a93e:	2800      	cmp	r0, #0
    a940:	d1eb      	bne.n	a91a <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
    a942:	4b02      	ldr	r3, [pc, #8]	; (a94c <k_mem_slab_alloc+0x64>)
    a944:	689b      	ldr	r3, [r3, #8]
    a946:	695b      	ldr	r3, [r3, #20]
    a948:	602b      	str	r3, [r5, #0]
		return result;
    a94a:	e7e6      	b.n	a91a <k_mem_slab_alloc+0x32>
    a94c:	20002350 	.word	0x20002350

0000a950 <z_thread_monitor_exit>:
	__asm__ volatile(
    a950:	f04f 0320 	mov.w	r3, #32
    a954:	f3ef 8111 	mrs	r1, BASEPRI
    a958:	f383 8812 	msr	BASEPRI_MAX, r3
    a95c:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    a960:	4b0a      	ldr	r3, [pc, #40]	; (a98c <z_thread_monitor_exit+0x3c>)
    a962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a964:	4283      	cmp	r3, r0
    a966:	d104      	bne.n	a972 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    a968:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    a96a:	4b08      	ldr	r3, [pc, #32]	; (a98c <z_thread_monitor_exit+0x3c>)
    a96c:	625a      	str	r2, [r3, #36]	; 0x24
    a96e:	e007      	b.n	a980 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    a970:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    a972:	b113      	cbz	r3, a97a <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    a974:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    a976:	4282      	cmp	r2, r0
    a978:	d1fa      	bne.n	a970 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    a97a:	b10b      	cbz	r3, a980 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    a97c:	6f02      	ldr	r2, [r0, #112]	; 0x70
    a97e:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    a980:	f381 8811 	msr	BASEPRI, r1
    a984:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    a988:	4770      	bx	lr
    a98a:	bf00      	nop
    a98c:	20002350 	.word	0x20002350

0000a990 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    a990:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    a992:	4604      	mov	r4, r0
    a994:	b140      	cbz	r0, a9a8 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
    a996:	221f      	movs	r2, #31
    a998:	f104 0074 	add.w	r0, r4, #116	; 0x74
    a99c:	f003 f9e1 	bl	dd62 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    a9a0:	2000      	movs	r0, #0
    a9a2:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    a9a6:	bd10      	pop	{r4, pc}
		thread = _current;
    a9a8:	4b01      	ldr	r3, [pc, #4]	; (a9b0 <z_impl_k_thread_name_set+0x20>)
    a9aa:	689c      	ldr	r4, [r3, #8]
    a9ac:	e7f3      	b.n	a996 <z_impl_k_thread_name_set+0x6>
    a9ae:	bf00      	nop
    a9b0:	20002350 	.word	0x20002350

0000a9b4 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    a9b4:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    a9b6:	ea53 0102 	orrs.w	r1, r3, r2
    a9ba:	d102      	bne.n	a9c2 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    a9bc:	f004 fc21 	bl	f202 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    a9c0:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    a9c2:	4902      	ldr	r1, [pc, #8]	; (a9cc <schedule_new_thread+0x18>)
    a9c4:	3018      	adds	r0, #24
    a9c6:	f000 ffa3 	bl	b910 <z_add_timeout>
    a9ca:	e7f9      	b.n	a9c0 <schedule_new_thread+0xc>
    a9cc:	0000f713 	.word	0x0000f713

0000a9d0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    a9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a9d4:	b085      	sub	sp, #20
    a9d6:	4604      	mov	r4, r0
    a9d8:	460f      	mov	r7, r1
    a9da:	4615      	mov	r5, r2
    a9dc:	461e      	mov	r6, r3
    a9de:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    a9e2:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    a9e6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    a9ea:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    a9ee:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    a9f2:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    a9f4:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    a9f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a9f8:	2204      	movs	r2, #4
    a9fa:	9911      	ldr	r1, [sp, #68]	; 0x44
    a9fc:	f004 fc05 	bl	f20a <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    aa00:	462a      	mov	r2, r5
    aa02:	4639      	mov	r1, r7
    aa04:	4620      	mov	r0, r4
    aa06:	f004 fbe1 	bl	f1cc <setup_thread_stack>
    aa0a:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    aa0c:	f8cd 8008 	str.w	r8, [sp, #8]
    aa10:	f8cd 9004 	str.w	r9, [sp, #4]
    aa14:	f8cd a000 	str.w	sl, [sp]
    aa18:	4633      	mov	r3, r6
    aa1a:	4602      	mov	r2, r0
    aa1c:	4639      	mov	r1, r7
    aa1e:	4620      	mov	r0, r4
    aa20:	f7fa f87a 	bl	4b18 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    aa24:	2300      	movs	r3, #0
    aa26:	6563      	str	r3, [r4, #84]	; 0x54
#endif
#ifdef CONFIG_EVENTS
	new_thread->no_wake_on_timeout = false;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    aa28:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    aa2a:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    aa2e:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    aa32:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    aa36:	f04f 0320 	mov.w	r3, #32
    aa3a:	f3ef 8211 	mrs	r2, BASEPRI
    aa3e:	f383 8812 	msr	BASEPRI_MAX, r3
    aa42:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    aa46:	4b13      	ldr	r3, [pc, #76]	; (aa94 <z_setup_new_thread+0xc4>)
    aa48:	6a59      	ldr	r1, [r3, #36]	; 0x24
    aa4a:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    aa4c:	625c      	str	r4, [r3, #36]	; 0x24
	__asm__ volatile(
    aa4e:	f382 8811 	msr	BASEPRI, r2
    aa52:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    aa56:	f1bb 0f00 	cmp.w	fp, #0
    aa5a:	d013      	beq.n	aa84 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    aa5c:	221f      	movs	r2, #31
    aa5e:	4659      	mov	r1, fp
    aa60:	f104 0074 	add.w	r0, r4, #116	; 0x74
    aa64:	f003 f97d 	bl	dd62 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    aa68:	2300      	movs	r3, #0
    aa6a:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    aa6e:	4b09      	ldr	r3, [pc, #36]	; (aa94 <z_setup_new_thread+0xc4>)
    aa70:	689b      	ldr	r3, [r3, #8]
    aa72:	b15b      	cbz	r3, aa8c <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    aa74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    aa78:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    aa7c:	4628      	mov	r0, r5
    aa7e:	b005      	add	sp, #20
    aa80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    aa84:	2300      	movs	r3, #0
    aa86:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    aa8a:	e7f0      	b.n	aa6e <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    aa8c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    aa90:	e7f4      	b.n	aa7c <z_setup_new_thread+0xac>
    aa92:	bf00      	nop
    aa94:	20002350 	.word	0x20002350

0000aa98 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    aa98:	b530      	push	{r4, r5, lr}
    aa9a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    aa9c:	4c21      	ldr	r4, [pc, #132]	; (ab24 <z_init_static_threads+0x8c>)
    aa9e:	e014      	b.n	aaca <z_init_static_threads+0x32>
		z_setup_new_thread(
    aaa0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    aaa2:	9305      	str	r3, [sp, #20]
    aaa4:	6a23      	ldr	r3, [r4, #32]
    aaa6:	9304      	str	r3, [sp, #16]
    aaa8:	69e3      	ldr	r3, [r4, #28]
    aaaa:	9303      	str	r3, [sp, #12]
    aaac:	69a3      	ldr	r3, [r4, #24]
    aaae:	9302      	str	r3, [sp, #8]
    aab0:	6963      	ldr	r3, [r4, #20]
    aab2:	9301      	str	r3, [sp, #4]
    aab4:	6923      	ldr	r3, [r4, #16]
    aab6:	9300      	str	r3, [sp, #0]
    aab8:	68e3      	ldr	r3, [r4, #12]
    aaba:	68a2      	ldr	r2, [r4, #8]
    aabc:	6861      	ldr	r1, [r4, #4]
    aabe:	6820      	ldr	r0, [r4, #0]
    aac0:	f7ff ff86 	bl	a9d0 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    aac4:	6823      	ldr	r3, [r4, #0]
    aac6:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    aac8:	342c      	adds	r4, #44	; 0x2c
    aaca:	4b17      	ldr	r3, [pc, #92]	; (ab28 <z_init_static_threads+0x90>)
    aacc:	429c      	cmp	r4, r3
    aace:	d3e7      	bcc.n	aaa0 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    aad0:	f000 fb58 	bl	b184 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    aad4:	4c13      	ldr	r4, [pc, #76]	; (ab24 <z_init_static_threads+0x8c>)
    aad6:	e000      	b.n	aada <z_init_static_threads+0x42>
    aad8:	342c      	adds	r4, #44	; 0x2c
    aada:	4b13      	ldr	r3, [pc, #76]	; (ab28 <z_init_static_threads+0x90>)
    aadc:	429c      	cmp	r4, r3
    aade:	d21c      	bcs.n	ab1a <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    aae0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    aae2:	f1b0 3fff 	cmp.w	r0, #4294967295
    aae6:	d0f7      	beq.n	aad8 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
    aae8:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    aaea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    aaee:	17c1      	asrs	r1, r0, #31
			return ((t * to_hz + off) / from_hz);
    aaf0:	03c9      	lsls	r1, r1, #15
    aaf2:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    aaf6:	03c0      	lsls	r0, r0, #15
    aaf8:	f240 33e7 	movw	r3, #999	; 0x3e7
    aafc:	18c0      	adds	r0, r0, r3
    aafe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ab02:	f04f 0300 	mov.w	r3, #0
    ab06:	f141 0100 	adc.w	r1, r1, #0
    ab0a:	f7f5 faf9 	bl	100 <__aeabi_uldivmod>
    ab0e:	4602      	mov	r2, r0
    ab10:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    ab12:	4628      	mov	r0, r5
    ab14:	f7ff ff4e 	bl	a9b4 <schedule_new_thread>
    ab18:	e7de      	b.n	aad8 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
    ab1a:	f000 fd1f 	bl	b55c <k_sched_unlock>
}
    ab1e:	b007      	add	sp, #28
    ab20:	bd30      	pop	{r4, r5, pc}
    ab22:	bf00      	nop
    ab24:	0000fe14 	.word	0x0000fe14
    ab28:	0000fe14 	.word	0x0000fe14

0000ab2c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    ab2c:	b508      	push	{r3, lr}
    ab2e:	e001      	b.n	ab34 <idle+0x8>
	arch_cpu_idle();
    ab30:	f7f9 fe00 	bl	4734 <arch_cpu_idle>
	__asm__ volatile(
    ab34:	f04f 0220 	mov.w	r2, #32
    ab38:	f3ef 8311 	mrs	r3, BASEPRI
    ab3c:	f382 8812 	msr	BASEPRI_MAX, r2
    ab40:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    ab44:	f004 ff0b 	bl	f95e <z_get_next_timeout_expiry>
    ab48:	4b05      	ldr	r3, [pc, #20]	; (ab60 <idle+0x34>)
    ab4a:	6158      	str	r0, [r3, #20]
	return !z_sys_post_kernel;
    ab4c:	4b05      	ldr	r3, [pc, #20]	; (ab64 <idle+0x38>)
    ab4e:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    ab50:	2b00      	cmp	r3, #0
    ab52:	d0ed      	beq.n	ab30 <idle+0x4>
    ab54:	f7f7 fd0e 	bl	2574 <pm_system_suspend>
    ab58:	2800      	cmp	r0, #0
    ab5a:	d1eb      	bne.n	ab34 <idle+0x8>
    ab5c:	e7e8      	b.n	ab30 <idle+0x4>
    ab5e:	bf00      	nop
    ab60:	20002350 	.word	0x20002350
    ab64:	200023a3 	.word	0x200023a3

0000ab68 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    ab68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ab6c:	b082      	sub	sp, #8
    ab6e:	4604      	mov	r4, r0
    ab70:	461e      	mov	r6, r3
    ab72:	f04f 0320 	mov.w	r3, #32
    ab76:	f3ef 8511 	mrs	r5, BASEPRI
    ab7a:	f383 8812 	msr	BASEPRI_MAX, r3
    ab7e:	f3bf 8f6f 	isb	sy
    ab82:	462b      	mov	r3, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    ab84:	68c1      	ldr	r1, [r0, #12]
    ab86:	b999      	cbnz	r1, abb0 <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    ab88:	2900      	cmp	r1, #0
    ab8a:	d151      	bne.n	ac30 <z_impl_k_mutex_lock+0xc8>
    ab8c:	4a36      	ldr	r2, [pc, #216]	; (ac68 <z_impl_k_mutex_lock+0x100>)
    ab8e:	6892      	ldr	r2, [r2, #8]
    ab90:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    ab94:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    ab96:	3101      	adds	r1, #1
    ab98:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    ab9a:	4a33      	ldr	r2, [pc, #204]	; (ac68 <z_impl_k_mutex_lock+0x100>)
    ab9c:	6892      	ldr	r2, [r2, #8]
    ab9e:	60a2      	str	r2, [r4, #8]
	__asm__ volatile(
    aba0:	f383 8811 	msr	BASEPRI, r3
    aba4:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    aba8:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    abaa:	b002      	add	sp, #8
    abac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    abb0:	4617      	mov	r7, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    abb2:	6880      	ldr	r0, [r0, #8]
    abb4:	4a2c      	ldr	r2, [pc, #176]	; (ac68 <z_impl_k_mutex_lock+0x100>)
    abb6:	6892      	ldr	r2, [r2, #8]
    abb8:	4290      	cmp	r0, r2
    abba:	d0e5      	beq.n	ab88 <z_impl_k_mutex_lock+0x20>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    abbc:	ea56 0107 	orrs.w	r1, r6, r7
    abc0:	d038      	beq.n	ac34 <z_impl_k_mutex_lock+0xcc>
					    mutex->owner->base.prio);
    abc2:	f990 800e 	ldrsb.w	r8, [r0, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    abc6:	4641      	mov	r1, r8
    abc8:	f992 000e 	ldrsb.w	r0, [r2, #14]
    abcc:	f004 fb50 	bl	f270 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    abd0:	4580      	cmp	r8, r0
    abd2:	dc36      	bgt.n	ac42 <z_impl_k_mutex_lock+0xda>
	bool resched = false;
    abd4:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    abd8:	9700      	str	r7, [sp, #0]
    abda:	9601      	str	r6, [sp, #4]
    abdc:	4622      	mov	r2, r4
    abde:	4629      	mov	r1, r5
    abe0:	4822      	ldr	r0, [pc, #136]	; (ac6c <z_impl_k_mutex_lock+0x104>)
    abe2:	f000 fc07 	bl	b3f4 <z_pend_curr>
	if (got_mutex == 0) {
    abe6:	2800      	cmp	r0, #0
    abe8:	d0df      	beq.n	abaa <z_impl_k_mutex_lock+0x42>
	__asm__ volatile(
    abea:	f04f 0320 	mov.w	r3, #32
    abee:	f3ef 8511 	mrs	r5, BASEPRI
    abf2:	f383 8812 	msr	BASEPRI_MAX, r3
    abf6:	f3bf 8f6f 	isb	sy
    abfa:	462e      	mov	r6, r5
	if (likely(mutex->owner != NULL)) {
    abfc:	68a3      	ldr	r3, [r4, #8]
    abfe:	b343      	cbz	r3, ac52 <z_impl_k_mutex_lock+0xea>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    ac00:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ac02:	429c      	cmp	r4, r3
    ac04:	d023      	beq.n	ac4e <z_impl_k_mutex_lock+0xe6>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    ac06:	b313      	cbz	r3, ac4e <z_impl_k_mutex_lock+0xe6>
    ac08:	6921      	ldr	r1, [r4, #16]
    ac0a:	f993 000e 	ldrsb.w	r0, [r3, #14]
    ac0e:	f004 fb2f 	bl	f270 <new_prio_for_inheritance>
    ac12:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    ac14:	4620      	mov	r0, r4
    ac16:	f004 fb36 	bl	f286 <adjust_owner_prio>
    ac1a:	b9e8      	cbnz	r0, ac58 <z_impl_k_mutex_lock+0xf0>
    ac1c:	f1b8 0f00 	cmp.w	r8, #0
    ac20:	d11a      	bne.n	ac58 <z_impl_k_mutex_lock+0xf0>
	__asm__ volatile(
    ac22:	f386 8811 	msr	BASEPRI, r6
    ac26:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    ac2a:	f06f 000a 	mvn.w	r0, #10
    ac2e:	e7bc      	b.n	abaa <z_impl_k_mutex_lock+0x42>
					_current->base.prio :
    ac30:	6922      	ldr	r2, [r4, #16]
    ac32:	e7af      	b.n	ab94 <z_impl_k_mutex_lock+0x2c>
    ac34:	f385 8811 	msr	BASEPRI, r5
    ac38:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    ac3c:	f06f 000f 	mvn.w	r0, #15
    ac40:	e7b3      	b.n	abaa <z_impl_k_mutex_lock+0x42>
		resched = adjust_owner_prio(mutex, new_prio);
    ac42:	4601      	mov	r1, r0
    ac44:	4620      	mov	r0, r4
    ac46:	f004 fb1e 	bl	f286 <adjust_owner_prio>
    ac4a:	4680      	mov	r8, r0
    ac4c:	e7c4      	b.n	abd8 <z_impl_k_mutex_lock+0x70>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    ac4e:	6921      	ldr	r1, [r4, #16]
    ac50:	e7e0      	b.n	ac14 <z_impl_k_mutex_lock+0xac>
	if (resched) {
    ac52:	f1b8 0f00 	cmp.w	r8, #0
    ac56:	d0e4      	beq.n	ac22 <z_impl_k_mutex_lock+0xba>
		z_reschedule(&lock, key);
    ac58:	4629      	mov	r1, r5
    ac5a:	4804      	ldr	r0, [pc, #16]	; (ac6c <z_impl_k_mutex_lock+0x104>)
    ac5c:	f000 fa7c 	bl	b158 <z_reschedule>
	return -EAGAIN;
    ac60:	f06f 000a 	mvn.w	r0, #10
    ac64:	e7a1      	b.n	abaa <z_impl_k_mutex_lock+0x42>
    ac66:	bf00      	nop
    ac68:	20002350 	.word	0x20002350
    ac6c:	20002378 	.word	0x20002378

0000ac70 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    ac70:	6883      	ldr	r3, [r0, #8]
    ac72:	b38b      	cbz	r3, acd8 <z_impl_k_mutex_unlock+0x68>
{
    ac74:	b570      	push	{r4, r5, r6, lr}
    ac76:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    ac78:	4a1a      	ldr	r2, [pc, #104]	; (ace4 <z_impl_k_mutex_unlock+0x74>)
    ac7a:	6892      	ldr	r2, [r2, #8]
    ac7c:	4293      	cmp	r3, r2
    ac7e:	d12e      	bne.n	acde <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    ac80:	68c3      	ldr	r3, [r0, #12]
    ac82:	2b01      	cmp	r3, #1
    ac84:	d903      	bls.n	ac8e <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    ac86:	3b01      	subs	r3, #1
    ac88:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    ac8a:	2000      	movs	r0, #0
}
    ac8c:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    ac8e:	f04f 0320 	mov.w	r3, #32
    ac92:	f3ef 8511 	mrs	r5, BASEPRI
    ac96:	f383 8812 	msr	BASEPRI_MAX, r3
    ac9a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    ac9e:	6901      	ldr	r1, [r0, #16]
    aca0:	f004 faf1 	bl	f286 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    aca4:	4620      	mov	r0, r4
    aca6:	f004 fda4 	bl	f7f2 <z_unpend_first_thread>
	mutex->owner = new_owner;
    acaa:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    acac:	b168      	cbz	r0, acca <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
    acae:	f990 300e 	ldrsb.w	r3, [r0, #14]
    acb2:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    acb4:	2400      	movs	r4, #0
    acb6:	f8c0 40ac 	str.w	r4, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    acba:	f004 fce4 	bl	f686 <z_ready_thread>
		z_reschedule(&lock, key);
    acbe:	4629      	mov	r1, r5
    acc0:	4809      	ldr	r0, [pc, #36]	; (ace8 <z_impl_k_mutex_unlock+0x78>)
    acc2:	f000 fa49 	bl	b158 <z_reschedule>
	return 0;
    acc6:	4620      	mov	r0, r4
    acc8:	e7e0      	b.n	ac8c <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
    acca:	2000      	movs	r0, #0
    accc:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    acce:	f385 8811 	msr	BASEPRI, r5
    acd2:	f3bf 8f6f 	isb	sy
    acd6:	e7d9      	b.n	ac8c <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
    acd8:	f06f 0015 	mvn.w	r0, #21
}
    acdc:	4770      	bx	lr
		return -EPERM;
    acde:	f04f 30ff 	mov.w	r0, #4294967295
    ace2:	e7d3      	b.n	ac8c <z_impl_k_mutex_unlock+0x1c>
    ace4:	20002350 	.word	0x20002350
    ace8:	20002378 	.word	0x20002378

0000acec <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    acec:	b510      	push	{r4, lr}
    acee:	b082      	sub	sp, #8
    acf0:	4684      	mov	ip, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    acf2:	4686      	mov	lr, r0
	__asm__ volatile(
    acf4:	f04f 0020 	mov.w	r0, #32
    acf8:	f3ef 8111 	mrs	r1, BASEPRI
    acfc:	f380 8812 	msr	BASEPRI_MAX, r0
    ad00:	f3bf 8f6f 	isb	sy
    ad04:	460c      	mov	r4, r1
    ad06:	f85e 0b08 	ldr.w	r0, [lr], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    ad0a:	b1a0      	cbz	r0, ad36 <z_impl_k_queue_get+0x4a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    ad0c:	6803      	ldr	r3, [r0, #0]
    ad0e:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
    ad12:	f8cc 3000 	str.w	r3, [ip]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
    ad16:	f8dc 2004 	ldr.w	r2, [ip, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    ad1a:	4290      	cmp	r0, r2
    ad1c:	d008      	beq.n	ad30 <z_impl_k_queue_get+0x44>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    ad1e:	2101      	movs	r1, #1
    ad20:	f004 fb42 	bl	f3a8 <z_queue_node_peek>
	__asm__ volatile(
    ad24:	f384 8811 	msr	BASEPRI, r4
    ad28:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    ad2c:	b002      	add	sp, #8
    ad2e:	bd10      	pop	{r4, pc}
	list->tail = node;
    ad30:	f8cc 3004 	str.w	r3, [ip, #4]
}
    ad34:	e7f3      	b.n	ad1e <z_impl_k_queue_get+0x32>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    ad36:	ea53 0002 	orrs.w	r0, r3, r2
    ad3a:	d00a      	beq.n	ad52 <z_impl_k_queue_get+0x66>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    ad3c:	9200      	str	r2, [sp, #0]
    ad3e:	9301      	str	r3, [sp, #4]
    ad40:	4672      	mov	r2, lr
    ad42:	4670      	mov	r0, lr
    ad44:	f000 fb56 	bl	b3f4 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    ad48:	b948      	cbnz	r0, ad5e <z_impl_k_queue_get+0x72>
    ad4a:	4b06      	ldr	r3, [pc, #24]	; (ad64 <z_impl_k_queue_get+0x78>)
    ad4c:	689b      	ldr	r3, [r3, #8]
    ad4e:	6958      	ldr	r0, [r3, #20]
    ad50:	e7ec      	b.n	ad2c <z_impl_k_queue_get+0x40>
    ad52:	f381 8811 	msr	BASEPRI, r1
    ad56:	f3bf 8f6f 	isb	sy
		return NULL;
    ad5a:	2000      	movs	r0, #0
    ad5c:	e7e6      	b.n	ad2c <z_impl_k_queue_get+0x40>
	return (ret != 0) ? NULL : _current->base.swap_data;
    ad5e:	2000      	movs	r0, #0
    ad60:	e7e4      	b.n	ad2c <z_impl_k_queue_get+0x40>
    ad62:	bf00      	nop
    ad64:	20002350 	.word	0x20002350

0000ad68 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    ad68:	b538      	push	{r3, r4, r5, lr}
    ad6a:	4604      	mov	r4, r0
	__asm__ volatile(
    ad6c:	f04f 0320 	mov.w	r3, #32
    ad70:	f3ef 8511 	mrs	r5, BASEPRI
    ad74:	f383 8812 	msr	BASEPRI_MAX, r3
    ad78:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    ad7c:	f004 fd39 	bl	f7f2 <z_unpend_first_thread>

	if (thread != NULL) {
    ad80:	b148      	cbz	r0, ad96 <z_impl_k_sem_give+0x2e>
    ad82:	2200      	movs	r2, #0
    ad84:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    ad88:	f004 fc7d 	bl	f686 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    ad8c:	4629      	mov	r1, r5
    ad8e:	4807      	ldr	r0, [pc, #28]	; (adac <z_impl_k_sem_give+0x44>)
    ad90:	f000 f9e2 	bl	b158 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    ad94:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    ad96:	68a3      	ldr	r3, [r4, #8]
    ad98:	68e2      	ldr	r2, [r4, #12]
    ad9a:	4293      	cmp	r3, r2
    ad9c:	d003      	beq.n	ada6 <z_impl_k_sem_give+0x3e>
    ad9e:	2201      	movs	r2, #1
    ada0:	4413      	add	r3, r2
    ada2:	60a3      	str	r3, [r4, #8]
}
    ada4:	e7f2      	b.n	ad8c <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    ada6:	2200      	movs	r2, #0
    ada8:	e7fa      	b.n	ada0 <z_impl_k_sem_give+0x38>
    adaa:	bf00      	nop
    adac:	20002378 	.word	0x20002378

0000adb0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    adb0:	b510      	push	{r4, lr}
    adb2:	b082      	sub	sp, #8
    adb4:	f04f 0420 	mov.w	r4, #32
    adb8:	f3ef 8111 	mrs	r1, BASEPRI
    adbc:	f384 8812 	msr	BASEPRI_MAX, r4
    adc0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    adc4:	6884      	ldr	r4, [r0, #8]
    adc6:	b144      	cbz	r4, adda <z_impl_k_sem_take+0x2a>
		sem->count--;
    adc8:	3c01      	subs	r4, #1
    adca:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    adcc:	f381 8811 	msr	BASEPRI, r1
    add0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    add4:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    add6:	b002      	add	sp, #8
    add8:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    adda:	ea53 0402 	orrs.w	r4, r3, r2
    adde:	d006      	beq.n	adee <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    ade0:	9200      	str	r2, [sp, #0]
    ade2:	9301      	str	r3, [sp, #4]
    ade4:	4602      	mov	r2, r0
    ade6:	4805      	ldr	r0, [pc, #20]	; (adfc <z_impl_k_sem_take+0x4c>)
    ade8:	f000 fb04 	bl	b3f4 <z_pend_curr>
	return ret;
    adec:	e7f3      	b.n	add6 <z_impl_k_sem_take+0x26>
    adee:	f381 8811 	msr	BASEPRI, r1
    adf2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    adf6:	f06f 000f 	mvn.w	r0, #15
    adfa:	e7ec      	b.n	add6 <z_impl_k_sem_take+0x26>
    adfc:	20002378 	.word	0x20002378

0000ae00 <queue_submit_locked>:
 * @retval -EBUSY if the submission was rejected (draining, plugged)
 */
static inline int queue_submit_locked(struct k_work_q *queue,
				      struct k_work *work)
{
	if (queue == NULL) {
    ae00:	b370      	cbz	r0, ae60 <queue_submit_locked+0x60>
{
    ae02:	b538      	push	{r3, r4, r5, lr}
    ae04:	460d      	mov	r5, r1
    ae06:	4604      	mov	r4, r0
		return -EINVAL;
	}

	int ret = -EBUSY;
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    ae08:	4b1b      	ldr	r3, [pc, #108]	; (ae78 <queue_submit_locked+0x78>)
    ae0a:	689b      	ldr	r3, [r3, #8]
    ae0c:	4283      	cmp	r3, r0
    ae0e:	d01b      	beq.n	ae48 <queue_submit_locked+0x48>
    ae10:	2300      	movs	r3, #0
    ae12:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
    ae14:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    ae18:	f3c3 0180 	ubfx	r1, r3, #2, #1
    ae1c:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	 * * -ENODEV if the queue isn't running.
	 * * -EBUSY if draining and not chained
	 * * -EBUSY if plugged and not draining
	 * * otherwise OK
	 */
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    ae20:	f013 0f01 	tst.w	r3, #1
    ae24:	d01f      	beq.n	ae66 <queue_submit_locked+0x66>
		ret = -ENODEV;
	} else if (draining && !chained) {
    ae26:	b101      	cbz	r1, ae2a <queue_submit_locked+0x2a>
    ae28:	b302      	cbz	r2, ae6c <queue_submit_locked+0x6c>
		ret = -EBUSY;
	} else if (plugged && !draining) {
    ae2a:	b100      	cbz	r0, ae2e <queue_submit_locked+0x2e>
    ae2c:	b309      	cbz	r1, ae72 <queue_submit_locked+0x72>
	parent->next = child;
    ae2e:	2300      	movs	r3, #0
    ae30:	602b      	str	r3, [r5, #0]
	return list->tail;
    ae32:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
Z_GENLIST_APPEND(slist, snode)
    ae36:	b173      	cbz	r3, ae56 <queue_submit_locked+0x56>
	parent->next = child;
    ae38:	601d      	str	r5, [r3, #0]
	list->tail = node;
    ae3a:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
		ret = -EBUSY;
	} else {
		sys_slist_append(&queue->pending, &work->node);
		ret = 1;
		(void)notify_queue_locked(queue);
    ae3e:	4620      	mov	r0, r4
    ae40:	f004 faef 	bl	f422 <notify_queue_locked>
		ret = 1;
    ae44:	2001      	movs	r0, #1
	}

	return ret;
}
    ae46:	bd38      	pop	{r3, r4, r5, pc}
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    ae48:	f004 f9d3 	bl	f1f2 <k_is_in_isr>
    ae4c:	b908      	cbnz	r0, ae52 <queue_submit_locked+0x52>
    ae4e:	2301      	movs	r3, #1
    ae50:	e7df      	b.n	ae12 <queue_submit_locked+0x12>
    ae52:	2300      	movs	r3, #0
    ae54:	e7dd      	b.n	ae12 <queue_submit_locked+0x12>
    ae56:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
	list->head = node;
    ae5a:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
}
    ae5e:	e7ee      	b.n	ae3e <queue_submit_locked+0x3e>
		return -EINVAL;
    ae60:	f06f 0015 	mvn.w	r0, #21
}
    ae64:	4770      	bx	lr
		ret = -ENODEV;
    ae66:	f06f 0012 	mvn.w	r0, #18
    ae6a:	e7ec      	b.n	ae46 <queue_submit_locked+0x46>
		ret = -EBUSY;
    ae6c:	f06f 000f 	mvn.w	r0, #15
    ae70:	e7e9      	b.n	ae46 <queue_submit_locked+0x46>
		ret = -EBUSY;
    ae72:	f06f 000f 	mvn.w	r0, #15
    ae76:	e7e6      	b.n	ae46 <queue_submit_locked+0x46>
    ae78:	20002350 	.word	0x20002350

0000ae7c <finalize_cancel_locked>:
{
    ae7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ae7e:	4606      	mov	r6, r0
	*flagp &= ~BIT(bit);
    ae80:	68c3      	ldr	r3, [r0, #12]
    ae82:	f023 0302 	bic.w	r3, r3, #2
    ae86:	60c3      	str	r3, [r0, #12]
	return list->head;
    ae88:	4b13      	ldr	r3, [pc, #76]	; (aed8 <finalize_cancel_locked+0x5c>)
    ae8a:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    ae8c:	b185      	cbz	r5, aeb0 <finalize_cancel_locked+0x34>
	return node->next;
    ae8e:	682c      	ldr	r4, [r5, #0]
    ae90:	b104      	cbz	r4, ae94 <finalize_cancel_locked+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
    ae92:	b10d      	cbz	r5, ae98 <finalize_cancel_locked+0x1c>
    ae94:	2700      	movs	r7, #0
    ae96:	e010      	b.n	aeba <finalize_cancel_locked+0x3e>
    ae98:	462c      	mov	r4, r5
    ae9a:	e7fb      	b.n	ae94 <finalize_cancel_locked+0x18>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    ae9c:	462a      	mov	r2, r5
    ae9e:	4639      	mov	r1, r7
    aea0:	480d      	ldr	r0, [pc, #52]	; (aed8 <finalize_cancel_locked+0x5c>)
    aea2:	f004 faab 	bl	f3fc <sys_slist_remove>
			k_sem_give(&wc->sem);
    aea6:	f105 0008 	add.w	r0, r5, #8
	z_impl_k_sem_give(sem);
    aeaa:	f7ff ff5d 	bl	ad68 <z_impl_k_sem_give>
}
    aeae:	e009      	b.n	aec4 <finalize_cancel_locked+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    aeb0:	462c      	mov	r4, r5
    aeb2:	e7ef      	b.n	ae94 <finalize_cancel_locked+0x18>
    aeb4:	4623      	mov	r3, r4
    aeb6:	4625      	mov	r5, r4
    aeb8:	461c      	mov	r4, r3
    aeba:	b165      	cbz	r5, aed6 <finalize_cancel_locked+0x5a>
		if (wc->work == work) {
    aebc:	686b      	ldr	r3, [r5, #4]
    aebe:	42b3      	cmp	r3, r6
    aec0:	d0ec      	beq.n	ae9c <finalize_cancel_locked+0x20>
			prev = &wc->node;
    aec2:	462f      	mov	r7, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    aec4:	2c00      	cmp	r4, #0
    aec6:	d0f5      	beq.n	aeb4 <finalize_cancel_locked+0x38>
	return node->next;
    aec8:	6823      	ldr	r3, [r4, #0]
    aeca:	2b00      	cmp	r3, #0
    aecc:	d0f3      	beq.n	aeb6 <finalize_cancel_locked+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    aece:	2c00      	cmp	r4, #0
    aed0:	d1f1      	bne.n	aeb6 <finalize_cancel_locked+0x3a>
    aed2:	4623      	mov	r3, r4
    aed4:	e7ef      	b.n	aeb6 <finalize_cancel_locked+0x3a>
}
    aed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aed8:	20002378 	.word	0x20002378

0000aedc <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    aedc:	b570      	push	{r4, r5, r6, lr}
    aede:	b084      	sub	sp, #16
    aee0:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
    aee2:	e016      	b.n	af12 <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
    aee4:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
	*flagp &= ~BIT(bit);
    aee8:	f023 0204 	bic.w	r2, r3, #4
    aeec:	f8c5 20c8 	str.w	r2, [r5, #200]	; 0xc8
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    aef0:	f013 0f04 	tst.w	r3, #4
    aef4:	d15a      	bne.n	afac <work_queue_main+0xd0>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    aef6:	2300      	movs	r3, #0
    aef8:	9302      	str	r3, [sp, #8]
    aefa:	f04f 32ff 	mov.w	r2, #4294967295
    aefe:	f04f 33ff 	mov.w	r3, #4294967295
    af02:	e9cd 2300 	strd	r2, r3, [sp]
    af06:	f105 02b8 	add.w	r2, r5, #184	; 0xb8
    af0a:	4631      	mov	r1, r6
    af0c:	482e      	ldr	r0, [pc, #184]	; (afc8 <work_queue_main+0xec>)
    af0e:	f000 fcaf 	bl	b870 <z_sched_wait>
	__asm__ volatile(
    af12:	f04f 0320 	mov.w	r3, #32
    af16:	f3ef 8611 	mrs	r6, BASEPRI
    af1a:	f383 8812 	msr	BASEPRI_MAX, r3
    af1e:	f3bf 8f6f 	isb	sy
    af22:	4632      	mov	r2, r6
	return list->head;
    af24:	f8d5 40b0 	ldr.w	r4, [r5, #176]	; 0xb0
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    af28:	2c00      	cmp	r4, #0
    af2a:	d0db      	beq.n	aee4 <work_queue_main+0x8>
	return node->next;
    af2c:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    af2e:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
	return list->tail;
    af32:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    af36:	428c      	cmp	r4, r1
    af38:	d035      	beq.n	afa6 <work_queue_main+0xca>
	*flagp |= BIT(bit);
    af3a:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    af3e:	f043 0302 	orr.w	r3, r3, #2
    af42:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
    af46:	68e3      	ldr	r3, [r4, #12]
    af48:	f043 0101 	orr.w	r1, r3, #1
    af4c:	60e1      	str	r1, [r4, #12]
	*flagp &= ~BIT(bit);
    af4e:	f023 0304 	bic.w	r3, r3, #4
    af52:	f043 0301 	orr.w	r3, r3, #1
    af56:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
    af58:	6863      	ldr	r3, [r4, #4]
	__asm__ volatile(
    af5a:	f382 8811 	msr	BASEPRI, r2
    af5e:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    af62:	4620      	mov	r0, r4
    af64:	4798      	blx	r3
	__asm__ volatile(
    af66:	f04f 0320 	mov.w	r3, #32
    af6a:	f3ef 8611 	mrs	r6, BASEPRI
    af6e:	f383 8812 	msr	BASEPRI_MAX, r3
    af72:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    af76:	68e3      	ldr	r3, [r4, #12]
    af78:	f023 0301 	bic.w	r3, r3, #1
    af7c:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    af7e:	f013 0f02 	tst.w	r3, #2
    af82:	d11d      	bne.n	afc0 <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
    af84:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    af88:	f023 0302 	bic.w	r3, r3, #2
    af8c:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	return (*flagp & BIT(bit)) != 0U;
    af90:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
    af94:	f386 8811 	msr	BASEPRI, r6
    af98:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    af9c:	2b00      	cmp	r3, #0
    af9e:	d1b8      	bne.n	af12 <work_queue_main+0x36>
	z_impl_k_yield();
    afa0:	f000 fb36 	bl	b610 <z_impl_k_yield>
}
    afa4:	e7b5      	b.n	af12 <work_queue_main+0x36>
	list->tail = node;
    afa6:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
		if (node != NULL) {
    afaa:	e7c6      	b.n	af3a <work_queue_main+0x5e>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    afac:	f105 04c0 	add.w	r4, r5, #192	; 0xc0
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    afb0:	2200      	movs	r2, #0
    afb2:	2101      	movs	r1, #1
    afb4:	4620      	mov	r0, r4
    afb6:	f004 fc52 	bl	f85e <z_sched_wake>
    afba:	2800      	cmp	r0, #0
    afbc:	d1f8      	bne.n	afb0 <work_queue_main+0xd4>
    afbe:	e79a      	b.n	aef6 <work_queue_main+0x1a>
			finalize_cancel_locked(work);
    afc0:	4620      	mov	r0, r4
    afc2:	f7ff ff5b 	bl	ae7c <finalize_cancel_locked>
    afc6:	e7dd      	b.n	af84 <work_queue_main+0xa8>
    afc8:	20002380 	.word	0x20002380

0000afcc <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
    afcc:	b508      	push	{r3, lr}
    afce:	4684      	mov	ip, r0
    afd0:	4608      	mov	r0, r1
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    afd2:	ea53 0102 	orrs.w	r1, r3, r2
    afd6:	d00c      	beq.n	aff2 <schedule_for_queue_locked+0x26>
	*flagp |= BIT(bit);
    afd8:	68c1      	ldr	r1, [r0, #12]
    afda:	f041 0108 	orr.w	r1, r1, #8
    afde:	60c1      	str	r1, [r0, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
    afe0:	f8dc 1000 	ldr.w	r1, [ip]
    afe4:	6281      	str	r1, [r0, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    afe6:	4905      	ldr	r1, [pc, #20]	; (affc <schedule_for_queue_locked+0x30>)
    afe8:	3010      	adds	r0, #16
    afea:	f000 fc91 	bl	b910 <z_add_timeout>

	return ret;
    afee:	2001      	movs	r0, #1
}
    aff0:	bd08      	pop	{r3, pc}
		return submit_to_queue_locked(work, queuep);
    aff2:	4661      	mov	r1, ip
    aff4:	f004 fa1f 	bl	f436 <submit_to_queue_locked>
    aff8:	e7fa      	b.n	aff0 <schedule_for_queue_locked+0x24>
    affa:	bf00      	nop
    affc:	0000f497 	.word	0x0000f497

0000b000 <k_work_queue_start>:
{
    b000:	b5f0      	push	{r4, r5, r6, r7, lr}
    b002:	b089      	sub	sp, #36	; 0x24
    b004:	4604      	mov	r4, r0
    b006:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
    b008:	2000      	movs	r0, #0
    b00a:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
	list->tail = NULL;
    b00e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    b012:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
	list->head = (sys_dnode_t *)list;
    b016:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = (sys_dnode_t *)list;
    b01a:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    b01e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
    b022:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
    b026:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
	if ((cfg != NULL) && cfg->no_yield) {
    b02a:	b1fd      	cbz	r5, b06c <k_work_queue_start+0x6c>
    b02c:	7928      	ldrb	r0, [r5, #4]
    b02e:	b9f8      	cbnz	r0, b070 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    b030:	2001      	movs	r0, #1
	*flagp = flags;
    b032:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    b036:	f04f 36ff 	mov.w	r6, #4294967295
    b03a:	f04f 37ff 	mov.w	r7, #4294967295
    b03e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    b042:	2000      	movs	r0, #0
    b044:	9004      	str	r0, [sp, #16]
    b046:	9303      	str	r3, [sp, #12]
    b048:	9002      	str	r0, [sp, #8]
    b04a:	9001      	str	r0, [sp, #4]
    b04c:	9400      	str	r4, [sp, #0]
    b04e:	4b0a      	ldr	r3, [pc, #40]	; (b078 <k_work_queue_start+0x78>)
    b050:	4620      	mov	r0, r4
    b052:	f004 f8e5 	bl	f220 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
    b056:	b125      	cbz	r5, b062 <k_work_queue_start+0x62>
    b058:	6829      	ldr	r1, [r5, #0]
    b05a:	b111      	cbz	r1, b062 <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
    b05c:	4620      	mov	r0, r4
    b05e:	f7ff fc97 	bl	a990 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    b062:	4620      	mov	r0, r4
    b064:	f004 f8cd 	bl	f202 <z_impl_k_thread_start>
}
    b068:	b009      	add	sp, #36	; 0x24
    b06a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
    b06c:	2001      	movs	r0, #1
    b06e:	e7e0      	b.n	b032 <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
    b070:	f240 1001 	movw	r0, #257	; 0x101
    b074:	e7dd      	b.n	b032 <k_work_queue_start+0x32>
    b076:	bf00      	nop
    b078:	0000aedd 	.word	0x0000aedd

0000b07c <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    b07c:	89c3      	ldrh	r3, [r0, #14]
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    b07e:	2b7f      	cmp	r3, #127	; 0x7f
    b080:	d811      	bhi.n	b0a6 <sliceable+0x2a>
	int ret = slice_ticks;
    b082:	4b0e      	ldr	r3, [pc, #56]	; (b0bc <sliceable+0x40>)
    b084:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    b086:	b17b      	cbz	r3, b0a8 <sliceable+0x2c>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    b088:	f990 200e 	ldrsb.w	r2, [r0, #14]
    b08c:	4b0c      	ldr	r3, [pc, #48]	; (b0c0 <sliceable+0x44>)
    b08e:	681b      	ldr	r3, [r3, #0]
    b090:	429a      	cmp	r2, r3
    b092:	db0c      	blt.n	b0ae <sliceable+0x32>
	uint8_t state = thread->base.thread_state;
    b094:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
    b096:	f013 0f1f 	tst.w	r3, #31
    b09a:	d10a      	bne.n	b0b2 <sliceable+0x36>
		&& !z_is_idle_thread_object(thread);
    b09c:	4b09      	ldr	r3, [pc, #36]	; (b0c4 <sliceable+0x48>)
    b09e:	4298      	cmp	r0, r3
    b0a0:	d009      	beq.n	b0b6 <sliceable+0x3a>
    b0a2:	2301      	movs	r3, #1
    b0a4:	e000      	b.n	b0a8 <sliceable+0x2c>
    b0a6:	2300      	movs	r3, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    b0a8:	f003 0001 	and.w	r0, r3, #1
    b0ac:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    b0ae:	2300      	movs	r3, #0
    b0b0:	e7fa      	b.n	b0a8 <sliceable+0x2c>
    b0b2:	2300      	movs	r3, #0
    b0b4:	e7f8      	b.n	b0a8 <sliceable+0x2c>
    b0b6:	2300      	movs	r3, #0
    b0b8:	e7f6      	b.n	b0a8 <sliceable+0x2c>
    b0ba:	bf00      	nop
    b0bc:	2000238c 	.word	0x2000238c
    b0c0:	20002388 	.word	0x20002388
    b0c4:	20000a00 	.word	0x20000a00

0000b0c8 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    b0c8:	4b04      	ldr	r3, [pc, #16]	; (b0dc <slice_timeout+0x14>)
    b0ca:	1ac0      	subs	r0, r0, r3
    b0cc:	10c0      	asrs	r0, r0, #3
    b0ce:	4b04      	ldr	r3, [pc, #16]	; (b0e0 <slice_timeout+0x18>)
    b0d0:	fb03 f000 	mul.w	r0, r3, r0

	slice_expired[cpu] = true;
    b0d4:	4b03      	ldr	r3, [pc, #12]	; (b0e4 <slice_timeout+0x1c>)
    b0d6:	2201      	movs	r2, #1
    b0d8:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    b0da:	4770      	bx	lr
    b0dc:	20000b60 	.word	0x20000b60
    b0e0:	aaaaaaab 	.word	0xaaaaaaab
    b0e4:	20002384 	.word	0x20002384

0000b0e8 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b0e8:	f1b3 3fff 	cmp.w	r3, #4294967295
    b0ec:	bf08      	it	eq
    b0ee:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    b0f2:	d100      	bne.n	b0f6 <add_thread_timeout+0xe>
    b0f4:	4770      	bx	lr
{
    b0f6:	b508      	push	{r3, lr}
    b0f8:	4902      	ldr	r1, [pc, #8]	; (b104 <add_thread_timeout+0x1c>)
    b0fa:	3018      	adds	r0, #24
    b0fc:	f000 fc08 	bl	b910 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    b100:	bd08      	pop	{r3, pc}
    b102:	bf00      	nop
    b104:	0000f713 	.word	0x0000f713

0000b108 <z_reset_time_slice>:
{
    b108:	b570      	push	{r4, r5, r6, lr}
    b10a:	4605      	mov	r5, r0
	int cpu = _current_cpu->id;
    b10c:	4b0d      	ldr	r3, [pc, #52]	; (b144 <z_reset_time_slice+0x3c>)
    b10e:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
    b110:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    b114:	4c0c      	ldr	r4, [pc, #48]	; (b148 <z_reset_time_slice+0x40>)
    b116:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    b11a:	4620      	mov	r0, r4
    b11c:	f004 fc01 	bl	f922 <z_abort_timeout>
	slice_expired[cpu] = false;
    b120:	4b0a      	ldr	r3, [pc, #40]	; (b14c <z_reset_time_slice+0x44>)
    b122:	2200      	movs	r2, #0
    b124:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    b126:	4628      	mov	r0, r5
    b128:	f7ff ffa8 	bl	b07c <sliceable>
    b12c:	b900      	cbnz	r0, b130 <z_reset_time_slice+0x28>
}
    b12e:	bd70      	pop	{r4, r5, r6, pc}
	int ret = slice_ticks;
    b130:	4b07      	ldr	r3, [pc, #28]	; (b150 <z_reset_time_slice+0x48>)
    b132:	681a      	ldr	r2, [r3, #0]
			      K_TICKS(slice_time(curr) - 1));
    b134:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    b136:	17d3      	asrs	r3, r2, #31
    b138:	4906      	ldr	r1, [pc, #24]	; (b154 <z_reset_time_slice+0x4c>)
    b13a:	4620      	mov	r0, r4
    b13c:	f000 fbe8 	bl	b910 <z_add_timeout>
}
    b140:	e7f5      	b.n	b12e <z_reset_time_slice+0x26>
    b142:	bf00      	nop
    b144:	20002350 	.word	0x20002350
    b148:	20000b60 	.word	0x20000b60
    b14c:	20002384 	.word	0x20002384
    b150:	2000238c 	.word	0x2000238c
    b154:	0000b0c9 	.word	0x0000b0c9

0000b158 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    b158:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    b15a:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    b15c:	b959      	cbnz	r1, b176 <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    b15e:	f3ef 8205 	mrs	r2, IPSR
    b162:	b942      	cbnz	r2, b176 <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
    b164:	4a06      	ldr	r2, [pc, #24]	; (b180 <z_reschedule+0x28>)
    b166:	6990      	ldr	r0, [r2, #24]
	return new_thread != _current;
    b168:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
    b16a:	4290      	cmp	r0, r2
    b16c:	d003      	beq.n	b176 <z_reschedule+0x1e>
	ret = arch_swap(key);
    b16e:	4608      	mov	r0, r1
    b170:	f7f9 fc7a 	bl	4a68 <arch_swap>
		z_swap(lock, key);
    b174:	e003      	b.n	b17e <z_reschedule+0x26>
    b176:	f383 8811 	msr	BASEPRI, r3
    b17a:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
    b17e:	bd08      	pop	{r3, pc}
    b180:	20002350 	.word	0x20002350

0000b184 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    b184:	2300      	movs	r3, #0
	__asm__ volatile(
    b186:	f04f 0220 	mov.w	r2, #32
    b18a:	f3ef 8111 	mrs	r1, BASEPRI
    b18e:	f382 8812 	msr	BASEPRI_MAX, r2
    b192:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
    b196:	e009      	b.n	b1ac <k_sched_lock+0x28>
	--_current->base.sched_locked;
    b198:	4b06      	ldr	r3, [pc, #24]	; (b1b4 <k_sched_lock+0x30>)
    b19a:	689a      	ldr	r2, [r3, #8]
    b19c:	7bd3      	ldrb	r3, [r2, #15]
    b19e:	3b01      	subs	r3, #1
    b1a0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    b1a2:	f381 8811 	msr	BASEPRI, r1
    b1a6:	f3bf 8f6f 	isb	sy
    b1aa:	2301      	movs	r3, #1
    b1ac:	2b00      	cmp	r3, #0
    b1ae:	d0f3      	beq.n	b198 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    b1b0:	4770      	bx	lr
    b1b2:	bf00      	nop
    b1b4:	20002350 	.word	0x20002350

0000b1b8 <update_cache>:
{
    b1b8:	b538      	push	{r3, r4, r5, lr}
    b1ba:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    b1bc:	4810      	ldr	r0, [pc, #64]	; (b200 <update_cache+0x48>)
    b1be:	f004 fa5b 	bl	f678 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    b1c2:	4605      	mov	r5, r0
    b1c4:	b170      	cbz	r0, b1e4 <update_cache+0x2c>
	if (preempt_ok != 0) {
    b1c6:	b984      	cbnz	r4, b1ea <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    b1c8:	4b0e      	ldr	r3, [pc, #56]	; (b204 <update_cache+0x4c>)
    b1ca:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    b1cc:	7b5a      	ldrb	r2, [r3, #13]
    b1ce:	f012 0f1f 	tst.w	r2, #31
    b1d2:	d10a      	bne.n	b1ea <update_cache+0x32>
	return node->next != NULL;
    b1d4:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    b1d6:	b942      	cbnz	r2, b1ea <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    b1d8:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    b1da:	2a7f      	cmp	r2, #127	; 0x7f
    b1dc:	d905      	bls.n	b1ea <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    b1de:	4a09      	ldr	r2, [pc, #36]	; (b204 <update_cache+0x4c>)
    b1e0:	6193      	str	r3, [r2, #24]
    b1e2:	e00b      	b.n	b1fc <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    b1e4:	4b07      	ldr	r3, [pc, #28]	; (b204 <update_cache+0x4c>)
    b1e6:	68dd      	ldr	r5, [r3, #12]
    b1e8:	e7ed      	b.n	b1c6 <update_cache+0xe>
		if (thread != _current) {
    b1ea:	4b06      	ldr	r3, [pc, #24]	; (b204 <update_cache+0x4c>)
    b1ec:	689b      	ldr	r3, [r3, #8]
    b1ee:	42ab      	cmp	r3, r5
    b1f0:	d002      	beq.n	b1f8 <update_cache+0x40>
			z_reset_time_slice(thread);
    b1f2:	4628      	mov	r0, r5
    b1f4:	f7ff ff88 	bl	b108 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    b1f8:	4b02      	ldr	r3, [pc, #8]	; (b204 <update_cache+0x4c>)
    b1fa:	619d      	str	r5, [r3, #24]
}
    b1fc:	bd38      	pop	{r3, r4, r5, pc}
    b1fe:	bf00      	nop
    b200:	2000236c 	.word	0x2000236c
    b204:	20002350 	.word	0x20002350

0000b208 <move_thread_to_end_of_prio_q>:
{
    b208:	b538      	push	{r3, r4, r5, lr}
    b20a:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    b20c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    b20e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    b212:	2b00      	cmp	r3, #0
    b214:	db0a      	blt.n	b22c <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
    b216:	7b6b      	ldrb	r3, [r5, #13]
    b218:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b21c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    b21e:	4b1b      	ldr	r3, [pc, #108]	; (b28c <move_thread_to_end_of_prio_q+0x84>)
    b220:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b224:	429c      	cmp	r4, r3
    b226:	d110      	bne.n	b24a <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b228:	2400      	movs	r4, #0
    b22a:	e00e      	b.n	b24a <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b22c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    b230:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    b232:	4601      	mov	r1, r0
    b234:	4816      	ldr	r0, [pc, #88]	; (b290 <move_thread_to_end_of_prio_q+0x88>)
    b236:	f004 f9eb 	bl	f610 <z_priq_dumb_remove>
}
    b23a:	e7ec      	b.n	b216 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    b23c:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    b23e:	606b      	str	r3, [r5, #4]
	node->next = successor;
    b240:	602c      	str	r4, [r5, #0]
	prev->next = node;
    b242:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    b244:	6065      	str	r5, [r4, #4]
}
    b246:	e017      	b.n	b278 <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b248:	2400      	movs	r4, #0
    b24a:	b16c      	cbz	r4, b268 <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b24c:	4621      	mov	r1, r4
    b24e:	4628      	mov	r0, r5
    b250:	f004 f9a0 	bl	f594 <z_sched_prio_cmp>
    b254:	2800      	cmp	r0, #0
    b256:	dcf1      	bgt.n	b23c <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b258:	2c00      	cmp	r4, #0
    b25a:	d0f6      	beq.n	b24a <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
    b25c:	4b0b      	ldr	r3, [pc, #44]	; (b28c <move_thread_to_end_of_prio_q+0x84>)
    b25e:	6a1b      	ldr	r3, [r3, #32]
    b260:	429c      	cmp	r4, r3
    b262:	d0f1      	beq.n	b248 <move_thread_to_end_of_prio_q+0x40>
    b264:	6824      	ldr	r4, [r4, #0]
    b266:	e7f0      	b.n	b24a <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
    b268:	4b08      	ldr	r3, [pc, #32]	; (b28c <move_thread_to_end_of_prio_q+0x84>)
    b26a:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
    b26c:	f103 011c 	add.w	r1, r3, #28
    b270:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    b272:	606a      	str	r2, [r5, #4]
	tail->next = node;
    b274:	6015      	str	r5, [r2, #0]
	list->tail = node;
    b276:	621d      	str	r5, [r3, #32]
	update_cache(thread == _current);
    b278:	4b04      	ldr	r3, [pc, #16]	; (b28c <move_thread_to_end_of_prio_q+0x84>)
    b27a:	6898      	ldr	r0, [r3, #8]
    b27c:	42a8      	cmp	r0, r5
    b27e:	bf14      	ite	ne
    b280:	2000      	movne	r0, #0
    b282:	2001      	moveq	r0, #1
    b284:	f7ff ff98 	bl	b1b8 <update_cache>
}
    b288:	bd38      	pop	{r3, r4, r5, pc}
    b28a:	bf00      	nop
    b28c:	20002350 	.word	0x20002350
    b290:	2000236c 	.word	0x2000236c

0000b294 <z_time_slice>:
{
    b294:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    b296:	f04f 0220 	mov.w	r2, #32
    b29a:	f3ef 8311 	mrs	r3, BASEPRI
    b29e:	f382 8812 	msr	BASEPRI_MAX, r2
    b2a2:	f3bf 8f6f 	isb	sy
    b2a6:	461d      	mov	r5, r3
	struct k_thread *curr = _current;
    b2a8:	4b14      	ldr	r3, [pc, #80]	; (b2fc <z_time_slice+0x68>)
    b2aa:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    b2ac:	4b14      	ldr	r3, [pc, #80]	; (b300 <z_time_slice+0x6c>)
    b2ae:	681b      	ldr	r3, [r3, #0]
    b2b0:	42a3      	cmp	r3, r4
    b2b2:	d017      	beq.n	b2e4 <z_time_slice+0x50>
	pending_current = NULL;
    b2b4:	4b12      	ldr	r3, [pc, #72]	; (b300 <z_time_slice+0x6c>)
    b2b6:	2200      	movs	r2, #0
    b2b8:	601a      	str	r2, [r3, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    b2ba:	4b10      	ldr	r3, [pc, #64]	; (b2fc <z_time_slice+0x68>)
    b2bc:	7c1b      	ldrb	r3, [r3, #16]
    b2be:	4a11      	ldr	r2, [pc, #68]	; (b304 <z_time_slice+0x70>)
    b2c0:	5cd3      	ldrb	r3, [r2, r3]
    b2c2:	b153      	cbz	r3, b2da <z_time_slice+0x46>
    b2c4:	4620      	mov	r0, r4
    b2c6:	f7ff fed9 	bl	b07c <sliceable>
    b2ca:	b130      	cbz	r0, b2da <z_time_slice+0x46>
	uint8_t state = thread->base.thread_state;
    b2cc:	7b63      	ldrb	r3, [r4, #13]
		if (!z_is_thread_prevented_from_running(curr)) {
    b2ce:	f013 0f1f 	tst.w	r3, #31
    b2d2:	d00f      	beq.n	b2f4 <z_time_slice+0x60>
		z_reset_time_slice(curr);
    b2d4:	4620      	mov	r0, r4
    b2d6:	f7ff ff17 	bl	b108 <z_reset_time_slice>
	__asm__ volatile(
    b2da:	f385 8811 	msr	BASEPRI, r5
    b2de:	f3bf 8f6f 	isb	sy
}
    b2e2:	bd38      	pop	{r3, r4, r5, pc}
		z_reset_time_slice(curr);
    b2e4:	4620      	mov	r0, r4
    b2e6:	f7ff ff0f 	bl	b108 <z_reset_time_slice>
    b2ea:	f385 8811 	msr	BASEPRI, r5
    b2ee:	f3bf 8f6f 	isb	sy
		return;
    b2f2:	e7f6      	b.n	b2e2 <z_time_slice+0x4e>
			move_thread_to_end_of_prio_q(curr);
    b2f4:	4620      	mov	r0, r4
    b2f6:	f7ff ff87 	bl	b208 <move_thread_to_end_of_prio_q>
    b2fa:	e7eb      	b.n	b2d4 <z_time_slice+0x40>
    b2fc:	20002350 	.word	0x20002350
    b300:	20002380 	.word	0x20002380
    b304:	20002384 	.word	0x20002384

0000b308 <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
    b308:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    b30a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    b30e:	2b00      	cmp	r3, #0
    b310:	db33      	blt.n	b37a <ready_thread+0x72>
{
    b312:	b570      	push	{r4, r5, r6, lr}
    b314:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    b316:	f012 0f1f 	tst.w	r2, #31
    b31a:	d101      	bne.n	b320 <ready_thread+0x18>
	return node->next != NULL;
    b31c:	6986      	ldr	r6, [r0, #24]
    b31e:	b106      	cbz	r6, b322 <ready_thread+0x1a>
}
    b320:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
    b322:	f062 027f 	orn	r2, r2, #127	; 0x7f
    b326:	7342      	strb	r2, [r0, #13]
	return list->head == list;
    b328:	4b14      	ldr	r3, [pc, #80]	; (b37c <ready_thread+0x74>)
    b32a:	f853 5f1c 	ldr.w	r5, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b32e:	429d      	cmp	r5, r3
    b330:	d108      	bne.n	b344 <ready_thread+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b332:	4635      	mov	r5, r6
    b334:	e006      	b.n	b344 <ready_thread+0x3c>
	sys_dnode_t *const prev = successor->prev;
    b336:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    b338:	6063      	str	r3, [r4, #4]
	node->next = successor;
    b33a:	6025      	str	r5, [r4, #0]
	prev->next = node;
    b33c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    b33e:	606c      	str	r4, [r5, #4]
}
    b340:	e017      	b.n	b372 <ready_thread+0x6a>
    b342:	4635      	mov	r5, r6
    b344:	b16d      	cbz	r5, b362 <ready_thread+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b346:	4629      	mov	r1, r5
    b348:	4620      	mov	r0, r4
    b34a:	f004 f923 	bl	f594 <z_sched_prio_cmp>
    b34e:	2800      	cmp	r0, #0
    b350:	dcf1      	bgt.n	b336 <ready_thread+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b352:	2d00      	cmp	r5, #0
    b354:	d0f6      	beq.n	b344 <ready_thread+0x3c>
	return (node == list->tail) ? NULL : node->next;
    b356:	4b09      	ldr	r3, [pc, #36]	; (b37c <ready_thread+0x74>)
    b358:	6a1b      	ldr	r3, [r3, #32]
    b35a:	429d      	cmp	r5, r3
    b35c:	d0f1      	beq.n	b342 <ready_thread+0x3a>
    b35e:	682d      	ldr	r5, [r5, #0]
    b360:	e7f0      	b.n	b344 <ready_thread+0x3c>
	sys_dnode_t *const tail = list->tail;
    b362:	4b06      	ldr	r3, [pc, #24]	; (b37c <ready_thread+0x74>)
    b364:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
    b366:	f103 011c 	add.w	r1, r3, #28
    b36a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    b36c:	6062      	str	r2, [r4, #4]
	tail->next = node;
    b36e:	6014      	str	r4, [r2, #0]
	list->tail = node;
    b370:	621c      	str	r4, [r3, #32]
		update_cache(0);
    b372:	2000      	movs	r0, #0
    b374:	f7ff ff20 	bl	b1b8 <update_cache>
}
    b378:	e7d2      	b.n	b320 <ready_thread+0x18>
    b37a:	4770      	bx	lr
    b37c:	20002350 	.word	0x20002350

0000b380 <z_sched_start>:
{
    b380:	b510      	push	{r4, lr}
	__asm__ volatile(
    b382:	f04f 0320 	mov.w	r3, #32
    b386:	f3ef 8411 	mrs	r4, BASEPRI
    b38a:	f383 8812 	msr	BASEPRI_MAX, r3
    b38e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    b392:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    b394:	f013 0f04 	tst.w	r3, #4
    b398:	d104      	bne.n	b3a4 <z_sched_start+0x24>
	__asm__ volatile(
    b39a:	f384 8811 	msr	BASEPRI, r4
    b39e:	f3bf 8f6f 	isb	sy
}
    b3a2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b3a4:	f023 0304 	bic.w	r3, r3, #4
    b3a8:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    b3aa:	f7ff ffad 	bl	b308 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    b3ae:	4621      	mov	r1, r4
    b3b0:	4801      	ldr	r0, [pc, #4]	; (b3b8 <z_sched_start+0x38>)
    b3b2:	f7ff fed1 	bl	b158 <z_reschedule>
    b3b6:	e7f4      	b.n	b3a2 <z_sched_start+0x22>
    b3b8:	20002390 	.word	0x20002390

0000b3bc <unready_thread>:
{
    b3bc:	b510      	push	{r4, lr}
    b3be:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    b3c0:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    b3c2:	f990 300d 	ldrsb.w	r3, [r0, #13]
    b3c6:	2b00      	cmp	r3, #0
    b3c8:	db08      	blt.n	b3dc <unready_thread+0x20>
	update_cache(thread == _current);
    b3ca:	4b08      	ldr	r3, [pc, #32]	; (b3ec <unready_thread+0x30>)
    b3cc:	6898      	ldr	r0, [r3, #8]
    b3ce:	42a0      	cmp	r0, r4
    b3d0:	bf14      	ite	ne
    b3d2:	2000      	movne	r0, #0
    b3d4:	2001      	moveq	r0, #1
    b3d6:	f7ff feef 	bl	b1b8 <update_cache>
}
    b3da:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b3dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    b3e0:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    b3e2:	4601      	mov	r1, r0
    b3e4:	4802      	ldr	r0, [pc, #8]	; (b3f0 <unready_thread+0x34>)
    b3e6:	f004 f913 	bl	f610 <z_priq_dumb_remove>
}
    b3ea:	e7ee      	b.n	b3ca <unready_thread+0xe>
    b3ec:	20002350 	.word	0x20002350
    b3f0:	2000236c 	.word	0x2000236c

0000b3f4 <z_pend_curr>:
{
    b3f4:	b510      	push	{r4, lr}
    b3f6:	460c      	mov	r4, r1
    b3f8:	4611      	mov	r1, r2
	pending_current = _current;
    b3fa:	480a      	ldr	r0, [pc, #40]	; (b424 <z_pend_curr+0x30>)
    b3fc:	6882      	ldr	r2, [r0, #8]
    b3fe:	4b0a      	ldr	r3, [pc, #40]	; (b428 <z_pend_curr+0x34>)
    b400:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    b402:	f04f 0220 	mov.w	r2, #32
    b406:	f3ef 8311 	mrs	r3, BASEPRI
    b40a:	f382 8812 	msr	BASEPRI_MAX, r2
    b40e:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    b412:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    b416:	6880      	ldr	r0, [r0, #8]
    b418:	f004 f9c1 	bl	f79e <pend_locked>
    b41c:	4620      	mov	r0, r4
    b41e:	f7f9 fb23 	bl	4a68 <arch_swap>
}
    b422:	bd10      	pop	{r4, pc}
    b424:	20002350 	.word	0x20002350
    b428:	20002380 	.word	0x20002380

0000b42c <z_set_prio>:
{
    b42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b430:	4605      	mov	r5, r0
    b432:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    b434:	2300      	movs	r3, #0
    b436:	f04f 0220 	mov.w	r2, #32
    b43a:	f3ef 8611 	mrs	r6, BASEPRI
    b43e:	f382 8812 	msr	BASEPRI_MAX, r2
    b442:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    b446:	4618      	mov	r0, r3
    b448:	e029      	b.n	b49e <z_set_prio+0x72>
	sys_dnode_t *const prev = successor->prev;
    b44a:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    b44c:	606b      	str	r3, [r5, #4]
	node->next = successor;
    b44e:	602c      	str	r4, [r5, #0]
	prev->next = node;
    b450:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    b452:	6065      	str	r5, [r4, #4]
}
    b454:	e017      	b.n	b486 <z_set_prio+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b456:	4644      	mov	r4, r8
    b458:	b16c      	cbz	r4, b476 <z_set_prio+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b45a:	4621      	mov	r1, r4
    b45c:	4628      	mov	r0, r5
    b45e:	f004 f899 	bl	f594 <z_sched_prio_cmp>
    b462:	2800      	cmp	r0, #0
    b464:	dcf1      	bgt.n	b44a <z_set_prio+0x1e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b466:	2c00      	cmp	r4, #0
    b468:	d0f6      	beq.n	b458 <z_set_prio+0x2c>
	return (node == list->tail) ? NULL : node->next;
    b46a:	4b1d      	ldr	r3, [pc, #116]	; (b4e0 <z_set_prio+0xb4>)
    b46c:	6a1b      	ldr	r3, [r3, #32]
    b46e:	429c      	cmp	r4, r3
    b470:	d0f1      	beq.n	b456 <z_set_prio+0x2a>
    b472:	6824      	ldr	r4, [r4, #0]
    b474:	e7f0      	b.n	b458 <z_set_prio+0x2c>
	sys_dnode_t *const tail = list->tail;
    b476:	4b1a      	ldr	r3, [pc, #104]	; (b4e0 <z_set_prio+0xb4>)
    b478:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
    b47a:	f103 011c 	add.w	r1, r3, #28
    b47e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    b480:	606a      	str	r2, [r5, #4]
	tail->next = node;
    b482:	6015      	str	r5, [r2, #0]
	list->tail = node;
    b484:	621d      	str	r5, [r3, #32]
			update_cache(1);
    b486:	2001      	movs	r0, #1
    b488:	f7ff fe96 	bl	b1b8 <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    b48c:	2001      	movs	r0, #1
    b48e:	e001      	b.n	b494 <z_set_prio+0x68>
			thread->base.prio = prio;
    b490:	73af      	strb	r7, [r5, #14]
    b492:	2000      	movs	r0, #0
	__asm__ volatile(
    b494:	f386 8811 	msr	BASEPRI, r6
    b498:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    b49c:	2301      	movs	r3, #1
    b49e:	b9e3      	cbnz	r3, b4da <z_set_prio+0xae>
	uint8_t state = thread->base.thread_state;
    b4a0:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    b4a2:	f013 0f1f 	tst.w	r3, #31
    b4a6:	d1f3      	bne.n	b490 <z_set_prio+0x64>
	return node->next != NULL;
    b4a8:	f8d5 8018 	ldr.w	r8, [r5, #24]
    b4ac:	f1b8 0f00 	cmp.w	r8, #0
    b4b0:	d1ee      	bne.n	b490 <z_set_prio+0x64>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b4b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b4b6:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
    b4b8:	f8df 9028 	ldr.w	r9, [pc, #40]	; b4e4 <z_set_prio+0xb8>
    b4bc:	4629      	mov	r1, r5
    b4be:	4648      	mov	r0, r9
    b4c0:	f004 f8a6 	bl	f610 <z_priq_dumb_remove>
				thread->base.prio = prio;
    b4c4:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    b4c6:	7b6b      	ldrb	r3, [r5, #13]
    b4c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b4cc:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    b4ce:	f8d9 4000 	ldr.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b4d2:	454c      	cmp	r4, r9
    b4d4:	d1c0      	bne.n	b458 <z_set_prio+0x2c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b4d6:	4644      	mov	r4, r8
    b4d8:	e7be      	b.n	b458 <z_set_prio+0x2c>
}
    b4da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b4de:	bf00      	nop
    b4e0:	20002350 	.word	0x20002350
    b4e4:	2000236c 	.word	0x2000236c

0000b4e8 <z_impl_k_thread_suspend>:
{
    b4e8:	b538      	push	{r3, r4, r5, lr}
    b4ea:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    b4ec:	3018      	adds	r0, #24
    b4ee:	f004 fa18 	bl	f922 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    b4f2:	2300      	movs	r3, #0
	__asm__ volatile(
    b4f4:	f04f 0220 	mov.w	r2, #32
    b4f8:	f3ef 8511 	mrs	r5, BASEPRI
    b4fc:	f382 8812 	msr	BASEPRI_MAX, r2
    b500:	f3bf 8f6f 	isb	sy
    b504:	e010      	b.n	b528 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    b506:	7b63      	ldrb	r3, [r4, #13]
    b508:	f043 0310 	orr.w	r3, r3, #16
    b50c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    b50e:	4b11      	ldr	r3, [pc, #68]	; (b554 <z_impl_k_thread_suspend+0x6c>)
    b510:	6898      	ldr	r0, [r3, #8]
    b512:	42a0      	cmp	r0, r4
    b514:	bf14      	ite	ne
    b516:	2000      	movne	r0, #0
    b518:	2001      	moveq	r0, #1
    b51a:	f7ff fe4d 	bl	b1b8 <update_cache>
	__asm__ volatile(
    b51e:	f385 8811 	msr	BASEPRI, r5
    b522:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    b526:	2301      	movs	r3, #1
    b528:	b963      	cbnz	r3, b544 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    b52a:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    b52c:	f994 300d 	ldrsb.w	r3, [r4, #13]
    b530:	2b00      	cmp	r3, #0
    b532:	dae8      	bge.n	b506 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b534:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    b538:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    b53a:	4621      	mov	r1, r4
    b53c:	4806      	ldr	r0, [pc, #24]	; (b558 <z_impl_k_thread_suspend+0x70>)
    b53e:	f004 f867 	bl	f610 <z_priq_dumb_remove>
}
    b542:	e7e0      	b.n	b506 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    b544:	4b03      	ldr	r3, [pc, #12]	; (b554 <z_impl_k_thread_suspend+0x6c>)
    b546:	689b      	ldr	r3, [r3, #8]
    b548:	42a3      	cmp	r3, r4
    b54a:	d000      	beq.n	b54e <z_impl_k_thread_suspend+0x66>
}
    b54c:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
    b54e:	f004 f853 	bl	f5f8 <z_reschedule_unlocked>
}
    b552:	e7fb      	b.n	b54c <z_impl_k_thread_suspend+0x64>
    b554:	20002350 	.word	0x20002350
    b558:	2000236c 	.word	0x2000236c

0000b55c <k_sched_unlock>:

void k_sched_unlock(void)
{
    b55c:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    b55e:	2300      	movs	r3, #0
	__asm__ volatile(
    b560:	f04f 0220 	mov.w	r2, #32
    b564:	f3ef 8411 	mrs	r4, BASEPRI
    b568:	f382 8812 	msr	BASEPRI_MAX, r2
    b56c:	f3bf 8f6f 	isb	sy
    b570:	e00c      	b.n	b58c <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    b572:	4b09      	ldr	r3, [pc, #36]	; (b598 <k_sched_unlock+0x3c>)
    b574:	689a      	ldr	r2, [r3, #8]
    b576:	7bd3      	ldrb	r3, [r2, #15]
    b578:	3301      	adds	r3, #1
    b57a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    b57c:	2000      	movs	r0, #0
    b57e:	f7ff fe1b 	bl	b1b8 <update_cache>
	__asm__ volatile(
    b582:	f384 8811 	msr	BASEPRI, r4
    b586:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    b58a:	2301      	movs	r3, #1
    b58c:	2b00      	cmp	r3, #0
    b58e:	d0f0      	beq.n	b572 <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
    b590:	f004 f832 	bl	f5f8 <z_reschedule_unlocked>
}
    b594:	bd10      	pop	{r4, pc}
    b596:	bf00      	nop
    b598:	20002350 	.word	0x20002350

0000b59c <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    b59c:	7b43      	ldrb	r3, [r0, #13]
    b59e:	f013 0f08 	tst.w	r3, #8
    b5a2:	d12a      	bne.n	b5fa <end_thread+0x5e>
{
    b5a4:	b510      	push	{r4, lr}
    b5a6:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
    b5a8:	f043 0208 	orr.w	r2, r3, #8
    b5ac:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    b5ae:	f023 0220 	bic.w	r2, r3, #32
    b5b2:	f042 0208 	orr.w	r2, r2, #8
    b5b6:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
    b5b8:	f012 0f80 	tst.w	r2, #128	; 0x80
    b5bc:	d113      	bne.n	b5e6 <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    b5be:	68a3      	ldr	r3, [r4, #8]
    b5c0:	b113      	cbz	r3, b5c8 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
    b5c2:	4620      	mov	r0, r4
    b5c4:	f004 f82c 	bl	f620 <unpend_thread_no_timeout>
    b5c8:	f104 0018 	add.w	r0, r4, #24
    b5cc:	f004 f9a9 	bl	f922 <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    b5d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
    b5d4:	f004 f8a3 	bl	f71e <unpend_all>
		update_cache(1);
    b5d8:	2001      	movs	r0, #1
    b5da:	f7ff fded 	bl	b1b8 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    b5de:	4620      	mov	r0, r4
    b5e0:	f7ff f9b6 	bl	a950 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    b5e4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b5e6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    b5ea:	f043 0308 	orr.w	r3, r3, #8
    b5ee:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    b5f0:	4601      	mov	r1, r0
    b5f2:	4802      	ldr	r0, [pc, #8]	; (b5fc <end_thread+0x60>)
    b5f4:	f004 f80c 	bl	f610 <z_priq_dumb_remove>
}
    b5f8:	e7e1      	b.n	b5be <end_thread+0x22>
    b5fa:	4770      	bx	lr
    b5fc:	2000236c 	.word	0x2000236c

0000b600 <z_sched_init>:
{
    b600:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    b602:	4802      	ldr	r0, [pc, #8]	; (b60c <z_sched_init+0xc>)
    b604:	f004 f927 	bl	f856 <init_ready_q>
}
    b608:	bd08      	pop	{r3, pc}
    b60a:	bf00      	nop
    b60c:	20002368 	.word	0x20002368

0000b610 <z_impl_k_yield>:
{
    b610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    b612:	f04f 0320 	mov.w	r3, #32
    b616:	f3ef 8611 	mrs	r6, BASEPRI
    b61a:	f383 8812 	msr	BASEPRI_MAX, r3
    b61e:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    b622:	4c1d      	ldr	r4, [pc, #116]	; (b698 <z_impl_k_yield+0x88>)
    b624:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b626:	7b4b      	ldrb	r3, [r1, #13]
    b628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b62c:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    b62e:	f104 071c 	add.w	r7, r4, #28
    b632:	4638      	mov	r0, r7
    b634:	f003 ffec 	bl	f610 <z_priq_dumb_remove>
	queue_thread(_current);
    b638:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    b63a:	7b6b      	ldrb	r3, [r5, #13]
    b63c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b640:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    b642:	69e4      	ldr	r4, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b644:	42bc      	cmp	r4, r7
    b646:	d108      	bne.n	b65a <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b648:	2400      	movs	r4, #0
    b64a:	e006      	b.n	b65a <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
    b64c:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    b64e:	606b      	str	r3, [r5, #4]
	node->next = successor;
    b650:	602c      	str	r4, [r5, #0]
	prev->next = node;
    b652:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    b654:	6065      	str	r5, [r4, #4]
}
    b656:	e017      	b.n	b688 <z_impl_k_yield+0x78>
    b658:	2400      	movs	r4, #0
    b65a:	b16c      	cbz	r4, b678 <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b65c:	4621      	mov	r1, r4
    b65e:	4628      	mov	r0, r5
    b660:	f003 ff98 	bl	f594 <z_sched_prio_cmp>
    b664:	2800      	cmp	r0, #0
    b666:	dcf1      	bgt.n	b64c <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b668:	2c00      	cmp	r4, #0
    b66a:	d0f6      	beq.n	b65a <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
    b66c:	4b0a      	ldr	r3, [pc, #40]	; (b698 <z_impl_k_yield+0x88>)
    b66e:	6a1b      	ldr	r3, [r3, #32]
    b670:	429c      	cmp	r4, r3
    b672:	d0f1      	beq.n	b658 <z_impl_k_yield+0x48>
    b674:	6824      	ldr	r4, [r4, #0]
    b676:	e7f0      	b.n	b65a <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
    b678:	4b07      	ldr	r3, [pc, #28]	; (b698 <z_impl_k_yield+0x88>)
    b67a:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
    b67c:	f103 011c 	add.w	r1, r3, #28
    b680:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    b682:	606a      	str	r2, [r5, #4]
	tail->next = node;
    b684:	6015      	str	r5, [r2, #0]
	list->tail = node;
    b686:	621d      	str	r5, [r3, #32]
	update_cache(1);
    b688:	2001      	movs	r0, #1
    b68a:	f7ff fd95 	bl	b1b8 <update_cache>
    b68e:	4630      	mov	r0, r6
    b690:	f7f9 f9ea 	bl	4a68 <arch_swap>
}
    b694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b696:	bf00      	nop
    b698:	20002350 	.word	0x20002350

0000b69c <z_tick_sleep>:
{
    b69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
    b6a0:	ea50 0301 	orrs.w	r3, r0, r1
    b6a4:	d038      	beq.n	b718 <z_tick_sleep+0x7c>
    b6a6:	4604      	mov	r4, r0
    b6a8:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
    b6aa:	f06f 0301 	mvn.w	r3, #1
    b6ae:	1a1b      	subs	r3, r3, r0
    b6b0:	f04f 32ff 	mov.w	r2, #4294967295
    b6b4:	eb62 0201 	sbc.w	r2, r2, r1
    b6b8:	2b01      	cmp	r3, #1
    b6ba:	f172 0200 	sbcs.w	r2, r2, #0
    b6be:	db2f      	blt.n	b720 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    b6c0:	f06f 0501 	mvn.w	r5, #1
    b6c4:	1a2d      	subs	r5, r5, r0
    b6c6:	f04f 0320 	mov.w	r3, #32
    b6ca:	f3ef 8811 	mrs	r8, BASEPRI
    b6ce:	f383 8812 	msr	BASEPRI_MAX, r3
    b6d2:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    b6d6:	4f14      	ldr	r7, [pc, #80]	; (b728 <z_tick_sleep+0x8c>)
    b6d8:	68b8      	ldr	r0, [r7, #8]
    b6da:	4b14      	ldr	r3, [pc, #80]	; (b72c <z_tick_sleep+0x90>)
    b6dc:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    b6de:	f7ff fe6d 	bl	b3bc <unready_thread>
	z_add_thread_timeout(_current, timeout);
    b6e2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    b6e4:	4622      	mov	r2, r4
    b6e6:	4633      	mov	r3, r6
    b6e8:	4911      	ldr	r1, [pc, #68]	; (b730 <z_tick_sleep+0x94>)
    b6ea:	3018      	adds	r0, #24
    b6ec:	f000 f910 	bl	b910 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    b6f0:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    b6f2:	7b53      	ldrb	r3, [r2, #13]
    b6f4:	f043 0310 	orr.w	r3, r3, #16
    b6f8:	7353      	strb	r3, [r2, #13]
    b6fa:	4640      	mov	r0, r8
    b6fc:	f7f9 f9b4 	bl	4a68 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    b700:	f004 f944 	bl	f98c <sys_clock_tick_get_32>
    b704:	1a28      	subs	r0, r5, r0
    b706:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    b70a:	2801      	cmp	r0, #1
    b70c:	f173 0300 	sbcs.w	r3, r3, #0
    b710:	da00      	bge.n	b714 <z_tick_sleep+0x78>
	return 0;
    b712:	2000      	movs	r0, #0
}
    b714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    b718:	f7ff ff7a 	bl	b610 <z_impl_k_yield>
		return 0;
    b71c:	2000      	movs	r0, #0
    b71e:	e7f9      	b.n	b714 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    b720:	f004 f934 	bl	f98c <sys_clock_tick_get_32>
    b724:	1905      	adds	r5, r0, r4
    b726:	e7ce      	b.n	b6c6 <z_tick_sleep+0x2a>
    b728:	20002350 	.word	0x20002350
    b72c:	20002380 	.word	0x20002380
    b730:	0000f713 	.word	0x0000f713

0000b734 <z_impl_k_sleep>:
{
    b734:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b736:	f1b1 3fff 	cmp.w	r1, #4294967295
    b73a:	bf08      	it	eq
    b73c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    b740:	d018      	beq.n	b774 <z_impl_k_sleep+0x40>
	ticks = z_tick_sleep(ticks);
    b742:	f7ff ffab 	bl	b69c <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    b746:	17c2      	asrs	r2, r0, #31
    b748:	0151      	lsls	r1, r2, #5
    b74a:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    b74e:	0143      	lsls	r3, r0, #5
    b750:	1a1b      	subs	r3, r3, r0
    b752:	eb61 0102 	sbc.w	r1, r1, r2
    b756:	0089      	lsls	r1, r1, #2
    b758:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
    b75c:	009b      	lsls	r3, r3, #2
    b75e:	181b      	adds	r3, r3, r0
    b760:	eb42 0201 	adc.w	r2, r2, r1
    b764:	00d2      	lsls	r2, r2, #3
    b766:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    b76a:	f3c3 3310 	ubfx	r3, r3, #12, #17
    b76e:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
    b772:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
    b774:	4b03      	ldr	r3, [pc, #12]	; (b784 <z_impl_k_sleep+0x50>)
    b776:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    b778:	f7ff feb6 	bl	b4e8 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    b77c:	f04f 30ff 	mov.w	r0, #4294967295
    b780:	e7f7      	b.n	b772 <z_impl_k_sleep+0x3e>
    b782:	bf00      	nop
    b784:	20002350 	.word	0x20002350

0000b788 <z_impl_k_usleep>:
{
    b788:	b508      	push	{r3, lr}
	ticks = k_us_to_ticks_ceil64(us);
    b78a:	17c1      	asrs	r1, r0, #31
    b78c:	03c9      	lsls	r1, r1, #15
    b78e:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    b792:	03c0      	lsls	r0, r0, #15
    b794:	4b15      	ldr	r3, [pc, #84]	; (b7ec <z_impl_k_usleep+0x64>)
    b796:	18c0      	adds	r0, r0, r3
    b798:	4a15      	ldr	r2, [pc, #84]	; (b7f0 <z_impl_k_usleep+0x68>)
    b79a:	f04f 0300 	mov.w	r3, #0
    b79e:	f141 0100 	adc.w	r1, r1, #0
    b7a2:	f7f4 fcad 	bl	100 <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
    b7a6:	17c1      	asrs	r1, r0, #31
    b7a8:	f7ff ff78 	bl	b69c <z_tick_sleep>
	return k_ticks_to_us_floor64(ticks);
    b7ac:	ea4f 7ce0 	mov.w	ip, r0, asr #31
    b7b0:	ea4f 124c 	mov.w	r2, ip, lsl #5
    b7b4:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    b7b8:	0143      	lsls	r3, r0, #5
    b7ba:	1a1b      	subs	r3, r3, r0
    b7bc:	eb62 020c 	sbc.w	r2, r2, ip
    b7c0:	0252      	lsls	r2, r2, #9
    b7c2:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
    b7c6:	025b      	lsls	r3, r3, #9
    b7c8:	181b      	adds	r3, r3, r0
    b7ca:	eb4c 0202 	adc.w	r2, ip, r2
    b7ce:	ea4f 1e82 	mov.w	lr, r2, lsl #6
    b7d2:	ea4e 6e93 	orr.w	lr, lr, r3, lsr #26
    b7d6:	0199      	lsls	r1, r3, #6
    b7d8:	1acb      	subs	r3, r1, r3
    b7da:	eb6e 0e02 	sbc.w	lr, lr, r2
    b7de:	181b      	adds	r3, r3, r0
    b7e0:	eb4c 000e 	adc.w	r0, ip, lr
    b7e4:	0bdb      	lsrs	r3, r3, #15
}
    b7e6:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    b7ea:	bd08      	pop	{r3, pc}
    b7ec:	000f423f 	.word	0x000f423f
    b7f0:	000f4240 	.word	0x000f4240

0000b7f4 <z_impl_z_current_get>:
}
    b7f4:	4b01      	ldr	r3, [pc, #4]	; (b7fc <z_impl_z_current_get+0x8>)
    b7f6:	6898      	ldr	r0, [r3, #8]
    b7f8:	4770      	bx	lr
    b7fa:	bf00      	nop
    b7fc:	20002350 	.word	0x20002350

0000b800 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    b800:	b570      	push	{r4, r5, r6, lr}
    b802:	f04f 0320 	mov.w	r3, #32
    b806:	f3ef 8511 	mrs	r5, BASEPRI
    b80a:	f383 8812 	msr	BASEPRI_MAX, r3
    b80e:	f3bf 8f6f 	isb	sy
    b812:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    b814:	7b03      	ldrb	r3, [r0, #12]
    b816:	f013 0f01 	tst.w	r3, #1
    b81a:	d109      	bne.n	b830 <z_thread_abort+0x30>
    b81c:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    b81e:	7b43      	ldrb	r3, [r0, #13]
    b820:	f013 0f08 	tst.w	r3, #8
    b824:	d00f      	beq.n	b846 <z_thread_abort+0x46>
	__asm__ volatile(
    b826:	f385 8811 	msr	BASEPRI, r5
    b82a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
    b82e:	e009      	b.n	b844 <z_thread_abort+0x44>
    b830:	f385 8811 	msr	BASEPRI, r5
    b834:	f3bf 8f6f 	isb	sy
		k_panic();
    b838:	4040      	eors	r0, r0
    b83a:	f380 8811 	msr	BASEPRI, r0
    b83e:	f04f 0004 	mov.w	r0, #4
    b842:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    b844:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
    b846:	f7ff fea9 	bl	b59c <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    b84a:	4b08      	ldr	r3, [pc, #32]	; (b86c <z_thread_abort+0x6c>)
    b84c:	689b      	ldr	r3, [r3, #8]
    b84e:	42a3      	cmp	r3, r4
    b850:	d004      	beq.n	b85c <z_thread_abort+0x5c>
    b852:	f386 8811 	msr	BASEPRI, r6
    b856:	f3bf 8f6f 	isb	sy
    b85a:	e7f3      	b.n	b844 <z_thread_abort+0x44>
    b85c:	f3ef 8305 	mrs	r3, IPSR
    b860:	2b00      	cmp	r3, #0
    b862:	d1f6      	bne.n	b852 <z_thread_abort+0x52>
    b864:	4628      	mov	r0, r5
    b866:	f7f9 f8ff 	bl	4a68 <arch_swap>
	return ret;
    b86a:	e7f2      	b.n	b852 <z_thread_abort+0x52>
    b86c:	20002350 	.word	0x20002350

0000b870 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    b870:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
    b874:	b083      	sub	sp, #12
    b876:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    b878:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
    b87c:	e9cd bc00 	strd	fp, ip, [sp]
    b880:	f7ff fdb8 	bl	b3f4 <z_pend_curr>

	if (data != NULL) {
    b884:	b11c      	cbz	r4, b88e <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
    b886:	4b03      	ldr	r3, [pc, #12]	; (b894 <z_sched_wait+0x24>)
    b888:	689b      	ldr	r3, [r3, #8]
    b88a:	695b      	ldr	r3, [r3, #20]
    b88c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    b88e:	b003      	add	sp, #12
    b890:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
    b894:	20002350 	.word	0x20002350

0000b898 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    b898:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    b89a:	4806      	ldr	r0, [pc, #24]	; (b8b4 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    b89c:	4a06      	ldr	r2, [pc, #24]	; (b8b8 <z_data_copy+0x20>)
    b89e:	1a12      	subs	r2, r2, r0
    b8a0:	4906      	ldr	r1, [pc, #24]	; (b8bc <z_data_copy+0x24>)
    b8a2:	f003 fc49 	bl	f138 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    b8a6:	4a06      	ldr	r2, [pc, #24]	; (b8c0 <z_data_copy+0x28>)
    b8a8:	4906      	ldr	r1, [pc, #24]	; (b8c4 <z_data_copy+0x2c>)
    b8aa:	4807      	ldr	r0, [pc, #28]	; (b8c8 <z_data_copy+0x30>)
    b8ac:	f003 fc44 	bl	f138 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    b8b0:	bd08      	pop	{r3, pc}
    b8b2:	bf00      	nop
    b8b4:	20000000 	.word	0x20000000
    b8b8:	20000350 	.word	0x20000350
    b8bc:	000112ac 	.word	0x000112ac
    b8c0:	00000000 	.word	0x00000000
    b8c4:	000112ac 	.word	0x000112ac
    b8c8:	20000000 	.word	0x20000000

0000b8cc <first>:
	return list->head == list;
    b8cc:	4b03      	ldr	r3, [pc, #12]	; (b8dc <first+0x10>)
    b8ce:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b8d0:	4298      	cmp	r0, r3
    b8d2:	d000      	beq.n	b8d6 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    b8d4:	4770      	bx	lr
    b8d6:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    b8d8:	e7fc      	b.n	b8d4 <first+0x8>
    b8da:	bf00      	nop
    b8dc:	200001c0 	.word	0x200001c0

0000b8e0 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b8e0:	b130      	cbz	r0, b8f0 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    b8e2:	4a04      	ldr	r2, [pc, #16]	; (b8f4 <next+0x14>)
    b8e4:	6852      	ldr	r2, [r2, #4]
    b8e6:	4290      	cmp	r0, r2
    b8e8:	d001      	beq.n	b8ee <next+0xe>
    b8ea:	6800      	ldr	r0, [r0, #0]
    b8ec:	4770      	bx	lr
    b8ee:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    b8f0:	4770      	bx	lr
    b8f2:	bf00      	nop
    b8f4:	200001c0 	.word	0x200001c0

0000b8f8 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    b8f8:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    b8fa:	4b04      	ldr	r3, [pc, #16]	; (b90c <elapsed+0x14>)
    b8fc:	681b      	ldr	r3, [r3, #0]
    b8fe:	b10b      	cbz	r3, b904 <elapsed+0xc>
    b900:	2000      	movs	r0, #0
}
    b902:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    b904:	f7fc fce2 	bl	82cc <sys_clock_elapsed>
    b908:	e7fb      	b.n	b902 <elapsed+0xa>
    b90a:	bf00      	nop
    b90c:	20002390 	.word	0x20002390

0000b910 <z_add_timeout>:
}

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b910:	f1b3 3fff 	cmp.w	r3, #4294967295
    b914:	bf08      	it	eq
    b916:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    b91a:	d074      	beq.n	ba06 <z_add_timeout+0xf6>
{
    b91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b920:	4604      	mov	r4, r0
    b922:	4692      	mov	sl, r2
    b924:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    b926:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    b928:	2300      	movs	r3, #0
	__asm__ volatile(
    b92a:	f04f 0220 	mov.w	r2, #32
    b92e:	f3ef 8711 	mrs	r7, BASEPRI
    b932:	f382 8812 	msr	BASEPRI_MAX, r2
    b936:	f3bf 8f6f 	isb	sy
    b93a:	e026      	b.n	b98a <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    b93c:	f11a 0801 	adds.w	r8, sl, #1
    b940:	f145 0900 	adc.w	r9, r5, #0
    b944:	f7ff ffd8 	bl	b8f8 <elapsed>
    b948:	eb18 0300 	adds.w	r3, r8, r0
    b94c:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    b950:	6123      	str	r3, [r4, #16]
    b952:	6160      	str	r0, [r4, #20]
    b954:	e03b      	b.n	b9ce <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    b956:	1a52      	subs	r2, r2, r1
    b958:	eb66 0303 	sbc.w	r3, r6, r3
    b95c:	6102      	str	r2, [r0, #16]
    b95e:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    b960:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    b962:	6063      	str	r3, [r4, #4]
	node->next = successor;
    b964:	6020      	str	r0, [r4, #0]
	prev->next = node;
    b966:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    b968:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    b96a:	e005      	b.n	b978 <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
    b96c:	4b26      	ldr	r3, [pc, #152]	; (ba08 <z_add_timeout+0xf8>)
    b96e:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    b970:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    b972:	6062      	str	r2, [r4, #4]
	tail->next = node;
    b974:	6014      	str	r4, [r2, #0]
	list->tail = node;
    b976:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    b978:	f7ff ffa8 	bl	b8cc <first>
    b97c:	4284      	cmp	r4, r0
    b97e:	d03a      	beq.n	b9f6 <z_add_timeout+0xe6>
	__asm__ volatile(
    b980:	f387 8811 	msr	BASEPRI, r7
    b984:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    b988:	2301      	movs	r3, #1
    b98a:	2b00      	cmp	r3, #0
    b98c:	d139      	bne.n	ba02 <z_add_timeout+0xf2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    b98e:	4653      	mov	r3, sl
    b990:	f06f 0101 	mvn.w	r1, #1
    b994:	ebb1 010a 	subs.w	r1, r1, sl
    b998:	f04f 30ff 	mov.w	r0, #4294967295
    b99c:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    b9a0:	2a00      	cmp	r2, #0
    b9a2:	dbcb      	blt.n	b93c <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    b9a4:	4a19      	ldr	r2, [pc, #100]	; (ba0c <z_add_timeout+0xfc>)
    b9a6:	6811      	ldr	r1, [r2, #0]
    b9a8:	6852      	ldr	r2, [r2, #4]
    b9aa:	185b      	adds	r3, r3, r1
    b9ac:	eb42 0205 	adc.w	r2, r2, r5
    b9b0:	f06f 0101 	mvn.w	r1, #1
    b9b4:	1ac9      	subs	r1, r1, r3
    b9b6:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
    b9ba:	4608      	mov	r0, r1
    b9bc:	461a      	mov	r2, r3
    b9be:	2901      	cmp	r1, #1
    b9c0:	f173 0300 	sbcs.w	r3, r3, #0
    b9c4:	da01      	bge.n	b9ca <z_add_timeout+0xba>
    b9c6:	2001      	movs	r0, #1
    b9c8:	2200      	movs	r2, #0
    b9ca:	6120      	str	r0, [r4, #16]
    b9cc:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    b9ce:	f7ff ff7d 	bl	b8cc <first>
    b9d2:	2800      	cmp	r0, #0
    b9d4:	d0ca      	beq.n	b96c <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
    b9d6:	6902      	ldr	r2, [r0, #16]
    b9d8:	6946      	ldr	r6, [r0, #20]
    b9da:	6921      	ldr	r1, [r4, #16]
    b9dc:	6963      	ldr	r3, [r4, #20]
    b9de:	4291      	cmp	r1, r2
    b9e0:	eb73 0e06 	sbcs.w	lr, r3, r6
    b9e4:	dbb7      	blt.n	b956 <z_add_timeout+0x46>
			to->dticks -= t->dticks;
    b9e6:	1a89      	subs	r1, r1, r2
    b9e8:	eb63 0306 	sbc.w	r3, r3, r6
    b9ec:	6121      	str	r1, [r4, #16]
    b9ee:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    b9f0:	f7ff ff76 	bl	b8e0 <next>
    b9f4:	e7ed      	b.n	b9d2 <z_add_timeout+0xc2>
			sys_clock_set_timeout(next_timeout(), false);
    b9f6:	f003 ff77 	bl	f8e8 <next_timeout>
    b9fa:	2100      	movs	r1, #0
    b9fc:	f7fc fc2a 	bl	8254 <sys_clock_set_timeout>
    ba00:	e7be      	b.n	b980 <z_add_timeout+0x70>
		}
	}
}
    ba02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ba06:	4770      	bx	lr
    ba08:	200001c0 	.word	0x200001c0
    ba0c:	20000b78 	.word	0x20000b78

0000ba10 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    ba10:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    ba12:	f04f 0320 	mov.w	r3, #32
    ba16:	f3ef 8611 	mrs	r6, BASEPRI
    ba1a:	f383 8812 	msr	BASEPRI_MAX, r3
    ba1e:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    ba22:	4b2b      	ldr	r3, [pc, #172]	; (bad0 <sys_clock_announce+0xc0>)
    ba24:	6018      	str	r0, [r3, #0]

	struct _timeout *t = first();
    ba26:	f7ff ff51 	bl	b8cc <first>
    ba2a:	4604      	mov	r4, r0

	for (t = first();
    ba2c:	e024      	b.n	ba78 <sys_clock_announce+0x68>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
    ba2e:	4a29      	ldr	r2, [pc, #164]	; (bad4 <sys_clock_announce+0xc4>)
    ba30:	6813      	ldr	r3, [r2, #0]
    ba32:	6851      	ldr	r1, [r2, #4]
    ba34:	195b      	adds	r3, r3, r5
    ba36:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
    ba3a:	6013      	str	r3, [r2, #0]
    ba3c:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
    ba3e:	2200      	movs	r2, #0
    ba40:	2300      	movs	r3, #0
    ba42:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    ba46:	4620      	mov	r0, r4
    ba48:	f003 ff37 	bl	f8ba <remove_timeout>
	__asm__ volatile(
    ba4c:	f386 8811 	msr	BASEPRI, r6
    ba50:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    ba54:	68a3      	ldr	r3, [r4, #8]
    ba56:	4620      	mov	r0, r4
    ba58:	4798      	blx	r3
	__asm__ volatile(
    ba5a:	f04f 0320 	mov.w	r3, #32
    ba5e:	f3ef 8611 	mrs	r6, BASEPRI
    ba62:	f383 8812 	msr	BASEPRI_MAX, r3
    ba66:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
    ba6a:	4a19      	ldr	r2, [pc, #100]	; (bad0 <sys_clock_announce+0xc0>)
    ba6c:	6813      	ldr	r3, [r2, #0]
    ba6e:	1b5b      	subs	r3, r3, r5
    ba70:	6013      	str	r3, [r2, #0]
	     t = first()) {
    ba72:	f7ff ff2b 	bl	b8cc <first>
    ba76:	4604      	mov	r4, r0
	     (t != NULL) && (t->dticks <= announce_remaining);
    ba78:	b13c      	cbz	r4, ba8a <sys_clock_announce+0x7a>
    ba7a:	6925      	ldr	r5, [r4, #16]
    ba7c:	6961      	ldr	r1, [r4, #20]
    ba7e:	4b14      	ldr	r3, [pc, #80]	; (bad0 <sys_clock_announce+0xc0>)
    ba80:	681a      	ldr	r2, [r3, #0]
    ba82:	17d3      	asrs	r3, r2, #31
    ba84:	42aa      	cmp	r2, r5
    ba86:	418b      	sbcs	r3, r1
    ba88:	dad1      	bge.n	ba2e <sys_clock_announce+0x1e>
	}

	if (t != NULL) {
    ba8a:	b144      	cbz	r4, ba9e <sys_clock_announce+0x8e>
		t->dticks -= announce_remaining;
    ba8c:	6923      	ldr	r3, [r4, #16]
    ba8e:	6962      	ldr	r2, [r4, #20]
    ba90:	490f      	ldr	r1, [pc, #60]	; (bad0 <sys_clock_announce+0xc0>)
    ba92:	6809      	ldr	r1, [r1, #0]
    ba94:	1a5b      	subs	r3, r3, r1
    ba96:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    ba9a:	6123      	str	r3, [r4, #16]
    ba9c:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    ba9e:	4a0d      	ldr	r2, [pc, #52]	; (bad4 <sys_clock_announce+0xc4>)
    baa0:	4d0b      	ldr	r5, [pc, #44]	; (bad0 <sys_clock_announce+0xc0>)
    baa2:	6828      	ldr	r0, [r5, #0]
    baa4:	6813      	ldr	r3, [r2, #0]
    baa6:	6851      	ldr	r1, [r2, #4]
    baa8:	181b      	adds	r3, r3, r0
    baaa:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    baae:	6013      	str	r3, [r2, #0]
    bab0:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    bab2:	2400      	movs	r4, #0
    bab4:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    bab6:	f003 ff17 	bl	f8e8 <next_timeout>
    baba:	4621      	mov	r1, r4
    babc:	f7fc fbca 	bl	8254 <sys_clock_set_timeout>
	__asm__ volatile(
    bac0:	f386 8811 	msr	BASEPRI, r6
    bac4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
    bac8:	f7ff fbe4 	bl	b294 <z_time_slice>
#endif
}
    bacc:	bd70      	pop	{r4, r5, r6, pc}
    bace:	bf00      	nop
    bad0:	20002390 	.word	0x20002390
    bad4:	20000b78 	.word	0x20000b78

0000bad8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    bad8:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    bada:	2200      	movs	r2, #0
	__asm__ volatile(
    badc:	f04f 0320 	mov.w	r3, #32
    bae0:	f3ef 8411 	mrs	r4, BASEPRI
    bae4:	f383 8812 	msr	BASEPRI_MAX, r3
    bae8:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    baec:	4613      	mov	r3, r2
    baee:	4611      	mov	r1, r2
    baf0:	e00c      	b.n	bb0c <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
    baf2:	f7ff ff01 	bl	b8f8 <elapsed>
    baf6:	4a07      	ldr	r2, [pc, #28]	; (bb14 <sys_clock_tick_get+0x3c>)
    baf8:	6813      	ldr	r3, [r2, #0]
    bafa:	6851      	ldr	r1, [r2, #4]
    bafc:	18c3      	adds	r3, r0, r3
    bafe:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
    bb02:	f384 8811 	msr	BASEPRI, r4
    bb06:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    bb0a:	2201      	movs	r2, #1
    bb0c:	2a00      	cmp	r2, #0
    bb0e:	d0f0      	beq.n	baf2 <sys_clock_tick_get+0x1a>
	}
	return t;
}
    bb10:	4618      	mov	r0, r3
    bb12:	bd10      	pop	{r4, pc}
    bb14:	20000b78 	.word	0x20000b78

0000bb18 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    bb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    bb1a:	f04f 0220 	mov.w	r2, #32
    bb1e:	f3ef 8311 	mrs	r3, BASEPRI
    bb22:	f382 8812 	msr	BASEPRI_MAX, r2
    bb26:	f3bf 8f6f 	isb	sy
    bb2a:	461a      	mov	r2, r3
    bb2c:	461d      	mov	r5, r3
	return node->next != NULL;
    bb2e:	6803      	ldr	r3, [r0, #0]
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
    bb30:	b123      	cbz	r3, bb3c <z_timer_expiration_handler+0x24>
	__asm__ volatile(
    bb32:	f382 8811 	msr	BASEPRI, r2
    bb36:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    bb3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bb3c:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    bb3e:	6a82      	ldr	r2, [r0, #40]	; 0x28
    bb40:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    bb42:	ea52 0103 	orrs.w	r1, r2, r3
    bb46:	d005      	beq.n	bb54 <z_timer_expiration_handler+0x3c>
    bb48:	f1b3 3fff 	cmp.w	r3, #4294967295
    bb4c:	bf08      	it	eq
    bb4e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    bb52:	d129      	bne.n	bba8 <z_timer_expiration_handler+0x90>
	timer->status += 1U;
    bb54:	6b23      	ldr	r3, [r4, #48]	; 0x30
    bb56:	3301      	adds	r3, #1
    bb58:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
    bb5a:	6a23      	ldr	r3, [r4, #32]
    bb5c:	b17b      	cbz	r3, bb7e <z_timer_expiration_handler+0x66>
    bb5e:	f385 8811 	msr	BASEPRI, r5
    bb62:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
    bb66:	6a23      	ldr	r3, [r4, #32]
    bb68:	4620      	mov	r0, r4
    bb6a:	4798      	blx	r3
	__asm__ volatile(
    bb6c:	f04f 0220 	mov.w	r2, #32
    bb70:	f3ef 8311 	mrs	r3, BASEPRI
    bb74:	f382 8812 	msr	BASEPRI_MAX, r2
    bb78:	f3bf 8f6f 	isb	sy
    bb7c:	461d      	mov	r5, r3
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    bb7e:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    bb82:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bb84:	42a3      	cmp	r3, r4
    bb86:	d03f      	beq.n	bc08 <z_timer_expiration_handler+0xf0>
	if (thread == NULL) {
    bb88:	2c00      	cmp	r4, #0
    bb8a:	d03d      	beq.n	bc08 <z_timer_expiration_handler+0xf0>
	z_unpend_thread_no_timeout(thread);
    bb8c:	4620      	mov	r0, r4
    bb8e:	f003 fd0b 	bl	f5a8 <z_unpend_thread_no_timeout>
    bb92:	2300      	movs	r3, #0
    bb94:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__asm__ volatile(
    bb98:	f385 8811 	msr	BASEPRI, r5
    bb9c:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    bba0:	4620      	mov	r0, r4
    bba2:	f003 fd70 	bl	f686 <z_ready_thread>
    bba6:	e7c8      	b.n	bb3a <z_timer_expiration_handler+0x22>
		next.ticks = MAX(next.ticks - 1, 0);
    bba8:	4616      	mov	r6, r2
    bbaa:	461f      	mov	r7, r3
    bbac:	2a01      	cmp	r2, #1
    bbae:	f173 0300 	sbcs.w	r3, r3, #0
    bbb2:	da01      	bge.n	bbb8 <z_timer_expiration_handler+0xa0>
    bbb4:	2601      	movs	r6, #1
    bbb6:	2700      	movs	r7, #0
    bbb8:	3e01      	subs	r6, #1
    bbba:	f147 37ff 	adc.w	r7, r7, #4294967295
	return z_impl_k_uptime_ticks();
    bbbe:	f003 fee9 	bl	f994 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    bbc2:	3001      	adds	r0, #1
    bbc4:	f141 0100 	adc.w	r1, r1, #0
    bbc8:	1980      	adds	r0, r0, r6
    bbca:	eb47 0101 	adc.w	r1, r7, r1
    bbce:	2801      	cmp	r0, #1
    bbd0:	f171 0100 	sbcs.w	r1, r1, #0
    bbd4:	da08      	bge.n	bbe8 <z_timer_expiration_handler+0xd0>
    bbd6:	f06f 0201 	mvn.w	r2, #1
    bbda:	f04f 33ff 	mov.w	r3, #4294967295
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    bbde:	490d      	ldr	r1, [pc, #52]	; (bc14 <z_timer_expiration_handler+0xfc>)
    bbe0:	4620      	mov	r0, r4
    bbe2:	f7ff fe95 	bl	b910 <z_add_timeout>
    bbe6:	e7b5      	b.n	bb54 <z_timer_expiration_handler+0x3c>
    bbe8:	f003 fed4 	bl	f994 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    bbec:	3001      	adds	r0, #1
    bbee:	f141 0100 	adc.w	r1, r1, #0
    bbf2:	1980      	adds	r0, r0, r6
    bbf4:	eb47 0301 	adc.w	r3, r7, r1
    bbf8:	f06f 0201 	mvn.w	r2, #1
    bbfc:	1a12      	subs	r2, r2, r0
    bbfe:	f04f 31ff 	mov.w	r1, #4294967295
    bc02:	eb61 0303 	sbc.w	r3, r1, r3
    bc06:	e7ea      	b.n	bbde <z_timer_expiration_handler+0xc6>
    bc08:	f385 8811 	msr	BASEPRI, r5
    bc0c:	f3bf 8f6f 	isb	sy
		return;
    bc10:	e793      	b.n	bb3a <z_timer_expiration_handler+0x22>
    bc12:	bf00      	nop
    bc14:	0000bb19 	.word	0x0000bb19

0000bc18 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    bc18:	b570      	push	{r4, r5, r6, lr}
    bc1a:	461d      	mov	r5, r3
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    bc1c:	f1b3 3fff 	cmp.w	r3, #4294967295
    bc20:	bf08      	it	eq
    bc22:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    bc26:	d01a      	beq.n	bc5e <z_impl_k_timer_start+0x46>
    bc28:	4606      	mov	r6, r0
    bc2a:	4614      	mov	r4, r2
    bc2c:	4619      	mov	r1, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
    bc2e:	f06f 0201 	mvn.w	r2, #1
    bc32:	1b12      	subs	r2, r2, r4
    bc34:	f04f 32ff 	mov.w	r2, #4294967295
    bc38:	eb62 0203 	sbc.w	r2, r2, r3
    bc3c:	2a00      	cmp	r2, #0
    bc3e:	db0f      	blt.n	bc60 <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    bc40:	4630      	mov	r0, r6
    bc42:	f003 fe6e 	bl	f922 <z_abort_timeout>
	timer->period = period;
    bc46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    bc4a:	e9c6 230a 	strd	r2, r3, [r6, #40]	; 0x28
	timer->status = 0U;
    bc4e:	2300      	movs	r3, #0
    bc50:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    bc52:	4622      	mov	r2, r4
    bc54:	462b      	mov	r3, r5
    bc56:	4907      	ldr	r1, [pc, #28]	; (bc74 <z_impl_k_timer_start+0x5c>)
    bc58:	4630      	mov	r0, r6
    bc5a:	f7ff fe59 	bl	b910 <z_add_timeout>
		     duration);
}
    bc5e:	bd70      	pop	{r4, r5, r6, pc}
		duration.ticks = MAX(duration.ticks - 1, 0);
    bc60:	2c01      	cmp	r4, #1
    bc62:	f171 0100 	sbcs.w	r1, r1, #0
    bc66:	da01      	bge.n	bc6c <z_impl_k_timer_start+0x54>
    bc68:	2401      	movs	r4, #1
    bc6a:	2500      	movs	r5, #0
    bc6c:	3c01      	subs	r4, #1
    bc6e:	f145 35ff 	adc.w	r5, r5, #4294967295
    bc72:	e7e5      	b.n	bc40 <z_impl_k_timer_start+0x28>
    bc74:	0000bb19 	.word	0x0000bb19

0000bc78 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    bc78:	b538      	push	{r3, r4, r5, lr}
    bc7a:	4604      	mov	r4, r0
    bc7c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    bc7e:	f003 fab8 	bl	f1f2 <k_is_in_isr>
    bc82:	b948      	cbnz	r0, bc98 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    bc84:	4b05      	ldr	r3, [pc, #20]	; (bc9c <z_thread_aligned_alloc+0x24>)
    bc86:	689b      	ldr	r3, [r3, #8]
    bc88:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
	}

	if (heap != NULL) {
    bc8c:	b118      	cbz	r0, bc96 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
    bc8e:	462a      	mov	r2, r5
    bc90:	4621      	mov	r1, r4
    bc92:	f003 fee1 	bl	fa58 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
    bc96:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
    bc98:	2000      	movs	r0, #0
	return ret;
    bc9a:	e7fc      	b.n	bc96 <z_thread_aligned_alloc+0x1e>
    bc9c:	20002350 	.word	0x20002350

0000bca0 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
    bca0:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    bca2:	4802      	ldr	r0, [pc, #8]	; (bcac <boot_banner+0xc>)
    bca4:	f000 f939 	bl	bf1a <printk>
#endif /* CONFIG_BOOT_BANNER */
}
    bca8:	bd08      	pop	{r3, pc}
    bcaa:	bf00      	nop
    bcac:	00011270 	.word	0x00011270

0000bcb0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
    bcb0:	b510      	push	{r4, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
    bcb2:	4c06      	ldr	r4, [pc, #24]	; (bccc <statics_init+0x1c>)
    bcb4:	e005      	b.n	bcc2 <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    bcb6:	68a2      	ldr	r2, [r4, #8]
    bcb8:	6861      	ldr	r1, [r4, #4]
    bcba:	4620      	mov	r0, r4
    bcbc:	f003 feee 	bl	fa9c <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    bcc0:	3414      	adds	r4, #20
    bcc2:	4b03      	ldr	r3, [pc, #12]	; (bcd0 <statics_init+0x20>)
    bcc4:	429c      	cmp	r4, r3
    bcc6:	d3f6      	bcc.n	bcb6 <statics_init+0x6>
		}
	}
	return 0;
}
    bcc8:	2000      	movs	r0, #0
    bcca:	bd10      	pop	{r4, pc}
    bccc:	2000022c 	.word	0x2000022c
    bcd0:	2000022c 	.word	0x2000022c

0000bcd4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
    bcd4:	b510      	push	{r4, lr}
    bcd6:	b084      	sub	sp, #16
	struct k_work_queue_config cfg = {
    bcd8:	4b08      	ldr	r3, [pc, #32]	; (bcfc <k_sys_work_q_init+0x28>)
    bcda:	9302      	str	r3, [sp, #8]
    bcdc:	2400      	movs	r4, #0
    bcde:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    bce2:	ab02      	add	r3, sp, #8
    bce4:	9300      	str	r3, [sp, #0]
    bce6:	f04f 33ff 	mov.w	r3, #4294967295
    bcea:	f44f 6280 	mov.w	r2, #1024	; 0x400
    bcee:	4904      	ldr	r1, [pc, #16]	; (bd00 <k_sys_work_q_init+0x2c>)
    bcf0:	4804      	ldr	r0, [pc, #16]	; (bd04 <k_sys_work_q_init+0x30>)
    bcf2:	f7ff f985 	bl	b000 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    bcf6:	4620      	mov	r0, r4
    bcf8:	b004      	add	sp, #16
    bcfa:	bd10      	pop	{r4, pc}
    bcfc:	000112a0 	.word	0x000112a0
    bd00:	20003d80 	.word	0x20003d80
    bd04:	20000b80 	.word	0x20000b80

0000bd08 <uart_irq_callback_user_data_set>:
{
    bd08:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
    bd0a:	6883      	ldr	r3, [r0, #8]
	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    bd0c:	b123      	cbz	r3, bd18 <uart_irq_callback_user_data_set+0x10>
    bd0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    bd10:	b12b      	cbz	r3, bd1e <uart_irq_callback_user_data_set+0x16>
		api->irq_callback_set(dev, cb, user_data);
    bd12:	4798      	blx	r3
		return 0;
    bd14:	2000      	movs	r0, #0
}
    bd16:	bd08      	pop	{r3, pc}
		return -ENOSYS;
    bd18:	f06f 0057 	mvn.w	r0, #87	; 0x57
    bd1c:	e7fb      	b.n	bd16 <uart_irq_callback_user_data_set+0xe>
    bd1e:	f06f 0057 	mvn.w	r0, #87	; 0x57
    bd22:	e7f8      	b.n	bd16 <uart_irq_callback_user_data_set+0xe>

0000bd24 <uart_irq_tx_enable>:

extern void z_impl_uart_irq_tx_enable(const struct device * dev);

__pinned_func
static inline void uart_irq_tx_enable(const struct device * dev)
{
    bd24:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
    bd26:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_enable != NULL) {
    bd28:	69db      	ldr	r3, [r3, #28]
    bd2a:	b103      	cbz	r3, bd2e <uart_irq_tx_enable+0xa>
		api->irq_tx_enable(dev);
    bd2c:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_enable(dev);
}
    bd2e:	bd08      	pop	{r3, pc}

0000bd30 <uart_irq_tx_disable>:

extern void z_impl_uart_irq_tx_disable(const struct device * dev);

__pinned_func
static inline void uart_irq_tx_disable(const struct device * dev)
{
    bd30:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
    bd32:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_disable != NULL) {
    bd34:	6a1b      	ldr	r3, [r3, #32]
    bd36:	b103      	cbz	r3, bd3a <uart_irq_tx_disable+0xa>
		api->irq_tx_disable(dev);
    bd38:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
}
    bd3a:	bd08      	pop	{r3, pc}

0000bd3c <uart_irq_rx_enable>:

extern void z_impl_uart_irq_rx_enable(const struct device * dev);

__pinned_func
static inline void uart_irq_rx_enable(const struct device * dev)
{
    bd3c:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
    bd3e:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_enable != NULL) {
    bd40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bd42:	b103      	cbz	r3, bd46 <uart_irq_rx_enable+0xa>
		api->irq_rx_enable(dev);
    bd44:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
}
    bd46:	bd08      	pop	{r3, pc}

0000bd48 <uart_irq_is_pending>:

extern int z_impl_uart_irq_is_pending(const struct device * dev);

__pinned_func
static inline int uart_irq_is_pending(const struct device * dev)
{
    bd48:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
    bd4a:	6883      	ldr	r3, [r0, #8]
	if (api->irq_is_pending == NULL) {
    bd4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    bd4e:	b10b      	cbz	r3, bd54 <uart_irq_is_pending+0xc>
	return api->irq_is_pending(dev);
    bd50:	4798      	blx	r3
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_UART_IRQ_IS_PENDING);
	}
#endif
	compiler_barrier();
	return z_impl_uart_irq_is_pending(dev);
}
    bd52:	bd08      	pop	{r3, pc}
		return -ENOSYS;
    bd54:	f06f 0057 	mvn.w	r0, #87	; 0x57
	return z_impl_uart_irq_is_pending(dev);
    bd58:	e7fb      	b.n	bd52 <uart_irq_is_pending+0xa>

0000bd5a <uart_irq_update>:

extern int z_impl_uart_irq_update(const struct device * dev);

__pinned_func
static inline int uart_irq_update(const struct device * dev)
{
    bd5a:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
    bd5c:	6883      	ldr	r3, [r0, #8]
	if (api->irq_update == NULL) {
    bd5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    bd60:	b10b      	cbz	r3, bd66 <uart_irq_update+0xc>
	return api->irq_update(dev);
    bd62:	4798      	blx	r3
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_UART_IRQ_UPDATE);
	}
#endif
	compiler_barrier();
	return z_impl_uart_irq_update(dev);
}
    bd64:	bd08      	pop	{r3, pc}
		return -ENOSYS;
    bd66:	f06f 0057 	mvn.w	r0, #87	; 0x57
	return z_impl_uart_irq_update(dev);
    bd6a:	e7fb      	b.n	bd64 <uart_irq_update+0xa>

0000bd6c <uart_line_ctrl_set>:

extern int z_impl_uart_line_ctrl_set(const struct device * dev, uint32_t ctrl, uint32_t val);

__pinned_func
static inline int uart_line_ctrl_set(const struct device * dev, uint32_t ctrl, uint32_t val)
{
    bd6c:	b508      	push	{r3, lr}

static inline int z_impl_uart_line_ctrl_set(const struct device *dev,
					    uint32_t ctrl, uint32_t val)
{
#ifdef CONFIG_UART_LINE_CTRL
	const struct uart_driver_api *api =
    bd6e:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->line_ctrl_set == NULL) {
    bd70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    bd72:	b10b      	cbz	r3, bd78 <uart_line_ctrl_set+0xc>
		return -ENOSYS;
	}
	return api->line_ctrl_set(dev, ctrl, val);
    bd74:	4798      	blx	r3
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_UART_LINE_CTRL_SET);
	}
#endif
	compiler_barrier();
	return z_impl_uart_line_ctrl_set(dev, ctrl, val);
}
    bd76:	bd08      	pop	{r3, pc}
		return -ENOSYS;
    bd78:	f06f 0057 	mvn.w	r0, #87	; 0x57
	return z_impl_uart_line_ctrl_set(dev, ctrl, val);
    bd7c:	e7fb      	b.n	bd76 <uart_line_ctrl_set+0xa>

0000bd7e <uart_line_ctrl_get>:

extern int z_impl_uart_line_ctrl_get(const struct device * dev, uint32_t ctrl, uint32_t * val);

__pinned_func
static inline int uart_line_ctrl_get(const struct device * dev, uint32_t ctrl, uint32_t * val)
{
    bd7e:	b508      	push	{r3, lr}

static inline int z_impl_uart_line_ctrl_get(const struct device *dev,
					    uint32_t ctrl, uint32_t *val)
{
#ifdef CONFIG_UART_LINE_CTRL
	const struct uart_driver_api *api =
    bd80:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->line_ctrl_get == NULL) {
    bd82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bd84:	b10b      	cbz	r3, bd8a <uart_line_ctrl_get+0xc>
		return -ENOSYS;
	}
	return api->line_ctrl_get(dev, ctrl, val);
    bd86:	4798      	blx	r3
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_UART_LINE_CTRL_GET);
	}
#endif
	compiler_barrier();
	return z_impl_uart_line_ctrl_get(dev, ctrl, val);
}
    bd88:	bd08      	pop	{r3, pc}
		return -ENOSYS;
    bd8a:	f06f 0057 	mvn.w	r0, #87	; 0x57
	return z_impl_uart_line_ctrl_get(dev, ctrl, val);
    bd8e:	e7fb      	b.n	bd88 <uart_line_ctrl_get+0xa>

0000bd90 <k_msleep>:
{
    bd90:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    bd92:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    bd96:	17c1      	asrs	r1, r0, #31
    bd98:	03c9      	lsls	r1, r1, #15
    bd9a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    bd9e:	03c0      	lsls	r0, r0, #15
    bda0:	f240 33e7 	movw	r3, #999	; 0x3e7
    bda4:	18c0      	adds	r0, r0, r3
    bda6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bdaa:	f04f 0300 	mov.w	r3, #0
    bdae:	f141 0100 	adc.w	r1, r1, #0
    bdb2:	f7f4 f9a5 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    bdb6:	f7ff fcbd 	bl	b734 <z_impl_k_sleep>
}
    bdba:	bd08      	pop	{r3, pc}

0000bdbc <cbprintf_via_va_list>:
{
    bdbc:	b510      	push	{r4, lr}
    bdbe:	460c      	mov	r4, r1
    bdc0:	4611      	mov	r1, r2
    bdc2:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
    bdc4:	9b02      	ldr	r3, [sp, #8]
    bdc6:	47a0      	blx	r4
}
    bdc8:	bd10      	pop	{r4, pc}

0000bdca <is_fmt_spec>:
	return (c >= 64) && (c <= 122);
    bdca:	3840      	subs	r0, #64	; 0x40
    bdcc:	b2c0      	uxtb	r0, r0
}
    bdce:	283a      	cmp	r0, #58	; 0x3a
    bdd0:	bf8c      	ite	hi
    bdd2:	2000      	movhi	r0, #0
    bdd4:	2001      	movls	r0, #1
    bdd6:	4770      	bx	lr

0000bdd8 <get_package_len>:
{
    bdd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bdda:	4606      	mov	r6, r0
	args_size = buf[0] * sizeof(int);
    bddc:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    bdde:	7845      	ldrb	r5, [r0, #1]
	ros_nbr   = buf[2];
    bde0:	7884      	ldrb	r4, [r0, #2]
	buf += ros_nbr;
    bde2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    bde6:	4404      	add	r4, r0
	for (unsigned int i = 0; i < s_nbr; i++) {
    bde8:	2700      	movs	r7, #0
    bdea:	e006      	b.n	bdfa <get_package_len+0x22>
		buf++;
    bdec:	3401      	adds	r4, #1
		buf += strlen((const char *)buf) + 1;
    bdee:	4620      	mov	r0, r4
    bdf0:	f001 ffd1 	bl	dd96 <strlen>
    bdf4:	3001      	adds	r0, #1
    bdf6:	4404      	add	r4, r0
	for (unsigned int i = 0; i < s_nbr; i++) {
    bdf8:	3701      	adds	r7, #1
    bdfa:	42af      	cmp	r7, r5
    bdfc:	d3f6      	bcc.n	bdec <get_package_len+0x14>
}
    bdfe:	1ba0      	subs	r0, r4, r6
    be00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000be02 <append_string>:
{
    be02:	b570      	push	{r4, r5, r6, lr}
    be04:	4614      	mov	r4, r2
	if (cb == NULL) {
    be06:	b138      	cbz	r0, be18 <append_string+0x16>
    be08:	460d      	mov	r5, r1
    be0a:	4619      	mov	r1, r3
    be0c:	4606      	mov	r6, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    be0e:	b143      	cbz	r3, be22 <append_string+0x20>
	return cb(str, strl, ctx);
    be10:	462a      	mov	r2, r5
    be12:	4620      	mov	r0, r4
    be14:	47b0      	blx	r6
}
    be16:	bd70      	pop	{r4, r5, r6, pc}
		return 1 + strlen(str);
    be18:	4610      	mov	r0, r2
    be1a:	f001 ffbc 	bl	dd96 <strlen>
    be1e:	3001      	adds	r0, #1
    be20:	e7f9      	b.n	be16 <append_string+0x14>
	strl = strl > 0 ? strl : strlen(str) + 1;
    be22:	4610      	mov	r0, r2
    be24:	f001 ffb7 	bl	dd96 <strlen>
    be28:	b283      	uxth	r3, r0
    be2a:	3301      	adds	r3, #1
    be2c:	b299      	uxth	r1, r3
    be2e:	e7ef      	b.n	be10 <append_string+0xe>

0000be30 <cbpprintf_external>:
	if (buf == NULL) {
    be30:	b35b      	cbz	r3, be8a <cbpprintf_external+0x5a>
{
    be32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    be36:	b082      	sub	sp, #8
    be38:	4607      	mov	r7, r0
    be3a:	4688      	mov	r8, r1
    be3c:	4691      	mov	r9, r2
    be3e:	461d      	mov	r5, r3
	args_size = hdr->hdr.desc.len * sizeof(int);
    be40:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = hdr->hdr.desc.str_cnt;
    be42:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
    be44:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
    be46:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    be48:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    be4c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
    be50:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
    be52:	f04f 0a00 	mov.w	sl, #0
    be56:	e00a      	b.n	be6e <cbpprintf_external+0x3e>
		s_idx = *(uint8_t *)s++;
    be58:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    be5c:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    be60:	4620      	mov	r0, r4
    be62:	f001 ff98 	bl	dd96 <strlen>
    be66:	3001      	adds	r0, #1
    be68:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    be6a:	f10a 0a01 	add.w	sl, sl, #1
    be6e:	45b2      	cmp	sl, r6
    be70:	d3f2      	bcc.n	be58 <cbpprintf_external+0x28>
	buf += sizeof(*hdr);
    be72:	f105 0308 	add.w	r3, r5, #8
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
    be76:	9300      	str	r3, [sp, #0]
    be78:	686b      	ldr	r3, [r5, #4]
    be7a:	464a      	mov	r2, r9
    be7c:	4641      	mov	r1, r8
    be7e:	4638      	mov	r0, r7
    be80:	f7ff ff9c 	bl	bdbc <cbprintf_via_va_list>
}
    be84:	b002      	add	sp, #8
    be86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
    be8a:	f06f 0015 	mvn.w	r0, #21
}
    be8e:	4770      	bx	lr

0000be90 <is_ptr>:
{
    be90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be94:	4604      	mov	r4, r0
    be96:	4688      	mov	r8, r1
	int cnt = 0;
    be98:	2700      	movs	r7, #0
	bool mod = false;
    be9a:	463e      	mov	r6, r7
	while ((c = *fmt++) != '\0') {
    be9c:	e007      	b.n	beae <is_ptr+0x1e>
				if (c == 'p') {
    be9e:	2d70      	cmp	r5, #112	; 0x70
    bea0:	d018      	beq.n	bed4 <is_ptr+0x44>
				} else if (is_fmt_spec(c)) {
    bea2:	4628      	mov	r0, r5
    bea4:	f7ff ff91 	bl	bdca <is_fmt_spec>
    bea8:	b9b8      	cbnz	r0, beda <is_ptr+0x4a>
		if (c == '%') {
    beaa:	2d25      	cmp	r5, #37	; 0x25
    beac:	d00e      	beq.n	becc <is_ptr+0x3c>
	while ((c = *fmt++) != '\0') {
    beae:	f814 5b01 	ldrb.w	r5, [r4], #1
    beb2:	b175      	cbz	r5, bed2 <is_ptr+0x42>
		if (mod) {
    beb4:	2e00      	cmp	r6, #0
    beb6:	d0f8      	beq.n	beaa <is_ptr+0x1a>
			if (cnt == n) {
    beb8:	4547      	cmp	r7, r8
    beba:	d0f0      	beq.n	be9e <is_ptr+0xe>
			} else if (is_fmt_spec(c)) {
    bebc:	4628      	mov	r0, r5
    bebe:	f7ff ff84 	bl	bdca <is_fmt_spec>
    bec2:	2800      	cmp	r0, #0
    bec4:	d0f1      	beq.n	beaa <is_ptr+0x1a>
				cnt++;
    bec6:	3701      	adds	r7, #1
				mod = false;
    bec8:	2600      	movs	r6, #0
    beca:	e7ee      	b.n	beaa <is_ptr+0x1a>
			mod = !mod;
    becc:	f086 0601 	eor.w	r6, r6, #1
    bed0:	e7ed      	b.n	beae <is_ptr+0x1e>
	return false;
    bed2:	2600      	movs	r6, #0
}
    bed4:	4630      	mov	r0, r6
    bed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					return false;
    beda:	2600      	movs	r6, #0
    bedc:	e7fa      	b.n	bed4 <is_ptr+0x44>

0000bede <arch_printk_char_out>:
}
    bede:	2000      	movs	r0, #0
    bee0:	4770      	bx	lr

0000bee2 <str_out>:
{
    bee2:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    bee4:	680c      	ldr	r4, [r1, #0]
    bee6:	b154      	cbz	r4, befe <str_out+0x1c>
    bee8:	688a      	ldr	r2, [r1, #8]
    beea:	684b      	ldr	r3, [r1, #4]
    beec:	429a      	cmp	r2, r3
    beee:	da06      	bge.n	befe <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
    bef0:	3b01      	subs	r3, #1
    bef2:	429a      	cmp	r2, r3
    bef4:	d008      	beq.n	bf08 <str_out+0x26>
		ctx->str[ctx->count++] = c;
    bef6:	1c53      	adds	r3, r2, #1
    bef8:	608b      	str	r3, [r1, #8]
    befa:	54a0      	strb	r0, [r4, r2]
    befc:	e002      	b.n	bf04 <str_out+0x22>
		ctx->count++;
    befe:	688b      	ldr	r3, [r1, #8]
    bf00:	3301      	adds	r3, #1
    bf02:	608b      	str	r3, [r1, #8]
}
    bf04:	bc10      	pop	{r4}
    bf06:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    bf08:	1c53      	adds	r3, r2, #1
    bf0a:	608b      	str	r3, [r1, #8]
    bf0c:	2300      	movs	r3, #0
    bf0e:	54a3      	strb	r3, [r4, r2]
    bf10:	e7f8      	b.n	bf04 <str_out+0x22>

0000bf12 <vprintk>:
{
    bf12:	b508      	push	{r3, lr}
		z_log_vprintk(fmt, ap);
    bf14:	f001 fa34 	bl	d380 <z_log_vprintk>
}
    bf18:	bd08      	pop	{r3, pc}

0000bf1a <printk>:
{
    bf1a:	b40f      	push	{r0, r1, r2, r3}
    bf1c:	b500      	push	{lr}
    bf1e:	b083      	sub	sp, #12
    bf20:	a904      	add	r1, sp, #16
    bf22:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    bf26:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    bf28:	f7ff fff3 	bl	bf12 <vprintk>
}
    bf2c:	b003      	add	sp, #12
    bf2e:	f85d eb04 	ldr.w	lr, [sp], #4
    bf32:	b004      	add	sp, #16
    bf34:	4770      	bx	lr

0000bf36 <snprintk>:
{
    bf36:	b40c      	push	{r2, r3}
    bf38:	b500      	push	{lr}
    bf3a:	b083      	sub	sp, #12
    bf3c:	ab04      	add	r3, sp, #16
    bf3e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    bf42:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    bf44:	f7f5 f806 	bl	f54 <vsnprintk>
}
    bf48:	b003      	add	sp, #12
    bf4a:	f85d eb04 	ldr.w	lr, [sp], #4
    bf4e:	b002      	add	sp, #8
    bf50:	4770      	bx	lr

0000bf52 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    bf52:	b508      	push	{r3, lr}
    bf54:	4604      	mov	r4, r0
    bf56:	4608      	mov	r0, r1
    bf58:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    bf5a:	461a      	mov	r2, r3
    bf5c:	47a0      	blx	r4
	return z_impl_z_current_get();
    bf5e:	f7ff fc49 	bl	b7f4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    bf62:	f7f9 fda1 	bl	5aa8 <z_impl_k_thread_abort>

0000bf66 <chunk_mem>:
#endif

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    bf66:	00c9      	lsls	r1, r1, #3
    bf68:	3104      	adds	r1, #4

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
    bf6a:	4408      	add	r0, r1
    bf6c:	4770      	bx	lr

0000bf6e <free_list_remove_bidx>:

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    bf6e:	ea4f 0cc1 	mov.w	ip, r1, lsl #3

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    bf72:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    bf76:	88db      	ldrh	r3, [r3, #6]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
    bf78:	4299      	cmp	r1, r3
    bf7a:	d00c      	beq.n	bf96 <free_list_remove_bidx+0x28>
    bf7c:	4484      	add	ip, r0
    bf7e:	f8bc 1004 	ldrh.w	r1, [ip, #4]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
    bf82:	3204      	adds	r2, #4
    bf84:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    bf88:	00ca      	lsls	r2, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    bf8a:	3206      	adds	r2, #6
    bf8c:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
    bf8e:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
    bf90:	3304      	adds	r3, #4
    bf92:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
    bf94:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
    bf96:	68c3      	ldr	r3, [r0, #12]
    bf98:	2101      	movs	r1, #1
    bf9a:	4091      	lsls	r1, r2
    bf9c:	ea23 0301 	bic.w	r3, r3, r1
    bfa0:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    bfa2:	3204      	adds	r2, #4
    bfa4:	2300      	movs	r3, #0
    bfa6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    bfaa:	4770      	bx	lr

0000bfac <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
    bfac:	b510      	push	{r4, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
    bfae:	1d13      	adds	r3, r2, #4
    bfb0:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    bfb4:	b974      	cbnz	r4, bfd4 <free_list_add_bidx+0x28>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
    bfb6:	68c3      	ldr	r3, [r0, #12]
    bfb8:	2401      	movs	r4, #1
    bfba:	4094      	lsls	r4, r2
    bfbc:	4323      	orrs	r3, r4
    bfbe:	60c3      	str	r3, [r0, #12]
		b->next = c;
    bfc0:	3204      	adds	r2, #4
    bfc2:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    bfc6:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
    bfc8:	1d1a      	adds	r2, r3, #4
    bfca:	b289      	uxth	r1, r1
    bfcc:	5281      	strh	r1, [r0, r2]
    bfce:	3306      	adds	r3, #6
    bfd0:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
    bfd2:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
    bfd4:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
    bfd6:	3204      	adds	r2, #4
    bfd8:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
    bfda:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
    bfde:	f10c 0e04 	add.w	lr, ip, #4
    bfe2:	f820 300e 	strh.w	r3, [r0, lr]
    bfe6:	f10c 0c06 	add.w	ip, ip, #6
    bfea:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
    bfee:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
    bff0:	3306      	adds	r3, #6
    bff2:	b289      	uxth	r1, r1
    bff4:	52c1      	strh	r1, [r0, r3]
    bff6:	5281      	strh	r1, [r0, r2]
    bff8:	e7eb      	b.n	bfd2 <free_list_add_bidx+0x26>

0000bffa <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
    bffa:	b500      	push	{lr}
	void *cmem = &buf[c];
    bffc:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
    bffe:	3302      	adds	r3, #2
    c000:	f830 e003 	ldrh.w	lr, [r0, r3]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
    c004:	eba2 0c01 	sub.w	ip, r2, r1
	chunksz_t rsz = sz0 - lsz;
    c008:	1a89      	subs	r1, r1, r2
    c00a:	eb01 015e 	add.w	r1, r1, lr, lsr #1
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    c00e:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
		((uint16_t *)cmem)[f] = val;
    c012:	f820 e003 	strh.w	lr, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    c016:	ea4f 0e41 	mov.w	lr, r1, lsl #1
	void *cmem = &buf[c];
    c01a:	00d3      	lsls	r3, r2, #3
		((uint16_t *)cmem)[f] = val;
    c01c:	3302      	adds	r3, #2
    c01e:	f820 e003 	strh.w	lr, [r0, r3]
    c022:	f820 c032 	strh.w	ip, [r0, r2, lsl #3]
		return ((uint16_t *)cmem)[f];
    c026:	5ac3      	ldrh	r3, [r0, r3]
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
    c028:	eb02 0253 	add.w	r2, r2, r3, lsr #1
		((uint16_t *)cmem)[f] = val;
    c02c:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
    c030:	f85d fb04 	ldr.w	pc, [sp], #4

0000c034 <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
    c034:	b500      	push	{lr}
	void *cmem = &buf[c];
    c036:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
    c038:	3102      	adds	r1, #2
    c03a:	f830 e001 	ldrh.w	lr, [r0, r1]
	void *cmem = &buf[c];
    c03e:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
		return ((uint16_t *)cmem)[f];
    c042:	f10c 0c02 	add.w	ip, ip, #2
    c046:	f830 300c 	ldrh.w	r3, [r0, ip]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    c04a:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    c04c:	eb03 035e 	add.w	r3, r3, lr, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    c050:	ea4f 0e43 	mov.w	lr, r3, lsl #1
		((uint16_t *)cmem)[f] = val;
    c054:	f820 e001 	strh.w	lr, [r0, r1]
		return ((uint16_t *)cmem)[f];
    c058:	f830 100c 	ldrh.w	r1, [r0, ip]
	return c + chunk_size(h, c);
    c05c:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
    c060:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
    c064:	f85d fb04 	ldr.w	pc, [sp], #4

0000c068 <mem_to_chunkid>:
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    c068:	3904      	subs	r1, #4
    c06a:	1a08      	subs	r0, r1, r0
}
    c06c:	08c0      	lsrs	r0, r0, #3
    c06e:	4770      	bx	lr

0000c070 <free_list_remove>:
{
    c070:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
    c072:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    c076:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    c078:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    c07a:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
    c07e:	f1c2 021f 	rsb	r2, r2, #31
    c082:	f7ff ff74 	bl	bf6e <free_list_remove_bidx>
}
    c086:	bd08      	pop	{r3, pc}

0000c088 <free_list_add>:
{
    c088:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
    c08a:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    c08e:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    c090:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
    c092:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
    c096:	f1c2 021f 	rsb	r2, r2, #31
    c09a:	f7ff ff87 	bl	bfac <free_list_add_bidx>
}
    c09e:	bd08      	pop	{r3, pc}

0000c0a0 <free_chunk>:
{
    c0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c0a2:	4604      	mov	r4, r0
    c0a4:	460d      	mov	r5, r1
	void *cmem = &buf[c];
    c0a6:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
    c0a8:	1cb7      	adds	r7, r6, #2
    c0aa:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
    c0ac:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
    c0b0:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    c0b4:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    c0b6:	f013 0f01 	tst.w	r3, #1
    c0ba:	d00c      	beq.n	c0d6 <free_chunk+0x36>
    c0bc:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
    c0be:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
    c0c0:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
    c0c4:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    c0c6:	f013 0f01 	tst.w	r3, #1
    c0ca:	d00e      	beq.n	c0ea <free_chunk+0x4a>
	free_list_add(h, c);
    c0cc:	4629      	mov	r1, r5
    c0ce:	4620      	mov	r0, r4
    c0d0:	f7ff ffda 	bl	c088 <free_list_add>
}
    c0d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
    c0d6:	f7ff ffcb 	bl	c070 <free_list_remove>
    c0da:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
    c0dc:	eb05 0252 	add.w	r2, r5, r2, lsr #1
    c0e0:	4629      	mov	r1, r5
    c0e2:	4620      	mov	r0, r4
    c0e4:	f7ff ffa6 	bl	c034 <merge_chunks>
    c0e8:	e7e8      	b.n	c0bc <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
    c0ea:	4620      	mov	r0, r4
    c0ec:	f7ff ffc0 	bl	c070 <free_list_remove>
    c0f0:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
    c0f2:	462a      	mov	r2, r5
    c0f4:	1a69      	subs	r1, r5, r1
    c0f6:	4620      	mov	r0, r4
    c0f8:	f7ff ff9c 	bl	c034 <merge_chunks>
    c0fc:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
    c0fe:	1aed      	subs	r5, r5, r3
    c100:	e7e4      	b.n	c0cc <free_chunk+0x2c>

0000c102 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    c102:	b570      	push	{r4, r5, r6, lr}
	return 31 - __builtin_clz(usable_sz);
    c104:	fab1 f381 	clz	r3, r1
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    c108:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
    c10c:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
    c110:	b1cd      	cbz	r5, c146 <alloc_chunk+0x44>
    c112:	f1c3 021f 	rsb	r2, r3, #31
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
    c116:	f04f 0e03 	mov.w	lr, #3
		do {
			chunkid_t c = b->next;
    c11a:	1d14      	adds	r4, r2, #4
    c11c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
    c120:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
		return ((uint16_t *)cmem)[f];
    c124:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
    c128:	8876      	ldrh	r6, [r6, #2]
			if (chunk_size(h, c) >= sz) {
    c12a:	ebb1 0f56 	cmp.w	r1, r6, lsr #1
    c12e:	d914      	bls.n	c15a <alloc_chunk+0x58>
    c130:	4484      	add	ip, r0
    c132:	f8bc 4006 	ldrh.w	r4, [ip, #6]
				free_list_remove_bidx(h, c, bi);
				return c;
			}
			b->next = next_free_chunk(h, c);
    c136:	1d16      	adds	r6, r2, #4
    c138:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
    c13c:	f1be 0e01 	subs.w	lr, lr, #1
    c140:	d001      	beq.n	c146 <alloc_chunk+0x44>
    c142:	42a5      	cmp	r5, r4
    c144:	d1e9      	bne.n	c11a <alloc_chunk+0x18>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    c146:	68c4      	ldr	r4, [r0, #12]
    c148:	f1c3 0220 	rsb	r2, r3, #32
    c14c:	2301      	movs	r3, #1
    c14e:	4093      	lsls	r3, r2
    c150:	425b      	negs	r3, r3

	if (bmask != 0U) {
    c152:	401c      	ands	r4, r3
    c154:	d105      	bne.n	c162 <alloc_chunk+0x60>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    c156:	4620      	mov	r0, r4
    c158:	bd70      	pop	{r4, r5, r6, pc}
				free_list_remove_bidx(h, c, bi);
    c15a:	4621      	mov	r1, r4
    c15c:	f7ff ff07 	bl	bf6e <free_list_remove_bidx>
				return c;
    c160:	e7f9      	b.n	c156 <alloc_chunk+0x54>
		int minbucket = __builtin_ctz(bmask);
    c162:	fa94 f2a4 	rbit	r2, r4
    c166:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    c16a:	1d13      	adds	r3, r2, #4
    c16c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    c170:	4621      	mov	r1, r4
    c172:	f7ff fefc 	bl	bf6e <free_list_remove_bidx>
		return c;
    c176:	e7ee      	b.n	c156 <alloc_chunk+0x54>

0000c178 <sys_heap_free>:
	if (mem == NULL) {
    c178:	b179      	cbz	r1, c19a <sys_heap_free+0x22>
{
    c17a:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
    c17c:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
    c17e:	4620      	mov	r0, r4
    c180:	f7ff ff72 	bl	c068 <mem_to_chunkid>
    c184:	4601      	mov	r1, r0
	void *cmem = &buf[c];
    c186:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    c18a:	8853      	ldrh	r3, [r2, #2]
    c18c:	f023 0301 	bic.w	r3, r3, #1
    c190:	8053      	strh	r3, [r2, #2]
	free_chunk(h, c);
    c192:	4620      	mov	r0, r4
    c194:	f7ff ff84 	bl	c0a0 <free_chunk>
}
    c198:	bd10      	pop	{r4, pc}
    c19a:	4770      	bx	lr

0000c19c <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    c19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
    c19e:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    c1a0:	b341      	cbz	r1, c1f4 <sys_heap_alloc+0x58>
    c1a2:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
    c1a4:	68aa      	ldr	r2, [r5, #8]
    c1a6:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
    c1aa:	d925      	bls.n	c1f8 <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    c1ac:	330b      	adds	r3, #11
    c1ae:	08dc      	lsrs	r4, r3, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
    c1b0:	4621      	mov	r1, r4
    c1b2:	4628      	mov	r0, r5
    c1b4:	f7ff ffa5 	bl	c102 <alloc_chunk>
	if (c == 0U) {
    c1b8:	4607      	mov	r7, r0
    c1ba:	b1f8      	cbz	r0, c1fc <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
    c1bc:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
    c1be:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
    c1c2:	885b      	ldrh	r3, [r3, #2]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
    c1c4:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
    c1c8:	d309      	bcc.n	c1de <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
    c1ca:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    c1cc:	885a      	ldrh	r2, [r3, #2]
    c1ce:	f042 0201 	orr.w	r2, r2, #1
    c1d2:	805a      	strh	r2, [r3, #2]
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);

	mem = chunk_mem(h, c);
    c1d4:	4639      	mov	r1, r7
    c1d6:	4628      	mov	r0, r5
    c1d8:	f7ff fec5 	bl	bf66 <chunk_mem>
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    c1dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
    c1de:	4404      	add	r4, r0
    c1e0:	4622      	mov	r2, r4
    c1e2:	4601      	mov	r1, r0
    c1e4:	4628      	mov	r0, r5
    c1e6:	f7ff ff08 	bl	bffa <split_chunks>
		free_list_add(h, c + chunk_sz);
    c1ea:	4621      	mov	r1, r4
    c1ec:	4628      	mov	r0, r5
    c1ee:	f7ff ff4b 	bl	c088 <free_list_add>
    c1f2:	e7ea      	b.n	c1ca <sys_heap_alloc+0x2e>
		return NULL;
    c1f4:	2000      	movs	r0, #0
    c1f6:	e7f1      	b.n	c1dc <sys_heap_alloc+0x40>
    c1f8:	2000      	movs	r0, #0
    c1fa:	e7ef      	b.n	c1dc <sys_heap_alloc+0x40>
		return NULL;
    c1fc:	2000      	movs	r0, #0
    c1fe:	e7ed      	b.n	c1dc <sys_heap_alloc+0x40>

0000c200 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    c200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c204:	4615      	mov	r5, r2
	struct z_heap *h = heap->heap;
    c206:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
    c208:	424b      	negs	r3, r1
    c20a:	400b      	ands	r3, r1
	if (align != rew) {
    c20c:	f101 39ff 	add.w	r9, r1, #4294967295
    c210:	ea19 0901 	ands.w	r9, r9, r1
    c214:	d004      	beq.n	c220 <sys_heap_aligned_alloc+0x20>
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    c216:	2b03      	cmp	r3, #3
    c218:	d847      	bhi.n	c2aa <sys_heap_aligned_alloc+0xaa>
		align -= rew;
    c21a:	464c      	mov	r4, r9
	rew = align & -align;
    c21c:	4699      	mov	r9, r3
    c21e:	e003      	b.n	c228 <sys_heap_aligned_alloc+0x28>
    c220:	460c      	mov	r4, r1
	} else {
		if (align <= chunk_header_bytes(h)) {
    c222:	2904      	cmp	r1, #4
    c224:	d93c      	bls.n	c2a0 <sys_heap_aligned_alloc+0xa0>
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
    c226:	2304      	movs	r3, #4
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    c228:	2d00      	cmp	r5, #0
    c22a:	d056      	beq.n	c2da <sys_heap_aligned_alloc+0xda>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
    c22c:	68b2      	ldr	r2, [r6, #8]
    c22e:	ebb2 0fd5 	cmp.w	r2, r5, lsr #3
    c232:	d955      	bls.n	c2e0 <sys_heap_aligned_alloc+0xe0>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
    c234:	1961      	adds	r1, r4, r5
    c236:	1ac9      	subs	r1, r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    c238:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    c23a:	08c9      	lsrs	r1, r1, #3
    c23c:	4630      	mov	r0, r6
    c23e:	f7ff ff60 	bl	c102 <alloc_chunk>

	if (c0 == 0) {
    c242:	4607      	mov	r7, r0
    c244:	2800      	cmp	r0, #0
    c246:	d04e      	beq.n	c2e6 <sys_heap_aligned_alloc+0xe6>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
    c248:	4601      	mov	r1, r0
    c24a:	4630      	mov	r0, r6
    c24c:	f7ff fe8b 	bl	bf66 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    c250:	eb00 0809 	add.w	r8, r0, r9
    c254:	44a0      	add	r8, r4
    c256:	f108 38ff 	add.w	r8, r8, #4294967295
    c25a:	4264      	negs	r4, r4
    c25c:	ea08 0804 	and.w	r8, r8, r4
    c260:	eba8 0809 	sub.w	r8, r8, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    c264:	eb08 0405 	add.w	r4, r8, r5
    c268:	3407      	adds	r4, #7
    c26a:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
    c26e:	4641      	mov	r1, r8
    c270:	4630      	mov	r0, r6
    c272:	f7ff fef9 	bl	c068 <mem_to_chunkid>
    c276:	4605      	mov	r5, r0
	chunkid_t c_end = end - chunk_buf(h);
    c278:	1ba4      	subs	r4, r4, r6
    c27a:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
    c27c:	4287      	cmp	r7, r0
    c27e:	d318      	bcc.n	c2b2 <sys_heap_aligned_alloc+0xb2>
	void *cmem = &buf[c];
    c280:	00ef      	lsls	r7, r5, #3
		return ((uint16_t *)cmem)[f];
    c282:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
    c286:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
    c288:	eb05 0353 	add.w	r3, r5, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
    c28c:	429c      	cmp	r4, r3
    c28e:	d31a      	bcc.n	c2c6 <sys_heap_aligned_alloc+0xc6>
	void *cmem = &buf[c];
    c290:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    c292:	8873      	ldrh	r3, [r6, #2]
    c294:	f043 0301 	orr.w	r3, r3, #1
    c298:	8073      	strh	r3, [r6, #2]
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    c29a:	4640      	mov	r0, r8
    c29c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return sys_heap_alloc(heap, bytes);
    c2a0:	4611      	mov	r1, r2
    c2a2:	f7ff ff7b 	bl	c19c <sys_heap_alloc>
    c2a6:	4680      	mov	r8, r0
    c2a8:	e7f7      	b.n	c29a <sys_heap_aligned_alloc+0x9a>
		align -= rew;
    c2aa:	464c      	mov	r4, r9
	rew = align & -align;
    c2ac:	4699      	mov	r9, r3
		gap = MIN(rew, chunk_header_bytes(h));
    c2ae:	2304      	movs	r3, #4
    c2b0:	e7ba      	b.n	c228 <sys_heap_aligned_alloc+0x28>
		split_chunks(h, c0, c);
    c2b2:	4602      	mov	r2, r0
    c2b4:	4639      	mov	r1, r7
    c2b6:	4630      	mov	r0, r6
    c2b8:	f7ff fe9f 	bl	bffa <split_chunks>
		free_list_add(h, c0);
    c2bc:	4639      	mov	r1, r7
    c2be:	4630      	mov	r0, r6
    c2c0:	f7ff fee2 	bl	c088 <free_list_add>
    c2c4:	e7dc      	b.n	c280 <sys_heap_aligned_alloc+0x80>
		split_chunks(h, c, c_end);
    c2c6:	4622      	mov	r2, r4
    c2c8:	4629      	mov	r1, r5
    c2ca:	4630      	mov	r0, r6
    c2cc:	f7ff fe95 	bl	bffa <split_chunks>
		free_list_add(h, c_end);
    c2d0:	4621      	mov	r1, r4
    c2d2:	4630      	mov	r0, r6
    c2d4:	f7ff fed8 	bl	c088 <free_list_add>
    c2d8:	e7da      	b.n	c290 <sys_heap_aligned_alloc+0x90>
		return NULL;
    c2da:	f04f 0800 	mov.w	r8, #0
    c2de:	e7dc      	b.n	c29a <sys_heap_aligned_alloc+0x9a>
    c2e0:	f04f 0800 	mov.w	r8, #0
    c2e4:	e7d9      	b.n	c29a <sys_heap_aligned_alloc+0x9a>
		return NULL;
    c2e6:	f04f 0800 	mov.w	r8, #0
    c2ea:	e7d6      	b.n	c29a <sys_heap_aligned_alloc+0x9a>

0000c2ec <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    c2ec:	b570      	push	{r4, r5, r6, lr}
    c2ee:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    c2f0:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    c2f2:	1dc8      	adds	r0, r1, #7
    c2f4:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    c2f8:	440a      	add	r2, r1
    c2fa:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    c2fe:	1a12      	subs	r2, r2, r0
    c300:	08d5      	lsrs	r5, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    c302:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
    c304:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
    c306:	2300      	movs	r3, #0
    c308:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
    c30a:	fab5 f185 	clz	r1, r5
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    c30e:	f1c1 0e20 	rsb	lr, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    c312:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
    c316:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    c318:	1dce      	adds	r6, r1, #7
    c31a:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    c31c:	e005      	b.n	c32a <sys_heap_init+0x3e>
		h->buckets[i].next = 0;
    c31e:	f103 0c04 	add.w	ip, r3, #4
    c322:	2400      	movs	r4, #0
    c324:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    c328:	3301      	adds	r3, #1
    c32a:	4573      	cmp	r3, lr
    c32c:	dbf7      	blt.n	c31e <sys_heap_init+0x32>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    c32e:	004c      	lsls	r4, r1, #1
		((uint16_t *)cmem)[f] = val;
    c330:	b2a4      	uxth	r4, r4
    c332:	8044      	strh	r4, [r0, #2]
    c334:	f04f 0c00 	mov.w	ip, #0
    c338:	f8a0 c000 	strh.w	ip, [r0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    c33c:	f044 0401 	orr.w	r4, r4, #1
    c340:	8044      	strh	r4, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    c342:	1a6b      	subs	r3, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    c344:	ea4f 0e43 	mov.w	lr, r3, lsl #1
	void *cmem = &buf[c];
    c348:	f026 0407 	bic.w	r4, r6, #7
		((uint16_t *)cmem)[f] = val;
    c34c:	1ca5      	adds	r5, r4, #2
    c34e:	f820 e005 	strh.w	lr, [r0, r5]
    c352:	5301      	strh	r1, [r0, r4]
	void *cmem = &buf[c];
    c354:	f022 0407 	bic.w	r4, r2, #7
		((uint16_t *)cmem)[f] = val;
    c358:	1c95      	adds	r5, r2, #2
    c35a:	f820 c005 	strh.w	ip, [r0, r5]
    c35e:	4402      	add	r2, r0
    c360:	5303      	strh	r3, [r0, r4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    c362:	8853      	ldrh	r3, [r2, #2]
    c364:	f043 0301 	orr.w	r3, r3, #1
    c368:	8053      	strh	r3, [r2, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    c36a:	f7ff fe8d 	bl	c088 <free_list_add>
}
    c36e:	bd70      	pop	{r4, r5, r6, pc}

0000c370 <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    c370:	460b      	mov	r3, r1
    c372:	b139      	cbz	r1, c384 <sys_slist_remove+0x14>
	return node->next;
    c374:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
    c376:	6019      	str	r1, [r3, #0]
	return list->tail;
    c378:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    c37a:	428a      	cmp	r2, r1
    c37c:	d009      	beq.n	c392 <sys_slist_remove+0x22>
	parent->next = child;
    c37e:	2300      	movs	r3, #0
    c380:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    c382:	4770      	bx	lr
	return node->next;
    c384:	6813      	ldr	r3, [r2, #0]
	list->head = node;
    c386:	6003      	str	r3, [r0, #0]
	return list->tail;
    c388:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    c38a:	428a      	cmp	r2, r1
    c38c:	d1f7      	bne.n	c37e <sys_slist_remove+0xe>
	list->tail = node;
    c38e:	6043      	str	r3, [r0, #4]
}
    c390:	e7f5      	b.n	c37e <sys_slist_remove+0xe>
	list->tail = node;
    c392:	6043      	str	r3, [r0, #4]
}
    c394:	e7f3      	b.n	c37e <sys_slist_remove+0xe>

0000c396 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    c396:	b508      	push	{r3, lr}
    c398:	460a      	mov	r2, r1
	return list->head;
    c39a:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    c39c:	2100      	movs	r1, #0
    c39e:	e001      	b.n	c3a4 <sys_slist_find_and_remove+0xe>
    c3a0:	4619      	mov	r1, r3
    c3a2:	681b      	ldr	r3, [r3, #0]
    c3a4:	b12b      	cbz	r3, c3b2 <sys_slist_find_and_remove+0x1c>
    c3a6:	4293      	cmp	r3, r2
    c3a8:	d1fa      	bne.n	c3a0 <sys_slist_find_and_remove+0xa>
    c3aa:	f7ff ffe1 	bl	c370 <sys_slist_remove>
    c3ae:	2001      	movs	r0, #1
    c3b0:	e000      	b.n	c3b4 <sys_slist_find_and_remove+0x1e>
    c3b2:	2000      	movs	r0, #0
    c3b4:	bd08      	pop	{r3, pc}

0000c3b6 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    c3b6:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c3ba:	8b03      	ldrh	r3, [r0, #24]
    c3bc:	f023 0307 	bic.w	r3, r3, #7
    c3c0:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    c3c2:	8303      	strh	r3, [r0, #24]
}
    c3c4:	4770      	bx	lr

0000c3c6 <notify_monitors>:
{
    c3c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c3ca:	4606      	mov	r6, r0
    c3cc:	460f      	mov	r7, r1
    c3ce:	4690      	mov	r8, r2
	return list->head;
    c3d0:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    c3d2:	b121      	cbz	r1, c3de <notify_monitors+0x18>
	return node->next;
    c3d4:	680c      	ldr	r4, [r1, #0]
    c3d6:	b13c      	cbz	r4, c3e8 <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
    c3d8:	b931      	cbnz	r1, c3e8 <notify_monitors+0x22>
    c3da:	460c      	mov	r4, r1
    c3dc:	e004      	b.n	c3e8 <notify_monitors+0x22>
    c3de:	460c      	mov	r4, r1
    c3e0:	e002      	b.n	c3e8 <notify_monitors+0x22>
    c3e2:	4623      	mov	r3, r4
    c3e4:	4621      	mov	r1, r4
    c3e6:	461c      	mov	r4, r3
    c3e8:	b169      	cbz	r1, c406 <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
    c3ea:	684d      	ldr	r5, [r1, #4]
    c3ec:	4643      	mov	r3, r8
    c3ee:	463a      	mov	r2, r7
    c3f0:	4630      	mov	r0, r6
    c3f2:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    c3f4:	2c00      	cmp	r4, #0
    c3f6:	d0f4      	beq.n	c3e2 <notify_monitors+0x1c>
	return node->next;
    c3f8:	6823      	ldr	r3, [r4, #0]
    c3fa:	2b00      	cmp	r3, #0
    c3fc:	d0f2      	beq.n	c3e4 <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    c3fe:	2c00      	cmp	r4, #0
    c400:	d1f0      	bne.n	c3e4 <notify_monitors+0x1e>
    c402:	4623      	mov	r3, r4
    c404:	e7ee      	b.n	c3e4 <notify_monitors+0x1e>
}
    c406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c40a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c40a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    c40c:	f013 0307 	ands.w	r3, r3, #7
    c410:	d103      	bne.n	c41a <process_recheck+0x10>
	return list->head;
    c412:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    c414:	b10a      	cbz	r2, c41a <process_recheck+0x10>
		evt = EVT_START;
    c416:	2003      	movs	r0, #3
    c418:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    c41a:	2b02      	cmp	r3, #2
    c41c:	d003      	beq.n	c426 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    c41e:	2b01      	cmp	r3, #1
    c420:	d006      	beq.n	c430 <process_recheck+0x26>
	int evt = EVT_NOP;
    c422:	2000      	movs	r0, #0
    c424:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    c426:	8b42      	ldrh	r2, [r0, #26]
    c428:	2a00      	cmp	r2, #0
    c42a:	d1f8      	bne.n	c41e <process_recheck+0x14>
		evt = EVT_STOP;
    c42c:	2004      	movs	r0, #4
    c42e:	4770      	bx	lr
    c430:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    c432:	b10b      	cbz	r3, c438 <process_recheck+0x2e>
		evt = EVT_RESET;
    c434:	2005      	movs	r0, #5
}
    c436:	4770      	bx	lr
	int evt = EVT_NOP;
    c438:	2000      	movs	r0, #0
    c43a:	4770      	bx	lr

0000c43c <process_complete>:
{
    c43c:	b510      	push	{r4, lr}
    c43e:	4604      	mov	r4, r0
    c440:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c442:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    c444:	2a00      	cmp	r2, #0
    c446:	db07      	blt.n	c458 <process_complete+0x1c>
    c448:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    c44c:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    c44e:	2a01      	cmp	r2, #1
    c450:	d90e      	bls.n	c470 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    c452:	2b04      	cmp	r3, #4
    c454:	d036      	beq.n	c4c4 <process_complete+0x88>
}
    c456:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
    c458:	e9d0 0100 	ldrd	r0, r1, [r0]
    c45c:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    c460:	2300      	movs	r3, #0
    c462:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    c464:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    c466:	2101      	movs	r1, #1
    c468:	4620      	mov	r0, r4
    c46a:	f7ff ffa4 	bl	c3b6 <set_state>
    c46e:	e7f2      	b.n	c456 <process_complete+0x1a>
		*clients = mgr->clients;
    c470:	e9d0 0100 	ldrd	r0, r1, [r0]
    c474:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    c478:	2200      	movs	r2, #0
    c47a:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    c47c:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    c47e:	2b06      	cmp	r3, #6
    c480:	d11b      	bne.n	c4ba <process_complete+0x7e>
	return list->head;
    c482:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    c486:	b153      	cbz	r3, c49e <process_complete+0x62>
				mgr->refs += 1U;
    c488:	8b62      	ldrh	r2, [r4, #26]
    c48a:	3201      	adds	r2, #1
    c48c:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    c48e:	461a      	mov	r2, r3
	return node->next;
    c490:	681b      	ldr	r3, [r3, #0]
    c492:	2b00      	cmp	r3, #0
    c494:	d0f7      	beq.n	c486 <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    c496:	2a00      	cmp	r2, #0
    c498:	d1f5      	bne.n	c486 <process_complete+0x4a>
    c49a:	4613      	mov	r3, r2
    c49c:	e7f3      	b.n	c486 <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
    c49e:	2102      	movs	r1, #2
    c4a0:	4620      	mov	r0, r4
    c4a2:	f7ff ff88 	bl	c3b6 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    c4a6:	4620      	mov	r0, r4
    c4a8:	f7ff ffaf 	bl	c40a <process_recheck>
    c4ac:	2800      	cmp	r0, #0
    c4ae:	d0d2      	beq.n	c456 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    c4b0:	8b23      	ldrh	r3, [r4, #24]
    c4b2:	f043 0320 	orr.w	r3, r3, #32
    c4b6:	8323      	strh	r3, [r4, #24]
    c4b8:	e7cd      	b.n	c456 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    c4ba:	2100      	movs	r1, #0
    c4bc:	4620      	mov	r0, r4
    c4be:	f7ff ff7a 	bl	c3b6 <set_state>
    c4c2:	e7f0      	b.n	c4a6 <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
    c4c4:	2100      	movs	r1, #0
    c4c6:	f7ff ff76 	bl	c3b6 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    c4ca:	4620      	mov	r0, r4
    c4cc:	f7ff ff9d 	bl	c40a <process_recheck>
    c4d0:	2800      	cmp	r0, #0
    c4d2:	d0c0      	beq.n	c456 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    c4d4:	8b23      	ldrh	r3, [r4, #24]
    c4d6:	f043 0320 	orr.w	r3, r3, #32
    c4da:	8323      	strh	r3, [r4, #24]
}
    c4dc:	e7bb      	b.n	c456 <process_complete+0x1a>

0000c4de <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    c4de:	b150      	cbz	r0, c4f6 <validate_args+0x18>
{
    c4e0:	b510      	push	{r4, lr}
    c4e2:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    c4e4:	b151      	cbz	r1, c4fc <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
    c4e6:	1d08      	adds	r0, r1, #4
    c4e8:	f000 f90b 	bl	c702 <sys_notify_validate>
	if ((rv == 0)
    c4ec:	b910      	cbnz	r0, c4f4 <validate_args+0x16>
	    && ((cli->notify.flags
    c4ee:	68a3      	ldr	r3, [r4, #8]
    c4f0:	2b03      	cmp	r3, #3
    c4f2:	d806      	bhi.n	c502 <validate_args+0x24>
}
    c4f4:	bd10      	pop	{r4, pc}
		return -EINVAL;
    c4f6:	f06f 0015 	mvn.w	r0, #21
}
    c4fa:	4770      	bx	lr
		return -EINVAL;
    c4fc:	f06f 0015 	mvn.w	r0, #21
    c500:	e7f8      	b.n	c4f4 <validate_args+0x16>
		rv = -EINVAL;
    c502:	f06f 0015 	mvn.w	r0, #21
    c506:	e7f5      	b.n	c4f4 <validate_args+0x16>

0000c508 <notify_one>:
{
    c508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c50c:	4607      	mov	r7, r0
    c50e:	460c      	mov	r4, r1
    c510:	4616      	mov	r6, r2
    c512:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    c514:	4619      	mov	r1, r3
    c516:	1d20      	adds	r0, r4, #4
    c518:	f000 f90a 	bl	c730 <sys_notify_finalize>
	if (cb) {
    c51c:	b128      	cbz	r0, c52a <notify_one+0x22>
    c51e:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    c520:	462b      	mov	r3, r5
    c522:	4632      	mov	r2, r6
    c524:	4621      	mov	r1, r4
    c526:	4638      	mov	r0, r7
    c528:	47c0      	blx	r8
}
    c52a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c52e <notify_all>:
{
    c52e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c532:	4680      	mov	r8, r0
    c534:	460c      	mov	r4, r1
    c536:	4617      	mov	r7, r2
    c538:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    c53a:	e004      	b.n	c546 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    c53c:	4633      	mov	r3, r6
    c53e:	463a      	mov	r2, r7
    c540:	4640      	mov	r0, r8
    c542:	f7ff ffe1 	bl	c508 <notify_one>
	return list->head;
    c546:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    c548:	b131      	cbz	r1, c558 <notify_all+0x2a>
	return node->next;
    c54a:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    c54c:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    c54e:	6863      	ldr	r3, [r4, #4]
    c550:	428b      	cmp	r3, r1
    c552:	d1f3      	bne.n	c53c <notify_all+0xe>
	list->tail = node;
    c554:	6065      	str	r5, [r4, #4]
}
    c556:	e7f1      	b.n	c53c <notify_all+0xe>
}
    c558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c55c <transition_complete>:
{
    c55c:	b508      	push	{r3, lr}
	__asm__ volatile(
    c55e:	f04f 0c20 	mov.w	ip, #32
    c562:	f3ef 8211 	mrs	r2, BASEPRI
    c566:	f38c 8812 	msr	BASEPRI_MAX, ip
    c56a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    c56e:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    c570:	2101      	movs	r1, #1
    c572:	f7f4 fd07 	bl	f84 <process_event>
}
    c576:	bd08      	pop	{r3, pc}

0000c578 <onoff_manager_init>:
	if ((mgr == NULL)
    c578:	4603      	mov	r3, r0
    c57a:	b170      	cbz	r0, c59a <onoff_manager_init+0x22>
	    || (transitions == NULL)
    c57c:	b181      	cbz	r1, c5a0 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
    c57e:	680a      	ldr	r2, [r1, #0]
    c580:	b18a      	cbz	r2, c5a6 <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
    c582:	684a      	ldr	r2, [r1, #4]
    c584:	b192      	cbz	r2, c5ac <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    c586:	2000      	movs	r0, #0
    c588:	6018      	str	r0, [r3, #0]
    c58a:	6058      	str	r0, [r3, #4]
    c58c:	6098      	str	r0, [r3, #8]
    c58e:	60d8      	str	r0, [r3, #12]
    c590:	6118      	str	r0, [r3, #16]
    c592:	6158      	str	r0, [r3, #20]
    c594:	6198      	str	r0, [r3, #24]
    c596:	6119      	str	r1, [r3, #16]
	return 0;
    c598:	4770      	bx	lr
		return -EINVAL;
    c59a:	f06f 0015 	mvn.w	r0, #21
    c59e:	4770      	bx	lr
    c5a0:	f06f 0015 	mvn.w	r0, #21
    c5a4:	4770      	bx	lr
    c5a6:	f06f 0015 	mvn.w	r0, #21
    c5aa:	4770      	bx	lr
    c5ac:	f06f 0015 	mvn.w	r0, #21
}
    c5b0:	4770      	bx	lr

0000c5b2 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    c5b2:	b570      	push	{r4, r5, r6, lr}
    c5b4:	4605      	mov	r5, r0
    c5b6:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    c5b8:	f7ff ff91 	bl	c4de <validate_args>

	if (rv < 0) {
    c5bc:	1e04      	subs	r4, r0, #0
    c5be:	db30      	blt.n	c622 <onoff_request+0x70>
    c5c0:	f04f 0320 	mov.w	r3, #32
    c5c4:	f3ef 8211 	mrs	r2, BASEPRI
    c5c8:	f383 8812 	msr	BASEPRI_MAX, r3
    c5cc:	f3bf 8f6f 	isb	sy
    c5d0:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c5d2:	f8b5 c018 	ldrh.w	ip, [r5, #24]
    c5d6:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    c5da:	8b6b      	ldrh	r3, [r5, #26]
    c5dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c5e0:	428b      	cmp	r3, r1
    c5e2:	d02c      	beq.n	c63e <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    c5e4:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
    c5e6:	f1bc 0f02 	cmp.w	ip, #2
    c5ea:	d008      	beq.n	c5fe <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    c5ec:	f1bc 0f06 	cmp.w	ip, #6
    c5f0:	d819      	bhi.n	c626 <onoff_request+0x74>
    c5f2:	e8df f00c 	tbb	[pc, ip]
    c5f6:	181e      	.short	0x181e
    c5f8:	2a1e1818 	.word	0x2a1e1818
    c5fc:	1e          	.byte	0x1e
    c5fd:	00          	.byte	0x00
		mgr->refs += 1U;
    c5fe:	3301      	adds	r3, #1
    c600:	836b      	strh	r3, [r5, #26]
		notify = true;
    c602:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
    c604:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
    c606:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
    c608:	b128      	cbz	r0, c616 <onoff_request+0x64>
	parent->next = child;
    c60a:	2000      	movs	r0, #0
    c60c:	6030      	str	r0, [r6, #0]
	return list->tail;
    c60e:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    c610:	b308      	cbz	r0, c656 <onoff_request+0xa4>
	parent->next = child;
    c612:	6006      	str	r6, [r0, #0]
	list->tail = node;
    c614:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    c616:	bb09      	cbnz	r1, c65c <onoff_request+0xaa>
	__asm__ volatile(
    c618:	f38e 8811 	msr	BASEPRI, lr
    c61c:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    c620:	bb0b      	cbnz	r3, c666 <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    c622:	4620      	mov	r0, r4
    c624:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    c626:	f06f 0404 	mvn.w	r4, #4
    c62a:	2300      	movs	r3, #0
    c62c:	4619      	mov	r1, r3
    c62e:	4618      	mov	r0, r3
    c630:	e7ea      	b.n	c608 <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
    c632:	fabc f18c 	clz	r1, ip
    c636:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
    c638:	2300      	movs	r3, #0
		add_client = true;
    c63a:	2001      	movs	r0, #1
    c63c:	e7e4      	b.n	c608 <onoff_request+0x56>
		rv = -EAGAIN;
    c63e:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
    c642:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
    c644:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
    c646:	4618      	mov	r0, r3
    c648:	e7de      	b.n	c608 <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
    c64a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    c64e:	2300      	movs	r3, #0
    c650:	4619      	mov	r1, r3
    c652:	4618      	mov	r0, r3
    c654:	e7d8      	b.n	c608 <onoff_request+0x56>
    c656:	606e      	str	r6, [r5, #4]
	list->head = node;
    c658:	602e      	str	r6, [r5, #0]
}
    c65a:	e7dc      	b.n	c616 <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
    c65c:	2102      	movs	r1, #2
    c65e:	4628      	mov	r0, r5
    c660:	f7f4 fc90 	bl	f84 <process_event>
    c664:	e7dd      	b.n	c622 <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
    c666:	2300      	movs	r3, #0
    c668:	4662      	mov	r2, ip
    c66a:	4631      	mov	r1, r6
    c66c:	4628      	mov	r0, r5
    c66e:	f7ff ff4b 	bl	c508 <notify_one>
    c672:	e7d6      	b.n	c622 <onoff_request+0x70>

0000c674 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    c674:	b510      	push	{r4, lr}
	__asm__ volatile(
    c676:	f04f 0320 	mov.w	r3, #32
    c67a:	f3ef 8211 	mrs	r2, BASEPRI
    c67e:	f383 8812 	msr	BASEPRI_MAX, r3
    c682:	f3bf 8f6f 	isb	sy
    c686:	4611      	mov	r1, r2
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c688:	8b03      	ldrh	r3, [r0, #24]
    c68a:	f003 0307 	and.w	r3, r3, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    c68e:	2b02      	cmp	r3, #2
    c690:	d007      	beq.n	c6a2 <onoff_release+0x2e>
		if (state == ONOFF_STATE_ERROR) {
    c692:	2b01      	cmp	r3, #1
    c694:	d002      	beq.n	c69c <onoff_release+0x28>
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    c696:	f06f 0485 	mvn.w	r4, #133	; 0x85
	__ASSERT_NO_MSG(mgr->refs > 0);
	mgr->refs -= 1U;
	stop = (mgr->refs == 0);

out:
	if (stop) {
    c69a:	e008      	b.n	c6ae <onoff_release+0x3a>
			rv = -EIO;
    c69c:	f06f 0404 	mvn.w	r4, #4
    c6a0:	e005      	b.n	c6ae <onoff_release+0x3a>
    c6a2:	461c      	mov	r4, r3
	mgr->refs -= 1U;
    c6a4:	8b43      	ldrh	r3, [r0, #26]
    c6a6:	3b01      	subs	r3, #1
    c6a8:	b29b      	uxth	r3, r3
    c6aa:	8343      	strh	r3, [r0, #26]
	if (stop) {
    c6ac:	b12b      	cbz	r3, c6ba <onoff_release+0x46>
	__asm__ volatile(
    c6ae:	f381 8811 	msr	BASEPRI, r1
    c6b2:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
}
    c6b6:	4620      	mov	r0, r4
    c6b8:	bd10      	pop	{r4, pc}
		process_event(mgr, EVT_RECHECK, key);
    c6ba:	2102      	movs	r1, #2
    c6bc:	f7f4 fc62 	bl	f84 <process_event>
    c6c0:	e7f9      	b.n	c6b6 <onoff_release+0x42>

0000c6c2 <onoff_cancel>:
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
	if ((mgr == NULL) || (cli == NULL)) {
    c6c2:	b1c0      	cbz	r0, c6f6 <onoff_cancel+0x34>
    c6c4:	b1d1      	cbz	r1, c6fc <onoff_cancel+0x3a>
{
    c6c6:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    c6c8:	f04f 0320 	mov.w	r3, #32
    c6cc:	f3ef 8511 	mrs	r5, BASEPRI
    c6d0:	f383 8812 	msr	BASEPRI_MAX, r3
    c6d4:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c6d8:	8b03      	ldrh	r3, [r0, #24]
    c6da:	f003 0407 	and.w	r4, r3, #7

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    c6de:	f7ff fe5a 	bl	c396 <sys_slist_find_and_remove>
    c6e2:	b108      	cbz	r0, c6e8 <onoff_cancel+0x26>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    c6e4:	4620      	mov	r0, r4
    c6e6:	e001      	b.n	c6ec <onoff_cancel+0x2a>
	int rv = -EALREADY;
    c6e8:	f06f 0077 	mvn.w	r0, #119	; 0x77
	__asm__ volatile(
    c6ec:	f385 8811 	msr	BASEPRI, r5
    c6f0:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    c6f4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    c6f6:	f06f 0015 	mvn.w	r0, #21
    c6fa:	4770      	bx	lr
    c6fc:	f06f 0015 	mvn.w	r0, #21
}
    c700:	4770      	bx	lr

0000c702 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    c702:	4602      	mov	r2, r0
    c704:	b158      	cbz	r0, c71e <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    c706:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    c708:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    c70c:	2b01      	cmp	r3, #1
    c70e:	d003      	beq.n	c718 <sys_notify_validate+0x16>
    c710:	2b03      	cmp	r3, #3
    c712:	d107      	bne.n	c724 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    c714:	6803      	ldr	r3, [r0, #0]
    c716:	b143      	cbz	r3, c72a <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    c718:	2000      	movs	r0, #0
    c71a:	6090      	str	r0, [r2, #8]
    c71c:	4770      	bx	lr
		return -EINVAL;
    c71e:	f06f 0015 	mvn.w	r0, #21
    c722:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    c724:	f06f 0015 	mvn.w	r0, #21
    c728:	4770      	bx	lr
			rv = -EINVAL;
    c72a:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    c72e:	4770      	bx	lr

0000c730 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    c730:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    c732:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    c734:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    c738:	6081      	str	r1, [r0, #8]
	switch (method) {
    c73a:	2a03      	cmp	r2, #3
    c73c:	d103      	bne.n	c746 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    c73e:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    c740:	2200      	movs	r2, #0
    c742:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    c744:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    c746:	2000      	movs	r0, #0
    c748:	e7fa      	b.n	c740 <sys_notify_finalize+0x10>

0000c74a <extract_decimal>:
{
    c74a:	4684      	mov	ip, r0
	const char *sp = *str;
    c74c:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    c74e:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp) != 0) {
    c750:	e006      	b.n	c760 <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
    c752:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    c756:	3201      	adds	r2, #1
    c758:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    c75c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    c760:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    c762:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    c766:	2909      	cmp	r1, #9
    c768:	d9f3      	bls.n	c752 <extract_decimal+0x8>
	*str = sp;
    c76a:	f8cc 2000 	str.w	r2, [ip]
}
    c76e:	4770      	bx	lr

0000c770 <extract_width>:
{
    c770:	b530      	push	{r4, r5, lr}
    c772:	b083      	sub	sp, #12
    c774:	4604      	mov	r4, r0
    c776:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
    c778:	7803      	ldrb	r3, [r0, #0]
    c77a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c77e:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
    c780:	460d      	mov	r5, r1
    c782:	780b      	ldrb	r3, [r1, #0]
    c784:	2b2a      	cmp	r3, #42	; 0x2a
    c786:	d018      	beq.n	c7ba <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
    c788:	a801      	add	r0, sp, #4
    c78a:	f7ff ffde 	bl	c74a <extract_decimal>
	if (sp != wp) {
    c78e:	9b01      	ldr	r3, [sp, #4]
    c790:	429d      	cmp	r5, r3
    c792:	d00f      	beq.n	c7b4 <extract_width+0x44>
		conv->width_present = true;
    c794:	7823      	ldrb	r3, [r4, #0]
    c796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c79a:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    c79c:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    c79e:	b2db      	uxtb	r3, r3
    c7a0:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    c7a4:	2800      	cmp	r0, #0
    c7a6:	db10      	blt.n	c7ca <extract_width+0x5a>
    c7a8:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    c7aa:	4313      	orrs	r3, r2
    c7ac:	7822      	ldrb	r2, [r4, #0]
    c7ae:	f363 0241 	bfi	r2, r3, #1, #1
    c7b2:	7022      	strb	r2, [r4, #0]
	return sp;
    c7b4:	9801      	ldr	r0, [sp, #4]
}
    c7b6:	b003      	add	sp, #12
    c7b8:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
    c7ba:	7843      	ldrb	r3, [r0, #1]
    c7bc:	f043 0301 	orr.w	r3, r3, #1
    c7c0:	7043      	strb	r3, [r0, #1]
		return ++sp;
    c7c2:	4608      	mov	r0, r1
    c7c4:	3001      	adds	r0, #1
    c7c6:	9001      	str	r0, [sp, #4]
    c7c8:	e7f5      	b.n	c7b6 <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
    c7ca:	2201      	movs	r2, #1
    c7cc:	e7ed      	b.n	c7aa <extract_width+0x3a>

0000c7ce <extract_prec>:
{
    c7ce:	b510      	push	{r4, lr}
    c7d0:	b082      	sub	sp, #8
    c7d2:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
    c7d4:	780b      	ldrb	r3, [r1, #0]
    c7d6:	2b2e      	cmp	r3, #46	; 0x2e
    c7d8:	bf14      	ite	ne
    c7da:	2300      	movne	r3, #0
    c7dc:	2301      	moveq	r3, #1
    c7de:	7842      	ldrb	r2, [r0, #1]
    c7e0:	f363 0241 	bfi	r2, r3, #1, #1
    c7e4:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
    c7e6:	b1c3      	cbz	r3, c81a <extract_prec+0x4c>
    c7e8:	4604      	mov	r4, r0
	++sp;
    c7ea:	9b01      	ldr	r3, [sp, #4]
    c7ec:	1c5a      	adds	r2, r3, #1
    c7ee:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    c7f0:	785b      	ldrb	r3, [r3, #1]
    c7f2:	2b2a      	cmp	r3, #42	; 0x2a
    c7f4:	d013      	beq.n	c81e <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
    c7f6:	a801      	add	r0, sp, #4
    c7f8:	f7ff ffa7 	bl	c74a <extract_decimal>
	conv->prec_value = prec;
    c7fc:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    c7fe:	7823      	ldrb	r3, [r4, #0]
    c800:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    c804:	2800      	cmp	r0, #0
    c806:	db12      	blt.n	c82e <extract_prec+0x60>
    c808:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    c80a:	4313      	orrs	r3, r2
    c80c:	7822      	ldrb	r2, [r4, #0]
    c80e:	f363 0241 	bfi	r2, r3, #1, #1
    c812:	7022      	strb	r2, [r4, #0]
	return sp;
    c814:	9801      	ldr	r0, [sp, #4]
}
    c816:	b002      	add	sp, #8
    c818:	bd10      	pop	{r4, pc}
		return sp;
    c81a:	4608      	mov	r0, r1
    c81c:	e7fb      	b.n	c816 <extract_prec+0x48>
		conv->prec_star = true;
    c81e:	7843      	ldrb	r3, [r0, #1]
    c820:	f043 0304 	orr.w	r3, r3, #4
    c824:	7043      	strb	r3, [r0, #1]
		return ++sp;
    c826:	4610      	mov	r0, r2
    c828:	3001      	adds	r0, #1
    c82a:	9001      	str	r0, [sp, #4]
    c82c:	e7f3      	b.n	c816 <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
    c82e:	2201      	movs	r2, #1
    c830:	e7eb      	b.n	c80a <extract_prec+0x3c>

0000c832 <extract_length>:
{
    c832:	4602      	mov	r2, r0
	switch (*sp) {
    c834:	780b      	ldrb	r3, [r1, #0]
    c836:	3b4c      	subs	r3, #76	; 0x4c
    c838:	2b2e      	cmp	r3, #46	; 0x2e
    c83a:	d85b      	bhi.n	c8f4 <extract_length+0xc2>
    c83c:	e8df f003 	tbb	[pc, r3]
    c840:	5a5a5a4f 	.word	0x5a5a5a4f
    c844:	5a5a5a5a 	.word	0x5a5a5a5a
    c848:	5a5a5a5a 	.word	0x5a5a5a5a
    c84c:	5a5a5a5a 	.word	0x5a5a5a5a
    c850:	5a5a5a5a 	.word	0x5a5a5a5a
    c854:	5a5a5a5a 	.word	0x5a5a5a5a
    c858:	5a5a5a5a 	.word	0x5a5a5a5a
    c85c:	5a3a5a18 	.word	0x5a3a5a18
    c860:	5a5a5a29 	.word	0x5a5a5a29
    c864:	5a5a5a5a 	.word	0x5a5a5a5a
    c868:	5a5a5a48 	.word	0x5a5a5a48
    c86c:	5a5a      	.short	0x5a5a
    c86e:	41          	.byte	0x41
    c86f:	00          	.byte	0x00
		if (*++sp == 'h') {
    c870:	1c48      	adds	r0, r1, #1
    c872:	784b      	ldrb	r3, [r1, #1]
    c874:	2b68      	cmp	r3, #104	; 0x68
    c876:	d005      	beq.n	c884 <extract_length+0x52>
			conv->length_mod = LENGTH_H;
    c878:	7853      	ldrb	r3, [r2, #1]
    c87a:	2102      	movs	r1, #2
    c87c:	f361 03c6 	bfi	r3, r1, #3, #4
    c880:	7053      	strb	r3, [r2, #1]
    c882:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
    c884:	7853      	ldrb	r3, [r2, #1]
    c886:	2001      	movs	r0, #1
    c888:	f360 03c6 	bfi	r3, r0, #3, #4
    c88c:	7053      	strb	r3, [r2, #1]
			++sp;
    c88e:	1c88      	adds	r0, r1, #2
    c890:	4770      	bx	lr
		if (*++sp == 'l') {
    c892:	1c48      	adds	r0, r1, #1
    c894:	784b      	ldrb	r3, [r1, #1]
    c896:	2b6c      	cmp	r3, #108	; 0x6c
    c898:	d005      	beq.n	c8a6 <extract_length+0x74>
			conv->length_mod = LENGTH_L;
    c89a:	7853      	ldrb	r3, [r2, #1]
    c89c:	2103      	movs	r1, #3
    c89e:	f361 03c6 	bfi	r3, r1, #3, #4
    c8a2:	7053      	strb	r3, [r2, #1]
    c8a4:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
    c8a6:	7853      	ldrb	r3, [r2, #1]
    c8a8:	2004      	movs	r0, #4
    c8aa:	f360 03c6 	bfi	r3, r0, #3, #4
    c8ae:	7053      	strb	r3, [r2, #1]
			++sp;
    c8b0:	1c88      	adds	r0, r1, #2
    c8b2:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
    c8b4:	7853      	ldrb	r3, [r2, #1]
    c8b6:	2005      	movs	r0, #5
    c8b8:	f360 03c6 	bfi	r3, r0, #3, #4
    c8bc:	7053      	strb	r3, [r2, #1]
		++sp;
    c8be:	1c48      	adds	r0, r1, #1
		break;
    c8c0:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
    c8c2:	7853      	ldrb	r3, [r2, #1]
    c8c4:	2006      	movs	r0, #6
    c8c6:	f360 03c6 	bfi	r3, r0, #3, #4
    c8ca:	7053      	strb	r3, [r2, #1]
		++sp;
    c8cc:	1c48      	adds	r0, r1, #1
		break;
    c8ce:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
    c8d0:	7853      	ldrb	r3, [r2, #1]
    c8d2:	2007      	movs	r0, #7
    c8d4:	f360 03c6 	bfi	r3, r0, #3, #4
    c8d8:	7053      	strb	r3, [r2, #1]
		++sp;
    c8da:	1c48      	adds	r0, r1, #1
		break;
    c8dc:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
    c8de:	7853      	ldrb	r3, [r2, #1]
    c8e0:	2008      	movs	r0, #8
    c8e2:	f360 03c6 	bfi	r3, r0, #3, #4
    c8e6:	7053      	strb	r3, [r2, #1]
		++sp;
    c8e8:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
    c8ea:	7813      	ldrb	r3, [r2, #0]
    c8ec:	f043 0302 	orr.w	r3, r3, #2
    c8f0:	7013      	strb	r3, [r2, #0]
		break;
    c8f2:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
    c8f4:	7853      	ldrb	r3, [r2, #1]
    c8f6:	f36f 03c6 	bfc	r3, #3, #4
    c8fa:	7053      	strb	r3, [r2, #1]
		break;
    c8fc:	4608      	mov	r0, r1
}
    c8fe:	4770      	bx	lr

0000c900 <extract_specifier>:
{
    c900:	b500      	push	{lr}
    c902:	4602      	mov	r2, r0
	conv->specifier = *sp++;
    c904:	4608      	mov	r0, r1
    c906:	f810 3b01 	ldrb.w	r3, [r0], #1
    c90a:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
    c90c:	2b78      	cmp	r3, #120	; 0x78
    c90e:	d817      	bhi.n	c940 <extract_specifier+0x40>
    c910:	2b6e      	cmp	r3, #110	; 0x6e
    c912:	d229      	bcs.n	c968 <extract_specifier+0x68>
    c914:	2b69      	cmp	r3, #105	; 0x69
    c916:	d813      	bhi.n	c940 <extract_specifier+0x40>
    c918:	2b58      	cmp	r3, #88	; 0x58
    c91a:	d317      	bcc.n	c94c <extract_specifier+0x4c>
    c91c:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
    c920:	fa5f fc8c 	uxtb.w	ip, ip
    c924:	2101      	movs	r1, #1
    c926:	fa01 f10c 	lsl.w	r1, r1, ip
    c92a:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    c92e:	d114      	bne.n	c95a <extract_specifier+0x5a>
    c930:	f640 0c01 	movw	ip, #2049	; 0x801
    c934:	ea11 0f0c 	tst.w	r1, ip
    c938:	d155      	bne.n	c9e6 <extract_specifier+0xe6>
    c93a:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    c93e:	d13a      	bne.n	c9b6 <extract_specifier+0xb6>
		conv->invalid = true;
    c940:	7813      	ldrb	r3, [r2, #0]
    c942:	f043 0301 	orr.w	r3, r3, #1
    c946:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
    c948:	2100      	movs	r1, #0
		break;
    c94a:	e042      	b.n	c9d2 <extract_specifier+0xd2>
	switch (conv->specifier) {
    c94c:	2b41      	cmp	r3, #65	; 0x41
    c94e:	d004      	beq.n	c95a <extract_specifier+0x5a>
    c950:	d3f6      	bcc.n	c940 <extract_specifier+0x40>
    c952:	3b45      	subs	r3, #69	; 0x45
    c954:	b2db      	uxtb	r3, r3
    c956:	2b02      	cmp	r3, #2
    c958:	d8f2      	bhi.n	c940 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
    c95a:	7893      	ldrb	r3, [r2, #2]
    c95c:	2104      	movs	r1, #4
    c95e:	f361 0302 	bfi	r3, r1, #0, #3
    c962:	7093      	strb	r3, [r2, #2]
			unsupported = true;
    c964:	2101      	movs	r1, #1
			break;
    c966:	e034      	b.n	c9d2 <extract_specifier+0xd2>
	switch (conv->specifier) {
    c968:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
    c96c:	b2c9      	uxtb	r1, r1
    c96e:	f04f 0c01 	mov.w	ip, #1
    c972:	fa0c fc01 	lsl.w	ip, ip, r1
    c976:	f240 4182 	movw	r1, #1154	; 0x482
    c97a:	ea1c 0f01 	tst.w	ip, r1
    c97e:	bf14      	ite	ne
    c980:	f04f 0e01 	movne.w	lr, #1
    c984:	f04f 0e00 	moveq.w	lr, #0
    c988:	d12d      	bne.n	c9e6 <extract_specifier+0xe6>
    c98a:	f01c 0f24 	tst.w	ip, #36	; 0x24
    c98e:	bf14      	ite	ne
    c990:	2101      	movne	r1, #1
    c992:	2100      	moveq	r1, #0
    c994:	d139      	bne.n	ca0a <extract_specifier+0x10a>
    c996:	f01c 0c01 	ands.w	ip, ip, #1
    c99a:	d0d1      	beq.n	c940 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
    c99c:	7893      	ldrb	r3, [r2, #2]
    c99e:	f04f 0e03 	mov.w	lr, #3
    c9a2:	f36e 0302 	bfi	r3, lr, #0, #3
    c9a6:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    c9a8:	7853      	ldrb	r3, [r2, #1]
    c9aa:	f003 0378 	and.w	r3, r3, #120	; 0x78
    c9ae:	2b40      	cmp	r3, #64	; 0x40
    c9b0:	d10f      	bne.n	c9d2 <extract_specifier+0xd2>
			unsupported = true;
    c9b2:	4661      	mov	r1, ip
    c9b4:	e00d      	b.n	c9d2 <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
    c9b6:	7891      	ldrb	r1, [r2, #2]
    c9b8:	f04f 0c01 	mov.w	ip, #1
    c9bc:	f36c 0102 	bfi	r1, ip, #0, #3
    c9c0:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    c9c2:	7851      	ldrb	r1, [r2, #1]
    c9c4:	f001 0178 	and.w	r1, r1, #120	; 0x78
    c9c8:	2940      	cmp	r1, #64	; 0x40
    c9ca:	d013      	beq.n	c9f4 <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
    c9cc:	2b63      	cmp	r3, #99	; 0x63
    c9ce:	d018      	beq.n	ca02 <extract_specifier+0x102>
	bool unsupported = false;
    c9d0:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
    c9d2:	7813      	ldrb	r3, [r2, #0]
    c9d4:	f3c3 0c40 	ubfx	ip, r3, #1, #1
    c9d8:	ea41 010c 	orr.w	r1, r1, ip
    c9dc:	f361 0341 	bfi	r3, r1, #1, #1
    c9e0:	7013      	strb	r3, [r2, #0]
}
    c9e2:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
    c9e6:	7891      	ldrb	r1, [r2, #2]
    c9e8:	f04f 0c02 	mov.w	ip, #2
    c9ec:	f36c 0102 	bfi	r1, ip, #0, #3
    c9f0:	7091      	strb	r1, [r2, #2]
    c9f2:	e7e6      	b.n	c9c2 <extract_specifier+0xc2>
			conv->invalid = true;
    c9f4:	f892 c000 	ldrb.w	ip, [r2]
    c9f8:	f04c 0c01 	orr.w	ip, ip, #1
    c9fc:	f882 c000 	strb.w	ip, [r2]
    ca00:	e7e4      	b.n	c9cc <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
    ca02:	3900      	subs	r1, #0
    ca04:	bf18      	it	ne
    ca06:	2101      	movne	r1, #1
    ca08:	e7e3      	b.n	c9d2 <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
    ca0a:	7893      	ldrb	r3, [r2, #2]
    ca0c:	f04f 0c03 	mov.w	ip, #3
    ca10:	f36c 0302 	bfi	r3, ip, #0, #3
    ca14:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
    ca16:	7853      	ldrb	r3, [r2, #1]
    ca18:	f013 0f78 	tst.w	r3, #120	; 0x78
    ca1c:	d1d9      	bne.n	c9d2 <extract_specifier+0xd2>
	bool unsupported = false;
    ca1e:	4671      	mov	r1, lr
    ca20:	e7d7      	b.n	c9d2 <extract_specifier+0xd2>

0000ca22 <extract_conversion>:
{
    ca22:	b510      	push	{r4, lr}
    ca24:	4604      	mov	r4, r0
    ca26:	4608      	mov	r0, r1
	*conv = (struct conversion) {
    ca28:	2300      	movs	r3, #0
    ca2a:	6023      	str	r3, [r4, #0]
    ca2c:	6063      	str	r3, [r4, #4]
    ca2e:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
    ca30:	784b      	ldrb	r3, [r1, #1]
    ca32:	2b25      	cmp	r3, #37	; 0x25
    ca34:	d014      	beq.n	ca60 <extract_conversion+0x3e>
    ca36:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
    ca38:	4620      	mov	r0, r4
    ca3a:	f7f4 fb59 	bl	10f0 <extract_flags>
    ca3e:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
    ca40:	4620      	mov	r0, r4
    ca42:	f7ff fe95 	bl	c770 <extract_width>
    ca46:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
    ca48:	4620      	mov	r0, r4
    ca4a:	f7ff fec0 	bl	c7ce <extract_prec>
    ca4e:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
    ca50:	4620      	mov	r0, r4
    ca52:	f7ff feee 	bl	c832 <extract_length>
    ca56:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
    ca58:	4620      	mov	r0, r4
    ca5a:	f7ff ff51 	bl	c900 <extract_specifier>
}
    ca5e:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
    ca60:	3002      	adds	r0, #2
    ca62:	70e3      	strb	r3, [r4, #3]
		return sp;
    ca64:	e7fb      	b.n	ca5e <extract_conversion+0x3c>

0000ca66 <conversion_radix>:
	switch (specifier) {
    ca66:	286f      	cmp	r0, #111	; 0x6f
    ca68:	d00c      	beq.n	ca84 <conversion_radix+0x1e>
    ca6a:	d905      	bls.n	ca78 <conversion_radix+0x12>
    ca6c:	2870      	cmp	r0, #112	; 0x70
    ca6e:	d00b      	beq.n	ca88 <conversion_radix+0x22>
    ca70:	2878      	cmp	r0, #120	; 0x78
    ca72:	d10b      	bne.n	ca8c <conversion_radix+0x26>
		return 16;
    ca74:	2010      	movs	r0, #16
    ca76:	4770      	bx	lr
	switch (specifier) {
    ca78:	2858      	cmp	r0, #88	; 0x58
    ca7a:	d001      	beq.n	ca80 <conversion_radix+0x1a>
    ca7c:	200a      	movs	r0, #10
    ca7e:	4770      	bx	lr
		return 16;
    ca80:	2010      	movs	r0, #16
    ca82:	4770      	bx	lr
		return 8;
    ca84:	2008      	movs	r0, #8
    ca86:	4770      	bx	lr
		return 16;
    ca88:	2010      	movs	r0, #16
    ca8a:	4770      	bx	lr
	switch (specifier) {
    ca8c:	200a      	movs	r0, #10
}
    ca8e:	4770      	bx	lr

0000ca90 <encode_uint>:
{
    ca90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ca94:	4605      	mov	r5, r0
    ca96:	460c      	mov	r4, r1
    ca98:	4693      	mov	fp, r2
    ca9a:	4699      	mov	r9, r3
    ca9c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier) != 0;
    ca9e:	78d0      	ldrb	r0, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    caa0:	f1a0 0a41 	sub.w	sl, r0, #65	; 0x41
	const unsigned int radix = conversion_radix(conv->specifier);
    caa4:	f7ff ffdf 	bl	ca66 <conversion_radix>
    caa8:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
    caaa:	e015      	b.n	cad8 <encode_uint+0x48>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    caac:	f1ba 0f19 	cmp.w	sl, #25
    cab0:	d820      	bhi.n	caf4 <encode_uint+0x64>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    cab2:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    cab4:	3237      	adds	r2, #55	; 0x37
    cab6:	b2d2      	uxtb	r2, r2
    cab8:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
    cabc:	4632      	mov	r2, r6
    cabe:	4643      	mov	r3, r8
    cac0:	4628      	mov	r0, r5
    cac2:	4621      	mov	r1, r4
    cac4:	f7f3 fb1c 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    cac8:	42b5      	cmp	r5, r6
    caca:	f174 0400 	sbcs.w	r4, r4, #0
    cace:	d315      	bcc.n	cafc <encode_uint+0x6c>
    cad0:	454f      	cmp	r7, r9
    cad2:	d913      	bls.n	cafc <encode_uint+0x6c>
		value /= radix;
    cad4:	4605      	mov	r5, r0
    cad6:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
    cad8:	f04f 0800 	mov.w	r8, #0
    cadc:	4632      	mov	r2, r6
    cade:	4643      	mov	r3, r8
    cae0:	4628      	mov	r0, r5
    cae2:	4621      	mov	r1, r4
    cae4:	f7f3 fb0c 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    cae8:	2a09      	cmp	r2, #9
    caea:	d8df      	bhi.n	caac <encode_uint+0x1c>
    caec:	b2d2      	uxtb	r2, r2
    caee:	3230      	adds	r2, #48	; 0x30
    caf0:	b2d2      	uxtb	r2, r2
    caf2:	e7e1      	b.n	cab8 <encode_uint+0x28>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    caf4:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    caf6:	3257      	adds	r2, #87	; 0x57
    caf8:	b2d2      	uxtb	r2, r2
    cafa:	e7dd      	b.n	cab8 <encode_uint+0x28>
	if (conv->flag_hash) {
    cafc:	f89b 3000 	ldrb.w	r3, [fp]
    cb00:	f013 0f20 	tst.w	r3, #32
    cb04:	d003      	beq.n	cb0e <encode_uint+0x7e>
		if (radix == 8) {
    cb06:	2e08      	cmp	r6, #8
    cb08:	d004      	beq.n	cb14 <encode_uint+0x84>
		} else if (radix == 16) {
    cb0a:	2e10      	cmp	r6, #16
    cb0c:	d009      	beq.n	cb22 <encode_uint+0x92>
}
    cb0e:	4638      	mov	r0, r7
    cb10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    cb14:	f89b 3002 	ldrb.w	r3, [fp, #2]
    cb18:	f043 0308 	orr.w	r3, r3, #8
    cb1c:	f88b 3002 	strb.w	r3, [fp, #2]
    cb20:	e7f5      	b.n	cb0e <encode_uint+0x7e>
			conv->altform_0c = true;
    cb22:	f89b 3002 	ldrb.w	r3, [fp, #2]
    cb26:	f043 0310 	orr.w	r3, r3, #16
    cb2a:	f88b 3002 	strb.w	r3, [fp, #2]
    cb2e:	e7ee      	b.n	cb0e <encode_uint+0x7e>

0000cb30 <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
    cb30:	7843      	ldrb	r3, [r0, #1]
    cb32:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    cb36:	2b07      	cmp	r3, #7
    cb38:	d818      	bhi.n	cb6c <store_count+0x3c>
    cb3a:	e8df f003 	tbb	[pc, r3]
    cb3e:	0604      	.short	0x0604
    cb40:	100c0a08 	.word	0x100c0a08
    cb44:	1614      	.short	0x1614
		*(int *)dp = count;
    cb46:	600a      	str	r2, [r1, #0]
		break;
    cb48:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
    cb4a:	700a      	strb	r2, [r1, #0]
		break;
    cb4c:	4770      	bx	lr
		*(short *)dp = (short)count;
    cb4e:	800a      	strh	r2, [r1, #0]
		break;
    cb50:	4770      	bx	lr
		*(long *)dp = (long)count;
    cb52:	600a      	str	r2, [r1, #0]
		break;
    cb54:	4770      	bx	lr
		*(long long *)dp = (long long)count;
    cb56:	17d3      	asrs	r3, r2, #31
    cb58:	600a      	str	r2, [r1, #0]
    cb5a:	604b      	str	r3, [r1, #4]
		break;
    cb5c:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
    cb5e:	17d3      	asrs	r3, r2, #31
    cb60:	600a      	str	r2, [r1, #0]
    cb62:	604b      	str	r3, [r1, #4]
		break;
    cb64:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
    cb66:	600a      	str	r2, [r1, #0]
		break;
    cb68:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    cb6a:	600a      	str	r2, [r1, #0]
}
    cb6c:	4770      	bx	lr

0000cb6e <outs>:
{
    cb6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb72:	4607      	mov	r7, r0
    cb74:	460e      	mov	r6, r1
    cb76:	4614      	mov	r4, r2
    cb78:	4698      	mov	r8, r3
	size_t count = 0;
    cb7a:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    cb7c:	e006      	b.n	cb8c <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    cb7e:	4631      	mov	r1, r6
    cb80:	f814 0b01 	ldrb.w	r0, [r4], #1
    cb84:	47b8      	blx	r7
		if (rc < 0) {
    cb86:	2800      	cmp	r0, #0
    cb88:	db09      	blt.n	cb9e <outs+0x30>
		++count;
    cb8a:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    cb8c:	4544      	cmp	r4, r8
    cb8e:	d3f6      	bcc.n	cb7e <outs+0x10>
    cb90:	f1b8 0f00 	cmp.w	r8, #0
    cb94:	d102      	bne.n	cb9c <outs+0x2e>
    cb96:	7823      	ldrb	r3, [r4, #0]
    cb98:	2b00      	cmp	r3, #0
    cb9a:	d1f0      	bne.n	cb7e <outs+0x10>
	return (int)count;
    cb9c:	4628      	mov	r0, r5
}
    cb9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cba2 <ring_buf_put_claim>:

#include <zephyr/sys/ring_buffer.h>
#include <string.h>

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    cba2:	b470      	push	{r4, r5, r6}
    cba4:	4603      	mov	r3, r0
	uint32_t free_space, wrap_size;
	int32_t base;

	base = buf->put_base;
    cba6:	68c6      	ldr	r6, [r0, #12]
	wrap_size = buf->put_head - base;
    cba8:	6845      	ldr	r5, [r0, #4]
    cbaa:	1ba8      	subs	r0, r5, r6
	if (unlikely(wrap_size >= buf->size)) {
    cbac:	69dc      	ldr	r4, [r3, #28]
    cbae:	4284      	cmp	r4, r0
    cbb0:	d915      	bls.n	cbde <ring_buf_put_claim+0x3c>
		/* put_base is not yet adjusted */
		wrap_size -= buf->size;
		base += buf->size;
	}
	wrap_size = buf->size - wrap_size;
    cbb2:	1a20      	subs	r0, r4, r0
	return buf->size - (buf->put_head - buf->get_tail);
    cbb4:	f8d3 c014 	ldr.w	ip, [r3, #20]
    cbb8:	eba5 0c0c 	sub.w	ip, r5, ip
    cbbc:	eba4 040c 	sub.w	r4, r4, ip

	free_space = ring_buf_space_get(buf);
	size = MIN(size, free_space);
    cbc0:	42a2      	cmp	r2, r4
    cbc2:	bf28      	it	cs
    cbc4:	4622      	movcs	r2, r4
	size = MIN(size, wrap_size);
    cbc6:	4290      	cmp	r0, r2
    cbc8:	bf28      	it	cs
    cbca:	4610      	movcs	r0, r2

	*data = &buf->buffer[buf->put_head - base];
    cbcc:	681a      	ldr	r2, [r3, #0]
    cbce:	1bad      	subs	r5, r5, r6
    cbd0:	442a      	add	r2, r5
    cbd2:	600a      	str	r2, [r1, #0]
	buf->put_head += size;
    cbd4:	685a      	ldr	r2, [r3, #4]
    cbd6:	4402      	add	r2, r0
    cbd8:	605a      	str	r2, [r3, #4]

	return size;
}
    cbda:	bc70      	pop	{r4, r5, r6}
    cbdc:	4770      	bx	lr
		wrap_size -= buf->size;
    cbde:	1b00      	subs	r0, r0, r4
		base += buf->size;
    cbe0:	4426      	add	r6, r4
    cbe2:	e7e6      	b.n	cbb2 <ring_buf_put_claim+0x10>

0000cbe4 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
    cbe4:	b430      	push	{r4, r5}
	uint32_t finish_space, wrap_size;

	finish_space = buf->put_head - buf->put_tail;
    cbe6:	6844      	ldr	r4, [r0, #4]
    cbe8:	6883      	ldr	r3, [r0, #8]
    cbea:	1ae4      	subs	r4, r4, r3
	if (unlikely(size > finish_space)) {
    cbec:	428c      	cmp	r4, r1
    cbee:	bf2c      	ite	cs
    cbf0:	2400      	movcs	r4, #0
    cbf2:	2401      	movcc	r4, #1
    cbf4:	b98c      	cbnz	r4, cc1a <ring_buf_put_finish+0x36>
    cbf6:	4602      	mov	r2, r0
		return -EINVAL;
	}

	buf->put_tail += size;
    cbf8:	4419      	add	r1, r3
    cbfa:	6081      	str	r1, [r0, #8]
	buf->put_head = buf->put_tail;
    cbfc:	6041      	str	r1, [r0, #4]

	wrap_size = buf->put_tail - buf->put_base;
    cbfe:	68c5      	ldr	r5, [r0, #12]
    cc00:	1b49      	subs	r1, r1, r5
	if (unlikely(wrap_size >= buf->size)) {
    cc02:	69c3      	ldr	r3, [r0, #28]
    cc04:	428b      	cmp	r3, r1
    cc06:	bf8c      	ite	hi
    cc08:	2000      	movhi	r0, #0
    cc0a:	2001      	movls	r0, #1
    cc0c:	b908      	cbnz	r0, cc12 <ring_buf_put_finish+0x2e>
		/* we wrapped: adjust put_base */
		buf->put_base += buf->size;
	}

	return 0;
}
    cc0e:	bc30      	pop	{r4, r5}
    cc10:	4770      	bx	lr
		buf->put_base += buf->size;
    cc12:	442b      	add	r3, r5
    cc14:	60d3      	str	r3, [r2, #12]
	return 0;
    cc16:	4620      	mov	r0, r4
    cc18:	e7f9      	b.n	cc0e <ring_buf_put_finish+0x2a>
		return -EINVAL;
    cc1a:	f06f 0015 	mvn.w	r0, #21
    cc1e:	e7f6      	b.n	cc0e <ring_buf_put_finish+0x2a>

0000cc20 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
    cc20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cc24:	b082      	sub	sp, #8
    cc26:	4680      	mov	r8, r0
    cc28:	460e      	mov	r6, r1
    cc2a:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    cc2c:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    cc2e:	462a      	mov	r2, r5
    cc30:	a901      	add	r1, sp, #4
    cc32:	4640      	mov	r0, r8
    cc34:	f7ff ffb5 	bl	cba2 <ring_buf_put_claim>
    cc38:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    cc3a:	4602      	mov	r2, r0
    cc3c:	4631      	mov	r1, r6
    cc3e:	9801      	ldr	r0, [sp, #4]
    cc40:	f001 f8bc 	bl	ddbc <memcpy>
		total_size += partial_size;
    cc44:	4427      	add	r7, r4
		size -= partial_size;
		data += partial_size;
    cc46:	4426      	add	r6, r4
	} while (size && partial_size);
    cc48:	1b2d      	subs	r5, r5, r4
    cc4a:	d001      	beq.n	cc50 <ring_buf_put+0x30>
    cc4c:	2c00      	cmp	r4, #0
    cc4e:	d1ee      	bne.n	cc2e <ring_buf_put+0xe>

	err = ring_buf_put_finish(buf, total_size);
    cc50:	4639      	mov	r1, r7
    cc52:	4640      	mov	r0, r8
    cc54:	f7ff ffc6 	bl	cbe4 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
    cc58:	4638      	mov	r0, r7
    cc5a:	b002      	add	sp, #8
    cc5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cc60 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    cc60:	b470      	push	{r4, r5, r6}
    cc62:	4603      	mov	r3, r0
	uint32_t available_size, wrap_size;
	int32_t base;

	base = buf->get_base;
    cc64:	6986      	ldr	r6, [r0, #24]
	wrap_size = buf->get_head - base;
    cc66:	6905      	ldr	r5, [r0, #16]
    cc68:	1ba8      	subs	r0, r5, r6
	if (unlikely(wrap_size >= buf->size)) {
    cc6a:	69dc      	ldr	r4, [r3, #28]
    cc6c:	4284      	cmp	r4, r0
    cc6e:	d911      	bls.n	cc94 <ring_buf_get_claim+0x34>
		/* get_base is not yet adjusted */
		wrap_size -= buf->size;
		base += buf->size;
	}
	wrap_size = buf->size - wrap_size;
    cc70:	1a20      	subs	r0, r4, r0
 *
 * @return Ring buffer space used (in bytes).
 */
static inline uint32_t ring_buf_size_get(struct ring_buf *buf)
{
	return buf->put_tail - buf->get_head;
    cc72:	689c      	ldr	r4, [r3, #8]
    cc74:	1b64      	subs	r4, r4, r5

	available_size = ring_buf_size_get(buf);
	size = MIN(size, available_size);
    cc76:	42a2      	cmp	r2, r4
    cc78:	bf28      	it	cs
    cc7a:	4622      	movcs	r2, r4
	size = MIN(size, wrap_size);
    cc7c:	4290      	cmp	r0, r2
    cc7e:	bf28      	it	cs
    cc80:	4610      	movcs	r0, r2

	*data = &buf->buffer[buf->get_head - base];
    cc82:	681a      	ldr	r2, [r3, #0]
    cc84:	1bad      	subs	r5, r5, r6
    cc86:	442a      	add	r2, r5
    cc88:	600a      	str	r2, [r1, #0]
	buf->get_head += size;
    cc8a:	691a      	ldr	r2, [r3, #16]
    cc8c:	4402      	add	r2, r0
    cc8e:	611a      	str	r2, [r3, #16]

	return size;
}
    cc90:	bc70      	pop	{r4, r5, r6}
    cc92:	4770      	bx	lr
		wrap_size -= buf->size;
    cc94:	1b00      	subs	r0, r0, r4
		base += buf->size;
    cc96:	4426      	add	r6, r4
    cc98:	e7ea      	b.n	cc70 <ring_buf_get_claim+0x10>

0000cc9a <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
    cc9a:	b430      	push	{r4, r5}
	uint32_t finish_space, wrap_size;

	finish_space = buf->get_head - buf->get_tail;
    cc9c:	6904      	ldr	r4, [r0, #16]
    cc9e:	6943      	ldr	r3, [r0, #20]
    cca0:	1ae4      	subs	r4, r4, r3
	if (unlikely(size > finish_space)) {
    cca2:	428c      	cmp	r4, r1
    cca4:	bf2c      	ite	cs
    cca6:	2400      	movcs	r4, #0
    cca8:	2401      	movcc	r4, #1
    ccaa:	b98c      	cbnz	r4, ccd0 <ring_buf_get_finish+0x36>
    ccac:	4602      	mov	r2, r0
		return -EINVAL;
	}

	buf->get_tail += size;
    ccae:	4419      	add	r1, r3
    ccb0:	6141      	str	r1, [r0, #20]
	buf->get_head = buf->get_tail;
    ccb2:	6101      	str	r1, [r0, #16]

	wrap_size = buf->get_tail - buf->get_base;
    ccb4:	6985      	ldr	r5, [r0, #24]
    ccb6:	1b49      	subs	r1, r1, r5
	if (unlikely(wrap_size >= buf->size)) {
    ccb8:	69c3      	ldr	r3, [r0, #28]
    ccba:	428b      	cmp	r3, r1
    ccbc:	bf8c      	ite	hi
    ccbe:	2000      	movhi	r0, #0
    ccc0:	2001      	movls	r0, #1
    ccc2:	b908      	cbnz	r0, ccc8 <ring_buf_get_finish+0x2e>
		/* we wrapped: adjust get_base */
		buf->get_base += buf->size;
	}

	return 0;
}
    ccc4:	bc30      	pop	{r4, r5}
    ccc6:	4770      	bx	lr
		buf->get_base += buf->size;
    ccc8:	442b      	add	r3, r5
    ccca:	6193      	str	r3, [r2, #24]
	return 0;
    cccc:	4620      	mov	r0, r4
    ccce:	e7f9      	b.n	ccc4 <ring_buf_get_finish+0x2a>
		return -EINVAL;
    ccd0:	f06f 0015 	mvn.w	r0, #21
    ccd4:	e7f6      	b.n	ccc4 <ring_buf_get_finish+0x2a>

0000ccd6 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
    ccd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ccda:	b082      	sub	sp, #8
    ccdc:	4680      	mov	r8, r0
    ccde:	460e      	mov	r6, r1
    cce0:	4615      	mov	r5, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    cce2:	2700      	movs	r7, #0
    cce4:	e009      	b.n	ccfa <ring_buf_get+0x24>
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
		if (data) {
			memcpy(data, src, partial_size);
    cce6:	4602      	mov	r2, r0
    cce8:	9901      	ldr	r1, [sp, #4]
    ccea:	4630      	mov	r0, r6
    ccec:	f001 f866 	bl	ddbc <memcpy>
			data += partial_size;
    ccf0:	4426      	add	r6, r4
		}
		total_size += partial_size;
    ccf2:	4427      	add	r7, r4
		size -= partial_size;
	} while (size && partial_size);
    ccf4:	1b2d      	subs	r5, r5, r4
    ccf6:	d009      	beq.n	cd0c <ring_buf_get+0x36>
    ccf8:	b144      	cbz	r4, cd0c <ring_buf_get+0x36>
		partial_size = ring_buf_get_claim(buf, &src, size);
    ccfa:	462a      	mov	r2, r5
    ccfc:	a901      	add	r1, sp, #4
    ccfe:	4640      	mov	r0, r8
    cd00:	f7ff ffae 	bl	cc60 <ring_buf_get_claim>
    cd04:	4604      	mov	r4, r0
		if (data) {
    cd06:	2e00      	cmp	r6, #0
    cd08:	d1ed      	bne.n	cce6 <ring_buf_get+0x10>
    cd0a:	e7f2      	b.n	ccf2 <ring_buf_get+0x1c>

	err = ring_buf_get_finish(buf, total_size);
    cd0c:	4639      	mov	r1, r7
    cd0e:	4640      	mov	r0, r8
    cd10:	f7ff ffc3 	bl	cc9a <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
    cd14:	4638      	mov	r0, r7
    cd16:	b002      	add	sp, #8
    cd18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cd1c <free_space>:
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->flags & MPSC_PBUF_FULL) {
    cd1c:	6903      	ldr	r3, [r0, #16]
    cd1e:	f013 0f08 	tst.w	r3, #8
    cd22:	d108      	bne.n	cd36 <free_space+0x1a>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    cd24:	68c3      	ldr	r3, [r0, #12]
    cd26:	6802      	ldr	r2, [r0, #0]
    cd28:	4293      	cmp	r3, r2
    cd2a:	d807      	bhi.n	cd3c <free_space+0x20>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
    cd2c:	6a03      	ldr	r3, [r0, #32]
    cd2e:	1a9b      	subs	r3, r3, r2
    cd30:	600b      	str	r3, [r1, #0]

	return true;
    cd32:	2001      	movs	r0, #1
}
    cd34:	4770      	bx	lr
		*res = 0;
    cd36:	2000      	movs	r0, #0
    cd38:	6008      	str	r0, [r1, #0]
		return false;
    cd3a:	4770      	bx	lr
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
    cd3c:	1a9b      	subs	r3, r3, r2
    cd3e:	600b      	str	r3, [r1, #0]
		return false;
    cd40:	2000      	movs	r0, #0
    cd42:	4770      	bx	lr

0000cd44 <available>:
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool available(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    cd44:	6903      	ldr	r3, [r0, #16]
    cd46:	f013 0f08 	tst.w	r3, #8
    cd4a:	d107      	bne.n	cd5c <available+0x18>
    cd4c:	6882      	ldr	r2, [r0, #8]
    cd4e:	6843      	ldr	r3, [r0, #4]
    cd50:	429a      	cmp	r2, r3
    cd52:	d803      	bhi.n	cd5c <available+0x18>
		*res = buffer->size - buffer->tmp_rd_idx;
		return true;
	}

	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    cd54:	1a9b      	subs	r3, r3, r2
    cd56:	600b      	str	r3, [r1, #0]

	return false;
    cd58:	2000      	movs	r0, #0
}
    cd5a:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_rd_idx;
    cd5c:	6a03      	ldr	r3, [r0, #32]
    cd5e:	6882      	ldr	r2, [r0, #8]
    cd60:	1a9b      	subs	r3, r3, r2
    cd62:	600b      	str	r3, [r1, #0]
		return true;
    cd64:	2001      	movs	r0, #1
    cd66:	4770      	bx	lr

0000cd68 <get_usage>:

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    cd68:	b510      	push	{r4, lr}
    cd6a:	b082      	sub	sp, #8
    cd6c:	4604      	mov	r4, r0
	uint32_t f;

	if (free_space(buffer, &f)) {
    cd6e:	a901      	add	r1, sp, #4
    cd70:	f7ff ffd4 	bl	cd1c <free_space>
    cd74:	b120      	cbz	r0, cd80 <get_usage+0x18>
		f += (buffer->rd_idx - 1);
    cd76:	68e3      	ldr	r3, [r4, #12]
    cd78:	9a01      	ldr	r2, [sp, #4]
    cd7a:	4413      	add	r3, r2
    cd7c:	3b01      	subs	r3, #1
    cd7e:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    cd80:	6a20      	ldr	r0, [r4, #32]
    cd82:	9b01      	ldr	r3, [sp, #4]
    cd84:	1ac0      	subs	r0, r0, r3
}
    cd86:	3801      	subs	r0, #1
    cd88:	b002      	add	sp, #8
    cd8a:	bd10      	pop	{r4, pc}

0000cd8c <max_utilization_update>:

static inline void max_utilization_update(struct mpsc_pbuf_buffer *buffer)
{
    cd8c:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    cd8e:	6903      	ldr	r3, [r0, #16]
    cd90:	f013 0f04 	tst.w	r3, #4
    cd94:	d100      	bne.n	cd98 <max_utilization_update+0xc>
		return;
	}

	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
}
    cd96:	bd38      	pop	{r3, r4, r5, pc}
    cd98:	4604      	mov	r4, r0
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    cd9a:	6a45      	ldr	r5, [r0, #36]	; 0x24
    cd9c:	f7ff ffe4 	bl	cd68 <get_usage>
    cda0:	4285      	cmp	r5, r0
    cda2:	d902      	bls.n	cdaa <max_utilization_update+0x1e>
    cda4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    cda6:	6260      	str	r0, [r4, #36]	; 0x24
    cda8:	e7f5      	b.n	cd96 <max_utilization_update+0xa>
    cdaa:	4620      	mov	r0, r4
    cdac:	f7ff ffdc 	bl	cd68 <get_usage>
    cdb0:	e7f9      	b.n	cda6 <max_utilization_update+0x1a>

0000cdb2 <rd_idx_inc>:
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    cdb2:	68c3      	ldr	r3, [r0, #12]
	uint32_t i = idx + val;
    cdb4:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    cdb6:	6903      	ldr	r3, [r0, #16]
    cdb8:	f013 0f01 	tst.w	r3, #1
    cdbc:	d104      	bne.n	cdc8 <rd_idx_inc+0x16>
	return (i >= buffer->size) ? i - buffer->size : i;
    cdbe:	6a02      	ldr	r2, [r0, #32]
    cdc0:	4291      	cmp	r1, r2
    cdc2:	d304      	bcc.n	cdce <rd_idx_inc+0x1c>
    cdc4:	1a89      	subs	r1, r1, r2
    cdc6:	e002      	b.n	cdce <rd_idx_inc+0x1c>
		return i & (buffer->size - 1);
    cdc8:	6a02      	ldr	r2, [r0, #32]
    cdca:	3a01      	subs	r2, #1
    cdcc:	4011      	ands	r1, r2
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    cdce:	60c1      	str	r1, [r0, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
    cdd0:	f023 0308 	bic.w	r3, r3, #8
    cdd4:	6103      	str	r3, [r0, #16]
}
    cdd6:	4770      	bx	lr

0000cdd8 <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    cdd8:	b410      	push	{r4}
	union mpsc_pbuf_generic skip = {
    cdda:	2300      	movs	r3, #0
    cddc:	f36f 0300 	bfc	r3, #0, #1
    cde0:	f043 0302 	orr.w	r3, r3, #2
    cde4:	f361 039f 	bfi	r3, r1, #2, #30
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    cde8:	69c2      	ldr	r2, [r0, #28]
    cdea:	6804      	ldr	r4, [r0, #0]
    cdec:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    cdf0:	6803      	ldr	r3, [r0, #0]
	uint32_t i = idx + val;
    cdf2:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    cdf4:	6902      	ldr	r2, [r0, #16]
    cdf6:	f012 0f01 	tst.w	r2, #1
    cdfa:	d104      	bne.n	ce06 <add_skip_item+0x2e>
	return (i >= buffer->size) ? i - buffer->size : i;
    cdfc:	6a04      	ldr	r4, [r0, #32]
    cdfe:	42a3      	cmp	r3, r4
    ce00:	d304      	bcc.n	ce0c <add_skip_item+0x34>
    ce02:	1b1b      	subs	r3, r3, r4
    ce04:	e002      	b.n	ce0c <add_skip_item+0x34>
		return i & (buffer->size - 1);
    ce06:	6a04      	ldr	r4, [r0, #32]
    ce08:	3c01      	subs	r4, #1
    ce0a:	4023      	ands	r3, r4
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    ce0c:	6003      	str	r3, [r0, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    ce0e:	68c4      	ldr	r4, [r0, #12]
    ce10:	429c      	cmp	r4, r3
    ce12:	d00a      	beq.n	ce2a <add_skip_item+0x52>
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    ce14:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
    ce16:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    ce18:	6903      	ldr	r3, [r0, #16]
    ce1a:	f013 0f01 	tst.w	r3, #1
    ce1e:	d108      	bne.n	ce32 <add_skip_item+0x5a>
	return (i >= buffer->size) ? i - buffer->size : i;
    ce20:	6a03      	ldr	r3, [r0, #32]
    ce22:	4299      	cmp	r1, r3
    ce24:	d308      	bcc.n	ce38 <add_skip_item+0x60>
    ce26:	1ac9      	subs	r1, r1, r3
    ce28:	e006      	b.n	ce38 <add_skip_item+0x60>
		buffer->flags |= MPSC_PBUF_FULL;
    ce2a:	f042 0208 	orr.w	r2, r2, #8
    ce2e:	6102      	str	r2, [r0, #16]
    ce30:	e7f0      	b.n	ce14 <add_skip_item+0x3c>
		return i & (buffer->size - 1);
    ce32:	6a03      	ldr	r3, [r0, #32]
    ce34:	3b01      	subs	r3, #1
    ce36:	4019      	ands	r1, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    ce38:	6041      	str	r1, [r0, #4]
}
    ce3a:	bc10      	pop	{r4}
    ce3c:	4770      	bx	lr

0000ce3e <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
    ce3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce42:	b083      	sub	sp, #12
    ce44:	4604      	mov	r4, r0
    ce46:	9101      	str	r1, [sp, #4]
    ce48:	4617      	mov	r7, r2
    ce4a:	4698      	mov	r8, r3
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    ce4c:	69c5      	ldr	r5, [r0, #28]
    ce4e:	68c6      	ldr	r6, [r0, #12]
    ce50:	eb05 0b86 	add.w	fp, r5, r6, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    ce54:	f815 3026 	ldrb.w	r3, [r5, r6, lsl #2]
    ce58:	f003 0303 	and.w	r3, r3, #3
    ce5c:	2b02      	cmp	r3, #2
    ce5e:	d024      	beq.n	ceaa <drop_item_locked+0x6c>
	return 0;
    ce60:	2100      	movs	r1, #0
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
    ce62:	2300      	movs	r3, #0
    ce64:	603b      	str	r3, [r7, #0]
	*tmp_wr_idx_shift = 0;
    ce66:	f8c8 3000 	str.w	r3, [r8]

	if (skip_wlen) {
    ce6a:	bb19      	cbnz	r1, ceb4 <drop_item_locked+0x76>
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
    ce6c:	6923      	ldr	r3, [r4, #16]
    ce6e:	f013 0f02 	tst.w	r3, #2
    ce72:	d073      	beq.n	cf5c <drop_item_locked+0x11e>
		return false;
	}

	uint32_t rd_wlen = buffer->get_wlen(item);
    ce74:	69a3      	ldr	r3, [r4, #24]
    ce76:	4658      	mov	r0, fp
    ce78:	4798      	blx	r3
    ce7a:	4682      	mov	sl, r0
	return item->hdr.valid;
    ce7c:	f815 9026 	ldrb.w	r9, [r5, r6, lsl #2]

	/* If packet is busy need to be ommited. */
	if (!is_valid(item)) {
    ce80:	f019 0901 	ands.w	r9, r9, #1
    ce84:	d06c      	beq.n	cf60 <drop_item_locked+0x122>
		return false;
	} else if (item->hdr.busy) {
    ce86:	f815 3026 	ldrb.w	r3, [r5, r6, lsl #2]
    ce8a:	f013 0f02 	tst.w	r3, #2
    ce8e:	d039      	beq.n	cf04 <drop_item_locked+0xc6>
		MPSC_PBUF_DBG(buffer, "no space: Found busy packet %p (len:%d)", item, rd_wlen);
		/* Add skip packet before claimed packet. */
		if (free_wlen) {
    ce90:	9b01      	ldr	r3, [sp, #4]
    ce92:	b9bb      	cbnz	r3, cec4 <drop_item_locked+0x86>
			add_skip_item(buffer, free_wlen);
			MPSC_PBUF_DBG(buffer, "no space: Added skip packet (len:%d)", free_wlen);
		}
		/* Move all indexes forward, after claimed packet. */
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    ce94:	6862      	ldr	r2, [r4, #4]
	uint32_t i = idx + val;
    ce96:	4452      	add	r2, sl
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    ce98:	6923      	ldr	r3, [r4, #16]
    ce9a:	f013 0001 	ands.w	r0, r3, #1
    ce9e:	d116      	bne.n	cece <drop_item_locked+0x90>
	return (i >= buffer->size) ? i - buffer->size : i;
    cea0:	6a21      	ldr	r1, [r4, #32]
    cea2:	428a      	cmp	r2, r1
    cea4:	d316      	bcc.n	ced4 <drop_item_locked+0x96>
    cea6:	1a52      	subs	r2, r2, r1
    cea8:	e014      	b.n	ced4 <drop_item_locked+0x96>
		return item->skip.len;
    ceaa:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
    ceae:	f3c1 019d 	ubfx	r1, r1, #2, #30
    ceb2:	e7d6      	b.n	ce62 <drop_item_locked+0x24>
		rd_idx_inc(buffer, skip_wlen);
    ceb4:	4620      	mov	r0, r4
    ceb6:	f7ff ff7c 	bl	cdb2 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    ceba:	68e3      	ldr	r3, [r4, #12]
    cebc:	60a3      	str	r3, [r4, #8]
		return true;
    cebe:	f04f 0901 	mov.w	r9, #1
    cec2:	e04d      	b.n	cf60 <drop_item_locked+0x122>
			add_skip_item(buffer, free_wlen);
    cec4:	4619      	mov	r1, r3
    cec6:	4620      	mov	r0, r4
    cec8:	f7ff ff86 	bl	cdd8 <add_skip_item>
			MPSC_PBUF_DBG(buffer, "no space: Added skip packet (len:%d)", free_wlen);
    cecc:	e7e2      	b.n	ce94 <drop_item_locked+0x56>
		return i & (buffer->size - 1);
    cece:	6a21      	ldr	r1, [r4, #32]
    ced0:	3901      	subs	r1, #1
    ced2:	400a      	ands	r2, r1
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    ced4:	6062      	str	r2, [r4, #4]

		/* If allocation wrapped around the buffer and found busy packet
		 * that was already ommited, skip it again.
		 */
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    ced6:	68e1      	ldr	r1, [r4, #12]
    ced8:	68a2      	ldr	r2, [r4, #8]
    ceda:	4291      	cmp	r1, r2
    cedc:	d006      	beq.n	ceec <drop_item_locked+0xae>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
		}

		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
    cede:	68a2      	ldr	r2, [r4, #8]
    cee0:	6022      	str	r2, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
    cee2:	60e2      	str	r2, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
    cee4:	f043 0308 	orr.w	r3, r3, #8
    cee8:	6123      	str	r3, [r4, #16]
    ceea:	e039      	b.n	cf60 <drop_item_locked+0x122>
	uint32_t i = idx + val;
    ceec:	4452      	add	r2, sl
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    ceee:	b920      	cbnz	r0, cefa <drop_item_locked+0xbc>
	return (i >= buffer->size) ? i - buffer->size : i;
    cef0:	6a21      	ldr	r1, [r4, #32]
    cef2:	428a      	cmp	r2, r1
    cef4:	d304      	bcc.n	cf00 <drop_item_locked+0xc2>
    cef6:	1a52      	subs	r2, r2, r1
    cef8:	e002      	b.n	cf00 <drop_item_locked+0xc2>
		return i & (buffer->size - 1);
    cefa:	6a21      	ldr	r1, [r4, #32]
    cefc:	3901      	subs	r1, #1
    cefe:	400a      	ands	r2, r1
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
    cf00:	60a2      	str	r2, [r4, #8]
    cf02:	e7ec      	b.n	cede <drop_item_locked+0xa0>
	} else {
		/* Prepare packet dropping. */
		rd_idx_inc(buffer, rd_wlen);
    cf04:	4601      	mov	r1, r0
    cf06:	4620      	mov	r0, r4
    cf08:	f7ff ff53 	bl	cdb2 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    cf0c:	68e3      	ldr	r3, [r4, #12]
    cf0e:	60a3      	str	r3, [r4, #8]
		/* Temporary move tmp_wr idx forward to ensure that packet
		 * will not be dropped twice and content will not be
		 * overwritten.
		 */
		if (free_wlen) {
    cf10:	9b01      	ldr	r3, [sp, #4]
    cf12:	b123      	cbz	r3, cf1e <drop_item_locked+0xe0>
					.valid = 0,
					.busy = 0
				}
			};

			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
    cf14:	69e3      	ldr	r3, [r4, #28]
    cf16:	6822      	ldr	r2, [r4, #0]
    cf18:	2100      	movs	r1, #0
    cf1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}

		*tmp_wr_idx_shift = rd_wlen + free_wlen;
    cf1e:	9b01      	ldr	r3, [sp, #4]
    cf20:	4453      	add	r3, sl
    cf22:	f8c8 3000 	str.w	r3, [r8]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    cf26:	6822      	ldr	r2, [r4, #0]
	uint32_t i = idx + val;
    cf28:	4413      	add	r3, r2
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    cf2a:	6922      	ldr	r2, [r4, #16]
    cf2c:	f012 0f01 	tst.w	r2, #1
    cf30:	d104      	bne.n	cf3c <drop_item_locked+0xfe>
	return (i >= buffer->size) ? i - buffer->size : i;
    cf32:	6a21      	ldr	r1, [r4, #32]
    cf34:	428b      	cmp	r3, r1
    cf36:	d304      	bcc.n	cf42 <drop_item_locked+0x104>
    cf38:	1a5b      	subs	r3, r3, r1
    cf3a:	e002      	b.n	cf42 <drop_item_locked+0x104>
		return i & (buffer->size - 1);
    cf3c:	6a21      	ldr	r1, [r4, #32]
    cf3e:	3901      	subs	r1, #1
    cf40:	400b      	ands	r3, r1
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    cf42:	6023      	str	r3, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
    cf44:	f042 0208 	orr.w	r2, r2, #8
    cf48:	6122      	str	r2, [r4, #16]
		item->hdr.valid = 0;
    cf4a:	f815 3026 	ldrb.w	r3, [r5, r6, lsl #2]
    cf4e:	f36f 0300 	bfc	r3, #0, #1
    cf52:	f805 3026 	strb.w	r3, [r5, r6, lsl #2]
		*item_to_drop = item;
    cf56:	f8c7 b000 	str.w	fp, [r7]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
    cf5a:	e001      	b.n	cf60 <drop_item_locked+0x122>
		return false;
    cf5c:	f04f 0900 	mov.w	r9, #0
			       item, rd_wlen);
	}

	return true;
}
    cf60:	4648      	mov	r0, r9
    cf62:	b003      	add	sp, #12
    cf64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000cf68 <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
    cf68:	b430      	push	{r4, r5}
	uint32_t i = idx + val;
    cf6a:	1853      	adds	r3, r2, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    cf6c:	6904      	ldr	r4, [r0, #16]
    cf6e:	f014 0f01 	tst.w	r4, #1
    cf72:	d104      	bne.n	cf7e <post_drop_action+0x16>
	return (i >= buffer->size) ? i - buffer->size : i;
    cf74:	6a05      	ldr	r5, [r0, #32]
    cf76:	42ab      	cmp	r3, r5
    cf78:	d304      	bcc.n	cf84 <post_drop_action+0x1c>
    cf7a:	1b5b      	subs	r3, r3, r5
    cf7c:	e002      	b.n	cf84 <post_drop_action+0x1c>
		return i & (buffer->size - 1);
    cf7e:	6a05      	ldr	r5, [r0, #32]
    cf80:	3d01      	subs	r5, #1
    cf82:	402b      	ands	r3, r5
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
    cf84:	6805      	ldr	r5, [r0, #0]
    cf86:	429d      	cmp	r5, r3
    cf88:	d014      	beq.n	cfb4 <post_drop_action+0x4c>
		buffer->flags &= ~MPSC_PBUF_FULL;
		return;
	}

	/* Operation interrupted, mark area as to be skipped. */
	union mpsc_pbuf_generic skip = {
    cf8a:	2300      	movs	r3, #0
    cf8c:	f36f 0300 	bfc	r3, #0, #1
    cf90:	f043 0302 	orr.w	r3, r3, #2
    cf94:	f362 039f 	bfi	r3, r2, #2, #30
			.busy = 1,
			.len = tmp_wr_idx_shift
		}
	};

	buffer->buf[prev_tmp_wr_idx] = skip.raw;
    cf98:	69c4      	ldr	r4, [r0, #28]
    cf9a:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
    cf9e:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
    cfa0:	4413      	add	r3, r2
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    cfa2:	6902      	ldr	r2, [r0, #16]
    cfa4:	f012 0f01 	tst.w	r2, #1
    cfa8:	d109      	bne.n	cfbe <post_drop_action+0x56>
	return (i >= buffer->size) ? i - buffer->size : i;
    cfaa:	6a02      	ldr	r2, [r0, #32]
    cfac:	4293      	cmp	r3, r2
    cfae:	d309      	bcc.n	cfc4 <post_drop_action+0x5c>
    cfb0:	1a9b      	subs	r3, r3, r2
    cfb2:	e007      	b.n	cfc4 <post_drop_action+0x5c>
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
    cfb4:	6001      	str	r1, [r0, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
    cfb6:	f024 0408 	bic.w	r4, r4, #8
    cfba:	6104      	str	r4, [r0, #16]
		return;
    cfbc:	e003      	b.n	cfc6 <post_drop_action+0x5e>
		return i & (buffer->size - 1);
    cfbe:	6a02      	ldr	r2, [r0, #32]
    cfc0:	3a01      	subs	r2, #1
    cfc2:	4013      	ands	r3, r2
	buffer->wr_idx = idx_inc(buffer,
    cfc4:	6043      	str	r3, [r0, #4]
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
    cfc6:	bc30      	pop	{r4, r5}
    cfc8:	4770      	bx	lr

0000cfca <mpsc_pbuf_init>:
{
    cfca:	b538      	push	{r3, r4, r5, lr}
    cfcc:	4604      	mov	r4, r0
    cfce:	460d      	mov	r5, r1
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    cfd0:	221c      	movs	r2, #28
    cfd2:	2100      	movs	r1, #0
    cfd4:	f000 ff21 	bl	de1a <memset>
	buffer->get_wlen = cfg->get_wlen;
    cfd8:	68eb      	ldr	r3, [r5, #12]
    cfda:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    cfdc:	68ab      	ldr	r3, [r5, #8]
    cfde:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    cfe0:	682b      	ldr	r3, [r5, #0]
    cfe2:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
    cfe4:	686b      	ldr	r3, [r5, #4]
    cfe6:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
    cfe8:	2200      	movs	r2, #0
    cfea:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    cfec:	692a      	ldr	r2, [r5, #16]
    cfee:	6122      	str	r2, [r4, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
    cff0:	b12b      	cbz	r3, cffe <mpsc_pbuf_init+0x34>
    cff2:	1e59      	subs	r1, r3, #1
    cff4:	420b      	tst	r3, r1
    cff6:	d102      	bne.n	cffe <mpsc_pbuf_init+0x34>
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    cff8:	f042 0201 	orr.w	r2, r2, #1
    cffc:	6122      	str	r2, [r4, #16]
	err = k_sem_init(&buffer->sem, 0, 1);
    cffe:	f104 0028 	add.w	r0, r4, #40	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
    d002:	2201      	movs	r2, #1
    d004:	2100      	movs	r1, #0
    d006:	f002 f9ea 	bl	f3de <z_impl_k_sem_init>
}
    d00a:	bd38      	pop	{r3, r4, r5, pc}

0000d00c <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    d00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d010:	b087      	sub	sp, #28
    d012:	469a      	mov	sl, r3
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
    d014:	2300      	movs	r3, #0
    d016:	9305      	str	r3, [sp, #20]
	bool cont = true;
	uint32_t free_wlen;
	uint32_t tmp_wr_idx_shift = 0;
    d018:	9303      	str	r3, [sp, #12]
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
    d01a:	6a03      	ldr	r3, [r0, #32]
    d01c:	428b      	cmp	r3, r1
    d01e:	f0c0 8089 	bcc.w	d134 <mpsc_pbuf_alloc+0x128>
    d022:	4604      	mov	r4, r0
    d024:	4688      	mov	r8, r1
    d026:	4691      	mov	r9, r2
	uint32_t tmp_wr_idx_val = 0;
    d028:	2300      	movs	r3, #0
    d02a:	9301      	str	r3, [sp, #4]
	bool cont = true;
    d02c:	2701      	movs	r7, #1
	union mpsc_pbuf_generic *item = NULL;
    d02e:	469b      	mov	fp, r3
    d030:	e040      	b.n	d0b4 <mpsc_pbuf_alloc+0xa8>
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
    d032:	9901      	ldr	r1, [sp, #4]
    d034:	4620      	mov	r0, r4
    d036:	f7ff ff97 	bl	cf68 <post_drop_action>
			tmp_wr_idx_shift = 0;
    d03a:	2300      	movs	r3, #0
    d03c:	9303      	str	r3, [sp, #12]
    d03e:	e045      	b.n	d0cc <mpsc_pbuf_alloc+0xc0>

		wrap = free_space(buffer, &free_wlen);

		if (free_wlen >= wlen) {
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    d040:	69e3      	ldr	r3, [r4, #28]
    d042:	6822      	ldr	r2, [r4, #0]
			item =
    d044:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
			item->hdr.valid = 0;
    d048:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    d04c:	f36f 0100 	bfc	r1, #0, #1
    d050:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item->hdr.busy = 0;
    d054:	b2c9      	uxtb	r1, r1
    d056:	f36f 0141 	bfc	r1, #1, #1
    d05a:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    d05e:	6823      	ldr	r3, [r4, #0]
	uint32_t i = idx + val;
    d060:	4443      	add	r3, r8
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    d062:	6922      	ldr	r2, [r4, #16]
    d064:	f012 0f01 	tst.w	r2, #1
    d068:	d104      	bne.n	d074 <mpsc_pbuf_alloc+0x68>
	return (i >= buffer->size) ? i - buffer->size : i;
    d06a:	6a21      	ldr	r1, [r4, #32]
    d06c:	428b      	cmp	r3, r1
    d06e:	d304      	bcc.n	d07a <mpsc_pbuf_alloc+0x6e>
    d070:	1a5b      	subs	r3, r3, r1
    d072:	e002      	b.n	d07a <mpsc_pbuf_alloc+0x6e>
		return i & (buffer->size - 1);
    d074:	6a21      	ldr	r1, [r4, #32]
    d076:	3901      	subs	r1, #1
    d078:	400b      	ands	r3, r1
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    d07a:	6023      	str	r3, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    d07c:	68e1      	ldr	r1, [r4, #12]
    d07e:	4299      	cmp	r1, r3
    d080:	d001      	beq.n	d086 <mpsc_pbuf_alloc+0x7a>
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
    d082:	2700      	movs	r7, #0
    d084:	e008      	b.n	d098 <mpsc_pbuf_alloc+0x8c>
		buffer->flags |= MPSC_PBUF_FULL;
    d086:	f042 0208 	orr.w	r2, r2, #8
    d08a:	6122      	str	r2, [r4, #16]
			cont = false;
    d08c:	2700      	movs	r7, #0
    d08e:	e003      	b.n	d098 <mpsc_pbuf_alloc+0x8c>
		} else if (wrap) {
			add_skip_item(buffer, free_wlen);
    d090:	4620      	mov	r0, r4
    d092:	f7ff fea1 	bl	cdd8 <add_skip_item>
			cont = true;
    d096:	4637      	mov	r7, r6
    d098:	f385 8811 	msr	BASEPRI, r5
    d09c:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
    d0a0:	9905      	ldr	r1, [sp, #20]
    d0a2:	b129      	cbz	r1, d0b0 <mpsc_pbuf_alloc+0xa4>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    d0a4:	6963      	ldr	r3, [r4, #20]
    d0a6:	b10b      	cbz	r3, d0ac <mpsc_pbuf_alloc+0xa0>
				buffer->notify_drop(buffer, dropped_item);
    d0a8:	4620      	mov	r0, r4
    d0aa:	4798      	blx	r3
			}
			dropped_item = NULL;
    d0ac:	2300      	movs	r3, #0
    d0ae:	9305      	str	r3, [sp, #20]
		}
	} while (cont);
    d0b0:	2f00      	cmp	r7, #0
    d0b2:	d041      	beq.n	d138 <mpsc_pbuf_alloc+0x12c>
	__asm__ volatile(
    d0b4:	f04f 0320 	mov.w	r3, #32
    d0b8:	f3ef 8511 	mrs	r5, BASEPRI
    d0bc:	f383 8812 	msr	BASEPRI_MAX, r3
    d0c0:	f3bf 8f6f 	isb	sy
    d0c4:	9500      	str	r5, [sp, #0]
		if (tmp_wr_idx_shift) {
    d0c6:	9a03      	ldr	r2, [sp, #12]
    d0c8:	2a00      	cmp	r2, #0
    d0ca:	d1b2      	bne.n	d032 <mpsc_pbuf_alloc+0x26>
		wrap = free_space(buffer, &free_wlen);
    d0cc:	a904      	add	r1, sp, #16
    d0ce:	4620      	mov	r0, r4
    d0d0:	f7ff fe24 	bl	cd1c <free_space>
    d0d4:	4606      	mov	r6, r0
		if (free_wlen >= wlen) {
    d0d6:	9904      	ldr	r1, [sp, #16]
    d0d8:	4541      	cmp	r1, r8
    d0da:	d2b1      	bcs.n	d040 <mpsc_pbuf_alloc+0x34>
		} else if (wrap) {
    d0dc:	2800      	cmp	r0, #0
    d0de:	d1d7      	bne.n	d090 <mpsc_pbuf_alloc+0x84>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    d0e0:	ea5a 0309 	orrs.w	r3, sl, r9
    d0e4:	d10b      	bne.n	d0fe <mpsc_pbuf_alloc+0xf2>
		} else if (cont) {
    d0e6:	2f00      	cmp	r7, #0
    d0e8:	d0d6      	beq.n	d098 <mpsc_pbuf_alloc+0x8c>
			tmp_wr_idx_val = buffer->tmp_wr_idx;
    d0ea:	6823      	ldr	r3, [r4, #0]
    d0ec:	9301      	str	r3, [sp, #4]
			cont = drop_item_locked(buffer, free_wlen,
    d0ee:	ab03      	add	r3, sp, #12
    d0f0:	aa05      	add	r2, sp, #20
    d0f2:	9904      	ldr	r1, [sp, #16]
    d0f4:	4620      	mov	r0, r4
    d0f6:	f7ff fea2 	bl	ce3e <drop_item_locked>
    d0fa:	4607      	mov	r7, r0
    d0fc:	e7cc      	b.n	d098 <mpsc_pbuf_alloc+0x8c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    d0fe:	f002 f878 	bl	f1f2 <k_is_in_isr>
    d102:	2800      	cmp	r0, #0
    d104:	d1ef      	bne.n	d0e6 <mpsc_pbuf_alloc+0xda>
	__asm__ volatile(
    d106:	9b00      	ldr	r3, [sp, #0]
    d108:	f383 8811 	msr	BASEPRI, r3
    d10c:	f3bf 8f6f 	isb	sy
			err = k_sem_take(&buffer->sem, timeout);
    d110:	f104 0028 	add.w	r0, r4, #40	; 0x28
	return z_impl_k_sem_take(sem, timeout);
    d114:	464a      	mov	r2, r9
    d116:	4653      	mov	r3, sl
    d118:	f7fd fe4a 	bl	adb0 <z_impl_k_sem_take>
	__asm__ volatile(
    d11c:	f04f 0320 	mov.w	r3, #32
    d120:	f3ef 8511 	mrs	r5, BASEPRI
    d124:	f383 8812 	msr	BASEPRI_MAX, r3
    d128:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
    d12c:	fab0 f780 	clz	r7, r0
    d130:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    d132:	e7b1      	b.n	d098 <mpsc_pbuf_alloc+0x8c>
		return NULL;
    d134:	f04f 0b00 	mov.w	fp, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    d138:	4658      	mov	r0, fp
    d13a:	b007      	add	sp, #28
    d13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d140 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    d140:	b570      	push	{r4, r5, r6, lr}
    d142:	4604      	mov	r4, r0
    d144:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    d146:	6983      	ldr	r3, [r0, #24]
    d148:	4608      	mov	r0, r1
    d14a:	4798      	blx	r3
    d14c:	f04f 0320 	mov.w	r3, #32
    d150:	f3ef 8611 	mrs	r6, BASEPRI
    d154:	f383 8812 	msr	BASEPRI_MAX, r3
    d158:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    d15c:	782b      	ldrb	r3, [r5, #0]
    d15e:	f043 0301 	orr.w	r3, r3, #1
    d162:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    d164:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
    d166:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    d168:	6923      	ldr	r3, [r4, #16]
    d16a:	f013 0f01 	tst.w	r3, #1
    d16e:	d104      	bne.n	d17a <mpsc_pbuf_commit+0x3a>
	return (i >= buffer->size) ? i - buffer->size : i;
    d170:	6a23      	ldr	r3, [r4, #32]
    d172:	4298      	cmp	r0, r3
    d174:	d304      	bcc.n	d180 <mpsc_pbuf_commit+0x40>
    d176:	1ac0      	subs	r0, r0, r3
    d178:	e002      	b.n	d180 <mpsc_pbuf_commit+0x40>
		return i & (buffer->size - 1);
    d17a:	6a23      	ldr	r3, [r4, #32]
    d17c:	3b01      	subs	r3, #1
    d17e:	4018      	ands	r0, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    d180:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    d182:	4620      	mov	r0, r4
    d184:	f7ff fe02 	bl	cd8c <max_utilization_update>
	__asm__ volatile(
    d188:	f386 8811 	msr	BASEPRI, r6
    d18c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
    d190:	bd70      	pop	{r4, r5, r6, pc}

0000d192 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    d192:	b5f0      	push	{r4, r5, r6, r7, lr}
    d194:	b083      	sub	sp, #12
    d196:	4604      	mov	r4, r0
    d198:	e02e      	b.n	d1f8 <mpsc_pbuf_claim+0x66>
		return item->skip.len;
    d19a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    d19e:	0880      	lsrs	r0, r0, #2
    d1a0:	d14e      	bne.n	d240 <mpsc_pbuf_claim+0xae>
    d1a2:	e044      	b.n	d22e <mpsc_pbuf_claim+0x9c>
		return i & (buffer->size - 1);
    d1a4:	6a22      	ldr	r2, [r4, #32]
    d1a6:	3a01      	subs	r2, #1
    d1a8:	4013      	ands	r3, r2
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);

				buffer->tmp_rd_idx =
    d1aa:	60a3      	str	r3, [r4, #8]
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
				rd_idx_inc(buffer, inc);
    d1ac:	4620      	mov	r0, r4
    d1ae:	f7ff fe00 	bl	cdb2 <rd_idx_inc>
				cont = true;
    d1b2:	2301      	movs	r3, #1
			if (skip || !is_valid(item)) {
    d1b4:	e01b      	b.n	d1ee <mpsc_pbuf_claim+0x5c>
			} else {
				item->hdr.busy = 1;
    d1b6:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    d1ba:	f041 0102 	orr.w	r1, r1, #2
    d1be:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
    d1c2:	68a7      	ldr	r7, [r4, #8]
						buffer->get_wlen(item));
    d1c4:	69a3      	ldr	r3, [r4, #24]
    d1c6:	4630      	mov	r0, r6
    d1c8:	4798      	blx	r3
	uint32_t i = idx + val;
    d1ca:	4438      	add	r0, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    d1cc:	6923      	ldr	r3, [r4, #16]
    d1ce:	f013 0f01 	tst.w	r3, #1
    d1d2:	d104      	bne.n	d1de <mpsc_pbuf_claim+0x4c>
	return (i >= buffer->size) ? i - buffer->size : i;
    d1d4:	6a23      	ldr	r3, [r4, #32]
    d1d6:	4298      	cmp	r0, r3
    d1d8:	d304      	bcc.n	d1e4 <mpsc_pbuf_claim+0x52>
    d1da:	1ac0      	subs	r0, r0, r3
    d1dc:	e002      	b.n	d1e4 <mpsc_pbuf_claim+0x52>
		return i & (buffer->size - 1);
    d1de:	6a23      	ldr	r3, [r4, #32]
    d1e0:	3b01      	subs	r3, #1
    d1e2:	4018      	ands	r0, r3
				buffer->tmp_rd_idx =
    d1e4:	60a0      	str	r0, [r4, #8]
		cont = false;
    d1e6:	2300      	movs	r3, #0
    d1e8:	e001      	b.n	d1ee <mpsc_pbuf_claim+0x5c>
    d1ea:	2300      	movs	r3, #0
			item = NULL;
    d1ec:	461e      	mov	r6, r3
    d1ee:	f385 8811 	msr	BASEPRI, r5
    d1f2:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    d1f6:	b393      	cbz	r3, d25e <mpsc_pbuf_claim+0xcc>
	__asm__ volatile(
    d1f8:	f04f 0320 	mov.w	r3, #32
    d1fc:	f3ef 8511 	mrs	r5, BASEPRI
    d200:	f383 8812 	msr	BASEPRI_MAX, r3
    d204:	f3bf 8f6f 	isb	sy
		(void)available(buffer, &a);
    d208:	a901      	add	r1, sp, #4
    d20a:	4620      	mov	r0, r4
    d20c:	f7ff fd9a 	bl	cd44 <available>
			&buffer->buf[buffer->tmp_rd_idx];
    d210:	69e3      	ldr	r3, [r4, #28]
    d212:	68a2      	ldr	r2, [r4, #8]
		item = (union mpsc_pbuf_generic *)
    d214:	eb03 0682 	add.w	r6, r3, r2, lsl #2
		if (!a || is_invalid(item)) {
    d218:	9901      	ldr	r1, [sp, #4]
    d21a:	2900      	cmp	r1, #0
    d21c:	d0e5      	beq.n	d1ea <mpsc_pbuf_claim+0x58>
	return !item->hdr.valid && !item->hdr.busy;
    d21e:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
		if (!a || is_invalid(item)) {
    d222:	f011 0103 	ands.w	r1, r1, #3
    d226:	d017      	beq.n	d258 <mpsc_pbuf_claim+0xc6>
	if (item->hdr.busy && !item->hdr.valid) {
    d228:	2902      	cmp	r1, #2
    d22a:	d0b6      	beq.n	d19a <mpsc_pbuf_claim+0x8>
	return 0;
    d22c:	2000      	movs	r0, #0
	return item->hdr.valid;
    d22e:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			if (skip || !is_valid(item)) {
    d232:	f011 0f01 	tst.w	r1, #1
    d236:	d1be      	bne.n	d1b6 <mpsc_pbuf_claim+0x24>
					skip ? skip : buffer->get_wlen(item);
    d238:	b910      	cbnz	r0, d240 <mpsc_pbuf_claim+0xae>
    d23a:	69a3      	ldr	r3, [r4, #24]
    d23c:	4630      	mov	r0, r6
    d23e:	4798      	blx	r3
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    d240:	68a3      	ldr	r3, [r4, #8]
    d242:	4601      	mov	r1, r0
	uint32_t i = idx + val;
    d244:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    d246:	6922      	ldr	r2, [r4, #16]
    d248:	f012 0f01 	tst.w	r2, #1
    d24c:	d1aa      	bne.n	d1a4 <mpsc_pbuf_claim+0x12>
	return (i >= buffer->size) ? i - buffer->size : i;
    d24e:	6a22      	ldr	r2, [r4, #32]
    d250:	4293      	cmp	r3, r2
    d252:	d3aa      	bcc.n	d1aa <mpsc_pbuf_claim+0x18>
    d254:	1a9b      	subs	r3, r3, r2
    d256:	e7a8      	b.n	d1aa <mpsc_pbuf_claim+0x18>
		cont = false;
    d258:	2300      	movs	r3, #0
			item = NULL;
    d25a:	461e      	mov	r6, r3
    d25c:	e7c7      	b.n	d1ee <mpsc_pbuf_claim+0x5c>

	return item;
}
    d25e:	4630      	mov	r0, r6
    d260:	b003      	add	sp, #12
    d262:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d264 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    d264:	b570      	push	{r4, r5, r6, lr}
    d266:	4604      	mov	r4, r0
    d268:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    d26a:	6983      	ldr	r3, [r0, #24]
    d26c:	4608      	mov	r0, r1
    d26e:	4798      	blx	r3
    d270:	4601      	mov	r1, r0
    d272:	f04f 0320 	mov.w	r3, #32
    d276:	f3ef 8611 	mrs	r6, BASEPRI
    d27a:	f383 8812 	msr	BASEPRI_MAX, r3
    d27e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    d282:	782b      	ldrb	r3, [r5, #0]
    d284:	f36f 0300 	bfc	r3, #0, #1
    d288:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    d28a:	6923      	ldr	r3, [r4, #16]
    d28c:	f013 0f02 	tst.w	r3, #2
    d290:	d00a      	beq.n	d2a8 <mpsc_pbuf_free+0x44>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    d292:	69e3      	ldr	r3, [r4, #28]
    d294:	68e2      	ldr	r2, [r4, #12]
    d296:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    d29a:	42ab      	cmp	r3, r5
    d29c:	d004      	beq.n	d2a8 <mpsc_pbuf_free+0x44>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
		}
		rd_idx_inc(buffer, wlen);
	} else {
		MPSC_PBUF_DBG(buffer, "Allocation occurred during claim");
		witem->skip.len = wlen;
    d29e:	682b      	ldr	r3, [r5, #0]
    d2a0:	f360 039f 	bfi	r3, r0, #2, #30
    d2a4:	602b      	str	r3, [r5, #0]
    d2a6:	e00a      	b.n	d2be <mpsc_pbuf_free+0x5a>
		witem->hdr.busy = 0;
    d2a8:	782b      	ldrb	r3, [r5, #0]
    d2aa:	f36f 0341 	bfc	r3, #1, #1
    d2ae:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    d2b0:	68e2      	ldr	r2, [r4, #12]
    d2b2:	68a3      	ldr	r3, [r4, #8]
    d2b4:	429a      	cmp	r2, r3
    d2b6:	d00b      	beq.n	d2d0 <mpsc_pbuf_free+0x6c>
		rd_idx_inc(buffer, wlen);
    d2b8:	4620      	mov	r0, r4
    d2ba:	f7ff fd7a 	bl	cdb2 <rd_idx_inc>
	__asm__ volatile(
    d2be:	f386 8811 	msr	BASEPRI, r6
    d2c2:	f3bf 8f6f 	isb	sy
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
    d2c6:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
    d2ca:	f7fd fd4d 	bl	ad68 <z_impl_k_sem_give>
}
    d2ce:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t i = idx + val;
    d2d0:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    d2d2:	6922      	ldr	r2, [r4, #16]
    d2d4:	f012 0f01 	tst.w	r2, #1
    d2d8:	d104      	bne.n	d2e4 <mpsc_pbuf_free+0x80>
	return (i >= buffer->size) ? i - buffer->size : i;
    d2da:	6a22      	ldr	r2, [r4, #32]
    d2dc:	4293      	cmp	r3, r2
    d2de:	d304      	bcc.n	d2ea <mpsc_pbuf_free+0x86>
    d2e0:	1a9b      	subs	r3, r3, r2
    d2e2:	e002      	b.n	d2ea <mpsc_pbuf_free+0x86>
		return i & (buffer->size - 1);
    d2e4:	6a22      	ldr	r2, [r4, #32]
    d2e6:	3a01      	subs	r2, #1
    d2e8:	4013      	ands	r3, r2
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
    d2ea:	60a3      	str	r3, [r4, #8]
    d2ec:	e7e4      	b.n	d2b8 <mpsc_pbuf_free+0x54>

0000d2ee <mpsc_pbuf_is_pending>:

bool mpsc_pbuf_is_pending(struct mpsc_pbuf_buffer *buffer)
{
    d2ee:	b500      	push	{lr}
    d2f0:	b083      	sub	sp, #12
	uint32_t a;

	(void)available(buffer, &a);
    d2f2:	a901      	add	r1, sp, #4
    d2f4:	f7ff fd26 	bl	cd44 <available>

	return a ? true : false;
}
    d2f8:	9801      	ldr	r0, [sp, #4]
    d2fa:	3800      	subs	r0, #0
    d2fc:	bf18      	it	ne
    d2fe:	2001      	movne	r0, #1
    d300:	b003      	add	sp, #12
    d302:	f85d fb04 	ldr.w	pc, [sp], #4

0000d306 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    d306:	4770      	bx	lr

0000d308 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
    d308:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    d30a:	f013 0f04 	tst.w	r3, #4
    d30e:	d001      	beq.n	d314 <log_msg_generic_get_wlen+0xc>
	return 0;
    d310:	2000      	movs	r0, #0
}
    d312:	4770      	bx	lr
		return log_msg_get_total_wlen(msg->hdr.desc);
    d314:	6803      	ldr	r3, [r0, #0]
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    d316:	f3c3 204a 	ubfx	r0, r3, #9, #11
    d31a:	eb00 5013 	add.w	r0, r0, r3, lsr #20
    d31e:	3017      	adds	r0, #23
    d320:	f020 0007 	bic.w	r0, r0, #7
    d324:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
    d326:	4770      	bx	lr

0000d328 <dummy_timestamp>:
}
    d328:	2000      	movs	r0, #0
    d32a:	4770      	bx	lr

0000d32c <msg_filter_check>:
}
    d32c:	2001      	movs	r0, #1
    d32e:	4770      	bx	lr

0000d330 <default_get_timestamp>:
{
    d330:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    d332:	f001 fbf2 	bl	eb1a <sys_clock_cycle_get_32>
}
    d336:	bd08      	pop	{r3, pc}

0000d338 <k_msleep>:
{
    d338:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    d33a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    d33e:	17c1      	asrs	r1, r0, #31
    d340:	03c9      	lsls	r1, r1, #15
    d342:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    d346:	03c0      	lsls	r0, r0, #15
    d348:	f240 33e7 	movw	r3, #999	; 0x3e7
    d34c:	18c0      	adds	r0, r0, r3
    d34e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d352:	f04f 0300 	mov.w	r3, #0
    d356:	f141 0100 	adc.w	r1, r1, #0
    d35a:	f7f2 fed1 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    d35e:	f7fe f9e9 	bl	b734 <z_impl_k_sleep>
}
    d362:	bd08      	pop	{r3, pc}

0000d364 <msg_alloc>:
{
    d364:	b508      	push	{r3, lr}
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    d366:	2200      	movs	r2, #0
    d368:	2300      	movs	r3, #0
    d36a:	f7ff fe4f 	bl	d00c <mpsc_pbuf_alloc>
}
    d36e:	bd08      	pop	{r3, pc}

0000d370 <msg_free>:
{
    d370:	b508      	push	{r3, lr}
	mpsc_pbuf_free(buffer, &msg->buf);
    d372:	f7ff ff77 	bl	d264 <mpsc_pbuf_free>
}
    d376:	bd08      	pop	{r3, pc}

0000d378 <msg_pending>:
{
    d378:	b508      	push	{r3, lr}
	return mpsc_pbuf_is_pending(buffer);
    d37a:	f7ff ffb8 	bl	d2ee <mpsc_pbuf_is_pending>
}
    d37e:	bd08      	pop	{r3, pc}

0000d380 <z_log_vprintk>:
{
    d380:	b500      	push	{lr}
    d382:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    d384:	9103      	str	r1, [sp, #12]
    d386:	9002      	str	r0, [sp, #8]
    d388:	2000      	movs	r0, #0
    d38a:	9001      	str	r0, [sp, #4]
    d38c:	9000      	str	r0, [sp, #0]
    d38e:	4603      	mov	r3, r0
    d390:	4602      	mov	r2, r0
    d392:	4601      	mov	r1, r0
    d394:	f000 f845 	bl	d422 <z_impl_z_log_msg_runtime_vcreate>
}
    d398:	b005      	add	sp, #20
    d39a:	f85d fb04 	ldr.w	pc, [sp], #4

0000d39e <z_log_notify_drop>:
 */
bool z_log_msg_pending(void);

static inline void z_log_notify_drop(const struct mpsc_pbuf_buffer *buffer,
				     const union mpsc_pbuf_generic *item)
{
    d39e:	b508      	push	{r3, lr}
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
    d3a0:	2001      	movs	r0, #1
    d3a2:	f7f4 fafb 	bl	199c <z_log_dropped>
}
    d3a6:	bd08      	pop	{r3, pc}

0000d3a8 <z_log_msg_claim>:
{
    d3a8:	b508      	push	{r3, lr}
	return z_log_msg_local_claim();
    d3aa:	f7f4 fb7d 	bl	1aa8 <z_log_msg_local_claim>
}
    d3ae:	bd08      	pop	{r3, pc}

0000d3b0 <msg_commit>:
{
    d3b0:	b508      	push	{r3, lr}
	mpsc_pbuf_commit(buffer, &m->buf);
    d3b2:	f7ff fec5 	bl	d140 <mpsc_pbuf_commit>
	z_log_msg_post_finalize();
    d3b6:	f7f4 fc15 	bl	1be4 <z_log_msg_post_finalize>
}
    d3ba:	bd08      	pop	{r3, pc}

0000d3bc <z_log_get_tag>:
}
    d3bc:	2000      	movs	r0, #0
    d3be:	4770      	bx	lr

0000d3c0 <z_cbprintf_cpy>:
{
    d3c0:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
    d3c2:	6853      	ldr	r3, [r2, #4]
    d3c4:	6896      	ldr	r6, [r2, #8]
    d3c6:	1b9b      	subs	r3, r3, r6
    d3c8:	428b      	cmp	r3, r1
    d3ca:	d30c      	bcc.n	d3e6 <z_cbprintf_cpy+0x26>
    d3cc:	460c      	mov	r4, r1
    d3ce:	4615      	mov	r5, r2
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
    d3d0:	6813      	ldr	r3, [r2, #0]
    d3d2:	460a      	mov	r2, r1
    d3d4:	4601      	mov	r1, r0
    d3d6:	1998      	adds	r0, r3, r6
    d3d8:	f000 fcf0 	bl	ddbc <memcpy>
	desc->off += len;
    d3dc:	68ab      	ldr	r3, [r5, #8]
    d3de:	4423      	add	r3, r4
    d3e0:	60ab      	str	r3, [r5, #8]
	return len;
    d3e2:	4620      	mov	r0, r4
}
    d3e4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
    d3e6:	f06f 001b 	mvn.w	r0, #27
    d3ea:	e7fb      	b.n	d3e4 <z_cbprintf_cpy+0x24>

0000d3ec <z_log_msg_finalize>:
{
    d3ec:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
    d3ee:	b188      	cbz	r0, d414 <z_log_msg_finalize+0x28>
    d3f0:	460e      	mov	r6, r1
    d3f2:	4614      	mov	r4, r2
    d3f4:	4619      	mov	r1, r3
    d3f6:	4605      	mov	r5, r0
	if (data) {
    d3f8:	b133      	cbz	r3, d408 <z_log_msg_finalize+0x1c>
		uint8_t *d = msg->data + desc.package_len;
    d3fa:	3010      	adds	r0, #16
    d3fc:	f3c2 234a 	ubfx	r3, r2, #9, #11
		memcpy(d, data, desc.data_len);
    d400:	0d12      	lsrs	r2, r2, #20
    d402:	4418      	add	r0, r3
    d404:	f000 fcda 	bl	ddbc <memcpy>
	msg->hdr.desc = desc;
    d408:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
    d40a:	606e      	str	r6, [r5, #4]
	z_log_msg_commit(msg);
    d40c:	4628      	mov	r0, r5
    d40e:	f7f4 fc2d 	bl	1c6c <z_log_msg_commit>
}
    d412:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
    d414:	f7f4 fac2 	bl	199c <z_log_dropped>
		return;
    d418:	e7fb      	b.n	d412 <z_log_msg_finalize+0x26>

0000d41a <z_log_msg_static_create>:
{
    d41a:	b508      	push	{r3, lr}
	z_impl_z_log_msg_static_create(source, desc, package, data);
    d41c:	f7f4 fcb4 	bl	1d88 <z_impl_z_log_msg_static_create>
}
    d420:	bd08      	pop	{r3, pc}

0000d422 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    d422:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d426:	b085      	sub	sp, #20
    d428:	4681      	mov	r9, r0
    d42a:	460d      	mov	r5, r1
    d42c:	4690      	mov	r8, r2
    d42e:	461e      	mov	r6, r3
    d430:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    d434:	9f10      	ldr	r7, [sp, #64]	; 0x40
	int plen;

	if (fmt) {
    d436:	b3a7      	cbz	r7, d4a2 <z_impl_z_log_msg_runtime_vcreate+0x80>
		va_list ap2;

		va_copy(ap2, ap);
    d438:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d43a:	9303      	str	r3, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    d43c:	9300      	str	r3, [sp, #0]
    d43e:	463b      	mov	r3, r7
    d440:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    d442:	2110      	movs	r1, #16
    d444:	2000      	movs	r0, #0
    d446:	f7f3 f8c5 	bl	5d4 <cbvprintf_package>
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    d44a:	4682      	mov	sl, r0
    d44c:	eb00 030b 	add.w	r3, r0, fp
    d450:	3317      	adds	r3, #23
    d452:	f023 0307 	bic.w	r3, r3, #7
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    d456:	2400      	movs	r4, #0
    d458:	f36f 0400 	bfc	r4, #0, #1
    d45c:	f36f 0441 	bfc	r4, #1, #1
    d460:	f36f 0482 	bfc	r4, #2, #1
    d464:	f369 04c5 	bfi	r4, r9, #3, #3
    d468:	f368 1488 	bfi	r4, r8, #6, #3
    d46c:	f360 2453 	bfi	r4, r0, #9, #11
    d470:	f36b 541f 	bfi	r4, fp, #20, #12
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
    d474:	0898      	lsrs	r0, r3, #2
    d476:	f7f4 fb0f 	bl	1a98 <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    d47a:	4680      	mov	r8, r0
    d47c:	b140      	cbz	r0, d490 <z_impl_z_log_msg_runtime_vcreate+0x6e>
    d47e:	3010      	adds	r0, #16
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    d480:	b137      	cbz	r7, d490 <z_impl_z_log_msg_runtime_vcreate+0x6e>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    d482:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d484:	9300      	str	r3, [sp, #0]
    d486:	463b      	mov	r3, r7
    d488:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    d48a:	4651      	mov	r1, sl
    d48c:	f7f3 f8a2 	bl	5d4 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    d490:	4633      	mov	r3, r6
    d492:	4622      	mov	r2, r4
    d494:	4629      	mov	r1, r5
    d496:	4640      	mov	r0, r8
    d498:	f7ff ffa8 	bl	d3ec <z_log_msg_finalize>
	}
}
    d49c:	b005      	add	sp, #20
    d49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
    d4a2:	2000      	movs	r0, #0
    d4a4:	e7d1      	b.n	d44a <z_impl_z_log_msg_runtime_vcreate+0x28>

0000d4a6 <buffer_write>:
{
    d4a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d4a8:	4607      	mov	r7, r0
    d4aa:	460d      	mov	r5, r1
    d4ac:	4614      	mov	r4, r2
    d4ae:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    d4b0:	4632      	mov	r2, r6
    d4b2:	4621      	mov	r1, r4
    d4b4:	4628      	mov	r0, r5
    d4b6:	47b8      	blx	r7
		buf += processed;
    d4b8:	4405      	add	r5, r0
	} while (len != 0);
    d4ba:	1a24      	subs	r4, r4, r0
    d4bc:	d1f8      	bne.n	d4b0 <buffer_write+0xa>
}
    d4be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d4c0 <cbvprintf>:
{
    d4c0:	b510      	push	{r4, lr}
    d4c2:	b082      	sub	sp, #8
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    d4c4:	2400      	movs	r4, #0
    d4c6:	9400      	str	r4, [sp, #0]
    d4c8:	f7f3 fe74 	bl	11b4 <z_cbvprintf_impl>
}
    d4cc:	b002      	add	sp, #8
    d4ce:	bd10      	pop	{r4, pc}

0000d4d0 <color_prefix>:
{
    d4d0:	b508      	push	{r3, lr}
    d4d2:	4613      	mov	r3, r2
	color_print(output, color, true, level);
    d4d4:	2201      	movs	r2, #1
    d4d6:	f7f4 fd5d 	bl	1f94 <color_print>
}
    d4da:	bd08      	pop	{r3, pc}

0000d4dc <color_postfix>:
{
    d4dc:	b508      	push	{r3, lr}
    d4de:	4613      	mov	r3, r2
	color_print(output, color, false, level);
    d4e0:	2200      	movs	r2, #0
    d4e2:	f7f4 fd57 	bl	1f94 <color_print>
}
    d4e6:	bd08      	pop	{r3, pc}

0000d4e8 <postfix_print>:
{
    d4e8:	b538      	push	{r3, r4, r5, lr}
    d4ea:	4605      	mov	r5, r0
    d4ec:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
    d4ee:	f001 0101 	and.w	r1, r1, #1
    d4f2:	f7ff fff3 	bl	d4dc <color_postfix>
	newline_print(output, flags);
    d4f6:	4621      	mov	r1, r4
    d4f8:	4628      	mov	r0, r5
    d4fa:	f7f4 fdd1 	bl	20a0 <newline_print>
}
    d4fe:	bd38      	pop	{r3, r4, r5, pc}

0000d500 <log_msg_hexdump>:
{
    d500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d504:	b083      	sub	sp, #12
    d506:	4680      	mov	r8, r0
    d508:	460e      	mov	r6, r1
    d50a:	4615      	mov	r5, r2
    d50c:	461f      	mov	r7, r3
    d50e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    d512:	462c      	mov	r4, r5
    d514:	2d10      	cmp	r5, #16
    d516:	bf28      	it	cs
    d518:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    d51a:	f8cd 9000 	str.w	r9, [sp]
    d51e:	463b      	mov	r3, r7
    d520:	4622      	mov	r2, r4
    d522:	4631      	mov	r1, r6
    d524:	4640      	mov	r0, r8
    d526:	f7f4 fdcf 	bl	20c8 <hexdump_line_print>
		data += length;
    d52a:	4426      	add	r6, r4
	} while (len);
    d52c:	1b2d      	subs	r5, r5, r4
    d52e:	d1f0      	bne.n	d512 <log_msg_hexdump+0x12>
}
    d530:	b003      	add	sp, #12
    d532:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000d536 <log_output_flush>:
{
    d536:	b510      	push	{r4, lr}
    d538:	4604      	mov	r4, r0
		     output->control_block->offset,
    d53a:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    d53c:	6853      	ldr	r3, [r2, #4]
    d53e:	6812      	ldr	r2, [r2, #0]
    d540:	6881      	ldr	r1, [r0, #8]
    d542:	6800      	ldr	r0, [r0, #0]
    d544:	f7ff ffaf 	bl	d4a6 <buffer_write>
	output->control_block->offset = 0;
    d548:	6863      	ldr	r3, [r4, #4]
    d54a:	2200      	movs	r2, #0
    d54c:	601a      	str	r2, [r3, #0]
}
    d54e:	bd10      	pop	{r4, pc}

0000d550 <out_func>:
{
    d550:	b538      	push	{r3, r4, r5, lr}
    d552:	4605      	mov	r5, r0
    d554:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    d556:	684b      	ldr	r3, [r1, #4]
    d558:	681a      	ldr	r2, [r3, #0]
    d55a:	68cb      	ldr	r3, [r1, #12]
    d55c:	429a      	cmp	r2, r3
    d55e:	d00f      	beq.n	d580 <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
    d560:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    d562:	f3bf 8f5b 	dmb	ish
    d566:	e853 2f00 	ldrex	r2, [r3]
    d56a:	1c51      	adds	r1, r2, #1
    d56c:	e843 1000 	strex	r0, r1, [r3]
    d570:	2800      	cmp	r0, #0
    d572:	d1f8      	bne.n	d566 <out_func+0x16>
    d574:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    d578:	68a3      	ldr	r3, [r4, #8]
    d57a:	549d      	strb	r5, [r3, r2]
}
    d57c:	2000      	movs	r0, #0
    d57e:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
    d580:	4608      	mov	r0, r1
    d582:	f7ff ffd8 	bl	d536 <log_output_flush>
    d586:	e7eb      	b.n	d560 <out_func+0x10>

0000d588 <cr_out_func>:
{
    d588:	b538      	push	{r3, r4, r5, lr}
    d58a:	4604      	mov	r4, r0
    d58c:	460d      	mov	r5, r1
	if (c == '\n') {
    d58e:	280a      	cmp	r0, #10
    d590:	d005      	beq.n	d59e <cr_out_func+0x16>
	out_func(c, ctx);
    d592:	4629      	mov	r1, r5
    d594:	4620      	mov	r0, r4
    d596:	f7ff ffdb 	bl	d550 <out_func>
}
    d59a:	2000      	movs	r0, #0
    d59c:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
    d59e:	200d      	movs	r0, #13
    d5a0:	f7ff ffd6 	bl	d550 <out_func>
    d5a4:	e7f5      	b.n	d592 <cr_out_func+0xa>

0000d5a6 <k_msleep>:
{
    d5a6:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    d5a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    d5ac:	17c1      	asrs	r1, r0, #31
    d5ae:	03c9      	lsls	r1, r1, #15
    d5b0:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    d5b4:	03c0      	lsls	r0, r0, #15
    d5b6:	f240 33e7 	movw	r3, #999	; 0x3e7
    d5ba:	18c0      	adds	r0, r0, r3
    d5bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d5c0:	f04f 0300 	mov.w	r3, #0
    d5c4:	f141 0100 	adc.w	r1, r1, #0
    d5c8:	f7f2 fd9a 	bl	100 <__aeabi_uldivmod>
    d5cc:	f7fe f8b2 	bl	b734 <z_impl_k_sleep>
}
    d5d0:	bd08      	pop	{r3, pc}

0000d5d2 <log_backend_uart_init>:
}
    d5d2:	4770      	bx	lr

0000d5d4 <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
    d5d4:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    d5d6:	f001 021f 	and.w	r2, r1, #31
    d5da:	2301      	movs	r3, #1
    d5dc:	4093      	lsls	r3, r2
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d5de:	0949      	lsrs	r1, r1, #5
    d5e0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    d5e4:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d5e6:	f3bf 8f5b 	dmb	ish
    d5ea:	e850 2f00 	ldrex	r2, [r0]
    d5ee:	ea02 0c01 	and.w	ip, r2, r1
    d5f2:	e840 ce00 	strex	lr, ip, [r0]
    d5f6:	f1be 0f00 	cmp.w	lr, #0
    d5fa:	d1f6      	bne.n	d5ea <atomic_test_and_clear_bit+0x16>
    d5fc:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    d600:	4213      	tst	r3, r2
}
    d602:	bf14      	ite	ne
    d604:	2001      	movne	r0, #1
    d606:	2000      	moveq	r0, #0
    d608:	f85d fb04 	ldr.w	pc, [sp], #4

0000d60c <atomic_set_bit>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    d60c:	f001 021f 	and.w	r2, r1, #31
    d610:	2301      	movs	r3, #1
    d612:	4093      	lsls	r3, r2

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d614:	0949      	lsrs	r1, r1, #5
    d616:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d61a:	f3bf 8f5b 	dmb	ish
    d61e:	e850 2f00 	ldrex	r2, [r0]
    d622:	431a      	orrs	r2, r3
    d624:	e840 2100 	strex	r1, r2, [r0]
    d628:	2900      	cmp	r1, #0
    d62a:	d1f8      	bne.n	d61e <atomic_set_bit+0x12>
    d62c:	f3bf 8f5b 	dmb	ish
}
    d630:	4770      	bx	lr

0000d632 <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
    d632:	2000      	movs	r0, #0
    d634:	4770      	bx	lr

0000d636 <usb_vbus_set>:
}
    d636:	2000      	movs	r0, #0
    d638:	4770      	bx	lr

0000d63a <reset_endpoint>:
{
    d63a:	b510      	push	{r4, lr}
    d63c:	b082      	sub	sp, #8
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    d63e:	7884      	ldrb	r4, [r0, #2]
    d640:	f88d 4000 	strb.w	r4, [sp]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    d644:	78c3      	ldrb	r3, [r0, #3]
    d646:	f003 0303 	and.w	r3, r3, #3
    d64a:	f88d 3004 	strb.w	r3, [sp, #4]
	usb_cancel_transfer(ep_cfg.ep_addr);
    d64e:	4620      	mov	r0, r4
    d650:	f7f6 fb16 	bl	3c80 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    d654:	4620      	mov	r0, r4
    d656:	f7f5 fa47 	bl	2ae8 <disable_endpoint>
}
    d65a:	fab0 f080 	clz	r0, r0
    d65e:	0940      	lsrs	r0, r0, #5
    d660:	b002      	add	sp, #8
    d662:	bd10      	pop	{r4, pc}

0000d664 <usb_eps_reconfigure>:
{
    d664:	b508      	push	{r3, lr}
	if (cur_alt_setting != alt_setting) {
    d666:	4291      	cmp	r1, r2
    d668:	d002      	beq.n	d670 <usb_eps_reconfigure+0xc>
		ret = reset_endpoint(ep_desc);
    d66a:	f7ff ffe6 	bl	d63a <reset_endpoint>
}
    d66e:	bd08      	pop	{r3, pc}
		ret = set_endpoint(ep_desc);
    d670:	f7f5 fac6 	bl	2c00 <set_endpoint>
    d674:	e7fb      	b.n	d66e <usb_eps_reconfigure+0xa>

0000d676 <usb_handle_std_interface_req>:
{
    d676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d678:	4604      	mov	r4, r0
    d67a:	460e      	mov	r6, r1
    d67c:	4615      	mov	r5, r2
	uint8_t *data = *data_buf;
    d67e:	6817      	ldr	r7, [r2, #0]
	if (!is_device_configured() ||
    d680:	f7f5 f8f0 	bl	2864 <is_device_configured>
    d684:	b900      	cbnz	r0, d688 <usb_handle_std_interface_req+0x12>
}
    d686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    d688:	7920      	ldrb	r0, [r4, #4]
    d68a:	f7f5 f8f5 	bl	2878 <is_interface_valid>
	if (!is_device_configured() ||
    d68e:	2800      	cmp	r0, #0
    d690:	d0f9      	beq.n	d686 <usb_handle_std_interface_req+0x10>
	if (usb_reqtype_is_to_host(setup)) {
    d692:	f994 3000 	ldrsb.w	r3, [r4]
    d696:	2b00      	cmp	r3, #0
    d698:	db04      	blt.n	d6a4 <usb_handle_std_interface_req+0x2e>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    d69a:	7863      	ldrb	r3, [r4, #1]
    d69c:	2b0b      	cmp	r3, #11
    d69e:	d013      	beq.n	d6c8 <usb_handle_std_interface_req+0x52>
	return false;
    d6a0:	2000      	movs	r0, #0
    d6a2:	e7f0      	b.n	d686 <usb_handle_std_interface_req+0x10>
		switch (setup->bRequest) {
    d6a4:	7863      	ldrb	r3, [r4, #1]
    d6a6:	b11b      	cbz	r3, d6b0 <usb_handle_std_interface_req+0x3a>
    d6a8:	2b0a      	cmp	r3, #10
    d6aa:	d007      	beq.n	d6bc <usb_handle_std_interface_req+0x46>
    d6ac:	2000      	movs	r0, #0
    d6ae:	e7ea      	b.n	d686 <usb_handle_std_interface_req+0x10>
			data[0] = 0U;
    d6b0:	2300      	movs	r3, #0
    d6b2:	703b      	strb	r3, [r7, #0]
			data[1] = 0U;
    d6b4:	707b      	strb	r3, [r7, #1]
			*len = 2;
    d6b6:	2302      	movs	r3, #2
    d6b8:	6033      	str	r3, [r6, #0]
			return true;
    d6ba:	e7e4      	b.n	d686 <usb_handle_std_interface_req+0x10>
			return usb_get_interface(setup, len, data_buf);
    d6bc:	462a      	mov	r2, r5
    d6be:	4631      	mov	r1, r6
    d6c0:	4620      	mov	r0, r4
    d6c2:	f7f5 f8af 	bl	2824 <usb_get_interface>
    d6c6:	e7de      	b.n	d686 <usb_handle_std_interface_req+0x10>
			return usb_set_interface(setup);
    d6c8:	4620      	mov	r0, r4
    d6ca:	f7f5 fb55 	bl	2d78 <usb_set_interface>
    d6ce:	e7da      	b.n	d686 <usb_handle_std_interface_req+0x10>

0000d6d0 <usb_get_status_endpoint>:
{
    d6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d6d2:	460e      	mov	r6, r1
	uint8_t ep = setup->wIndex;
    d6d4:	7904      	ldrb	r4, [r0, #4]
	uint8_t *data = *data_buf;
    d6d6:	6817      	ldr	r7, [r2, #0]
	if (!is_ep_valid(ep)) {
    d6d8:	4620      	mov	r0, r4
    d6da:	f7f5 f8df 	bl	289c <is_ep_valid>
    d6de:	4605      	mov	r5, r0
    d6e0:	b130      	cbz	r0, d6f0 <usb_get_status_endpoint+0x20>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    d6e2:	f034 0380 	bics.w	r3, r4, #128	; 0x80
    d6e6:	d005      	beq.n	d6f4 <usb_get_status_endpoint+0x24>
    d6e8:	f7f5 f8bc 	bl	2864 <is_device_configured>
    d6ec:	b910      	cbnz	r0, d6f4 <usb_get_status_endpoint+0x24>
	return false;
    d6ee:	4605      	mov	r5, r0
}
    d6f0:	4628      	mov	r0, r5
    d6f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_dc_ep_is_stalled(ep, &data[0]);
    d6f4:	4639      	mov	r1, r7
    d6f6:	4620      	mov	r0, r4
    d6f8:	f7f9 fbec 	bl	6ed4 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    d6fc:	2300      	movs	r3, #0
    d6fe:	707b      	strb	r3, [r7, #1]
		*len = 2;
    d700:	2302      	movs	r3, #2
    d702:	6033      	str	r3, [r6, #0]
		return true;
    d704:	e7f4      	b.n	d6f0 <usb_get_status_endpoint+0x20>

0000d706 <usb_handle_std_endpoint_req>:
{
    d706:	b508      	push	{r3, lr}
	if (usb_reqtype_is_to_host(setup)) {
    d708:	f990 3000 	ldrsb.w	r3, [r0]
    d70c:	2b00      	cmp	r3, #0
    d70e:	db06      	blt.n	d71e <usb_handle_std_endpoint_req+0x18>
		switch (setup->bRequest) {
    d710:	7843      	ldrb	r3, [r0, #1]
    d712:	2b01      	cmp	r3, #1
    d714:	d00a      	beq.n	d72c <usb_handle_std_endpoint_req+0x26>
    d716:	2b03      	cmp	r3, #3
    d718:	d010      	beq.n	d73c <usb_handle_std_endpoint_req+0x36>
    d71a:	2000      	movs	r0, #0
    d71c:	e002      	b.n	d724 <usb_handle_std_endpoint_req+0x1e>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    d71e:	7843      	ldrb	r3, [r0, #1]
    d720:	b10b      	cbz	r3, d726 <usb_handle_std_endpoint_req+0x20>
	return false;
    d722:	2000      	movs	r0, #0
}
    d724:	bd08      	pop	{r3, pc}
			return usb_get_status_endpoint(setup, len, data_buf);
    d726:	f7ff ffd3 	bl	d6d0 <usb_get_status_endpoint>
    d72a:	e7fb      	b.n	d724 <usb_handle_std_endpoint_req+0x1e>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    d72c:	8843      	ldrh	r3, [r0, #2]
    d72e:	b10b      	cbz	r3, d734 <usb_handle_std_endpoint_req+0x2e>
	return false;
    d730:	2000      	movs	r0, #0
    d732:	e7f7      	b.n	d724 <usb_handle_std_endpoint_req+0x1e>
				return usb_halt_endpoint_req(setup, false);
    d734:	2100      	movs	r1, #0
    d736:	f7f5 fa33 	bl	2ba0 <usb_halt_endpoint_req>
    d73a:	e7f3      	b.n	d724 <usb_handle_std_endpoint_req+0x1e>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    d73c:	8843      	ldrh	r3, [r0, #2]
    d73e:	b10b      	cbz	r3, d744 <usb_handle_std_endpoint_req+0x3e>
	return false;
    d740:	2000      	movs	r0, #0
    d742:	e7ef      	b.n	d724 <usb_handle_std_endpoint_req+0x1e>
				return usb_halt_endpoint_req(setup, true);
    d744:	2101      	movs	r1, #1
    d746:	f7f5 fa2b 	bl	2ba0 <usb_halt_endpoint_req>
    d74a:	e7eb      	b.n	d724 <usb_handle_std_endpoint_req+0x1e>

0000d74c <usb_write>:
{
    d74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d750:	4681      	mov	r9, r0
    d752:	4688      	mov	r8, r1
    d754:	4617      	mov	r7, r2
    d756:	461e      	mov	r6, r3
	int tries = CONFIG_USB_NUMOF_EP_WRITE_RETRIES;
    d758:	2503      	movs	r5, #3
    d75a:	e000      	b.n	d75e <usb_write+0x12>
	} while (ret == -EAGAIN && tries--);
    d75c:	461d      	mov	r5, r3
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    d75e:	4633      	mov	r3, r6
    d760:	463a      	mov	r2, r7
    d762:	4641      	mov	r1, r8
    d764:	4648      	mov	r0, r9
    d766:	f7f9 fc07 	bl	6f78 <usb_dc_ep_write>
    d76a:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    d76c:	f110 0f0b 	cmn.w	r0, #11
    d770:	d104      	bne.n	d77c <usb_write+0x30>
	z_impl_k_yield();
    d772:	f7fd ff4d 	bl	b610 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    d776:	1e6b      	subs	r3, r5, #1
    d778:	2d00      	cmp	r5, #0
    d77a:	d1ef      	bne.n	d75c <usb_write+0x10>
}
    d77c:	4620      	mov	r0, r4
    d77e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000d782 <ascii7_to_utf16le>:
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    d782:	f810 2b02 	ldrb.w	r2, [r0], #2
    d786:	1ed3      	subs	r3, r2, #3
	int ascii_idx_max = USB_BSTRING_ASCII_IDX_MAX(str_descr->bLength);
    d788:	0852      	lsrs	r2, r2, #1
    d78a:	3a02      	subs	r2, #2
	for (int i = idx_max; i >= 0; i -= 2) {
    d78c:	e008      	b.n	d7a0 <ascii7_to_utf16le+0x1e>
		buf[i] = 0U;
    d78e:	2100      	movs	r1, #0
    d790:	54c1      	strb	r1, [r0, r3]
		buf[i - 1] = buf[ascii_idx_max--];
    d792:	1e59      	subs	r1, r3, #1
    d794:	f810 c002 	ldrb.w	ip, [r0, r2]
    d798:	f800 c001 	strb.w	ip, [r0, r1]
	for (int i = idx_max; i >= 0; i -= 2) {
    d79c:	3b02      	subs	r3, #2
		buf[i - 1] = buf[ascii_idx_max--];
    d79e:	3a01      	subs	r2, #1
	for (int i = idx_max; i >= 0; i -= 2) {
    d7a0:	2b00      	cmp	r3, #0
    d7a2:	daf4      	bge.n	d78e <ascii7_to_utf16le+0xc>
}
    d7a4:	4770      	bx	lr

0000d7a6 <usb_validate_ep_cfg_data>:
{
    d7a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d7aa:	b083      	sub	sp, #12
    d7ac:	4605      	mov	r5, r0
    d7ae:	4689      	mov	r9, r1
    d7b0:	4690      	mov	r8, r2
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    d7b2:	2700      	movs	r7, #0
    d7b4:	e047      	b.n	d846 <usb_validate_ep_cfg_data+0xa0>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    d7b6:	f8d8 2000 	ldr.w	r2, [r8]
    d7ba:	f104 0110 	add.w	r1, r4, #16
    d7be:	2301      	movs	r3, #1
    d7c0:	408b      	lsls	r3, r1
    d7c2:	421a      	tst	r2, r3
    d7c4:	d108      	bne.n	d7d8 <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    d7c6:	f064 037f 	orn	r3, r4, #127	; 0x7f
    d7ca:	f88d 3000 	strb.w	r3, [sp]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    d7ce:	4668      	mov	r0, sp
    d7d0:	f7f9 fa40 	bl	6c54 <usb_dc_ep_check_cap>
    d7d4:	4603      	mov	r3, r0
    d7d6:	b1d0      	cbz	r0, d80e <usb_validate_ep_cfg_data+0x68>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    d7d8:	3401      	adds	r4, #1
    d7da:	b2e4      	uxtb	r4, r4
    d7dc:	2c0f      	cmp	r4, #15
    d7de:	d831      	bhi.n	d844 <usb_validate_ep_cfg_data+0x9e>
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    d7e0:	78eb      	ldrb	r3, [r5, #3]
    d7e2:	f003 0303 	and.w	r3, r3, #3
    d7e6:	f88d 3004 	strb.w	r3, [sp, #4]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    d7ea:	88ab      	ldrh	r3, [r5, #4]
    d7ec:	f8ad 3002 	strh.w	r3, [sp, #2]
			ep_cfg.ep_addr = ep_descr->bEndpointAddress;
    d7f0:	78ab      	ldrb	r3, [r5, #2]
    d7f2:	f88d 3000 	strb.w	r3, [sp]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    d7f6:	f013 0f80 	tst.w	r3, #128	; 0x80
    d7fa:	d1dc      	bne.n	d7b6 <usb_validate_ep_cfg_data+0x10>
				if ((*requested_ep & (1U << (idx)))) {
    d7fc:	f8d8 2000 	ldr.w	r2, [r8]
    d800:	2301      	movs	r3, #1
    d802:	40a3      	lsls	r3, r4
    d804:	421a      	tst	r2, r3
    d806:	d1e7      	bne.n	d7d8 <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = idx;
    d808:	f88d 4000 	strb.w	r4, [sp]
    d80c:	e7df      	b.n	d7ce <usb_validate_ep_cfg_data+0x28>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    d80e:	f89d 2000 	ldrb.w	r2, [sp]
    d812:	70aa      	strb	r2, [r5, #2]
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    d814:	7132      	strb	r2, [r6, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    d816:	f012 0f80 	tst.w	r2, #128	; 0x80
    d81a:	d10a      	bne.n	d832 <usb_validate_ep_cfg_data+0x8c>
					*requested_ep |= (1U << idx);
    d81c:	f8d8 2000 	ldr.w	r2, [r8]
    d820:	2101      	movs	r1, #1
    d822:	40a1      	lsls	r1, r4
    d824:	430a      	orrs	r2, r1
    d826:	f8c8 2000 	str.w	r2, [r8]
}
    d82a:	4618      	mov	r0, r3
    d82c:	b003      	add	sp, #12
    d82e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					*requested_ep |= (1U << (idx + 16U));
    d832:	f8d8 2000 	ldr.w	r2, [r8]
    d836:	3410      	adds	r4, #16
    d838:	2101      	movs	r1, #1
    d83a:	40a1      	lsls	r1, r4
    d83c:	430a      	orrs	r2, r1
    d83e:	f8c8 2000 	str.w	r2, [r8]
    d842:	e7f2      	b.n	d82a <usb_validate_ep_cfg_data+0x84>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    d844:	3701      	adds	r7, #1
    d846:	f899 301c 	ldrb.w	r3, [r9, #28]
    d84a:	429f      	cmp	r7, r3
    d84c:	d209      	bcs.n	d862 <usb_validate_ep_cfg_data+0xbc>
		struct usb_ep_cfg_data *ep_data = cfg_data->endpoint;
    d84e:	f8d9 6020 	ldr.w	r6, [r9, #32]
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    d852:	78aa      	ldrb	r2, [r5, #2]
    d854:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
    d858:	7933      	ldrb	r3, [r6, #4]
    d85a:	429a      	cmp	r2, r3
    d85c:	d1f2      	bne.n	d844 <usb_validate_ep_cfg_data+0x9e>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    d85e:	2401      	movs	r4, #1
    d860:	e7bc      	b.n	d7dc <usb_validate_ep_cfg_data+0x36>
	return -1;
    d862:	f04f 33ff 	mov.w	r3, #4294967295
    d866:	e7e0      	b.n	d82a <usb_validate_ep_cfg_data+0x84>

0000d868 <usb_get_dev_data_by_cfg>:
	return list->head;
    d868:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    d86a:	b110      	cbz	r0, d872 <usb_get_dev_data_by_cfg+0xa>
    d86c:	3804      	subs	r0, #4
    d86e:	e000      	b.n	d872 <usb_get_dev_data_by_cfg+0xa>
    d870:	4618      	mov	r0, r3
    d872:	b150      	cbz	r0, d88a <usb_get_dev_data_by_cfg+0x22>
		const struct device *dev = dev_data->dev;
    d874:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg_cur = dev->config;
    d876:	685b      	ldr	r3, [r3, #4]

		if (cfg_cur == cfg) {
    d878:	428b      	cmp	r3, r1
    d87a:	d006      	beq.n	d88a <usb_get_dev_data_by_cfg+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
    d87c:	1d03      	adds	r3, r0, #4
    d87e:	d0f7      	beq.n	d870 <usb_get_dev_data_by_cfg+0x8>
	return node->next;
    d880:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    d882:	2800      	cmp	r0, #0
    d884:	d0f5      	beq.n	d872 <usb_get_dev_data_by_cfg+0xa>
    d886:	3804      	subs	r0, #4
    d888:	e7f3      	b.n	d872 <usb_get_dev_data_by_cfg+0xa>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
    d88a:	4770      	bx	lr

0000d88c <usb_get_dev_data_by_iface>:
	return list->head;
    d88c:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    d88e:	b110      	cbz	r0, d896 <usb_get_dev_data_by_iface+0xa>
    d890:	3804      	subs	r0, #4
    d892:	e000      	b.n	d896 <usb_get_dev_data_by_iface+0xa>
    d894:	4618      	mov	r0, r3
    d896:	b160      	cbz	r0, d8b2 <usb_get_dev_data_by_iface+0x26>
		const struct device *dev = dev_data->dev;
    d898:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config;
    d89a:	685b      	ldr	r3, [r3, #4]
		const struct usb_if_descriptor *if_desc =
    d89c:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    d89e:	789b      	ldrb	r3, [r3, #2]
    d8a0:	428b      	cmp	r3, r1
    d8a2:	d006      	beq.n	d8b2 <usb_get_dev_data_by_iface+0x26>
Z_GENLIST_PEEK_NEXT(slist, snode)
    d8a4:	1d03      	adds	r3, r0, #4
    d8a6:	d0f5      	beq.n	d894 <usb_get_dev_data_by_iface+0x8>
	return node->next;
    d8a8:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    d8aa:	2800      	cmp	r0, #0
    d8ac:	d0f3      	beq.n	d896 <usb_get_dev_data_by_iface+0xa>
    d8ae:	3804      	subs	r0, #4
    d8b0:	e7f1      	b.n	d896 <usb_get_dev_data_by_iface+0xa>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
    d8b2:	4770      	bx	lr

0000d8b4 <usb_get_dev_data_by_ep>:
	return list->head;
    d8b4:	6800      	ldr	r0, [r0, #0]

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    d8b6:	b100      	cbz	r0, d8ba <usb_get_dev_data_by_ep+0x6>
    d8b8:	3804      	subs	r0, #4
    d8ba:	b1b0      	cbz	r0, d8ea <usb_get_dev_data_by_ep+0x36>
{
    d8bc:	b430      	push	{r4, r5}
    d8be:	e003      	b.n	d8c8 <usb_get_dev_data_by_ep+0x14>
	return node->next;
    d8c0:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    d8c2:	b100      	cbz	r0, d8c6 <usb_get_dev_data_by_ep+0x12>
    d8c4:	3804      	subs	r0, #4
    d8c6:	b170      	cbz	r0, d8e6 <usb_get_dev_data_by_ep+0x32>
		const struct device *dev = dev_data->dev;
    d8c8:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config;
    d8ca:	685c      	ldr	r4, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    d8cc:	6a25      	ldr	r5, [r4, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    d8ce:	2300      	movs	r3, #0
    d8d0:	7f22      	ldrb	r2, [r4, #28]
    d8d2:	429a      	cmp	r2, r3
    d8d4:	d9f4      	bls.n	d8c0 <usb_get_dev_data_by_ep+0xc>
			if (ep_data[i].ep_addr == ep) {
    d8d6:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    d8da:	7912      	ldrb	r2, [r2, #4]
    d8dc:	428a      	cmp	r2, r1
    d8de:	d002      	beq.n	d8e6 <usb_get_dev_data_by_ep+0x32>
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    d8e0:	3301      	adds	r3, #1
    d8e2:	b2db      	uxtb	r3, r3
    d8e4:	e7f4      	b.n	d8d0 <usb_get_dev_data_by_ep+0x1c>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    d8e6:	bc30      	pop	{r4, r5}
    d8e8:	4770      	bx	lr
    d8ea:	4770      	bx	lr

0000d8ec <usb_transfer_is_busy>:
{
    d8ec:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    d8ee:	f7f5 ff63 	bl	37b8 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
    d8f2:	b128      	cbz	r0, d900 <usb_transfer_is_busy+0x14>
    d8f4:	6843      	ldr	r3, [r0, #4]
    d8f6:	f113 0f10 	cmn.w	r3, #16
    d8fa:	d003      	beq.n	d904 <usb_transfer_is_busy+0x18>
	return false;
    d8fc:	2000      	movs	r0, #0
}
    d8fe:	bd08      	pop	{r3, pc}
	return false;
    d900:	2000      	movs	r0, #0
    d902:	e7fc      	b.n	d8fe <usb_transfer_is_busy+0x12>
		return true;
    d904:	2001      	movs	r0, #1
    d906:	e7fa      	b.n	d8fe <usb_transfer_is_busy+0x12>

0000d908 <cdc_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    d908:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
    d90a:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    d90c:	1c4b      	adds	r3, r1, #1
    d90e:	b2db      	uxtb	r3, r3
    d910:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
    d914:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
    d916:	f800 1c06 	strb.w	r1, [r0, #-6]
}
    d91a:	4770      	bx	lr

0000d91c <cdc_acm_irq_callback_work_handler>:
{
    d91c:	b508      	push	{r3, lr}
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
    d91e:	f850 3c08 	ldr.w	r3, [r0, #-8]
    d922:	f850 1c04 	ldr.w	r1, [r0, #-4]
    d926:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    d92a:	4798      	blx	r3
}
    d92c:	bd08      	pop	{r3, pc}

0000d92e <cdc_acm_irq_tx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    d92e:	6903      	ldr	r3, [r0, #16]
	dev_data->tx_irq_ena = false;
    d930:	2200      	movs	r2, #0
    d932:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
    d936:	4770      	bx	lr

0000d938 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    d938:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
    d93a:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
    d93e:	b122      	cbz	r2, d94a <cdc_acm_irq_tx_ready+0x12>
    d940:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    d944:	b91b      	cbnz	r3, d94e <cdc_acm_irq_tx_ready+0x16>
	return 0;
    d946:	2000      	movs	r0, #0
    d948:	4770      	bx	lr
    d94a:	2000      	movs	r0, #0
    d94c:	4770      	bx	lr
		return 1;
    d94e:	2001      	movs	r0, #1
}
    d950:	4770      	bx	lr

0000d952 <cdc_acm_irq_rx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    d952:	6903      	ldr	r3, [r0, #16]
	dev_data->rx_irq_ena = false;
    d954:	2200      	movs	r2, #0
    d956:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
}
    d95a:	4770      	bx	lr

0000d95c <cdc_acm_irq_rx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    d95c:	6903      	ldr	r3, [r0, #16]
	if (dev_data->rx_ready) {
    d95e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
    d962:	b90b      	cbnz	r3, d968 <cdc_acm_irq_rx_ready+0xc>
	return 0;
    d964:	2000      	movs	r0, #0
    d966:	4770      	bx	lr
		return 1;
    d968:	2001      	movs	r0, #1
}
    d96a:	4770      	bx	lr

0000d96c <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    d96c:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
    d96e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
    d972:	b112      	cbz	r2, d97a <cdc_acm_irq_is_pending+0xe>
    d974:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
    d978:	b93a      	cbnz	r2, d98a <cdc_acm_irq_is_pending+0x1e>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
    d97a:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
    d97e:	b132      	cbz	r2, d98e <cdc_acm_irq_is_pending+0x22>
    d980:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
    d984:	b92b      	cbnz	r3, d992 <cdc_acm_irq_is_pending+0x26>
		return 0;
    d986:	2000      	movs	r0, #0
    d988:	4770      	bx	lr
		return 1;
    d98a:	2001      	movs	r0, #1
    d98c:	4770      	bx	lr
		return 0;
    d98e:	2000      	movs	r0, #0
    d990:	4770      	bx	lr
		return 1;
    d992:	2001      	movs	r0, #1
}
    d994:	4770      	bx	lr

0000d996 <cdc_acm_irq_update>:
}
    d996:	2001      	movs	r0, #1
    d998:	4770      	bx	lr

0000d99a <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    d99a:	6903      	ldr	r3, [r0, #16]
	dev_data->cb = cb;
    d99c:	6019      	str	r1, [r3, #0]
	dev_data->cb_data = cb_data;
    d99e:	605a      	str	r2, [r3, #4]
}
    d9a0:	4770      	bx	lr

0000d9a2 <cdc_acm_baudrate_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    d9a2:	6903      	ldr	r3, [r0, #16]
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
    d9a4:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
    d9a8:	4770      	bx	lr

0000d9aa <cdc_acm_line_ctrl_get>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    d9aa:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    d9ac:	2902      	cmp	r1, #2
    d9ae:	d00b      	beq.n	d9c8 <cdc_acm_line_ctrl_get+0x1e>
    d9b0:	2904      	cmp	r1, #4
    d9b2:	d010      	beq.n	d9d6 <cdc_acm_line_ctrl_get+0x2c>
    d9b4:	2901      	cmp	r1, #1
    d9b6:	d002      	beq.n	d9be <cdc_acm_line_ctrl_get+0x14>
    d9b8:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    d9bc:	4770      	bx	lr
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    d9be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    d9c2:	6013      	str	r3, [r2, #0]
		return 0;
    d9c4:	2000      	movs	r0, #0
    d9c6:	4770      	bx	lr
		*val = (dev_data->line_state &
    d9c8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
    d9cc:	f3c3 0340 	ubfx	r3, r3, #1, #1
		*val = (dev_data->line_state &
    d9d0:	6013      	str	r3, [r2, #0]
		return 0;
    d9d2:	2000      	movs	r0, #0
    d9d4:	4770      	bx	lr
		*val = (dev_data->line_state &
    d9d6:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
    d9da:	f003 0301 	and.w	r3, r3, #1
		*val = (dev_data->line_state &
    d9de:	6013      	str	r3, [r2, #0]
		return 0;
    d9e0:	2000      	movs	r0, #0
    d9e2:	4770      	bx	lr

0000d9e4 <cdc_acm_configure>:
}
    d9e4:	2000      	movs	r0, #0
    d9e6:	4770      	bx	lr

0000d9e8 <cdc_acm_config_get>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    d9e8:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    d9ea:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    d9ee:	600a      	str	r2, [r1, #0]
	switch (dev_data->line_coding.bCharFormat) {
    d9f0:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
    d9f4:	b122      	cbz	r2, da00 <cdc_acm_config_get+0x18>
    d9f6:	2a01      	cmp	r2, #1
    d9f8:	d00d      	beq.n	da16 <cdc_acm_config_get+0x2e>
		cfg->stop_bits = UART_CFG_STOP_BITS_2;
    d9fa:	2203      	movs	r2, #3
    d9fc:	714a      	strb	r2, [r1, #5]
		break;
    d9fe:	e001      	b.n	da04 <cdc_acm_config_get+0x1c>
		cfg->stop_bits = UART_CFG_STOP_BITS_1;
    da00:	2201      	movs	r2, #1
    da02:	714a      	strb	r2, [r1, #5]
	switch (dev_data->line_coding.bParityType) {
    da04:	f893 2099 	ldrb.w	r2, [r3, #153]	; 0x99
    da08:	3a01      	subs	r2, #1
    da0a:	2a03      	cmp	r2, #3
    da0c:	d806      	bhi.n	da1c <cdc_acm_config_get+0x34>
    da0e:	e8df f002 	tbb	[pc, r2]
    da12:	1508      	.short	0x1508
    da14:	1b18      	.short	0x1b18
		cfg->stop_bits = UART_CFG_STOP_BITS_1_5;
    da16:	2202      	movs	r2, #2
    da18:	714a      	strb	r2, [r1, #5]
		break;
    da1a:	e7f3      	b.n	da04 <cdc_acm_config_get+0x1c>
		cfg->parity = UART_CFG_PARITY_NONE;
    da1c:	2200      	movs	r2, #0
    da1e:	710a      	strb	r2, [r1, #4]
		break;
    da20:	e001      	b.n	da26 <cdc_acm_config_get+0x3e>
		cfg->parity = UART_CFG_PARITY_ODD;
    da22:	2201      	movs	r2, #1
    da24:	710a      	strb	r2, [r1, #4]
	switch (dev_data->line_coding.bDataBits) {
    da26:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    da2a:	2b06      	cmp	r3, #6
    da2c:	d014      	beq.n	da58 <cdc_acm_config_get+0x70>
    da2e:	2b07      	cmp	r3, #7
    da30:	d015      	beq.n	da5e <cdc_acm_config_get+0x76>
    da32:	2b05      	cmp	r3, #5
    da34:	d00b      	beq.n	da4e <cdc_acm_config_get+0x66>
		cfg->data_bits = UART_CFG_DATA_BITS_8;
    da36:	2303      	movs	r3, #3
    da38:	718b      	strb	r3, [r1, #6]
		break;
    da3a:	e00a      	b.n	da52 <cdc_acm_config_get+0x6a>
		cfg->parity = UART_CFG_PARITY_EVEN;
    da3c:	2202      	movs	r2, #2
    da3e:	710a      	strb	r2, [r1, #4]
		break;
    da40:	e7f1      	b.n	da26 <cdc_acm_config_get+0x3e>
		cfg->parity = UART_CFG_PARITY_MARK;
    da42:	2203      	movs	r2, #3
    da44:	710a      	strb	r2, [r1, #4]
		break;
    da46:	e7ee      	b.n	da26 <cdc_acm_config_get+0x3e>
		cfg->parity = UART_CFG_PARITY_SPACE;
    da48:	2204      	movs	r2, #4
    da4a:	710a      	strb	r2, [r1, #4]
		break;
    da4c:	e7eb      	b.n	da26 <cdc_acm_config_get+0x3e>
		cfg->data_bits = UART_CFG_DATA_BITS_5;
    da4e:	2300      	movs	r3, #0
    da50:	718b      	strb	r3, [r1, #6]
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
    da52:	2000      	movs	r0, #0
    da54:	71c8      	strb	r0, [r1, #7]
}
    da56:	4770      	bx	lr
		cfg->data_bits = UART_CFG_DATA_BITS_6;
    da58:	2301      	movs	r3, #1
    da5a:	718b      	strb	r3, [r1, #6]
		break;
    da5c:	e7f9      	b.n	da52 <cdc_acm_config_get+0x6a>
		cfg->data_bits = UART_CFG_DATA_BITS_7;
    da5e:	2302      	movs	r3, #2
    da60:	718b      	strb	r3, [r1, #6]
		break;
    da62:	e7f6      	b.n	da52 <cdc_acm_config_get+0x6a>

0000da64 <cdc_acm_line_ctrl_set>:
{
    da64:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    da66:	6904      	ldr	r4, [r0, #16]
	switch (ctrl) {
    da68:	2940      	cmp	r1, #64	; 0x40
    da6a:	f000 8081 	beq.w	db70 <cdc_acm_line_ctrl_set+0x10c>
    da6e:	d81b      	bhi.n	daa8 <cdc_acm_line_ctrl_set+0x44>
    da70:	2920      	cmp	r1, #32
    da72:	f200 809f 	bhi.w	dbb4 <cdc_acm_line_ctrl_set+0x150>
    da76:	2900      	cmp	r1, #0
    da78:	f000 809f 	beq.w	dbba <cdc_acm_line_ctrl_set+0x156>
    da7c:	1e4b      	subs	r3, r1, #1
    da7e:	2b1f      	cmp	r3, #31
    da80:	f200 809e 	bhi.w	dbc0 <cdc_acm_line_ctrl_set+0x15c>
    da84:	e8df f003 	tbb	[pc, r3]
    da88:	9c9c9c3d 	.word	0x9c9c9c3d
    da8c:	429c9c9c 	.word	0x429c9c9c
    da90:	9c9c9c9c 	.word	0x9c9c9c9c
    da94:	529c9c9c 	.word	0x529c9c9c
    da98:	9c9c9c9c 	.word	0x9c9c9c9c
    da9c:	9c9c9c9c 	.word	0x9c9c9c9c
    daa0:	9c9c9c9c 	.word	0x9c9c9c9c
    daa4:	639c9c9c 	.word	0x639c9c9c
    daa8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    daac:	d071      	beq.n	db92 <cdc_acm_line_ctrl_set+0x12e>
    daae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    dab2:	d110      	bne.n	dad6 <cdc_acm_line_ctrl_set+0x72>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    dab4:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    dab8:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
    dabc:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		if (val) {
    dac0:	b11a      	cbz	r2, daca <cdc_acm_line_ctrl_set+0x66>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
    dac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    dac6:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    daca:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
    dace:	f7f6 fc25 	bl	431c <cdc_acm_send_notification>
		return 0;
    dad2:	2000      	movs	r0, #0
    dad4:	e076      	b.n	dbc4 <cdc_acm_line_ctrl_set+0x160>
	switch (ctrl) {
    dad6:	2980      	cmp	r1, #128	; 0x80
    dad8:	d110      	bne.n	dafc <cdc_acm_line_ctrl_set+0x98>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
    dada:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    dade:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    dae2:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		if (val) {
    dae6:	b11a      	cbz	r2, daf0 <cdc_acm_line_ctrl_set+0x8c>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
    dae8:	f043 0310 	orr.w	r3, r3, #16
    daec:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    daf0:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
    daf4:	f7f6 fc12 	bl	431c <cdc_acm_send_notification>
		return 0;
    daf8:	2000      	movs	r0, #0
    dafa:	e063      	b.n	dbc4 <cdc_acm_line_ctrl_set+0x160>
	switch (ctrl) {
    dafc:	f06f 0012 	mvn.w	r0, #18
    db00:	e060      	b.n	dbc4 <cdc_acm_line_ctrl_set+0x160>
		cdc_acm_baudrate_set(dev, val);
    db02:	4611      	mov	r1, r2
    db04:	f7ff ff4d 	bl	d9a2 <cdc_acm_baudrate_set>
		return 0;
    db08:	2000      	movs	r0, #0
    db0a:	e05b      	b.n	dbc4 <cdc_acm_line_ctrl_set+0x160>
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    db0c:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    db10:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    db14:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		if (val) {
    db18:	b11a      	cbz	r2, db22 <cdc_acm_line_ctrl_set+0xbe>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
    db1a:	f043 0301 	orr.w	r3, r3, #1
    db1e:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
    db22:	2101      	movs	r1, #1
    db24:	f7f6 fbfa 	bl	431c <cdc_acm_send_notification>
		return 0;
    db28:	2000      	movs	r0, #0
    db2a:	e04b      	b.n	dbc4 <cdc_acm_line_ctrl_set+0x160>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
    db2c:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    db30:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    db34:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		if (val) {
    db38:	b11a      	cbz	r2, db42 <cdc_acm_line_ctrl_set+0xde>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
    db3a:	f043 0302 	orr.w	r3, r3, #2
    db3e:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    db42:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
    db46:	f7f6 fbe9 	bl	431c <cdc_acm_send_notification>
		return 0;
    db4a:	2000      	movs	r0, #0
    db4c:	e03a      	b.n	dbc4 <cdc_acm_line_ctrl_set+0x160>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
    db4e:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    db52:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    db56:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		if (val) {
    db5a:	b11a      	cbz	r2, db64 <cdc_acm_line_ctrl_set+0x100>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
    db5c:	f043 0304 	orr.w	r3, r3, #4
    db60:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    db64:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
    db68:	f7f6 fbd8 	bl	431c <cdc_acm_send_notification>
		return 0;
    db6c:	2000      	movs	r0, #0
    db6e:	e029      	b.n	dbc4 <cdc_acm_line_ctrl_set+0x160>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
    db70:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    db74:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    db78:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		if (val) {
    db7c:	b11a      	cbz	r2, db86 <cdc_acm_line_ctrl_set+0x122>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
    db7e:	f043 0308 	orr.w	r3, r3, #8
    db82:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    db86:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
    db8a:	f7f6 fbc7 	bl	431c <cdc_acm_send_notification>
		return 0;
    db8e:	2000      	movs	r0, #0
    db90:	e018      	b.n	dbc4 <cdc_acm_line_ctrl_set+0x160>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
    db92:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    db96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    db9a:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		if (val) {
    db9e:	b11a      	cbz	r2, dba8 <cdc_acm_line_ctrl_set+0x144>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
    dba0:	f043 0320 	orr.w	r3, r3, #32
    dba4:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    dba8:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
    dbac:	f7f6 fbb6 	bl	431c <cdc_acm_send_notification>
		return 0;
    dbb0:	2000      	movs	r0, #0
    dbb2:	e007      	b.n	dbc4 <cdc_acm_line_ctrl_set+0x160>
	switch (ctrl) {
    dbb4:	f06f 0012 	mvn.w	r0, #18
    dbb8:	e004      	b.n	dbc4 <cdc_acm_line_ctrl_set+0x160>
    dbba:	f06f 0012 	mvn.w	r0, #18
    dbbe:	e001      	b.n	dbc4 <cdc_acm_line_ctrl_set+0x160>
    dbc0:	f06f 0012 	mvn.w	r0, #18
}
    dbc4:	bd10      	pop	{r4, pc}

0000dbc6 <cdc_acm_fifo_read>:
{
    dbc6:	b570      	push	{r4, r5, r6, lr}
    dbc8:	4605      	mov	r5, r0
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    dbca:	6904      	ldr	r4, [r0, #16]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    dbcc:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    dbd0:	f7ff f881 	bl	ccd6 <ring_buf_get>
    dbd4:	4606      	mov	r6, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
    dbd6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	return buf->get_head == buf->put_tail;
    dbda:	691a      	ldr	r2, [r3, #16]
    dbdc:	6899      	ldr	r1, [r3, #8]
    dbde:	4291      	cmp	r1, r2
    dbe0:	d012      	beq.n	dc08 <cdc_acm_fifo_read+0x42>
	if (dev_data->rx_paused == true) {
    dbe2:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
    dbe6:	b16a      	cbz	r2, dc04 <cdc_acm_fifo_read+0x3e>
	return buf->size - (buf->put_head - buf->get_tail);
    dbe8:	69da      	ldr	r2, [r3, #28]
    dbea:	6859      	ldr	r1, [r3, #4]
    dbec:	695b      	ldr	r3, [r3, #20]
    dbee:	1acb      	subs	r3, r1, r3
    dbf0:	1ad3      	subs	r3, r2, r3
		if (ring_buf_space_get(dev_data->rx_ringbuf) >= CDC_ACM_BUFFER_SIZE) {
    dbf2:	2b3f      	cmp	r3, #63	; 0x3f
    dbf4:	d906      	bls.n	dc04 <cdc_acm_fifo_read+0x3e>
			struct usb_cfg_data *cfg = (void *)dev->config;
    dbf6:	686a      	ldr	r2, [r5, #4]
			if (dev_data->configured) {
    dbf8:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
    dbfc:	b943      	cbnz	r3, dc10 <cdc_acm_fifo_read+0x4a>
			dev_data->rx_paused = false;
    dbfe:	2300      	movs	r3, #0
    dc00:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
    dc04:	4630      	mov	r0, r6
    dc06:	bd70      	pop	{r4, r5, r6, pc}
		dev_data->rx_ready = false;
    dc08:	2200      	movs	r2, #0
    dc0a:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
    dc0e:	e7e8      	b.n	dbe2 <cdc_acm_fifo_read+0x1c>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0, dev_data);
    dc10:	6a13      	ldr	r3, [r2, #32]
    dc12:	4622      	mov	r2, r4
    dc14:	2100      	movs	r1, #0
    dc16:	7b18      	ldrb	r0, [r3, #12]
    dc18:	f7f6 f986 	bl	3f28 <cdc_acm_read_cb>
    dc1c:	e7ef      	b.n	dbfe <cdc_acm_fifo_read+0x38>

0000dc1e <cdc_acm_poll_in>:
{
    dc1e:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
    dc20:	2201      	movs	r2, #1
    dc22:	f7ff ffd0 	bl	dbc6 <cdc_acm_fifo_read>
	return ret == 1 ? 0 : -1;
    dc26:	2801      	cmp	r0, #1
    dc28:	d101      	bne.n	dc2e <cdc_acm_poll_in+0x10>
    dc2a:	2000      	movs	r0, #0
}
    dc2c:	bd08      	pop	{r3, pc}
	return ret == 1 ? 0 : -1;
    dc2e:	f04f 30ff 	mov.w	r0, #4294967295
    dc32:	e7fb      	b.n	dc2c <cdc_acm_poll_in+0xe>

0000dc34 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    dc34:	b538      	push	{r3, r4, r5, lr}
    dc36:	4604      	mov	r4, r0

	if (esf != NULL) {
    dc38:	460d      	mov	r5, r1
    dc3a:	b111      	cbz	r1, dc42 <z_arm_fatal_error+0xe>
		esf_dump(esf);
    dc3c:	4608      	mov	r0, r1
    dc3e:	f7f6 fd93 	bl	4768 <esf_dump>
	}
	z_fatal_error(reason, esf);
    dc42:	4629      	mov	r1, r5
    dc44:	4620      	mov	r0, r4
    dc46:	f7fc fc07 	bl	a458 <z_fatal_error>
}
    dc4a:	bd38      	pop	{r3, r4, r5, pc}

0000dc4c <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    dc4c:	b508      	push	{r3, lr}
    dc4e:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    dc50:	6800      	ldr	r0, [r0, #0]
    dc52:	f7ff ffef 	bl	dc34 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    dc56:	bd08      	pop	{r3, pc}

0000dc58 <arch_irq_enable>:
{
    dc58:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
    dc5a:	b240      	sxtb	r0, r0
    dc5c:	f7f6 fea2 	bl	49a4 <__NVIC_EnableIRQ>
}
    dc60:	bd08      	pop	{r3, pc}

0000dc62 <arch_irq_disable>:
{
    dc62:	b508      	push	{r3, lr}
	NVIC_DisableIRQ((IRQn_Type)irq);
    dc64:	b240      	sxtb	r0, r0
    dc66:	f7f6 feab 	bl	49c0 <__NVIC_DisableIRQ>
}
    dc6a:	bd08      	pop	{r3, pc}

0000dc6c <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    dc6c:	b508      	push	{r3, lr}
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    dc6e:	3101      	adds	r1, #1
    dc70:	b240      	sxtb	r0, r0
    dc72:	f7f6 feb7 	bl	49e4 <__NVIC_SetPriority>
}
    dc76:	bd08      	pop	{r3, pc}

0000dc78 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    dc78:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    dc7a:	2100      	movs	r1, #0
    dc7c:	2001      	movs	r0, #1
    dc7e:	f7ff ffd9 	bl	dc34 <z_arm_fatal_error>
}
    dc82:	bd08      	pop	{r3, pc}

0000dc84 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    dc84:	b508      	push	{r3, lr}
	handler();
    dc86:	f7f6 fecf 	bl	4a28 <z_SysNmiOnReset>
	z_arm_int_exit();
    dc8a:	f7f6 ffc1 	bl	4c10 <z_arm_exc_exit>
}
    dc8e:	bd08      	pop	{r3, pc}

0000dc90 <memory_fault_recoverable>:
}
    dc90:	2000      	movs	r0, #0
    dc92:	4770      	bx	lr

0000dc94 <fault_handle>:
{
    dc94:	b508      	push	{r3, lr}
	*recoverable = false;
    dc96:	2300      	movs	r3, #0
    dc98:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    dc9a:	1ecb      	subs	r3, r1, #3
    dc9c:	2b09      	cmp	r3, #9
    dc9e:	d81a      	bhi.n	dcd6 <fault_handle+0x42>
    dca0:	e8df f003 	tbb	[pc, r3]
    dca4:	110d0905 	.word	0x110d0905
    dca8:	19191919 	.word	0x19191919
    dcac:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    dcae:	4611      	mov	r1, r2
    dcb0:	f7f7 fd12 	bl	56d8 <hard_fault>
}
    dcb4:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    dcb6:	2100      	movs	r1, #0
    dcb8:	f7f7 fb82 	bl	53c0 <mem_manage_fault>
		break;
    dcbc:	e7fa      	b.n	dcb4 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
    dcbe:	2100      	movs	r1, #0
    dcc0:	f7f7 f814 	bl	4cec <bus_fault>
		break;
    dcc4:	e7f6      	b.n	dcb4 <fault_handle+0x20>
		reason = usage_fault(esf);
    dcc6:	f7f7 f99f 	bl	5008 <usage_fault>
		break;
    dcca:	e7f3      	b.n	dcb4 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
    dccc:	4611      	mov	r1, r2
    dcce:	f7f7 fadd 	bl	528c <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    dcd2:	2000      	movs	r0, #0
		break;
    dcd4:	e7ee      	b.n	dcb4 <fault_handle+0x20>
		reserved_exception(esf, fault);
    dcd6:	f7f7 fb07 	bl	52e8 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    dcda:	2000      	movs	r0, #0
	return reason;
    dcdc:	e7ea      	b.n	dcb4 <fault_handle+0x20>

0000dcde <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    dcde:	6843      	ldr	r3, [r0, #4]
    dce0:	1e5a      	subs	r2, r3, #1
		&&
    dce2:	4213      	tst	r3, r2
    dce4:	d106      	bne.n	dcf4 <mpu_partition_is_valid+0x16>
		&&
    dce6:	2b1f      	cmp	r3, #31
    dce8:	d906      	bls.n	dcf8 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    dcea:	6803      	ldr	r3, [r0, #0]
		&&
    dcec:	421a      	tst	r2, r3
    dcee:	d005      	beq.n	dcfc <mpu_partition_is_valid+0x1e>
    dcf0:	2000      	movs	r0, #0
    dcf2:	4770      	bx	lr
    dcf4:	2000      	movs	r0, #0
    dcf6:	4770      	bx	lr
    dcf8:	2000      	movs	r0, #0
    dcfa:	4770      	bx	lr
    dcfc:	2001      	movs	r0, #1
}
    dcfe:	4770      	bx	lr

0000dd00 <mpu_configure_region>:
{
    dd00:	b500      	push	{lr}
    dd02:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    dd04:	680b      	ldr	r3, [r1, #0]
    dd06:	9301      	str	r3, [sp, #4]
		&new_region->attr, new_region->start, new_region->size);
    dd08:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    dd0a:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    dd0c:	2b20      	cmp	r3, #32
    dd0e:	d912      	bls.n	dd36 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    dd10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    dd14:	d811      	bhi.n	dd3a <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    dd16:	3b01      	subs	r3, #1
    dd18:	fab3 f383 	clz	r3, r3
    dd1c:	f1c3 031f 	rsb	r3, r3, #31
    dd20:	005b      	lsls	r3, r3, #1
    dd22:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    dd26:	4313      	orrs	r3, r2
    dd28:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    dd2a:	a901      	add	r1, sp, #4
    dd2c:	f7f7 ff0a 	bl	5b44 <region_allocate_and_init>
}
    dd30:	b005      	add	sp, #20
    dd32:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    dd36:	2308      	movs	r3, #8
    dd38:	e7f5      	b.n	dd26 <mpu_configure_region+0x26>
		return REGION_4G;
    dd3a:	233e      	movs	r3, #62	; 0x3e
    dd3c:	e7f3      	b.n	dd26 <mpu_configure_region+0x26>

0000dd3e <arm_core_mpu_configure_static_mpu_regions>:
{
    dd3e:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    dd40:	f7f7 ffb6 	bl	5cb0 <mpu_configure_static_mpu_regions>
}
    dd44:	bd08      	pop	{r3, pc}

0000dd46 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    dd46:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    dd48:	f7f7 ffbc 	bl	5cc4 <mpu_configure_dynamic_mpu_regions>
}
    dd4c:	bd08      	pop	{r3, pc}

0000dd4e <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    dd4e:	4602      	mov	r2, r0
    dd50:	e002      	b.n	dd58 <strcpy+0xa>
		*d = *s;
    dd52:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    dd56:	3101      	adds	r1, #1
	while (*s != '\0') {
    dd58:	780b      	ldrb	r3, [r1, #0]
    dd5a:	2b00      	cmp	r3, #0
    dd5c:	d1f9      	bne.n	dd52 <strcpy+0x4>
	}

	*d = '\0';
    dd5e:	7013      	strb	r3, [r2, #0]

	return dest;
}
    dd60:	4770      	bx	lr

0000dd62 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    dd62:	4603      	mov	r3, r0
    dd64:	b1a2      	cbz	r2, dd90 <strncpy+0x2e>
{
    dd66:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    dd68:	780c      	ldrb	r4, [r1, #0]
    dd6a:	b12c      	cbz	r4, dd78 <strncpy+0x16>
		*d = *s;
    dd6c:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    dd70:	3101      	adds	r1, #1
		d++;
		n--;
    dd72:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    dd74:	2a00      	cmp	r2, #0
    dd76:	d1f7      	bne.n	dd68 <strncpy+0x6>
	}

	while (n > 0) {
    dd78:	b122      	cbz	r2, dd84 <strncpy+0x22>
		*d = '\0';
    dd7a:	2100      	movs	r1, #0
    dd7c:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    dd80:	3a01      	subs	r2, #1
    dd82:	e7f9      	b.n	dd78 <strncpy+0x16>
	}

	return dest;
}
    dd84:	bc10      	pop	{r4}
    dd86:	4770      	bx	lr
		*d = '\0';
    dd88:	2100      	movs	r1, #0
    dd8a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    dd8e:	3a01      	subs	r2, #1
	while (n > 0) {
    dd90:	2a00      	cmp	r2, #0
    dd92:	d1f9      	bne.n	dd88 <strncpy+0x26>
    dd94:	4770      	bx	lr

0000dd96 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    dd96:	4603      	mov	r3, r0
	size_t n = 0;
    dd98:	2000      	movs	r0, #0

	while (*s != '\0') {
    dd9a:	e001      	b.n	dda0 <strlen+0xa>
		s++;
    dd9c:	3301      	adds	r3, #1
		n++;
    dd9e:	3001      	adds	r0, #1
	while (*s != '\0') {
    dda0:	781a      	ldrb	r2, [r3, #0]
    dda2:	2a00      	cmp	r2, #0
    dda4:	d1fa      	bne.n	dd9c <strlen+0x6>
	}

	return n;
}
    dda6:	4770      	bx	lr

0000dda8 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    dda8:	4603      	mov	r3, r0
	size_t n = 0;
    ddaa:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    ddac:	e001      	b.n	ddb2 <strnlen+0xa>
		s++;
    ddae:	3301      	adds	r3, #1
		n++;
    ddb0:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    ddb2:	781a      	ldrb	r2, [r3, #0]
    ddb4:	b10a      	cbz	r2, ddba <strnlen+0x12>
    ddb6:	4288      	cmp	r0, r1
    ddb8:	d3f9      	bcc.n	ddae <strnlen+0x6>
	}

	return n;
}
    ddba:	4770      	bx	lr

0000ddbc <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    ddbc:	ea80 0301 	eor.w	r3, r0, r1
    ddc0:	f013 0f03 	tst.w	r3, #3
    ddc4:	d001      	beq.n	ddca <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    ddc6:	4603      	mov	r3, r0
    ddc8:	e023      	b.n	de12 <memcpy+0x56>
    ddca:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    ddcc:	f013 0f03 	tst.w	r3, #3
    ddd0:	d00f      	beq.n	ddf2 <memcpy+0x36>
			if (n == 0) {
    ddd2:	b30a      	cbz	r2, de18 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    ddd4:	f811 cb01 	ldrb.w	ip, [r1], #1
    ddd8:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    dddc:	3a01      	subs	r2, #1
    ddde:	e7f5      	b.n	ddcc <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    dde0:	f811 cb01 	ldrb.w	ip, [r1], #1
    dde4:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    dde8:	3a01      	subs	r2, #1
	while (n > 0) {
    ddea:	2a00      	cmp	r2, #0
    ddec:	d1f8      	bne.n	dde0 <memcpy+0x24>
	}

	return d;
}
    ddee:	bc10      	pop	{r4}
    ddf0:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    ddf2:	2a03      	cmp	r2, #3
    ddf4:	d90d      	bls.n	de12 <memcpy+0x56>
{
    ddf6:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    ddf8:	f851 4b04 	ldr.w	r4, [r1], #4
    ddfc:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    de00:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    de02:	2a03      	cmp	r2, #3
    de04:	d8f8      	bhi.n	ddf8 <memcpy+0x3c>
    de06:	e7f0      	b.n	ddea <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    de08:	f811 cb01 	ldrb.w	ip, [r1], #1
    de0c:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    de10:	3a01      	subs	r2, #1
	while (n > 0) {
    de12:	2a00      	cmp	r2, #0
    de14:	d1f8      	bne.n	de08 <memcpy+0x4c>
    de16:	4770      	bx	lr
}
    de18:	4770      	bx	lr

0000de1a <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    de1a:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    de1e:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    de20:	e002      	b.n	de28 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    de22:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    de26:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    de28:	f013 0f03 	tst.w	r3, #3
    de2c:	d002      	beq.n	de34 <memset+0x1a>
		if (n == 0) {
    de2e:	2a00      	cmp	r2, #0
    de30:	d1f7      	bne.n	de22 <memset+0x8>
    de32:	e00f      	b.n	de54 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    de34:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    de36:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    de3a:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    de3e:	2a03      	cmp	r2, #3
    de40:	d906      	bls.n	de50 <memset+0x36>
		*(d_word++) = c_word;
    de42:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    de46:	3a04      	subs	r2, #4
    de48:	e7f9      	b.n	de3e <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    de4a:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    de4e:	3a01      	subs	r2, #1
	while (n > 0) {
    de50:	2a00      	cmp	r2, #0
    de52:	d1fa      	bne.n	de4a <memset+0x30>
	}

	return buf;
}
    de54:	4770      	bx	lr

0000de56 <_stdout_hook_default>:
}
    de56:	f04f 30ff 	mov.w	r0, #4294967295
    de5a:	4770      	bx	lr

0000de5c <sys_arch_reboot>:
{
    de5c:	b508      	push	{r3, lr}
    *p_gpregret = val;
    de5e:	b2c0      	uxtb	r0, r0
    de60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    de64:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
	NVIC_SystemReset();
    de68:	f7f7 ff84 	bl	5d74 <__NVIC_SystemReset>

0000de6c <nrf_power_system_off>:
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    de6c:	2301      	movs	r3, #1
    de6e:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    de72:	f3bf 8f4f 	dsb	sy
        __WFE();
    de76:	bf20      	wfe
    while (true)
    de78:	e7fd      	b.n	de76 <nrf_power_system_off+0xa>

0000de7a <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    de7a:	2806      	cmp	r0, #6
    de7c:	d000      	beq.n	de80 <pm_state_set+0x6>
    de7e:	4770      	bx	lr
{
    de80:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_power_system_off(NRF_POWER);
    de82:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    de86:	f7ff fff1 	bl	de6c <nrf_power_system_off>

0000de8a <pm_state_exit_post_ops>:
    de8a:	2300      	movs	r3, #0
    de8c:	f383 8811 	msr	BASEPRI, r3
    de90:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    de94:	4770      	bx	lr

0000de96 <nrf_usbd_ep_amount_get>:

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    de96:	f011 0f80 	tst.w	r1, #128	; 0x80
    de9a:	d105      	bne.n	dea8 <nrf_usbd_ep_amount_get+0x12>
            ret = p_reg->EPIN[epnr].AMOUNT;
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    de9c:	f011 0f08 	tst.w	r1, #8
    dea0:	d011      	beq.n	dec6 <nrf_usbd_ep_amount_get+0x30>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    dea2:	f8d0 07a8 	ldr.w	r0, [r0, #1960]	; 0x7a8
    dea6:	4770      	bx	lr
        if (NRF_USBD_EPISO_CHECK(ep))
    dea8:	f011 0f08 	tst.w	r1, #8
    deac:	d002      	beq.n	deb4 <nrf_usbd_ep_amount_get+0x1e>
            ret = p_reg->ISOIN.AMOUNT;
    deae:	f8d0 06a8 	ldr.w	r0, [r0, #1704]	; 0x6a8
    deb2:	4770      	bx	lr
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    deb4:	f001 010f 	and.w	r1, r1, #15
            ret = p_reg->EPIN[epnr].AMOUNT;
    deb8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    debc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    dec0:	f8d0 0608 	ldr.w	r0, [r0, #1544]	; 0x608
    dec4:	4770      	bx	lr
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    dec6:	f001 010f 	and.w	r1, r1, #15
            ret = p_reg->EPOUT[epnr].AMOUNT;
    deca:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    dece:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    ded2:	f8d0 0708 	ldr.w	r0, [r0, #1800]	; 0x708
        }
    }

    return ret;
}
    ded6:	4770      	bx	lr

0000ded8 <ep_is_valid>:
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    ded8:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (NRF_USBD_EPIN_CHECK(ep)) {
    dedc:	f010 0f80 	tst.w	r0, #128	; 0x80
    dee0:	d106      	bne.n	def0 <ep_is_valid+0x18>
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    dee2:	2b08      	cmp	r3, #8
    dee4:	d00f      	beq.n	df06 <ep_is_valid+0x2e>
			if (ep_num >= CFG_EPOUT_CNT) {
    dee6:	f010 0f78 	tst.w	r0, #120	; 0x78
    deea:	d10e      	bne.n	df0a <ep_is_valid+0x32>
	return true;
    deec:	2001      	movs	r0, #1
    deee:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    def0:	2b08      	cmp	r3, #8
    def2:	d004      	beq.n	defe <ep_is_valid+0x26>
			if (ep_num >= CFG_EPIN_CNT) {
    def4:	f010 0f78 	tst.w	r0, #120	; 0x78
    def8:	d103      	bne.n	df02 <ep_is_valid+0x2a>
	return true;
    defa:	2001      	movs	r0, #1
    defc:	4770      	bx	lr
    defe:	2001      	movs	r0, #1
    df00:	4770      	bx	lr
				return false;
    df02:	2000      	movs	r0, #0
    df04:	4770      	bx	lr
	return true;
    df06:	2001      	movs	r0, #1
    df08:	4770      	bx	lr
				return false;
    df0a:	2000      	movs	r0, #0
}
    df0c:	4770      	bx	lr

0000df0e <in_endpoint_ctx>:
{
    df0e:	b508      	push	{r3, lr}
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    df10:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    df14:	f7f7 ff60 	bl	5dd8 <endpoint_ctx>
}
    df18:	bd08      	pop	{r3, pc}

0000df1a <out_endpoint_ctx>:
{
    df1a:	b508      	push	{r3, lr}
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    df1c:	f7f7 ff5c 	bl	5dd8 <endpoint_ctx>
}
    df20:	bd08      	pop	{r3, pc}

0000df22 <ep_ctx_reset>:
{
    df22:	b510      	push	{r4, lr}
    df24:	4604      	mov	r4, r0
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    df26:	6903      	ldr	r3, [r0, #16]
    df28:	6143      	str	r3, [r0, #20]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    df2a:	6183      	str	r3, [r0, #24]
	ep_ctx->buf.len  = 0U;
    df2c:	2300      	movs	r3, #0
    df2e:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    df30:	7f83      	ldrb	r3, [r0, #30]
    df32:	b933      	cbnz	r3, df42 <ep_ctx_reset+0x20>
	ep_ctx->read_complete = true;
    df34:	2301      	movs	r3, #1
    df36:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    df38:	2300      	movs	r3, #0
    df3a:	7763      	strb	r3, [r4, #29]
	ep_ctx->write_in_progress = false;
    df3c:	77a3      	strb	r3, [r4, #30]
	ep_ctx->trans_zlp = false;
    df3e:	77e3      	strb	r3, [r4, #31]
}
    df40:	bd10      	pop	{r4, pc}
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    df42:	7a40      	ldrb	r0, [r0, #9]
    df44:	f001 f8d7 	bl	f0f6 <nrfx_usbd_ep_abort>
    df48:	e7f4      	b.n	df34 <ep_ctx_reset+0x12>

0000df4a <onoff_cancel_or_release>:
 *
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
    df4a:	b510      	push	{r4, lr}
    df4c:	4604      	mov	r4, r0
	int rv = onoff_cancel(mgr, cli);
    df4e:	f7fe fbb8 	bl	c6c2 <onoff_cancel>

	if (rv == -EALREADY) {
    df52:	f110 0f78 	cmn.w	r0, #120	; 0x78
    df56:	d000      	beq.n	df5a <onoff_cancel_or_release+0x10>
		rv = onoff_release(mgr);
	}
	return rv;
}
    df58:	bd10      	pop	{r4, pc}
		rv = onoff_release(mgr);
    df5a:	4620      	mov	r0, r4
    df5c:	f7fe fb8a 	bl	c674 <onoff_release>
	return rv;
    df60:	e7fa      	b.n	df58 <onoff_cancel_or_release+0xe>

0000df62 <hfxo_stop>:
{
    df62:	b508      	push	{r3, lr}
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    df64:	f100 0320 	add.w	r3, r0, #32
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    df68:	2200      	movs	r2, #0
    df6a:	f3bf 8f5b 	dmb	ish
    df6e:	e853 1f00 	ldrex	r1, [r3]
    df72:	2901      	cmp	r1, #1
    df74:	d104      	bne.n	df80 <hfxo_stop+0x1e>
    df76:	e843 2c00 	strex	ip, r2, [r3]
    df7a:	f1bc 0f00 	cmp.w	ip, #0
    df7e:	d1f6      	bne.n	df6e <hfxo_stop+0xc>
    df80:	f3bf 8f5b 	dmb	ish
    df84:	d105      	bne.n	df92 <hfxo_stop+0x30>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    df86:	f100 010c 	add.w	r1, r0, #12
    df8a:	69c0      	ldr	r0, [r0, #28]
    df8c:	f7ff ffdd 	bl	df4a <onoff_cancel_or_release>
}
    df90:	bd08      	pop	{r3, pc}
	return 0;
    df92:	2000      	movs	r0, #0
    df94:	e7fc      	b.n	df90 <hfxo_stop+0x2e>

0000df96 <usbd_enable_endpoints>:
{
    df96:	b510      	push	{r4, lr}
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    df98:	2400      	movs	r4, #0
    df9a:	e000      	b.n	df9e <usbd_enable_endpoints+0x8>
    df9c:	3401      	adds	r4, #1
    df9e:	2c07      	cmp	r4, #7
    dfa0:	dc09      	bgt.n	dfb6 <usbd_enable_endpoints+0x20>
		ep_ctx = in_endpoint_ctx(i);
    dfa2:	b2e0      	uxtb	r0, r4
    dfa4:	f7ff ffb3 	bl	df0e <in_endpoint_ctx>
		if (ep_ctx->cfg.en) {
    dfa8:	7a03      	ldrb	r3, [r0, #8]
    dfaa:	2b00      	cmp	r3, #0
    dfac:	d0f6      	beq.n	df9c <usbd_enable_endpoints+0x6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    dfae:	7a40      	ldrb	r0, [r0, #9]
    dfb0:	f7fc f8f2 	bl	a198 <nrfx_usbd_ep_enable>
    dfb4:	e7f2      	b.n	df9c <usbd_enable_endpoints+0x6>
		ep_ctx = in_endpoint_ctx(NRF_USBD_EPIN(8));
    dfb6:	2088      	movs	r0, #136	; 0x88
    dfb8:	f7ff ffa9 	bl	df0e <in_endpoint_ctx>
		if (ep_ctx->cfg.en) {
    dfbc:	7a03      	ldrb	r3, [r0, #8]
    dfbe:	b90b      	cbnz	r3, dfc4 <usbd_enable_endpoints+0x2e>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    dfc0:	2400      	movs	r4, #0
    dfc2:	e004      	b.n	dfce <usbd_enable_endpoints+0x38>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    dfc4:	7a40      	ldrb	r0, [r0, #9]
    dfc6:	f7fc f8e7 	bl	a198 <nrfx_usbd_ep_enable>
    dfca:	e7f9      	b.n	dfc0 <usbd_enable_endpoints+0x2a>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    dfcc:	3401      	adds	r4, #1
    dfce:	2c07      	cmp	r4, #7
    dfd0:	dc09      	bgt.n	dfe6 <usbd_enable_endpoints+0x50>
		ep_ctx = out_endpoint_ctx(i);
    dfd2:	b2e0      	uxtb	r0, r4
    dfd4:	f7ff ffa1 	bl	df1a <out_endpoint_ctx>
		if (ep_ctx->cfg.en) {
    dfd8:	7a03      	ldrb	r3, [r0, #8]
    dfda:	2b00      	cmp	r3, #0
    dfdc:	d0f6      	beq.n	dfcc <usbd_enable_endpoints+0x36>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    dfde:	7a40      	ldrb	r0, [r0, #9]
    dfe0:	f7fc f8da 	bl	a198 <nrfx_usbd_ep_enable>
    dfe4:	e7f2      	b.n	dfcc <usbd_enable_endpoints+0x36>
		ep_ctx = out_endpoint_ctx(NRF_USBD_EPOUT(8));
    dfe6:	2008      	movs	r0, #8
    dfe8:	f7ff ff97 	bl	df1a <out_endpoint_ctx>
		if (ep_ctx->cfg.en) {
    dfec:	7a03      	ldrb	r3, [r0, #8]
    dfee:	b903      	cbnz	r3, dff2 <usbd_enable_endpoints+0x5c>
}
    dff0:	bd10      	pop	{r4, pc}
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    dff2:	7a40      	ldrb	r0, [r0, #9]
    dff4:	f7fc f8d0 	bl	a198 <nrfx_usbd_ep_enable>
}
    dff8:	e7fa      	b.n	dff0 <usbd_enable_endpoints+0x5a>

0000dffa <hfxo_start>:
{
    dffa:	b508      	push	{r3, lr}
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    dffc:	f100 0320 	add.w	r3, r0, #32
    e000:	2201      	movs	r2, #1
    e002:	f3bf 8f5b 	dmb	ish
    e006:	e853 1f00 	ldrex	r1, [r3]
    e00a:	2900      	cmp	r1, #0
    e00c:	d104      	bne.n	e018 <hfxo_start+0x1e>
    e00e:	e843 2c00 	strex	ip, r2, [r3]
    e012:	f1bc 0f00 	cmp.w	ip, #0
    e016:	d1f6      	bne.n	e006 <hfxo_start+0xc>
    e018:	f3bf 8f5b 	dmb	ish
    e01c:	d10b      	bne.n	e036 <hfxo_start+0x3c>
	*notify = (struct sys_notify){
    e01e:	2300      	movs	r3, #0
    e020:	6103      	str	r3, [r0, #16]
    e022:	6143      	str	r3, [r0, #20]
    e024:	6183      	str	r3, [r0, #24]
    e026:	2301      	movs	r3, #1
    e028:	6143      	str	r3, [r0, #20]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    e02a:	f100 010c 	add.w	r1, r0, #12
    e02e:	69c0      	ldr	r0, [r0, #28]
    e030:	f7fe fabf 	bl	c5b2 <onoff_request>
}
    e034:	bd08      	pop	{r3, pc}
	return 0;
    e036:	2000      	movs	r0, #0
    e038:	e7fc      	b.n	e034 <hfxo_start+0x3a>

0000e03a <usb_dc_ep_disable>:
{
    e03a:	b538      	push	{r3, r4, r5, lr}
    e03c:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
    e03e:	f7f7 fecb 	bl	5dd8 <endpoint_ctx>
	if (!ep_ctx) {
    e042:	b168      	cbz	r0, e060 <usb_dc_ep_disable+0x26>
    e044:	4605      	mov	r5, r0
	if (!ep_ctx->cfg.en) {
    e046:	7a03      	ldrb	r3, [r0, #8]
    e048:	b16b      	cbz	r3, e066 <usb_dc_ep_disable+0x2c>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    e04a:	4620      	mov	r0, r4
    e04c:	f7fc f886 	bl	a15c <nrfx_usbd_ep_disable>
	ep_ctx->write_in_progress = false;
    e050:	2400      	movs	r4, #0
    e052:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    e054:	4628      	mov	r0, r5
    e056:	f7ff ff64 	bl	df22 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    e05a:	722c      	strb	r4, [r5, #8]
	return 0;
    e05c:	4620      	mov	r0, r4
}
    e05e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    e060:	f06f 0015 	mvn.w	r0, #21
    e064:	e7fb      	b.n	e05e <usb_dc_ep_disable+0x24>
		return -EALREADY;
    e066:	f06f 0077 	mvn.w	r0, #119	; 0x77
    e06a:	e7f8      	b.n	e05e <usb_dc_ep_disable+0x24>

0000e06c <usb_dc_ep_read>:
{
    e06c:	b570      	push	{r4, r5, r6, lr}
    e06e:	4605      	mov	r5, r0
    e070:	460c      	mov	r4, r1
    e072:	4616      	mov	r6, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    e074:	f7f9 f88a 	bl	718c <usb_dc_ep_read_wait>
	if (ret) {
    e078:	b918      	cbnz	r0, e082 <usb_dc_ep_read+0x16>
	if (!data && !max_data_len) {
    e07a:	b11c      	cbz	r4, e084 <usb_dc_ep_read+0x18>
	ret = usb_dc_ep_read_continue(ep);
    e07c:	4628      	mov	r0, r5
    e07e:	f7f9 f92f 	bl	72e0 <usb_dc_ep_read_continue>
}
    e082:	bd70      	pop	{r4, r5, r6, pc}
	if (!data && !max_data_len) {
    e084:	2e00      	cmp	r6, #0
    e086:	d1f9      	bne.n	e07c <usb_dc_ep_read+0x10>
    e088:	e7fb      	b.n	e082 <usb_dc_ep_read+0x16>

0000e08a <nrf_clock_is_running>:
    switch (domain)
    e08a:	b119      	cbz	r1, e094 <nrf_clock_is_running+0xa>
    e08c:	2901      	cmp	r1, #1
    e08e:	d00e      	beq.n	e0ae <nrf_clock_is_running+0x24>
    e090:	2000      	movs	r0, #0
    e092:	4770      	bx	lr
            if (p_clk_src != NULL)
    e094:	b122      	cbz	r2, e0a0 <nrf_clock_is_running+0x16>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    e096:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    e09a:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    e09e:	6013      	str	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    e0a0:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    e0a4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    e0a8:	d10e      	bne.n	e0c8 <nrf_clock_is_running+0x3e>
    return false;
    e0aa:	2000      	movs	r0, #0
    e0ac:	4770      	bx	lr
            if (p_clk_src != NULL)
    e0ae:	b122      	cbz	r2, e0ba <nrf_clock_is_running+0x30>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    e0b0:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    e0b4:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    e0b8:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    e0ba:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    e0be:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    e0c2:	d103      	bne.n	e0cc <nrf_clock_is_running+0x42>
    return false;
    e0c4:	2000      	movs	r0, #0
    e0c6:	4770      	bx	lr
                return true;
    e0c8:	2001      	movs	r0, #1
    e0ca:	4770      	bx	lr
                return true;
    e0cc:	2001      	movs	r0, #1
}
    e0ce:	4770      	bx	lr

0000e0d0 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    e0d0:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    e0d2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    e0d6:	0089      	lsls	r1, r1, #2
    e0d8:	3138      	adds	r1, #56	; 0x38
}
    e0da:	4408      	add	r0, r1
    e0dc:	4770      	bx	lr

0000e0de <get_sub_config>:
	const struct nrf_clock_control_config *config =
    e0de:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    e0e0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    e0e4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    e0e8:	4770      	bx	lr

0000e0ea <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    e0ea:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    e0ec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    e0f0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    e0f4:	4770      	bx	lr

0000e0f6 <get_status>:
{
    e0f6:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    e0f8:	b2c9      	uxtb	r1, r1
    e0fa:	f7ff ffe9 	bl	e0d0 <get_sub_data>
    e0fe:	6880      	ldr	r0, [r0, #8]
}
    e100:	f000 0007 	and.w	r0, r0, #7
    e104:	bd08      	pop	{r3, pc}

0000e106 <set_off_state>:
	__asm__ volatile(
    e106:	f04f 0320 	mov.w	r3, #32
    e10a:	f3ef 8211 	mrs	r2, BASEPRI
    e10e:	f383 8812 	msr	BASEPRI_MAX, r3
    e112:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    e116:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    e118:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    e11c:	d001      	beq.n	e122 <set_off_state+0x1c>
    e11e:	428b      	cmp	r3, r1
    e120:	d107      	bne.n	e132 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    e122:	2301      	movs	r3, #1
    e124:	6003      	str	r3, [r0, #0]
	int err = 0;
    e126:	2000      	movs	r0, #0
	__asm__ volatile(
    e128:	f382 8811 	msr	BASEPRI, r2
    e12c:	f3bf 8f6f 	isb	sy
}
    e130:	4770      	bx	lr
		err = -EPERM;
    e132:	f04f 30ff 	mov.w	r0, #4294967295
    e136:	e7f7      	b.n	e128 <set_off_state+0x22>

0000e138 <set_starting_state>:
	__asm__ volatile(
    e138:	f04f 0320 	mov.w	r3, #32
    e13c:	f3ef 8211 	mrs	r2, BASEPRI
    e140:	f383 8812 	msr	BASEPRI_MAX, r3
    e144:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    e148:	6803      	ldr	r3, [r0, #0]
    e14a:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    e14e:	f003 0307 	and.w	r3, r3, #7
    e152:	2b01      	cmp	r3, #1
    e154:	d008      	beq.n	e168 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    e156:	458c      	cmp	ip, r1
    e158:	d009      	beq.n	e16e <set_starting_state+0x36>
		err = -EPERM;
    e15a:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    e15e:	f382 8811 	msr	BASEPRI, r2
    e162:	f3bf 8f6f 	isb	sy
}
    e166:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    e168:	6001      	str	r1, [r0, #0]
	int err = 0;
    e16a:	2000      	movs	r0, #0
    e16c:	e7f7      	b.n	e15e <set_starting_state+0x26>
		err = -EALREADY;
    e16e:	f06f 0077 	mvn.w	r0, #119	; 0x77
    e172:	e7f4      	b.n	e15e <set_starting_state+0x26>

0000e174 <set_on_state>:
	__asm__ volatile(
    e174:	f04f 0320 	mov.w	r3, #32
    e178:	f3ef 8211 	mrs	r2, BASEPRI
    e17c:	f383 8812 	msr	BASEPRI_MAX, r3
    e180:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    e184:	6803      	ldr	r3, [r0, #0]
    e186:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e18a:	f043 0302 	orr.w	r3, r3, #2
    e18e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    e190:	f382 8811 	msr	BASEPRI, r2
    e194:	f3bf 8f6f 	isb	sy
}
    e198:	4770      	bx	lr

0000e19a <clkstarted_handle>:
{
    e19a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e19c:	4606      	mov	r6, r0
    e19e:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    e1a0:	f7ff ff96 	bl	e0d0 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    e1a4:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    e1a6:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    e1a8:	2300      	movs	r3, #0
    e1aa:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    e1ae:	f7ff ffe1 	bl	e174 <set_on_state>
	if (callback) {
    e1b2:	b11d      	cbz	r5, e1bc <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    e1b4:	463a      	mov	r2, r7
    e1b6:	4621      	mov	r1, r4
    e1b8:	4630      	mov	r0, r6
    e1ba:	47a8      	blx	r5
}
    e1bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e1be <stop>:
{
    e1be:	b570      	push	{r4, r5, r6, lr}
    e1c0:	4606      	mov	r6, r0
    e1c2:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    e1c4:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    e1c6:	4621      	mov	r1, r4
    e1c8:	f7ff ff82 	bl	e0d0 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    e1cc:	4629      	mov	r1, r5
    e1ce:	3008      	adds	r0, #8
    e1d0:	f7ff ff99 	bl	e106 <set_off_state>
	if (err < 0) {
    e1d4:	2800      	cmp	r0, #0
    e1d6:	db06      	blt.n	e1e6 <stop+0x28>
	get_sub_config(dev, type)->stop();
    e1d8:	4621      	mov	r1, r4
    e1da:	4630      	mov	r0, r6
    e1dc:	f7ff ff7f 	bl	e0de <get_sub_config>
    e1e0:	6843      	ldr	r3, [r0, #4]
    e1e2:	4798      	blx	r3
	return 0;
    e1e4:	2000      	movs	r0, #0
}
    e1e6:	bd70      	pop	{r4, r5, r6, pc}

0000e1e8 <api_stop>:
{
    e1e8:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    e1ea:	2280      	movs	r2, #128	; 0x80
    e1ec:	f7ff ffe7 	bl	e1be <stop>
}
    e1f0:	bd08      	pop	{r3, pc}

0000e1f2 <async_start>:
{
    e1f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e1f6:	4606      	mov	r6, r0
    e1f8:	4690      	mov	r8, r2
    e1fa:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    e1fc:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    e1fe:	4629      	mov	r1, r5
    e200:	f7ff ff66 	bl	e0d0 <get_sub_data>
    e204:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    e206:	9906      	ldr	r1, [sp, #24]
    e208:	3008      	adds	r0, #8
    e20a:	f7ff ff95 	bl	e138 <set_starting_state>
	if (err < 0) {
    e20e:	2800      	cmp	r0, #0
    e210:	db09      	blt.n	e226 <async_start+0x34>
	subdata->cb = cb;
    e212:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    e216:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    e218:	4629      	mov	r1, r5
    e21a:	4630      	mov	r0, r6
    e21c:	f7ff ff5f 	bl	e0de <get_sub_config>
    e220:	6803      	ldr	r3, [r0, #0]
    e222:	4798      	blx	r3
	return 0;
    e224:	2000      	movs	r0, #0
}
    e226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e22a <api_start>:
{
    e22a:	b510      	push	{r4, lr}
    e22c:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    e22e:	2480      	movs	r4, #128	; 0x80
    e230:	9400      	str	r4, [sp, #0]
    e232:	f7ff ffde 	bl	e1f2 <async_start>
}
    e236:	b002      	add	sp, #8
    e238:	bd10      	pop	{r4, pc}

0000e23a <onoff_started_callback>:
{
    e23a:	b510      	push	{r4, lr}
    e23c:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    e23e:	b2c9      	uxtb	r1, r1
    e240:	f7ff ff53 	bl	e0ea <get_onoff_manager>
	notify(mgr, 0);
    e244:	2100      	movs	r1, #0
    e246:	47a0      	blx	r4
}
    e248:	bd10      	pop	{r4, pc}

0000e24a <hfclk_start>:
{
    e24a:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    e24c:	2001      	movs	r0, #1
    e24e:	f000 fd2d 	bl	ecac <nrfx_clock_start>
}
    e252:	bd08      	pop	{r3, pc}

0000e254 <lfclk_start>:
{
    e254:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    e256:	2000      	movs	r0, #0
    e258:	f000 fd28 	bl	ecac <nrfx_clock_start>
}
    e25c:	bd08      	pop	{r3, pc}

0000e25e <hfclk_stop>:
{
    e25e:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    e260:	2001      	movs	r0, #1
    e262:	f000 fd73 	bl	ed4c <nrfx_clock_stop>
}
    e266:	bd08      	pop	{r3, pc}

0000e268 <lfclk_stop>:
{
    e268:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    e26a:	2000      	movs	r0, #0
    e26c:	f000 fd6e 	bl	ed4c <nrfx_clock_stop>
}
    e270:	bd08      	pop	{r3, pc}

0000e272 <k_msleep>:
{
    e272:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    e274:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    e278:	17c1      	asrs	r1, r0, #31
    e27a:	03c9      	lsls	r1, r1, #15
    e27c:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    e280:	03c0      	lsls	r0, r0, #15
    e282:	f240 33e7 	movw	r3, #999	; 0x3e7
    e286:	18c0      	adds	r0, r0, r3
    e288:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e28c:	f04f 0300 	mov.w	r3, #0
    e290:	f141 0100 	adc.w	r1, r1, #0
    e294:	f7f1 ff34 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    e298:	f7fd fa4c 	bl	b734 <z_impl_k_sleep>
}
    e29c:	bd08      	pop	{r3, pc}

0000e29e <blocking_start_callback>:
{
    e29e:	b508      	push	{r3, lr}
    e2a0:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    e2a2:	f7fc fd61 	bl	ad68 <z_impl_k_sem_give>
}
    e2a6:	bd08      	pop	{r3, pc}

0000e2a8 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
    e2a8:	460b      	mov	r3, r1
    e2aa:	b139      	cbz	r1, e2bc <sys_slist_remove+0x14>
	return node->next;
    e2ac:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
    e2ae:	6019      	str	r1, [r3, #0]
	return list->tail;
    e2b0:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    e2b2:	428a      	cmp	r2, r1
    e2b4:	d009      	beq.n	e2ca <sys_slist_remove+0x22>
	parent->next = child;
    e2b6:	2300      	movs	r3, #0
    e2b8:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    e2ba:	4770      	bx	lr
	return node->next;
    e2bc:	6813      	ldr	r3, [r2, #0]
	list->head = node;
    e2be:	6003      	str	r3, [r0, #0]
	return list->tail;
    e2c0:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    e2c2:	428a      	cmp	r2, r1
    e2c4:	d1f7      	bne.n	e2b6 <sys_slist_remove+0xe>
	list->tail = node;
    e2c6:	6043      	str	r3, [r0, #4]
}
    e2c8:	e7f5      	b.n	e2b6 <sys_slist_remove+0xe>
	list->tail = node;
    e2ca:	6043      	str	r3, [r0, #4]
}
    e2cc:	e7f3      	b.n	e2b6 <sys_slist_remove+0xe>

0000e2ce <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    e2ce:	b508      	push	{r3, lr}
    e2d0:	460a      	mov	r2, r1
	return list->head;
    e2d2:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    e2d4:	2100      	movs	r1, #0
    e2d6:	e001      	b.n	e2dc <sys_slist_find_and_remove+0xe>
    e2d8:	4619      	mov	r1, r3
    e2da:	681b      	ldr	r3, [r3, #0]
    e2dc:	b12b      	cbz	r3, e2ea <sys_slist_find_and_remove+0x1c>
    e2de:	4293      	cmp	r3, r2
    e2e0:	d1fa      	bne.n	e2d8 <sys_slist_find_and_remove+0xa>
    e2e2:	f7ff ffe1 	bl	e2a8 <sys_slist_remove>
    e2e6:	2001      	movs	r0, #1
    e2e8:	e000      	b.n	e2ec <sys_slist_find_and_remove+0x1e>
    e2ea:	2000      	movs	r0, #0
    e2ec:	bd08      	pop	{r3, pc}

0000e2ee <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
    e2ee:	b570      	push	{r4, r5, r6, lr}
    e2f0:	4604      	mov	r4, r0
    e2f2:	460d      	mov	r5, r1
    e2f4:	4616      	mov	r6, r2
	return list->head;
    e2f6:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    e2f8:	b133      	cbz	r3, e308 <gpio_manage_callback+0x1a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    e2fa:	f7ff ffe8 	bl	e2ce <sys_slist_find_and_remove>
    e2fe:	b970      	cbnz	r0, e31e <gpio_manage_callback+0x30>
			if (!set) {
    e300:	b91e      	cbnz	r6, e30a <gpio_manage_callback+0x1c>
				return -EINVAL;
    e302:	f06f 0015 	mvn.w	r0, #21
    e306:	e006      	b.n	e316 <gpio_manage_callback+0x28>
			}
		}
	} else if (!set) {
    e308:	b132      	cbz	r2, e318 <gpio_manage_callback+0x2a>
    e30a:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    e30c:	602b      	str	r3, [r5, #0]
	list->head = node;
    e30e:	6025      	str	r5, [r4, #0]
	return list->tail;
    e310:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
    e312:	b143      	cbz	r3, e326 <gpio_manage_callback+0x38>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    e314:	2000      	movs	r0, #0
}
    e316:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    e318:	f06f 0015 	mvn.w	r0, #21
    e31c:	e7fb      	b.n	e316 <gpio_manage_callback+0x28>
	if (set) {
    e31e:	2e00      	cmp	r6, #0
    e320:	d1f3      	bne.n	e30a <gpio_manage_callback+0x1c>
	return 0;
    e322:	2000      	movs	r0, #0
    e324:	e7f7      	b.n	e316 <gpio_manage_callback+0x28>
	list->tail = node;
    e326:	6065      	str	r5, [r4, #4]
    e328:	2000      	movs	r0, #0
}
    e32a:	e7f4      	b.n	e316 <gpio_manage_callback+0x28>

0000e32c <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
    e32c:	b570      	push	{r4, r5, r6, lr}
    e32e:	460e      	mov	r6, r1
    e330:	4615      	mov	r5, r2
	return list->head;
    e332:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    e334:	b121      	cbz	r1, e340 <gpio_fire_callbacks+0x14>
	return node->next;
    e336:	680c      	ldr	r4, [r1, #0]
    e338:	b13c      	cbz	r4, e34a <gpio_fire_callbacks+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    e33a:	b931      	cbnz	r1, e34a <gpio_fire_callbacks+0x1e>
    e33c:	460c      	mov	r4, r1
    e33e:	e004      	b.n	e34a <gpio_fire_callbacks+0x1e>
    e340:	460c      	mov	r4, r1
    e342:	e002      	b.n	e34a <gpio_fire_callbacks+0x1e>
    e344:	4623      	mov	r3, r4
    e346:	4621      	mov	r1, r4
    e348:	461c      	mov	r4, r3
    e34a:	b171      	cbz	r1, e36a <gpio_fire_callbacks+0x3e>
		if (cb->pin_mask & pins) {
    e34c:	688a      	ldr	r2, [r1, #8]
    e34e:	402a      	ands	r2, r5
    e350:	d002      	beq.n	e358 <gpio_fire_callbacks+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    e352:	684b      	ldr	r3, [r1, #4]
    e354:	4630      	mov	r0, r6
    e356:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    e358:	2c00      	cmp	r4, #0
    e35a:	d0f3      	beq.n	e344 <gpio_fire_callbacks+0x18>
	return node->next;
    e35c:	6823      	ldr	r3, [r4, #0]
    e35e:	2b00      	cmp	r3, #0
    e360:	d0f1      	beq.n	e346 <gpio_fire_callbacks+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    e362:	2c00      	cmp	r4, #0
    e364:	d1ef      	bne.n	e346 <gpio_fire_callbacks+0x1a>
    e366:	4623      	mov	r3, r4
    e368:	e7ed      	b.n	e346 <gpio_fire_callbacks+0x1a>
		}
	}
}
    e36a:	bd70      	pop	{r4, r5, r6, pc}

0000e36c <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    e36c:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
    e370:	0580      	lsls	r0, r0, #22
    e372:	0d80      	lsrs	r0, r0, #22
    e374:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
    e378:	d033      	beq.n	e3e2 <get_drive+0x76>
    e37a:	d816      	bhi.n	e3aa <get_drive+0x3e>
    e37c:	2806      	cmp	r0, #6
    e37e:	d02c      	beq.n	e3da <get_drive+0x6e>
    e380:	d906      	bls.n	e390 <get_drive+0x24>
    e382:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    e386:	d10d      	bne.n	e3a4 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
    e388:	2301      	movs	r3, #1
    e38a:	700b      	strb	r3, [r1, #0]
	return 0;
    e38c:	2000      	movs	r0, #0
		break;
    e38e:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    e390:	b300      	cbz	r0, e3d4 <get_drive+0x68>
    e392:	2802      	cmp	r0, #2
    e394:	d103      	bne.n	e39e <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
    e396:	2304      	movs	r3, #4
    e398:	700b      	strb	r3, [r1, #0]
	return 0;
    e39a:	2000      	movs	r0, #0
		break;
    e39c:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    e39e:	f06f 0015 	mvn.w	r0, #21
    e3a2:	4770      	bx	lr
    e3a4:	f06f 0015 	mvn.w	r0, #21
    e3a8:	4770      	bx	lr
    e3aa:	f240 2302 	movw	r3, #514	; 0x202
    e3ae:	4298      	cmp	r0, r3
    e3b0:	d01b      	beq.n	e3ea <get_drive+0x7e>
    e3b2:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
    e3b6:	d103      	bne.n	e3c0 <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
    e3b8:	2303      	movs	r3, #3
    e3ba:	700b      	strb	r3, [r1, #0]
	return 0;
    e3bc:	2000      	movs	r0, #0
		break;
    e3be:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    e3c0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    e3c4:	d103      	bne.n	e3ce <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
    e3c6:	2302      	movs	r3, #2
    e3c8:	700b      	strb	r3, [r1, #0]
	return 0;
    e3ca:	2000      	movs	r0, #0
		break;
    e3cc:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    e3ce:	f06f 0015 	mvn.w	r0, #21
    e3d2:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    e3d4:	2000      	movs	r0, #0
    e3d6:	7008      	strb	r0, [r1, #0]
		break;
    e3d8:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    e3da:	2306      	movs	r3, #6
    e3dc:	700b      	strb	r3, [r1, #0]
	return 0;
    e3de:	2000      	movs	r0, #0
		break;
    e3e0:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    e3e2:	2307      	movs	r3, #7
    e3e4:	700b      	strb	r3, [r1, #0]
	return 0;
    e3e6:	2000      	movs	r0, #0
		break;
    e3e8:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    e3ea:	2305      	movs	r3, #5
    e3ec:	700b      	strb	r3, [r1, #0]
	return 0;
    e3ee:	2000      	movs	r0, #0
}
    e3f0:	4770      	bx	lr

0000e3f2 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    e3f2:	f010 0f10 	tst.w	r0, #16
    e3f6:	d104      	bne.n	e402 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    e3f8:	f010 0f20 	tst.w	r0, #32
    e3fc:	d103      	bne.n	e406 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    e3fe:	2000      	movs	r0, #0
    e400:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    e402:	2003      	movs	r0, #3
    e404:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    e406:	2001      	movs	r0, #1
}
    e408:	4770      	bx	lr

0000e40a <gpio_nrfx_port_get_raw>:
	return port->config;
    e40a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e40c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    e40e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    e412:	600b      	str	r3, [r1, #0]
}
    e414:	2000      	movs	r0, #0
    e416:	4770      	bx	lr

0000e418 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    e418:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e41a:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    e41c:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    e420:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    e424:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    e428:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    e42c:	2000      	movs	r0, #0
    e42e:	4770      	bx	lr

0000e430 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    e430:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e432:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    e434:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    e438:	2000      	movs	r0, #0
    e43a:	4770      	bx	lr

0000e43c <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    e43c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e43e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    e440:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    e444:	2000      	movs	r0, #0
    e446:	4770      	bx	lr

0000e448 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    e448:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e44a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    e44c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    e450:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    e454:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    e456:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    e45a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    e45e:	2000      	movs	r0, #0
    e460:	4770      	bx	lr

0000e462 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    e462:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    e466:	d007      	beq.n	e478 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    e468:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    e46c:	d00d      	beq.n	e48a <get_trigger+0x28>
    e46e:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    e472:	d008      	beq.n	e486 <get_trigger+0x24>
    e474:	2001      	movs	r0, #1
}
    e476:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    e478:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    e47c:	d001      	beq.n	e482 <get_trigger+0x20>
    e47e:	2005      	movs	r0, #5
    e480:	4770      	bx	lr
    e482:	2004      	movs	r0, #4
    e484:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    e486:	2002      	movs	r0, #2
    e488:	4770      	bx	lr
    e48a:	2003      	movs	r0, #3
    e48c:	4770      	bx	lr

0000e48e <gpio_nrfx_manage_callback>:
{
    e48e:	b508      	push	{r3, lr}
	return port->data;
    e490:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    e492:	3004      	adds	r0, #4
    e494:	f7ff ff2b 	bl	e2ee <gpio_manage_callback>
}
    e498:	bd08      	pop	{r3, pc}

0000e49a <nrfx_gpio_handler>:
{
    e49a:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
    e49c:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    e4a0:	0940      	lsrs	r0, r0, #5
    e4a2:	f7f9 f99f 	bl	77e4 <get_dev>
	if (port == NULL) {
    e4a6:	b130      	cbz	r0, e4b6 <nrfx_gpio_handler+0x1c>
    e4a8:	4601      	mov	r1, r0
	return port->data;
    e4aa:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    e4ac:	2201      	movs	r2, #1
    e4ae:	40a2      	lsls	r2, r4
    e4b0:	3004      	adds	r0, #4
    e4b2:	f7ff ff3b 	bl	e32c <gpio_fire_callbacks>
}
    e4b6:	bd10      	pop	{r4, pc}

0000e4b8 <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    e4b8:	b510      	push	{r4, lr}
    e4ba:	b084      	sub	sp, #16
    e4bc:	460c      	mov	r4, r1
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
    e4be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    e4c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
}
#endif /* defined(CONFIG_SOC_HFXO_CAP_INTERNAL) */

static inline void soc_secure_read_deviceid(uint32_t deviceid[2])
{
	deviceid[0] = nrf_ficr_deviceid_get(NRF_FICR, 0);
    e4c4:	9200      	str	r2, [sp, #0]
    e4c6:	6e59      	ldr	r1, [r3, #100]	; 0x64
	deviceid[1] = nrf_ficr_deviceid_get(NRF_FICR, 1);
    e4c8:	9101      	str	r1, [sp, #4]
	struct nrf_uid dev_id;
	uint32_t deviceid[2];

	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
    e4ca:	0a0b      	lsrs	r3, r1, #8
    e4cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    e4d0:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
    e4d4:	ea4f 2c01 	mov.w	ip, r1, lsl #8
    e4d8:	f40c 0c7f 	and.w	ip, ip, #16711680	; 0xff0000
    e4dc:	ea43 030c 	orr.w	r3, r3, ip
    e4e0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    e4e4:	9302      	str	r3, [sp, #8]
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    e4e6:	0a13      	lsrs	r3, r2, #8
    e4e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    e4ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    e4f0:	0211      	lsls	r1, r2, #8
    e4f2:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    e4f6:	430b      	orrs	r3, r1
    e4f8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    e4fc:	9303      	str	r3, [sp, #12]

	if (length > sizeof(dev_id.id)) {
    e4fe:	2c08      	cmp	r4, #8
    e500:	d900      	bls.n	e504 <z_impl_hwinfo_get_device_id+0x4c>
		length = sizeof(dev_id.id);
    e502:	2408      	movs	r4, #8
	}

	memcpy(buffer, dev_id.id, length);
    e504:	4622      	mov	r2, r4
    e506:	a902      	add	r1, sp, #8
    e508:	f7ff fc58 	bl	ddbc <memcpy>

	return length;
}
    e50c:	4620      	mov	r0, r4
    e50e:	b004      	add	sp, #16
    e510:	bd10      	pop	{r4, pc}

0000e512 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    e512:	b500      	push	{lr}
	*state = &config->states[0];
    e514:	6843      	ldr	r3, [r0, #4]
    e516:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    e518:	e001      	b.n	e51e <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    e51a:	3308      	adds	r3, #8
    e51c:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    e51e:	6813      	ldr	r3, [r2, #0]
    e520:	f890 c008 	ldrb.w	ip, [r0, #8]
    e524:	f8d0 e004 	ldr.w	lr, [r0, #4]
    e528:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
    e52c:	4563      	cmp	r3, ip
    e52e:	d205      	bcs.n	e53c <pinctrl_lookup_state+0x2a>
		if (id == (*state)->id) {
    e530:	f893 c005 	ldrb.w	ip, [r3, #5]
    e534:	458c      	cmp	ip, r1
    e536:	d1f0      	bne.n	e51a <pinctrl_lookup_state+0x8>
			return 0;
    e538:	2000      	movs	r0, #0
    e53a:	e001      	b.n	e540 <pinctrl_lookup_state+0x2e>
	}

	return -ENOENT;
    e53c:	f06f 0001 	mvn.w	r0, #1
}
    e540:	f85d fb04 	ldr.w	pc, [sp], #4

0000e544 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    e544:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    e546:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    e548:	f04f 0120 	mov.w	r1, #32
    e54c:	f3ef 8311 	mrs	r3, BASEPRI
    e550:	f381 8812 	msr	BASEPRI_MAX, r1
    e554:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e558:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    e55c:	b131      	cbz	r1, e56c <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e55e:	2100      	movs	r1, #0
    e560:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
    e564:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e568:	2101      	movs	r1, #1
    e56a:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
    e56c:	f383 8811 	msr	BASEPRI, r3
    e570:	f3bf 8f6f 	isb	sy
}
    e574:	4770      	bx	lr

0000e576 <uarte_nrfx_isr_int>:
{
    e576:	b570      	push	{r4, r5, r6, lr}
    e578:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    e57a:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
    e57c:	6835      	ldr	r5, [r6, #0]
    return p_reg->INTENSET & mask;
    e57e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    e582:	f413 7f80 	tst.w	r3, #256	; 0x100
    e586:	d003      	beq.n	e590 <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e588:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    e58c:	2b00      	cmp	r3, #0
    e58e:	d138      	bne.n	e602 <uarte_nrfx_isr_int+0x8c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    e590:	6873      	ldr	r3, [r6, #4]
    e592:	f013 0f10 	tst.w	r3, #16
    e596:	d01a      	beq.n	e5ce <uarte_nrfx_isr_int+0x58>
	__asm__ volatile(
    e598:	f04f 0220 	mov.w	r2, #32
    e59c:	f3ef 8311 	mrs	r3, BASEPRI
    e5a0:	f382 8812 	msr	BASEPRI_MAX, r2
    e5a4:	f3bf 8f6f 	isb	sy
    e5a8:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    e5ac:	b112      	cbz	r2, e5b4 <uarte_nrfx_isr_int+0x3e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    e5ae:	2200      	movs	r2, #0
    e5b0:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
		struct uarte_nrfx_data *data = dev->data;
    e5b4:	6922      	ldr	r2, [r4, #16]
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    e5b6:	68d2      	ldr	r2, [r2, #12]
    e5b8:	b10a      	cbz	r2, e5be <uarte_nrfx_isr_int+0x48>
    e5ba:	6912      	ldr	r2, [r2, #16]
    e5bc:	b91a      	cbnz	r2, e5c6 <uarte_nrfx_isr_int+0x50>
    p_reg->INTENCLR = mask;
    e5be:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    e5c2:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	__asm__ volatile(
    e5c6:	f383 8811 	msr	BASEPRI, r3
    e5ca:	f3bf 8f6f 	isb	sy
	struct uarte_nrfx_data *data = dev->data;
    e5ce:	6923      	ldr	r3, [r4, #16]
	if (!data->int_driven) {
    e5d0:	68da      	ldr	r2, [r3, #12]
    e5d2:	b1aa      	cbz	r2, e600 <uarte_nrfx_isr_int+0x8a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e5d4:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    e5d8:	b121      	cbz	r1, e5e4 <uarte_nrfx_isr_int+0x6e>
		data->int_driven->fifo_fill_lock = 0;
    e5da:	2100      	movs	r1, #0
    e5dc:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    e5de:	68da      	ldr	r2, [r3, #12]
    e5e0:	7b92      	ldrb	r2, [r2, #14]
    e5e2:	b98a      	cbnz	r2, e608 <uarte_nrfx_isr_int+0x92>
    e5e4:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    e5e8:	b122      	cbz	r2, e5f4 <uarte_nrfx_isr_int+0x7e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e5ea:	2200      	movs	r2, #0
    e5ec:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
    e5f0:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (data->int_driven->cb) {
    e5f4:	68da      	ldr	r2, [r3, #12]
    e5f6:	6813      	ldr	r3, [r2, #0]
    e5f8:	b113      	cbz	r3, e600 <uarte_nrfx_isr_int+0x8a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    e5fa:	6851      	ldr	r1, [r2, #4]
    e5fc:	4620      	mov	r0, r4
    e5fe:	4798      	blx	r3
}
    e600:	bd70      	pop	{r4, r5, r6, pc}
		endtx_isr(dev);
    e602:	f7ff ff9f 	bl	e544 <endtx_isr>
    e606:	e7c3      	b.n	e590 <uarte_nrfx_isr_int+0x1a>
    p_reg->INTENCLR = mask;
    e608:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    e60c:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    e610:	68db      	ldr	r3, [r3, #12]
    e612:	7399      	strb	r1, [r3, #14]
			return;
    e614:	e7f4      	b.n	e600 <uarte_nrfx_isr_int+0x8a>

0000e616 <uarte_nrfx_configure>:
{
    e616:	b570      	push	{r4, r5, r6, lr}
    e618:	b082      	sub	sp, #8
    e61a:	4605      	mov	r5, r0
    e61c:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    e61e:	6906      	ldr	r6, [r0, #16]
	switch (cfg->stop_bits) {
    e620:	794b      	ldrb	r3, [r1, #5]
    e622:	2b01      	cmp	r3, #1
    e624:	d006      	beq.n	e634 <uarte_nrfx_configure+0x1e>
    e626:	2b03      	cmp	r3, #3
    e628:	d011      	beq.n	e64e <uarte_nrfx_configure+0x38>
    e62a:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
    e62e:	4610      	mov	r0, r2
    e630:	b002      	add	sp, #8
    e632:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    e634:	2300      	movs	r3, #0
    e636:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    e63a:	79a3      	ldrb	r3, [r4, #6]
    e63c:	2b03      	cmp	r3, #3
    e63e:	d146      	bne.n	e6ce <uarte_nrfx_configure+0xb8>
	switch (cfg->flow_ctrl) {
    e640:	79e3      	ldrb	r3, [r4, #7]
    e642:	b143      	cbz	r3, e656 <uarte_nrfx_configure+0x40>
    e644:	2b01      	cmp	r3, #1
    e646:	d015      	beq.n	e674 <uarte_nrfx_configure+0x5e>
    e648:	f06f 0285 	mvn.w	r2, #133	; 0x85
    e64c:	e7ef      	b.n	e62e <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    e64e:	2310      	movs	r3, #16
    e650:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    e654:	e7f1      	b.n	e63a <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    e656:	2300      	movs	r3, #0
    e658:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    e65c:	2300      	movs	r3, #0
    e65e:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
    e662:	7923      	ldrb	r3, [r4, #4]
    e664:	2b01      	cmp	r3, #1
    e666:	d02a      	beq.n	e6be <uarte_nrfx_configure+0xa8>
    e668:	2b02      	cmp	r3, #2
    e66a:	d024      	beq.n	e6b6 <uarte_nrfx_configure+0xa0>
    e66c:	b133      	cbz	r3, e67c <uarte_nrfx_configure+0x66>
    e66e:	f06f 0285 	mvn.w	r2, #133	; 0x85
    e672:	e7dc      	b.n	e62e <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    e674:	2301      	movs	r3, #1
    e676:	f88d 3000 	strb.w	r3, [sp]
		break;
    e67a:	e7ef      	b.n	e65c <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    e67c:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    e680:	6821      	ldr	r1, [r4, #0]
    e682:	4628      	mov	r0, r5
    e684:	f7f9 fa9c 	bl	7bc0 <baudrate_set>
    e688:	4602      	mov	r2, r0
    e68a:	bb18      	cbnz	r0, e6d4 <uarte_nrfx_configure+0xbe>
	const struct uarte_nrfx_config *config = dev->config;
    e68c:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
    e68e:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    e690:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
    e694:	f89d 0002 	ldrb.w	r0, [sp, #2]
    e698:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
    e69a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    e69e:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
    e6a0:	f89d 0000 	ldrb.w	r0, [sp]
    e6a4:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    e6a6:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	data->uart_config = *cfg;
    e6aa:	3604      	adds	r6, #4
    e6ac:	e894 0003 	ldmia.w	r4, {r0, r1}
    e6b0:	e886 0003 	stmia.w	r6, {r0, r1}
	return 0;
    e6b4:	e7bb      	b.n	e62e <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    e6b6:	230e      	movs	r3, #14
    e6b8:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
    e6bc:	e7e0      	b.n	e680 <uarte_nrfx_configure+0x6a>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    e6be:	230e      	movs	r3, #14
    e6c0:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    e6c4:	f44f 7380 	mov.w	r3, #256	; 0x100
    e6c8:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
    e6cc:	e7d8      	b.n	e680 <uarte_nrfx_configure+0x6a>
		return -ENOTSUP;
    e6ce:	f06f 0285 	mvn.w	r2, #133	; 0x85
    e6d2:	e7ac      	b.n	e62e <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    e6d4:	f06f 0285 	mvn.w	r2, #133	; 0x85
    e6d8:	e7a9      	b.n	e62e <uarte_nrfx_configure+0x18>

0000e6da <uarte_nrfx_config_get>:
{
    e6da:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    e6dc:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    e6de:	3304      	adds	r3, #4
    e6e0:	e893 0003 	ldmia.w	r3, {r0, r1}
    e6e4:	e882 0003 	stmia.w	r2, {r0, r1}
}
    e6e8:	2000      	movs	r0, #0
    e6ea:	4770      	bx	lr

0000e6ec <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    e6ec:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    e6ee:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    e6f0:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    e6f4:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    e6f8:	4770      	bx	lr

0000e6fa <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    e6fa:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    e6fc:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    e6fe:	685b      	ldr	r3, [r3, #4]
    e700:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e704:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    e708:	b929      	cbnz	r1, e716 <is_tx_ready+0x1c>
    e70a:	b933      	cbnz	r3, e71a <is_tx_ready+0x20>
    e70c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    e710:	b92b      	cbnz	r3, e71e <is_tx_ready+0x24>
    e712:	2000      	movs	r0, #0
    e714:	4770      	bx	lr
    e716:	2001      	movs	r0, #1
    e718:	4770      	bx	lr
    e71a:	2000      	movs	r0, #0
    e71c:	4770      	bx	lr
    e71e:	2001      	movs	r0, #1
}
    e720:	4770      	bx	lr

0000e722 <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    e722:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    e724:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    e726:	2208      	movs	r2, #8
    e728:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    e72c:	4770      	bx	lr

0000e72e <tx_start>:
{
    e72e:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    e730:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    e732:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    e734:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    e738:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e73c:	2200      	movs	r2, #0
    e73e:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    e742:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    e746:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    e74a:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    e74e:	685b      	ldr	r3, [r3, #4]
    e750:	f013 0f10 	tst.w	r3, #16
    e754:	d102      	bne.n	e75c <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e756:	2301      	movs	r3, #1
    e758:	60a3      	str	r3, [r4, #8]
}
    e75a:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    e75c:	2101      	movs	r1, #1
    e75e:	f7ff ffe0 	bl	e722 <uarte_enable>
    p_reg->INTENSET = mask;
    e762:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    e766:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    e76a:	e7f4      	b.n	e756 <tx_start+0x28>

0000e76c <uarte_nrfx_poll_in>:
{
    e76c:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    e76e:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    e770:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    e772:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e774:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    e778:	b15a      	cbz	r2, e792 <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
    e77a:	69a2      	ldr	r2, [r4, #24]
    e77c:	7812      	ldrb	r2, [r2, #0]
    e77e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e780:	2000      	movs	r0, #0
    e782:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    e786:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e78a:	2201      	movs	r2, #1
    e78c:	601a      	str	r2, [r3, #0]
}
    e78e:	bc10      	pop	{r4}
    e790:	4770      	bx	lr
		return -1;
    e792:	f04f 30ff 	mov.w	r0, #4294967295
    e796:	e7fa      	b.n	e78e <uarte_nrfx_poll_in+0x22>

0000e798 <uarte_nrfx_fifo_read>:
	const struct uarte_nrfx_config *config = dev->config;
    e798:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    e79a:	681b      	ldr	r3, [r3, #0]
	const struct uarte_nrfx_data *data = dev->data;
    e79c:	6900      	ldr	r0, [r0, #16]
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    e79e:	2a00      	cmp	r2, #0
    e7a0:	dd0d      	ble.n	e7be <uarte_nrfx_fifo_read+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e7a2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    e7a6:	b162      	cbz	r2, e7c2 <uarte_nrfx_fifo_read+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e7a8:	2200      	movs	r2, #0
    e7aa:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    e7ae:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = *data->rx_data;
    e7b2:	6982      	ldr	r2, [r0, #24]
    e7b4:	7812      	ldrb	r2, [r2, #0]
    e7b6:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e7b8:	2001      	movs	r0, #1
    e7ba:	6018      	str	r0, [r3, #0]
}
    e7bc:	4770      	bx	lr
	int num_rx = 0;
    e7be:	2000      	movs	r0, #0
    e7c0:	4770      	bx	lr
    e7c2:	2000      	movs	r0, #0
}
    e7c4:	4770      	bx	lr

0000e7c6 <uarte_nrfx_irq_tx_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    e7c6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    e7c8:	681a      	ldr	r2, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
    e7ca:	6901      	ldr	r1, [r0, #16]
	__asm__ volatile(
    e7cc:	f04f 0020 	mov.w	r0, #32
    e7d0:	f3ef 8311 	mrs	r3, BASEPRI
    e7d4:	f380 8812 	msr	BASEPRI_MAX, r0
    e7d8:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    e7dc:	68c9      	ldr	r1, [r1, #12]
    e7de:	2000      	movs	r0, #0
    e7e0:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    e7e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    e7e6:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    e7ea:	f383 8811 	msr	BASEPRI, r3
    e7ee:	f3bf 8f6f 	isb	sy
}
    e7f2:	4770      	bx	lr

0000e7f4 <uarte_nrfx_irq_tx_disable>:
	struct uarte_nrfx_data *data = dev->data;
    e7f4:	6903      	ldr	r3, [r0, #16]
	data->int_driven->disable_tx_irq = true;
    e7f6:	68db      	ldr	r3, [r3, #12]
    e7f8:	2201      	movs	r2, #1
    e7fa:	739a      	strb	r2, [r3, #14]
}
    e7fc:	4770      	bx	lr

0000e7fe <uarte_nrfx_irq_tx_ready_complete>:
	const struct uarte_nrfx_config *config = dev->config;
    e7fe:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    e800:	6819      	ldr	r1, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
    e802:	6903      	ldr	r3, [r0, #16]
	bool ready = !data->int_driven->disable_tx_irq &&
    e804:	68db      	ldr	r3, [r3, #12]
    e806:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    e808:	b95a      	cbnz	r2, e822 <uarte_nrfx_irq_tx_ready_complete+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e80a:	f8d1 2158 	ldr.w	r2, [r1, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    e80e:	b152      	cbz	r2, e826 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    e810:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    e814:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
    e818:	d007      	beq.n	e82a <uarte_nrfx_irq_tx_ready_complete+0x2c>
		data->int_driven->fifo_fill_lock = 0;
    e81a:	2200      	movs	r2, #0
    e81c:	611a      	str	r2, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    e81e:	2001      	movs	r0, #1
    e820:	4770      	bx	lr
    e822:	2000      	movs	r0, #0
    e824:	4770      	bx	lr
    e826:	2000      	movs	r0, #0
    e828:	4770      	bx	lr
    e82a:	2000      	movs	r0, #0
}
    e82c:	4770      	bx	lr

0000e82e <uarte_nrfx_irq_rx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    e82e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    e830:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e832:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    e836:	3800      	subs	r0, #0
    e838:	bf18      	it	ne
    e83a:	2001      	movne	r0, #1
    e83c:	4770      	bx	lr

0000e83e <uarte_nrfx_irq_rx_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    e83e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    e840:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    e842:	2210      	movs	r2, #16
    e844:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    e848:	4770      	bx	lr

0000e84a <uarte_nrfx_irq_rx_disable>:
	const struct uarte_nrfx_config *config = dev->config;
    e84a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    e84c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    e84e:	2210      	movs	r2, #16
    e850:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    e854:	4770      	bx	lr

0000e856 <uarte_nrfx_irq_err_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    e856:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    e858:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    e85a:	f44f 7200 	mov.w	r2, #512	; 0x200
    e85e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    e862:	4770      	bx	lr

0000e864 <uarte_nrfx_irq_err_disable>:
	const struct uarte_nrfx_config *config = dev->config;
    e864:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    e866:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    e868:	f44f 7200 	mov.w	r2, #512	; 0x200
    e86c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    e870:	4770      	bx	lr

0000e872 <uarte_nrfx_irq_is_pending>:
{
    e872:	b538      	push	{r3, r4, r5, lr}
    e874:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    e876:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    e878:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    e87a:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    e87e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
    e882:	d106      	bne.n	e892 <uarte_nrfx_irq_is_pending+0x20>
    e884:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
    e888:	f013 0f10 	tst.w	r3, #16
    e88c:	d107      	bne.n	e89e <uarte_nrfx_irq_is_pending+0x2c>
    e88e:	2000      	movs	r0, #0
}
    e890:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    e892:	f7ff ffb4 	bl	e7fe <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    e896:	2800      	cmp	r0, #0
    e898:	d0f4      	beq.n	e884 <uarte_nrfx_irq_is_pending+0x12>
		||
    e89a:	2001      	movs	r0, #1
    e89c:	e7f8      	b.n	e890 <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
    e89e:	4620      	mov	r0, r4
    e8a0:	f7ff ffc5 	bl	e82e <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    e8a4:	2800      	cmp	r0, #0
    e8a6:	d0f3      	beq.n	e890 <uarte_nrfx_irq_is_pending+0x1e>
		||
    e8a8:	2001      	movs	r0, #1
    e8aa:	e7f1      	b.n	e890 <uarte_nrfx_irq_is_pending+0x1e>

0000e8ac <uarte_nrfx_irq_update>:
}
    e8ac:	2001      	movs	r0, #1
    e8ae:	4770      	bx	lr

0000e8b0 <uarte_nrfx_irq_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
    e8b0:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
    e8b2:	68d8      	ldr	r0, [r3, #12]
    e8b4:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
    e8b6:	68db      	ldr	r3, [r3, #12]
    e8b8:	605a      	str	r2, [r3, #4]
}
    e8ba:	4770      	bx	lr

0000e8bc <uarte_nrfx_fifo_fill>:
{
    e8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e8be:	4606      	mov	r6, r0
	struct uarte_nrfx_data *data = dev->data;
    e8c0:	6907      	ldr	r7, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
    e8c2:	68fb      	ldr	r3, [r7, #12]
    e8c4:	899c      	ldrh	r4, [r3, #12]
    e8c6:	4294      	cmp	r4, r2
    e8c8:	bfa8      	it	ge
    e8ca:	4614      	movge	r4, r2
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    e8cc:	3310      	adds	r3, #16
    e8ce:	2201      	movs	r2, #1
    e8d0:	f3bf 8f5b 	dmb	ish
    e8d4:	e853 0f00 	ldrex	r0, [r3]
    e8d8:	2800      	cmp	r0, #0
    e8da:	d103      	bne.n	e8e4 <uarte_nrfx_fifo_fill+0x28>
    e8dc:	e843 2500 	strex	r5, r2, [r3]
    e8e0:	2d00      	cmp	r5, #0
    e8e2:	d1f7      	bne.n	e8d4 <uarte_nrfx_fifo_fill+0x18>
    e8e4:	f3bf 8f5b 	dmb	ish
    e8e8:	d120      	bne.n	e92c <uarte_nrfx_fifo_fill+0x70>
	memcpy(data->int_driven->tx_buffer, tx_data, len);
    e8ea:	68fb      	ldr	r3, [r7, #12]
    e8ec:	4622      	mov	r2, r4
    e8ee:	6898      	ldr	r0, [r3, #8]
    e8f0:	f7ff fa64 	bl	ddbc <memcpy>
	__asm__ volatile(
    e8f4:	f04f 0320 	mov.w	r3, #32
    e8f8:	f3ef 8511 	mrs	r5, BASEPRI
    e8fc:	f383 8812 	msr	BASEPRI_MAX, r3
    e900:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    e904:	4630      	mov	r0, r6
    e906:	f7ff fef8 	bl	e6fa <is_tx_ready>
    e90a:	b940      	cbnz	r0, e91e <uarte_nrfx_fifo_fill+0x62>
		data->int_driven->fifo_fill_lock = 0;
    e90c:	68fb      	ldr	r3, [r7, #12]
    e90e:	2400      	movs	r4, #0
    e910:	611c      	str	r4, [r3, #16]
	__asm__ volatile(
    e912:	f385 8811 	msr	BASEPRI, r5
    e916:	f3bf 8f6f 	isb	sy
}
    e91a:	4620      	mov	r0, r4
    e91c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
    e91e:	68fb      	ldr	r3, [r7, #12]
    e920:	4622      	mov	r2, r4
    e922:	6899      	ldr	r1, [r3, #8]
    e924:	4630      	mov	r0, r6
    e926:	f7ff ff02 	bl	e72e <tx_start>
    e92a:	e7f2      	b.n	e912 <uarte_nrfx_fifo_fill+0x56>
		return 0;
    e92c:	2400      	movs	r4, #0
    e92e:	e7f4      	b.n	e91a <uarte_nrfx_fifo_fill+0x5e>

0000e930 <k_msleep>:
{
    e930:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    e932:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    e936:	17c1      	asrs	r1, r0, #31
    e938:	03c9      	lsls	r1, r1, #15
    e93a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    e93e:	03c0      	lsls	r0, r0, #15
    e940:	f240 33e7 	movw	r3, #999	; 0x3e7
    e944:	18c0      	adds	r0, r0, r3
    e946:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e94a:	f04f 0300 	mov.w	r3, #0
    e94e:	f141 0100 	adc.w	r1, r1, #0
    e952:	f7f1 fbd5 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    e956:	f7fc feed 	bl	b734 <z_impl_k_sleep>
}
    e95a:	bd08      	pop	{r3, pc}

0000e95c <wait_tx_ready>:
{
    e95c:	b570      	push	{r4, r5, r6, lr}
    e95e:	4606      	mov	r6, r0
    e960:	e013      	b.n	e98a <wait_tx_ready+0x2e>
		if (res) {
    e962:	b17d      	cbz	r5, e984 <wait_tx_ready+0x28>
	__asm__ volatile(
    e964:	f04f 0320 	mov.w	r3, #32
    e968:	f3ef 8411 	mrs	r4, BASEPRI
    e96c:	f383 8812 	msr	BASEPRI_MAX, r3
    e970:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    e974:	4630      	mov	r0, r6
    e976:	f7ff fec0 	bl	e6fa <is_tx_ready>
    e97a:	b998      	cbnz	r0, e9a4 <wait_tx_ready+0x48>
	__asm__ volatile(
    e97c:	f384 8811 	msr	BASEPRI, r4
    e980:	f3bf 8f6f 	isb	sy
			k_msleep(1);
    e984:	2001      	movs	r0, #1
    e986:	f7ff ffd3 	bl	e930 <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    e98a:	2464      	movs	r4, #100	; 0x64
    e98c:	4630      	mov	r0, r6
    e98e:	f7ff feb4 	bl	e6fa <is_tx_ready>
    e992:	4605      	mov	r5, r0
    e994:	2800      	cmp	r0, #0
    e996:	d1e4      	bne.n	e962 <wait_tx_ready+0x6>
    e998:	2001      	movs	r0, #1
    e99a:	f000 f8ff 	bl	eb9c <nrfx_busy_wait>
    e99e:	3c01      	subs	r4, #1
    e9a0:	d1f4      	bne.n	e98c <wait_tx_ready+0x30>
    e9a2:	e7de      	b.n	e962 <wait_tx_ready+0x6>
}
    e9a4:	4620      	mov	r0, r4
    e9a6:	bd70      	pop	{r4, r5, r6, pc}

0000e9a8 <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
    e9a8:	b510      	push	{r4, lr}
    e9aa:	b082      	sub	sp, #8
    e9ac:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    e9ae:	aa01      	add	r2, sp, #4
    e9b0:	f7ff fdaf 	bl	e512 <pinctrl_lookup_state>
	if (ret < 0) {
    e9b4:	2800      	cmp	r0, #0
    e9b6:	db05      	blt.n	e9c4 <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    e9b8:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    e9ba:	6822      	ldr	r2, [r4, #0]
    e9bc:	7919      	ldrb	r1, [r3, #4]
    e9be:	6818      	ldr	r0, [r3, #0]
    e9c0:	f7f9 f848 	bl	7a54 <pinctrl_configure_pins>
}
    e9c4:	b002      	add	sp, #8
    e9c6:	bd10      	pop	{r4, pc}

0000e9c8 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    e9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e9cc:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    e9ce:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    e9d0:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    e9d2:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    e9d6:	2100      	movs	r1, #0
    e9d8:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    e9dc:	f8c8 0000 	str.w	r0, [r8]

	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    e9e0:	68f8      	ldr	r0, [r7, #12]
    e9e2:	f7ff ffe1 	bl	e9a8 <pinctrl_apply_state>
	if (err < 0) {
    e9e6:	1e05      	subs	r5, r0, #0
    e9e8:	db35      	blt.n	ea56 <uarte_instance_init+0x8e>
		return err;
	}

	err = uarte_nrfx_configure(dev, &data->uart_config);
    e9ea:	f108 0104 	add.w	r1, r8, #4
    e9ee:	4620      	mov	r0, r4
    e9f0:	f7ff fe11 	bl	e616 <uarte_nrfx_configure>
	if (err) {
    e9f4:	4605      	mov	r5, r0
    e9f6:	bb70      	cbnz	r0, ea56 <uarte_instance_init+0x8e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    e9f8:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    e9fa:	f013 0f02 	tst.w	r3, #2
    e9fe:	d12d      	bne.n	ea5c <uarte_instance_init+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    ea00:	2308      	movs	r3, #8
    ea02:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    ea06:	7a3b      	ldrb	r3, [r7, #8]
    ea08:	b95b      	cbnz	r3, ea22 <uarte_instance_init+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ea0a:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    ea0e:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
    ea12:	f8d8 3018 	ldr.w	r3, [r8, #24]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    ea16:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    ea1a:	2301      	movs	r3, #1
    ea1c:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ea20:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    ea22:	687b      	ldr	r3, [r7, #4]
    ea24:	f013 0f02 	tst.w	r3, #2
    ea28:	d103      	bne.n	ea32 <uarte_instance_init+0x6a>
    p_reg->INTENSET = mask;
    ea2a:	f44f 7380 	mov.w	r3, #256	; 0x100
    ea2e:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    ea32:	687b      	ldr	r3, [r7, #4]
    ea34:	f013 0f10 	tst.w	r3, #16
    ea38:	d003      	beq.n	ea42 <uarte_instance_init+0x7a>
    ea3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    ea3e:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
    ea42:	f8d8 3014 	ldr.w	r3, [r8, #20]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    ea46:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    ea4a:	2300      	movs	r3, #0
    ea4c:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ea50:	2301      	movs	r3, #1
    ea52:	60b3      	str	r3, [r6, #8]
    ea54:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    ea56:	4628      	mov	r0, r5
    ea58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    ea5c:	4641      	mov	r1, r8
    ea5e:	4630      	mov	r0, r6
    ea60:	f7f9 f984 	bl	7d6c <endtx_stoptx_ppi_init>
		if (err < 0) {
    ea64:	2800      	cmp	r0, #0
    ea66:	dacb      	bge.n	ea00 <uarte_instance_init+0x38>
			return err;
    ea68:	4605      	mov	r5, r0
    ea6a:	e7f4      	b.n	ea56 <uarte_instance_init+0x8e>

0000ea6c <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    ea6c:	b510      	push	{r4, lr}
    ea6e:	4604      	mov	r4, r0
    ea70:	2200      	movs	r2, #0
    ea72:	2101      	movs	r1, #1
    ea74:	2002      	movs	r0, #2
    ea76:	f7ff f8f9 	bl	dc6c <z_arm_irq_priority_set>
    ea7a:	2002      	movs	r0, #2
    ea7c:	f7ff f8ec 	bl	dc58 <arch_irq_enable>
    ea80:	2101      	movs	r1, #1
    ea82:	4620      	mov	r0, r4
    ea84:	f7ff ffa0 	bl	e9c8 <uarte_instance_init>
    ea88:	bd10      	pop	{r4, pc}

0000ea8a <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    ea8a:	4770      	bx	lr

0000ea8c <counter_sub>:
	return (a - b) & COUNTER_MAX;
    ea8c:	1a40      	subs	r0, r0, r1
}
    ea8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ea92:	4770      	bx	lr

0000ea94 <event_check>:
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    ea94:	f100 0350 	add.w	r3, r0, #80	; 0x50
    ea98:	009b      	lsls	r3, r3, #2
    ea9a:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ea9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    eaa0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    eaa4:	6818      	ldr	r0, [r3, #0]
}
    eaa6:	3800      	subs	r0, #0
    eaa8:	bf18      	it	ne
    eaaa:	2001      	movne	r0, #1
    eaac:	4770      	bx	lr

0000eaae <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    eaae:	f100 0350 	add.w	r3, r0, #80	; 0x50
    eab2:	009b      	lsls	r3, r3, #2
    eab4:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    eab6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    eaba:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    eabe:	2200      	movs	r2, #0
    eac0:	601a      	str	r2, [r3, #0]
    eac2:	681b      	ldr	r3, [r3, #0]
}
    eac4:	4770      	bx	lr

0000eac6 <absolute_time_to_cc>:
}
    eac6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    eaca:	4770      	bx	lr

0000eacc <full_int_lock>:
	__asm__ volatile(
    eacc:	f04f 0320 	mov.w	r3, #32
    ead0:	f3ef 8011 	mrs	r0, BASEPRI
    ead4:	f383 8812 	msr	BASEPRI_MAX, r3
    ead8:	f3bf 8f6f 	isb	sy
}
    eadc:	4770      	bx	lr

0000eade <full_int_unlock>:
	__asm__ volatile(
    eade:	f380 8811 	msr	BASEPRI, r0
    eae2:	f3bf 8f6f 	isb	sy
}
    eae6:	4770      	bx	lr

0000eae8 <compare_set>:
{
    eae8:	b5f0      	push	{r4, r5, r6, r7, lr}
    eaea:	b083      	sub	sp, #12
    eaec:	4604      	mov	r4, r0
    eaee:	4617      	mov	r7, r2
    eaf0:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    eaf2:	f7f9 f9ed 	bl	7ed0 <compare_int_lock>
    eaf6:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    eaf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eafa:	9301      	str	r3, [sp, #4]
    eafc:	9b08      	ldr	r3, [sp, #32]
    eafe:	9300      	str	r3, [sp, #0]
    eb00:	463a      	mov	r2, r7
    eb02:	462b      	mov	r3, r5
    eb04:	4620      	mov	r0, r4
    eb06:	f7f9 fab1 	bl	806c <compare_set_nolocks>
    eb0a:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    eb0c:	4631      	mov	r1, r6
    eb0e:	4620      	mov	r0, r4
    eb10:	f7f9 fa34 	bl	7f7c <compare_int_unlock>
}
    eb14:	4628      	mov	r0, r5
    eb16:	b003      	add	sp, #12
    eb18:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000eb1a <sys_clock_cycle_get_32>:
{
    eb1a:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    eb1c:	f7f9 fa86 	bl	802c <z_nrf_rtc_timer_read>
}
    eb20:	bd08      	pop	{r3, pc}

0000eb22 <nrf52_errata_36>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    eb22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    eb26:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
    eb2a:	2b0d      	cmp	r3, #13
    eb2c:	d001      	beq.n	eb32 <nrf52_errata_36+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    eb2e:	2000      	movs	r0, #0
    eb30:	4770      	bx	lr
                        return true;
    eb32:	2001      	movs	r0, #1
    #endif
}
    eb34:	4770      	bx	lr

0000eb36 <nrf52_errata_66>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    eb36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    eb3a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
    eb3e:	2b0d      	cmp	r3, #13
    eb40:	d001      	beq.n	eb46 <nrf52_errata_66+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    eb42:	2000      	movs	r0, #0
    eb44:	4770      	bx	lr
                        return true;
    eb46:	2001      	movs	r0, #1
    #endif
}
    eb48:	4770      	bx	lr

0000eb4a <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    eb4a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    eb4e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
    eb52:	2b0d      	cmp	r3, #13
    eb54:	d001      	beq.n	eb5a <nrf52_errata_136+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    eb56:	2000      	movs	r0, #0
    eb58:	4770      	bx	lr
                        return true;
    eb5a:	2001      	movs	r0, #1
    #endif
}
    eb5c:	4770      	bx	lr

0000eb5e <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    eb5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    eb62:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    eb66:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
    eb6a:	2a0d      	cmp	r2, #13
    eb6c:	d001      	beq.n	eb72 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    eb6e:	2000      	movs	r0, #0
    eb70:	4770      	bx	lr
                switch(var2)
    eb72:	b10b      	cbz	r3, eb78 <nrf52_configuration_249+0x1a>
                        return true;
    eb74:	2001      	movs	r0, #1
    #endif
}
    eb76:	4770      	bx	lr
                switch(var2)
    eb78:	2000      	movs	r0, #0
    eb7a:	4770      	bx	lr

0000eb7c <nrf52_handle_approtect>:
        Otherwise, the fw branch state is loaded from UICR, emulating the legacy APPROTECT behavior.

         The same mechanism is implemented for SECURE APPROTECT, with the macros
         ENABLE_SECURE_APPROTECT and ENABLE_SECURE_APPROTECT_USER_HANDLING. */
static inline void nrf52_handle_approtect(void)
{
    eb7c:	b508      	push	{r3, lr}
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    eb7e:	f7ff ffee 	bl	eb5e <nrf52_configuration_249>
    eb82:	b138      	cbz	r0, eb94 <nrf52_handle_approtect+0x18>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    eb84:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    eb88:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    eb8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    eb90:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            }
        #endif
    #endif
}
    eb94:	bd08      	pop	{r3, pc}

0000eb96 <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
    eb96:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    eb98:	4780      	blx	r0
}
    eb9a:	bd08      	pop	{r3, pc}

0000eb9c <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    eb9c:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    eb9e:	f000 fefd 	bl	f99c <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
    eba2:	bd08      	pop	{r3, pc}

0000eba4 <nrf_clock_is_running>:
    switch (domain)
    eba4:	b119      	cbz	r1, ebae <nrf_clock_is_running+0xa>
    eba6:	2901      	cmp	r1, #1
    eba8:	d00e      	beq.n	ebc8 <nrf_clock_is_running+0x24>
    ebaa:	2000      	movs	r0, #0
    ebac:	4770      	bx	lr
            if (p_clk_src != NULL)
    ebae:	b122      	cbz	r2, ebba <nrf_clock_is_running+0x16>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    ebb0:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    ebb4:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    ebb8:	6013      	str	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    ebba:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    ebbe:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    ebc2:	d10e      	bne.n	ebe2 <nrf_clock_is_running+0x3e>
    return false;
    ebc4:	2000      	movs	r0, #0
    ebc6:	4770      	bx	lr
            if (p_clk_src != NULL)
    ebc8:	b122      	cbz	r2, ebd4 <nrf_clock_is_running+0x30>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    ebca:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    ebce:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    ebd2:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    ebd4:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    ebd8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    ebdc:	d103      	bne.n	ebe6 <nrf_clock_is_running+0x42>
    return false;
    ebde:	2000      	movs	r0, #0
    ebe0:	4770      	bx	lr
                return true;
    ebe2:	2001      	movs	r0, #1
    ebe4:	4770      	bx	lr
                return true;
    ebe6:	2001      	movs	r0, #1
}
    ebe8:	4770      	bx	lr

0000ebea <clock_initial_lfclksrc_get>:
}
    ebea:	2000      	movs	r0, #0
    ebec:	4770      	bx	lr

0000ebee <nrfx_power_clock_irq_init>:
extern "C" {
#endif


__STATIC_INLINE void nrfx_power_clock_irq_init(void)
{
    ebee:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    ebf0:	2000      	movs	r0, #0
    ebf2:	f7f5 ff0b 	bl	4a0c <arch_irq_is_enabled>
    ebf6:	b100      	cbz	r0, ebfa <nrfx_power_clock_irq_init+0xc>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    }
}
    ebf8:	bd08      	pop	{r3, pc}
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    ebfa:	f7ff f82d 	bl	dc58 <arch_irq_enable>
}
    ebfe:	e7fb      	b.n	ebf8 <nrfx_power_clock_irq_init+0xa>

0000ec00 <clock_stop>:
{
    ec00:	b570      	push	{r4, r5, r6, lr}
    ec02:	b082      	sub	sp, #8
    switch (domain)
    ec04:	4606      	mov	r6, r0
    ec06:	b118      	cbz	r0, ec10 <clock_stop+0x10>
    ec08:	2801      	cmp	r0, #1
    ec0a:	d016      	beq.n	ec3a <clock_stop+0x3a>
}
    ec0c:	b002      	add	sp, #8
    ec0e:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
    ec10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ec14:	2202      	movs	r2, #2
    ec16:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ec1a:	2200      	movs	r2, #0
    ec1c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    ec20:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ec24:	2201      	movs	r2, #1
    ec26:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    ec28:	2301      	movs	r3, #1
    ec2a:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    ec2e:	429e      	cmp	r6, r3
    ec30:	d00f      	beq.n	ec52 <clock_stop+0x52>
    ec32:	2500      	movs	r5, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    ec34:	f242 7410 	movw	r4, #10000	; 0x2710
    ec38:	e013      	b.n	ec62 <clock_stop+0x62>
    p_reg->INTENCLR = mask;
    ec3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ec3e:	2201      	movs	r2, #1
    ec40:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ec44:	2100      	movs	r1, #0
    ec46:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    ec4a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ec4e:	605a      	str	r2, [r3, #4]
}
    ec50:	e7ea      	b.n	ec28 <clock_stop+0x28>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    ec52:	f10d 0507 	add.w	r5, sp, #7
    ec56:	e7ed      	b.n	ec34 <clock_stop+0x34>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    ec58:	2001      	movs	r0, #1
    ec5a:	f7ff ff9f 	bl	eb9c <nrfx_busy_wait>
    ec5e:	3c01      	subs	r4, #1
    ec60:	d0d4      	beq.n	ec0c <clock_stop+0xc>
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    ec62:	462a      	mov	r2, r5
    ec64:	4631      	mov	r1, r6
    ec66:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    ec6a:	f7ff ff9b 	bl	eba4 <nrf_clock_is_running>
    ec6e:	2800      	cmp	r0, #0
    ec70:	d0cc      	beq.n	ec0c <clock_stop+0xc>
    ec72:	2d00      	cmp	r5, #0
    ec74:	d0f0      	beq.n	ec58 <clock_stop+0x58>
    ec76:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ec7a:	2b01      	cmp	r3, #1
    ec7c:	d0ec      	beq.n	ec58 <clock_stop+0x58>
    ec7e:	e7c5      	b.n	ec0c <clock_stop+0xc>

0000ec80 <clock_lfclksrc_tweak>:
{
    ec80:	b538      	push	{r3, r4, r5, lr}
    ec82:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    ec84:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    ec86:	2b01      	cmp	r3, #1
    ec88:	d002      	beq.n	ec90 <clock_lfclksrc_tweak+0x10>
    ec8a:	b933      	cbnz	r3, ec9a <clock_lfclksrc_tweak+0x1a>
    ec8c:	2301      	movs	r3, #1
    ec8e:	e000      	b.n	ec92 <clock_lfclksrc_tweak+0x12>
    ec90:	2301      	movs	r3, #1
    if (!is_correct_clk)
    ec92:	461d      	mov	r5, r3
    ec94:	b11b      	cbz	r3, ec9e <clock_lfclksrc_tweak+0x1e>
}
    ec96:	4628      	mov	r0, r5
    ec98:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    ec9a:	2300      	movs	r3, #0
    ec9c:	e7f9      	b.n	ec92 <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    ec9e:	2000      	movs	r0, #0
    eca0:	f7ff ffae 	bl	ec00 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    eca4:	f7ff ffa1 	bl	ebea <clock_initial_lfclksrc_get>
    eca8:	6020      	str	r0, [r4, #0]
    ecaa:	e7f4      	b.n	ec96 <clock_lfclksrc_tweak+0x16>

0000ecac <nrfx_clock_start>:
    switch (domain)
    ecac:	b110      	cbz	r0, ecb4 <nrfx_clock_start+0x8>
    ecae:	2801      	cmp	r0, #1
    ecb0:	d040      	beq.n	ed34 <nrfx_clock_start+0x88>
    ecb2:	4770      	bx	lr
{
    ecb4:	b500      	push	{lr}
    ecb6:	b083      	sub	sp, #12
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    ecb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    ecbc:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    ecc0:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    ecc4:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    ecc6:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    ecca:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    ecce:	d11b      	bne.n	ed08 <nrfx_clock_start+0x5c>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    ecd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ecd4:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    ecd8:	f013 0f01 	tst.w	r3, #1
    ecdc:	d118      	bne.n	ed10 <nrfx_clock_start+0x64>
                    lfclksrc = clock_initial_lfclksrc_get();
    ecde:	f7ff ff84 	bl	ebea <clock_initial_lfclksrc_get>
    ece2:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
    ece4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ece8:	9a01      	ldr	r2, [sp, #4]
    ecea:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ecee:	2200      	movs	r2, #0
    ecf0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    ecf4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    ecf8:	2202      	movs	r2, #2
    ecfa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ecfe:	2201      	movs	r2, #1
    ed00:	609a      	str	r2, [r3, #8]
}
    ed02:	b003      	add	sp, #12
    ed04:	f85d fb04 	ldr.w	pc, [sp], #4
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    ed08:	a801      	add	r0, sp, #4
    ed0a:	f7ff ffb9 	bl	ec80 <clock_lfclksrc_tweak>
    ed0e:	e7e9      	b.n	ece4 <nrfx_clock_start+0x38>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    ed10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ed14:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    ed18:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    ed1c:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    ed1e:	a801      	add	r0, sp, #4
    ed20:	f7ff ffae 	bl	ec80 <clock_lfclksrc_tweak>
    ed24:	2800      	cmp	r0, #0
    ed26:	d0dd      	beq.n	ece4 <nrfx_clock_start+0x38>
    p_reg->INTENSET = mask;
    ed28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ed2c:	2202      	movs	r2, #2
    ed2e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    ed32:	e7e6      	b.n	ed02 <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ed34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ed38:	2200      	movs	r2, #0
    ed3a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    ed3e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    ed42:	2201      	movs	r2, #1
    ed44:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ed48:	601a      	str	r2, [r3, #0]
    ed4a:	4770      	bx	lr

0000ed4c <nrfx_clock_stop>:
{
    ed4c:	b508      	push	{r3, lr}
    clock_stop(domain);
    ed4e:	f7ff ff57 	bl	ec00 <clock_stop>
}
    ed52:	bd08      	pop	{r3, pc}

0000ed54 <nrf_gpiote_event_configure>:
{
    ed54:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    ed56:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    ed5a:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    ed5e:	f424 344f 	bic.w	r4, r4, #211968	; 0x33c00
    ed62:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    ed66:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    ed6a:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    ed6e:	0212      	lsls	r2, r2, #8
    ed70:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    ed74:	041b      	lsls	r3, r3, #16
    ed76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    ed7a:	431a      	orrs	r2, r3
    ed7c:	4314      	orrs	r4, r2
    ed7e:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
    ed82:	bc10      	pop	{r4}
    ed84:	4770      	bx	lr

0000ed86 <nrf_gpiote_task_configure>:
{
    ed86:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    ed88:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    ed8c:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    ed90:	f424 1499 	bic.w	r4, r4, #1253376	; 0x132000
    ed94:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
    ed98:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    ed9c:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    eda0:	0212      	lsls	r2, r2, #8
    eda2:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    eda6:	041b      	lsls	r3, r3, #16
    eda8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    edac:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    edae:	f89d 3004 	ldrb.w	r3, [sp, #4]
    edb2:	051b      	lsls	r3, r3, #20
    edb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    edb8:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    edba:	4314      	orrs	r4, r2
    edbc:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
    edc0:	bc10      	pop	{r4}
    edc2:	4770      	bx	lr

0000edc4 <nrf_gpio_cfg_sense_set>:
{
    edc4:	b500      	push	{lr}
    edc6:	b085      	sub	sp, #20
    edc8:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    edcc:	f10d 030f 	add.w	r3, sp, #15
    edd0:	9301      	str	r3, [sp, #4]
    edd2:	2100      	movs	r1, #0
    edd4:	9100      	str	r1, [sp, #0]
    edd6:	460b      	mov	r3, r1
    edd8:	460a      	mov	r2, r1
    edda:	f7f9 fc07 	bl	85ec <nrf_gpio_reconfigure>
}
    edde:	b005      	add	sp, #20
    ede0:	f85d fb04 	ldr.w	pc, [sp], #4

0000ede4 <pin_is_task_output>:
{
    ede4:	b510      	push	{r4, lr}
    ede6:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    ede8:	f7f9 fc9e 	bl	8728 <pin_is_output>
    edec:	b128      	cbz	r0, edfa <pin_is_task_output+0x16>
    edee:	4620      	mov	r0, r4
    edf0:	f7f9 fc84 	bl	86fc <pin_in_use_by_te>
    edf4:	b118      	cbz	r0, edfe <pin_is_task_output+0x1a>
    edf6:	2001      	movs	r0, #1
    edf8:	e000      	b.n	edfc <pin_is_task_output+0x18>
    edfa:	2000      	movs	r0, #0
}
    edfc:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    edfe:	2000      	movs	r0, #0
    ee00:	e7fc      	b.n	edfc <pin_is_task_output+0x18>

0000ee02 <pin_is_input>:
{
    ee02:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    ee04:	f7f9 fc90 	bl	8728 <pin_is_output>
    ee08:	f080 0001 	eor.w	r0, r0, #1
}
    ee0c:	b2c0      	uxtb	r0, r0
    ee0e:	bd08      	pop	{r3, pc}

0000ee10 <gpiote_polarity_to_trigger>:
}
    ee10:	4770      	bx	lr

0000ee12 <gpiote_trigger_to_polarity>:
}
    ee12:	4770      	bx	lr

0000ee14 <is_level>:
}
    ee14:	2803      	cmp	r0, #3
    ee16:	bf94      	ite	ls
    ee18:	2000      	movls	r0, #0
    ee1a:	2001      	movhi	r0, #1
    ee1c:	4770      	bx	lr

0000ee1e <latch_pending_read_and_check>:
{
    ee1e:	b510      	push	{r4, lr}
    ee20:	4604      	mov	r4, r0
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
    ee22:	4602      	mov	r2, r0
    ee24:	2102      	movs	r1, #2
    ee26:	2000      	movs	r0, #0
    ee28:	f7f9 fc3c 	bl	86a4 <nrf_gpio_latches_read_and_clear>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    ee2c:	2300      	movs	r3, #0
    ee2e:	2b01      	cmp	r3, #1
    ee30:	d804      	bhi.n	ee3c <latch_pending_read_and_check+0x1e>
        if (latch[port_idx])
    ee32:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    ee36:	b91a      	cbnz	r2, ee40 <latch_pending_read_and_check+0x22>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    ee38:	3301      	adds	r3, #1
    ee3a:	e7f8      	b.n	ee2e <latch_pending_read_and_check+0x10>
    return false;
    ee3c:	2000      	movs	r0, #0
}
    ee3e:	bd10      	pop	{r4, pc}
            return true;
    ee40:	2001      	movs	r0, #1
    ee42:	e7fc      	b.n	ee3e <latch_pending_read_and_check+0x20>

0000ee44 <nrfx_power_clock_irq_init>:
{
    ee44:	b508      	push	{r3, lr}
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    ee46:	2000      	movs	r0, #0
    ee48:	f7f5 fde0 	bl	4a0c <arch_irq_is_enabled>
    ee4c:	b100      	cbz	r0, ee50 <nrfx_power_clock_irq_init+0xc>
}
    ee4e:	bd08      	pop	{r3, pc}
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    ee50:	f7fe ff02 	bl	dc58 <arch_irq_enable>
}
    ee54:	e7fb      	b.n	ee4e <nrfx_power_clock_irq_init+0xa>

0000ee56 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
    ee56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ee5a:	f44f 7260 	mov.w	r2, #896	; 0x380
    ee5e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    ee62:	4770      	bx	lr

0000ee64 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
    ee64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ee68:	f44f 7260 	mov.w	r2, #896	; 0x380
    ee6c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    ee70:	4770      	bx	lr

0000ee72 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    ee72:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    ee74:	f7fa f84e 	bl	8f14 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
    ee78:	f7f9 fb7e 	bl	8578 <nrfx_clock_irq_handler>
}
    ee7c:	bd08      	pop	{r3, pc}

0000ee7e <nrf_usbd_ep_disable>:
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    ee7e:	f001 0c0f 	and.w	ip, r1, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    ee82:	f011 0f80 	tst.w	r1, #128	; 0x80
    ee86:	d109      	bne.n	ee9c <nrf_usbd_ep_disable+0x1e>
        p_reg->EPOUTEN &= ~(1UL << epnr);
    ee88:	f8d0 3514 	ldr.w	r3, [r0, #1300]	; 0x514
    ee8c:	2201      	movs	r2, #1
    ee8e:	fa02 f20c 	lsl.w	r2, r2, ip
    ee92:	ea23 0302 	bic.w	r3, r3, r2
    ee96:	f8c0 3514 	str.w	r3, [r0, #1300]	; 0x514
}
    ee9a:	4770      	bx	lr
        p_reg->EPINEN &= ~(1UL << epnr);
    ee9c:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    eea0:	2201      	movs	r2, #1
    eea2:	fa02 f20c 	lsl.w	r2, r2, ip
    eea6:	ea23 0302 	bic.w	r3, r3, r2
    eeaa:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    eeae:	4770      	bx	lr

0000eeb0 <nrf_usbd_ep_easydma_set>:
    if (NRF_USBD_EPIN_CHECK(ep))
    eeb0:	f011 0f80 	tst.w	r1, #128	; 0x80
    eeb4:	d107      	bne.n	eec6 <nrf_usbd_ep_easydma_set+0x16>
        if (NRF_USBD_EPISO_CHECK(ep))
    eeb6:	f011 0f08 	tst.w	r1, #8
    eeba:	d017      	beq.n	eeec <nrf_usbd_ep_easydma_set+0x3c>
            p_reg->ISOOUT.PTR    = ptr;
    eebc:	f8c0 27a0 	str.w	r2, [r0, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    eec0:	f8c0 37a4 	str.w	r3, [r0, #1956]	; 0x7a4
    eec4:	4770      	bx	lr
        if (NRF_USBD_EPISO_CHECK(ep))
    eec6:	f011 0f08 	tst.w	r1, #8
    eeca:	d004      	beq.n	eed6 <nrf_usbd_ep_easydma_set+0x26>
            p_reg->ISOIN.PTR    = ptr;
    eecc:	f8c0 26a0 	str.w	r2, [r0, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    eed0:	f8c0 36a4 	str.w	r3, [r0, #1700]	; 0x6a4
    eed4:	4770      	bx	lr
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    eed6:	f001 010f 	and.w	r1, r1, #15
            p_reg->EPIN[epnr].PTR    = ptr;
    eeda:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
    eede:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    eee2:	f8cc 2600 	str.w	r2, [ip, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    eee6:	f8cc 3604 	str.w	r3, [ip, #1540]	; 0x604
    eeea:	4770      	bx	lr
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    eeec:	f001 010f 	and.w	r1, r1, #15
            p_reg->EPOUT[epnr].PTR    = ptr;
    eef0:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
    eef4:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    eef8:	f8cc 2700 	str.w	r2, [ip, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    eefc:	f8cc 3704 	str.w	r3, [ip, #1796]	; 0x704
}
    ef00:	4770      	bx	lr

0000ef02 <nrf52_errata_166>:
}
    ef02:	2000      	movs	r0, #0
    ef04:	4770      	bx	lr

0000ef06 <nrf52_errata_171>:
}
    ef06:	2000      	movs	r0, #0
    ef08:	4770      	bx	lr

0000ef0a <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ef0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ef0e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x0D)
    ef12:	2b0d      	cmp	r3, #13
    ef14:	d001      	beq.n	ef1a <nrf52_errata_187+0x10>
        return false;
    ef16:	2000      	movs	r0, #0
    ef18:	4770      	bx	lr
                        return true;
    ef1a:	2001      	movs	r0, #1
}
    ef1c:	4770      	bx	lr

0000ef1e <nrf52_errata_199>:
}
    ef1e:	2000      	movs	r0, #0
    ef20:	4770      	bx	lr

0000ef22 <nrf52_errata_223>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ef22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ef26:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x0D)
    ef2a:	2b0d      	cmp	r3, #13
    ef2c:	d001      	beq.n	ef32 <nrf52_errata_223+0x10>
        return false;
    ef2e:	2000      	movs	r0, #0
    ef30:	4770      	bx	lr
                        return true;
    ef32:	2001      	movs	r0, #1
}
    ef34:	4770      	bx	lr

0000ef36 <nrfx_usbd_consumer>:
{
    ef36:	b430      	push	{r4, r5}
    size_t size = p_transfer->size;
    ef38:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    ef3a:	429c      	cmp	r4, r3
    ef3c:	d208      	bcs.n	ef50 <nrfx_usbd_consumer+0x1a>
        p_next->size = 0;
    ef3e:	2500      	movs	r5, #0
    ef40:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    ef42:	6809      	ldr	r1, [r1, #0]
    ef44:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
    ef46:	429a      	cmp	r2, r3
    ef48:	d00b      	beq.n	ef62 <nrfx_usbd_consumer+0x2c>
    ef4a:	2000      	movs	r0, #0
}
    ef4c:	bc30      	pop	{r4, r5}
    ef4e:	4770      	bx	lr
        p_next->size = data_size;
    ef50:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    ef52:	680d      	ldr	r5, [r1, #0]
    ef54:	6005      	str	r5, [r0, #0]
        size -= data_size;
    ef56:	1ae4      	subs	r4, r4, r3
        p_transfer->size = size;
    ef58:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    ef5a:	6808      	ldr	r0, [r1, #0]
    ef5c:	4418      	add	r0, r3
    ef5e:	6008      	str	r0, [r1, #0]
    ef60:	e7f1      	b.n	ef46 <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
    ef62:	b90c      	cbnz	r4, ef68 <nrfx_usbd_consumer+0x32>
    ef64:	2000      	movs	r0, #0
    ef66:	e7f1      	b.n	ef4c <nrfx_usbd_consumer+0x16>
    ef68:	2001      	movs	r0, #1
    ef6a:	e7ef      	b.n	ef4c <nrfx_usbd_consumer+0x16>

0000ef6c <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
    ef6c:	684b      	ldr	r3, [r1, #4]
    if (tx_size > ep_size)
    ef6e:	4293      	cmp	r3, r2
    ef70:	d800      	bhi.n	ef74 <nrfx_usbd_feeder_ram+0x8>
    size_t tx_size = p_transfer->size;
    ef72:	461a      	mov	r2, r3
    p_next->p_data = p_transfer->p_data;
    ef74:	680b      	ldr	r3, [r1, #0]
    ef76:	6003      	str	r3, [r0, #0]
    p_next->size = tx_size;
    ef78:	6042      	str	r2, [r0, #4]
    p_transfer->size -= tx_size;
    ef7a:	6848      	ldr	r0, [r1, #4]
    ef7c:	1a80      	subs	r0, r0, r2
    ef7e:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    ef80:	680b      	ldr	r3, [r1, #0]
    ef82:	4413      	add	r3, r2
    ef84:	600b      	str	r3, [r1, #0]
}
    ef86:	3800      	subs	r0, #0
    ef88:	bf18      	it	ne
    ef8a:	2001      	movne	r0, #1
    ef8c:	4770      	bx	lr

0000ef8e <nrfx_usbd_feeder_ram_zlp>:
    size_t tx_size = p_transfer->size;
    ef8e:	684b      	ldr	r3, [r1, #4]
    if (tx_size > ep_size)
    ef90:	4293      	cmp	r3, r2
    ef92:	d800      	bhi.n	ef96 <nrfx_usbd_feeder_ram_zlp+0x8>
    size_t tx_size = p_transfer->size;
    ef94:	461a      	mov	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    ef96:	b162      	cbz	r2, efb2 <nrfx_usbd_feeder_ram_zlp+0x24>
    ef98:	680b      	ldr	r3, [r1, #0]
    ef9a:	6003      	str	r3, [r0, #0]
    p_next->size = tx_size;
    ef9c:	6042      	str	r2, [r0, #4]
    p_transfer->size -= tx_size;
    ef9e:	684b      	ldr	r3, [r1, #4]
    efa0:	1a9b      	subs	r3, r3, r2
    efa2:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    efa4:	680b      	ldr	r3, [r1, #0]
    efa6:	4413      	add	r3, r2
    efa8:	600b      	str	r3, [r1, #0]
}
    efaa:	1e10      	subs	r0, r2, #0
    efac:	bf18      	it	ne
    efae:	2001      	movne	r0, #1
    efb0:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    efb2:	2300      	movs	r3, #0
    efb4:	e7f1      	b.n	ef9a <nrfx_usbd_feeder_ram_zlp+0xc>

0000efb6 <ev_started_handler>:
}
    efb6:	4770      	bx	lr

0000efb8 <usbd_dma_scheduler_algorithm>:
}
    efb8:	fa90 f0a0 	rbit	r0, r0
    efbc:	fab0 f080 	clz	r0, r0
    efc0:	4770      	bx	lr

0000efc2 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    efc2:	b508      	push	{r3, lr}
    efc4:	2087      	movs	r0, #135	; 0x87
    efc6:	f7fa f95f 	bl	9288 <nrf_usbd_epin_dma_handler>
    efca:	bd08      	pop	{r3, pc}

0000efcc <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    efcc:	b508      	push	{r3, lr}
    efce:	2086      	movs	r0, #134	; 0x86
    efd0:	f7fa f95a 	bl	9288 <nrf_usbd_epin_dma_handler>
    efd4:	bd08      	pop	{r3, pc}

0000efd6 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    efd6:	b508      	push	{r3, lr}
    efd8:	2085      	movs	r0, #133	; 0x85
    efda:	f7fa f955 	bl	9288 <nrf_usbd_epin_dma_handler>
    efde:	bd08      	pop	{r3, pc}

0000efe0 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    efe0:	b508      	push	{r3, lr}
    efe2:	2084      	movs	r0, #132	; 0x84
    efe4:	f7fa f950 	bl	9288 <nrf_usbd_epin_dma_handler>
    efe8:	bd08      	pop	{r3, pc}

0000efea <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    efea:	b508      	push	{r3, lr}
    efec:	2083      	movs	r0, #131	; 0x83
    efee:	f7fa f94b 	bl	9288 <nrf_usbd_epin_dma_handler>
    eff2:	bd08      	pop	{r3, pc}

0000eff4 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    eff4:	b508      	push	{r3, lr}
    eff6:	2082      	movs	r0, #130	; 0x82
    eff8:	f7fa f946 	bl	9288 <nrf_usbd_epin_dma_handler>
    effc:	bd08      	pop	{r3, pc}

0000effe <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    effe:	b508      	push	{r3, lr}
    f000:	2081      	movs	r0, #129	; 0x81
    f002:	f7fa f941 	bl	9288 <nrf_usbd_epin_dma_handler>
    f006:	bd08      	pop	{r3, pc}

0000f008 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    f008:	b508      	push	{r3, lr}
    f00a:	f7fa f98f 	bl	932c <nrf_usbd_ep0in_dma_handler>
    f00e:	bd08      	pop	{r3, pc}

0000f010 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    f010:	b508      	push	{r3, lr}
    f012:	2008      	movs	r0, #8
    f014:	f7fa fa22 	bl	945c <nrf_usbd_epoutiso_dma_handler>
    f018:	bd08      	pop	{r3, pc}

0000f01a <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    f01a:	b508      	push	{r3, lr}
    f01c:	2088      	movs	r0, #136	; 0x88
    f01e:	f7fa fa69 	bl	94f4 <nrf_usbd_epiniso_dma_handler>
    f022:	bd08      	pop	{r3, pc}

0000f024 <nrfx_usbd_feeder_flash>:
{
    f024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f028:	4606      	mov	r6, r0
    f02a:	460c      	mov	r4, r1
    f02c:	4615      	mov	r5, r2
    size_t tx_size  = p_transfer->size;
    f02e:	f8d1 8004 	ldr.w	r8, [r1, #4]
    void * p_buffer = nrfx_usbd_feeder_buffer_get();
    f032:	f7fa fc83 	bl	993c <nrfx_usbd_feeder_buffer_get>
    f036:	4607      	mov	r7, r0
    if (tx_size > ep_size)
    f038:	45a8      	cmp	r8, r5
    f03a:	d800      	bhi.n	f03e <nrfx_usbd_feeder_flash+0x1a>
    size_t tx_size  = p_transfer->size;
    f03c:	4645      	mov	r5, r8
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    f03e:	462a      	mov	r2, r5
    f040:	6821      	ldr	r1, [r4, #0]
    f042:	4638      	mov	r0, r7
    f044:	f7fe feba 	bl	ddbc <memcpy>
    p_next->p_data.tx = p_buffer;
    f048:	6037      	str	r7, [r6, #0]
    p_next->size = tx_size;
    f04a:	6075      	str	r5, [r6, #4]
    p_transfer->size -= tx_size;
    f04c:	6860      	ldr	r0, [r4, #4]
    f04e:	1b40      	subs	r0, r0, r5
    f050:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    f052:	6823      	ldr	r3, [r4, #0]
    f054:	442b      	add	r3, r5
    f056:	6023      	str	r3, [r4, #0]
}
    f058:	3800      	subs	r0, #0
    f05a:	bf18      	it	ne
    f05c:	2001      	movne	r0, #1
    f05e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f062 <nrfx_usbd_feeder_flash_zlp>:
{
    f062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f066:	4606      	mov	r6, r0
    f068:	460d      	mov	r5, r1
    f06a:	4614      	mov	r4, r2
    size_t tx_size  = p_transfer->size;
    f06c:	f8d1 8004 	ldr.w	r8, [r1, #4]
    void * p_buffer = nrfx_usbd_feeder_buffer_get();
    f070:	f7fa fc64 	bl	993c <nrfx_usbd_feeder_buffer_get>
    f074:	4607      	mov	r7, r0
    if (tx_size > ep_size)
    f076:	45a0      	cmp	r8, r4
    f078:	d800      	bhi.n	f07c <nrfx_usbd_feeder_flash_zlp+0x1a>
    size_t tx_size  = p_transfer->size;
    f07a:	4644      	mov	r4, r8
    if (tx_size != 0)
    f07c:	b96c      	cbnz	r4, f09a <nrfx_usbd_feeder_flash_zlp+0x38>
        p_next->p_data.tx = NULL;
    f07e:	2300      	movs	r3, #0
    f080:	6033      	str	r3, [r6, #0]
    p_next->size = tx_size;
    f082:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
    f084:	686b      	ldr	r3, [r5, #4]
    f086:	1b1b      	subs	r3, r3, r4
    f088:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    f08a:	682b      	ldr	r3, [r5, #0]
    f08c:	4423      	add	r3, r4
    f08e:	602b      	str	r3, [r5, #0]
}
    f090:	1e20      	subs	r0, r4, #0
    f092:	bf18      	it	ne
    f094:	2001      	movne	r0, #1
    f096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    f09a:	4622      	mov	r2, r4
    f09c:	6829      	ldr	r1, [r5, #0]
    f09e:	4638      	mov	r0, r7
    f0a0:	f7fe fe8c 	bl	ddbc <memcpy>
        p_next->p_data.tx = p_buffer;
    f0a4:	6037      	str	r7, [r6, #0]
    f0a6:	e7ec      	b.n	f082 <nrfx_usbd_feeder_flash_zlp+0x20>

0000f0a8 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    f0a8:	b508      	push	{r3, lr}
    f0aa:	2007      	movs	r0, #7
    f0ac:	f7fa fd76 	bl	9b9c <nrf_usbd_epout_dma_handler>
    f0b0:	bd08      	pop	{r3, pc}

0000f0b2 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    f0b2:	b508      	push	{r3, lr}
    f0b4:	2006      	movs	r0, #6
    f0b6:	f7fa fd71 	bl	9b9c <nrf_usbd_epout_dma_handler>
    f0ba:	bd08      	pop	{r3, pc}

0000f0bc <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    f0bc:	b508      	push	{r3, lr}
    f0be:	2005      	movs	r0, #5
    f0c0:	f7fa fd6c 	bl	9b9c <nrf_usbd_epout_dma_handler>
    f0c4:	bd08      	pop	{r3, pc}

0000f0c6 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    f0c6:	b508      	push	{r3, lr}
    f0c8:	2004      	movs	r0, #4
    f0ca:	f7fa fd67 	bl	9b9c <nrf_usbd_epout_dma_handler>
    f0ce:	bd08      	pop	{r3, pc}

0000f0d0 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    f0d0:	b508      	push	{r3, lr}
    f0d2:	2003      	movs	r0, #3
    f0d4:	f7fa fd62 	bl	9b9c <nrf_usbd_epout_dma_handler>
    f0d8:	bd08      	pop	{r3, pc}

0000f0da <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    f0da:	b508      	push	{r3, lr}
    f0dc:	2002      	movs	r0, #2
    f0de:	f7fa fd5d 	bl	9b9c <nrf_usbd_epout_dma_handler>
    f0e2:	bd08      	pop	{r3, pc}

0000f0e4 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    f0e4:	b508      	push	{r3, lr}
    f0e6:	2001      	movs	r0, #1
    f0e8:	f7fa fd58 	bl	9b9c <nrf_usbd_epout_dma_handler>
    f0ec:	bd08      	pop	{r3, pc}

0000f0ee <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    f0ee:	b508      	push	{r3, lr}
    f0f0:	f7fa fe20 	bl	9d34 <nrf_usbd_ep0out_dma_handler>
    f0f4:	bd08      	pop	{r3, pc}

0000f0f6 <nrfx_usbd_ep_abort>:
{
    f0f6:	b508      	push	{r3, lr}
    usbd_ep_abort(ep);
    f0f8:	f7fa feac 	bl	9e54 <usbd_ep_abort>
}
    f0fc:	bd08      	pop	{r3, pc}

0000f0fe <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    f0fe:	b508      	push	{r3, lr}
  _DoInit();
    f100:	f7fb f8b6 	bl	a270 <_DoInit>
}
    f104:	bd08      	pop	{r3, pc}

0000f106 <rtt_init>:
{
    f106:	b508      	push	{r3, lr}
	SEGGER_RTT_Init();
    f108:	f7ff fff9 	bl	f0fe <SEGGER_RTT_Init>
}
    f10c:	2000      	movs	r0, #0
    f10e:	bd08      	pop	{r3, pc}

0000f110 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    f110:	b160      	cbz	r0, f12c <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    f112:	68c3      	ldr	r3, [r0, #12]
    f114:	785a      	ldrb	r2, [r3, #1]
    f116:	f012 0f01 	tst.w	r2, #1
    f11a:	d003      	beq.n	f124 <z_device_is_ready+0x14>
    f11c:	781b      	ldrb	r3, [r3, #0]
    f11e:	b11b      	cbz	r3, f128 <z_device_is_ready+0x18>
    f120:	2000      	movs	r0, #0
    f122:	4770      	bx	lr
    f124:	2000      	movs	r0, #0
    f126:	4770      	bx	lr
    f128:	2001      	movs	r0, #1
    f12a:	4770      	bx	lr
		return false;
    f12c:	2000      	movs	r0, #0
}
    f12e:	4770      	bx	lr

0000f130 <z_early_memset>:
{
    f130:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    f132:	f7fe fe72 	bl	de1a <memset>
}
    f136:	bd08      	pop	{r3, pc}

0000f138 <z_early_memcpy>:
{
    f138:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    f13a:	f7fe fe3f 	bl	ddbc <memcpy>
}
    f13e:	bd08      	pop	{r3, pc}

0000f140 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    f140:	68c2      	ldr	r2, [r0, #12]
    f142:	6903      	ldr	r3, [r0, #16]
    f144:	431a      	orrs	r2, r3
    f146:	f012 0203 	ands.w	r2, r2, #3
    f14a:	d10d      	bne.n	f168 <create_free_list+0x28>
	slab->free_list = NULL;
    f14c:	2100      	movs	r1, #0
    f14e:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    f150:	e005      	b.n	f15e <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    f152:	6941      	ldr	r1, [r0, #20]
    f154:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    f156:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    f158:	68c1      	ldr	r1, [r0, #12]
    f15a:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    f15c:	3201      	adds	r2, #1
    f15e:	6881      	ldr	r1, [r0, #8]
    f160:	4291      	cmp	r1, r2
    f162:	d8f6      	bhi.n	f152 <create_free_list+0x12>
	return 0;
    f164:	2000      	movs	r0, #0
    f166:	4770      	bx	lr
		return -EINVAL;
    f168:	f06f 0015 	mvn.w	r0, #21
}
    f16c:	4770      	bx	lr

0000f16e <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    f16e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f172:	4604      	mov	r4, r0
    f174:	460d      	mov	r5, r1
	__asm__ volatile(
    f176:	f04f 0320 	mov.w	r3, #32
    f17a:	f3ef 8611 	mrs	r6, BASEPRI
    f17e:	f383 8812 	msr	BASEPRI_MAX, r3
    f182:	f3bf 8f6f 	isb	sy
    f186:	4637      	mov	r7, r6
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    f188:	6943      	ldr	r3, [r0, #20]
    f18a:	b16b      	cbz	r3, f1a8 <k_mem_slab_free+0x3a>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    f18c:	682b      	ldr	r3, [r5, #0]
    f18e:	6962      	ldr	r2, [r4, #20]
    f190:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    f192:	682b      	ldr	r3, [r5, #0]
    f194:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    f196:	69a3      	ldr	r3, [r4, #24]
    f198:	3b01      	subs	r3, #1
    f19a:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    f19c:	f387 8811 	msr	BASEPRI, r7
    f1a0:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    f1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f1a8:	f100 0808 	add.w	r8, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    f1ac:	f000 fb21 	bl	f7f2 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    f1b0:	2800      	cmp	r0, #0
    f1b2:	d0eb      	beq.n	f18c <k_mem_slab_free+0x1e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    f1b4:	682a      	ldr	r2, [r5, #0]
    f1b6:	2100      	movs	r1, #0
    f1b8:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    f1bc:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    f1be:	f000 fa62 	bl	f686 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    f1c2:	4631      	mov	r1, r6
    f1c4:	4640      	mov	r0, r8
    f1c6:	f7fb ffc7 	bl	b158 <z_reschedule>
			return;
    f1ca:	e7eb      	b.n	f1a4 <k_mem_slab_free+0x36>

0000f1cc <setup_thread_stack>:
{
    f1cc:	b410      	push	{r4}
    f1ce:	4603      	mov	r3, r0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    f1d0:	3207      	adds	r2, #7
    f1d2:	f022 0207 	bic.w	r2, r2, #7
    f1d6:	f102 0040 	add.w	r0, r2, #64	; 0x40

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    f1da:	f101 0440 	add.w	r4, r1, #64	; 0x40
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    f1de:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    f1e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    f1e6:	2200      	movs	r2, #0
    f1e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
    f1ec:	4408      	add	r0, r1
    f1ee:	bc10      	pop	{r4}
    f1f0:	4770      	bx	lr

0000f1f2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    f1f2:	f3ef 8005 	mrs	r0, IPSR
}
    f1f6:	3800      	subs	r0, #0
    f1f8:	bf18      	it	ne
    f1fa:	2001      	movne	r0, #1
    f1fc:	4770      	bx	lr

0000f1fe <k_thread_name_get>:
}
    f1fe:	3074      	adds	r0, #116	; 0x74
    f200:	4770      	bx	lr

0000f202 <z_impl_k_thread_start>:
{
    f202:	b508      	push	{r3, lr}
	z_sched_start(thread);
    f204:	f7fc f8bc 	bl	b380 <z_sched_start>
}
    f208:	bd08      	pop	{r3, pc}

0000f20a <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    f20a:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    f20c:	2400      	movs	r4, #0
    f20e:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    f210:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    f212:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    f214:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    f216:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    f218:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    f21a:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    f21c:	bc10      	pop	{r4}
    f21e:	4770      	bx	lr

0000f220 <z_impl_k_thread_create>:
{
    f220:	b5f0      	push	{r4, r5, r6, r7, lr}
    f222:	b087      	sub	sp, #28
    f224:	4604      	mov	r4, r0
    f226:	9e12      	ldr	r6, [sp, #72]	; 0x48
    f228:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    f22a:	2700      	movs	r7, #0
    f22c:	9705      	str	r7, [sp, #20]
    f22e:	9f10      	ldr	r7, [sp, #64]	; 0x40
    f230:	9704      	str	r7, [sp, #16]
    f232:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    f234:	9703      	str	r7, [sp, #12]
    f236:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    f238:	9702      	str	r7, [sp, #8]
    f23a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    f23c:	9701      	str	r7, [sp, #4]
    f23e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    f240:	9700      	str	r7, [sp, #0]
    f242:	f7fb fbc5 	bl	a9d0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    f246:	f1b5 3fff 	cmp.w	r5, #4294967295
    f24a:	bf08      	it	eq
    f24c:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    f250:	d102      	bne.n	f258 <z_impl_k_thread_create+0x38>
}
    f252:	4620      	mov	r0, r4
    f254:	b007      	add	sp, #28
    f256:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
    f258:	4632      	mov	r2, r6
    f25a:	462b      	mov	r3, r5
    f25c:	4620      	mov	r0, r4
    f25e:	f7fb fba9 	bl	a9b4 <schedule_new_thread>
    f262:	e7f6      	b.n	f252 <z_impl_k_thread_create+0x32>

0000f264 <z_pm_save_idle_exit>:
{
    f264:	b508      	push	{r3, lr}
	pm_system_resume();
    f266:	f7f3 f961 	bl	252c <pm_system_resume>
	sys_clock_idle_exit();
    f26a:	f7ff fc0e 	bl	ea8a <sys_clock_idle_exit>
}
    f26e:	bd08      	pop	{r3, pc}

0000f270 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    f270:	4288      	cmp	r0, r1
    f272:	da00      	bge.n	f276 <new_prio_for_inheritance+0x6>
    f274:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    f276:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    f27a:	db01      	blt.n	f280 <new_prio_for_inheritance+0x10>
    f27c:	4608      	mov	r0, r1
    f27e:	4770      	bx	lr
    f280:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    f284:	4770      	bx	lr

0000f286 <adjust_owner_prio>:
{
    f286:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    f288:	6880      	ldr	r0, [r0, #8]
    f28a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    f28e:	428b      	cmp	r3, r1
    f290:	d101      	bne.n	f296 <adjust_owner_prio+0x10>
	return false;
    f292:	2000      	movs	r0, #0
}
    f294:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    f296:	f7fc f8c9 	bl	b42c <z_set_prio>
    f29a:	e7fb      	b.n	f294 <adjust_owner_prio+0xe>

0000f29c <z_impl_k_mutex_init>:
{
    f29c:	4603      	mov	r3, r0
	mutex->owner = NULL;
    f29e:	2000      	movs	r0, #0
    f2a0:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    f2a2:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    f2a4:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    f2a6:	605b      	str	r3, [r3, #4]
}
    f2a8:	4770      	bx	lr

0000f2aa <sys_sflist_append>:
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    f2aa:	680b      	ldr	r3, [r1, #0]
    f2ac:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    f2b0:	600b      	str	r3, [r1, #0]
	return list->tail;
    f2b2:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    f2b4:	b132      	cbz	r2, f2c4 <sys_sflist_append+0x1a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    f2b6:	6813      	ldr	r3, [r2, #0]
    f2b8:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    f2bc:	430b      	orrs	r3, r1
    f2be:	6013      	str	r3, [r2, #0]
	list->tail = node;
    f2c0:	6041      	str	r1, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    f2c2:	4770      	bx	lr
	list->tail = node;
    f2c4:	6041      	str	r1, [r0, #4]
	list->head = node;
    f2c6:	6001      	str	r1, [r0, #0]
}
    f2c8:	4770      	bx	lr

0000f2ca <sys_sflist_insert>:
Z_GENLIST_INSERT(sflist, sfnode)
    f2ca:	b508      	push	{r3, lr}
    f2cc:	b191      	cbz	r1, f2f4 <sys_sflist_insert+0x2a>
    f2ce:	468c      	mov	ip, r1
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    f2d0:	680b      	ldr	r3, [r1, #0]
    f2d2:	f023 0103 	bic.w	r1, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
    f2d6:	2b03      	cmp	r3, #3
    f2d8:	d918      	bls.n	f30c <sys_sflist_insert+0x42>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    f2da:	6813      	ldr	r3, [r2, #0]
    f2dc:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    f2e0:	430b      	orrs	r3, r1
    f2e2:	6013      	str	r3, [r2, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    f2e4:	f8dc 3000 	ldr.w	r3, [ip]
    f2e8:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    f2ec:	4313      	orrs	r3, r2
    f2ee:	f8cc 3000 	str.w	r3, [ip]
Z_GENLIST_INSERT(sflist, sfnode)
    f2f2:	bd08      	pop	{r3, pc}
	return list->head;
    f2f4:	6801      	ldr	r1, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    f2f6:	6813      	ldr	r3, [r2, #0]
    f2f8:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    f2fc:	430b      	orrs	r3, r1
    f2fe:	6013      	str	r3, [r2, #0]
	list->head = node;
    f300:	6002      	str	r2, [r0, #0]
	return list->tail;
    f302:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
    f304:	2b00      	cmp	r3, #0
    f306:	d1f4      	bne.n	f2f2 <sys_sflist_insert+0x28>
	list->tail = node;
    f308:	6042      	str	r2, [r0, #4]
}
    f30a:	e7f2      	b.n	f2f2 <sys_sflist_insert+0x28>
Z_GENLIST_INSERT(sflist, sfnode)
    f30c:	4611      	mov	r1, r2
    f30e:	f7ff ffcc 	bl	f2aa <sys_sflist_append>
    f312:	e7ee      	b.n	f2f2 <sys_sflist_insert+0x28>

0000f314 <prepare_thread_to_run>:
{
    f314:	b508      	push	{r3, lr}
    f316:	2200      	movs	r2, #0
    f318:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
    f31c:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
    f31e:	f000 f9b2 	bl	f686 <z_ready_thread>
}
    f322:	bd08      	pop	{r3, pc}

0000f324 <queue_insert>:
{
    f324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f328:	4604      	mov	r4, r0
    f32a:	460e      	mov	r6, r1
    f32c:	4615      	mov	r5, r2
    f32e:	461f      	mov	r7, r3
    f330:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    f334:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
    f338:	f04f 0220 	mov.w	r2, #32
    f33c:	f3ef 8911 	mrs	r9, BASEPRI
    f340:	f382 8812 	msr	BASEPRI_MAX, r2
    f344:	f3bf 8f6f 	isb	sy
    f348:	46ca      	mov	sl, r9
	if (is_append) {
    f34a:	b103      	cbz	r3, f34e <queue_insert+0x2a>
	return list->tail;
    f34c:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    f34e:	4640      	mov	r0, r8
    f350:	f000 fa4f 	bl	f7f2 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    f354:	b970      	cbnz	r0, f374 <queue_insert+0x50>
	if (alloc) {
    f356:	b9b7      	cbnz	r7, f386 <queue_insert+0x62>
	node->next_and_flags = flags;
    f358:	2300      	movs	r3, #0
    f35a:	602b      	str	r3, [r5, #0]
	sys_sflist_insert(&queue->data_q, prev, data);
    f35c:	462a      	mov	r2, r5
    f35e:	4631      	mov	r1, r6
    f360:	4620      	mov	r0, r4
    f362:	f7ff ffb2 	bl	f2ca <sys_sflist_insert>
	z_reschedule(&queue->lock, key);
    f366:	4649      	mov	r1, r9
    f368:	4640      	mov	r0, r8
    f36a:	f7fb fef5 	bl	b158 <z_reschedule>
	return 0;
    f36e:	2000      	movs	r0, #0
}
    f370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prepare_thread_to_run(first_pending_thread, data);
    f374:	4629      	mov	r1, r5
    f376:	f7ff ffcd 	bl	f314 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
    f37a:	4649      	mov	r1, r9
    f37c:	4640      	mov	r0, r8
    f37e:	f7fb feeb 	bl	b158 <z_reschedule>
		return 0;
    f382:	2000      	movs	r0, #0
    f384:	e7f4      	b.n	f370 <queue_insert+0x4c>
	return z_thread_aligned_alloc(0, size);
    f386:	2108      	movs	r1, #8
    f388:	2000      	movs	r0, #0
    f38a:	f7fc fc75 	bl	bc78 <z_thread_aligned_alloc>
		if (anode == NULL) {
    f38e:	b120      	cbz	r0, f39a <queue_insert+0x76>
		anode->data = data;
    f390:	6045      	str	r5, [r0, #4]
    f392:	2201      	movs	r2, #1
    f394:	6002      	str	r2, [r0, #0]
		data = anode;
    f396:	4605      	mov	r5, r0
    f398:	e7e0      	b.n	f35c <queue_insert+0x38>
	__asm__ volatile(
    f39a:	f38a 8811 	msr	BASEPRI, sl
    f39e:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    f3a2:	f06f 000b 	mvn.w	r0, #11
    f3a6:	e7e3      	b.n	f370 <queue_insert+0x4c>

0000f3a8 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    f3a8:	b160      	cbz	r0, f3c4 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    f3aa:	6803      	ldr	r3, [r0, #0]
    f3ac:	f013 0f03 	tst.w	r3, #3
    f3b0:	d008      	beq.n	f3c4 <z_queue_node_peek+0x1c>
{
    f3b2:	b510      	push	{r4, lr}
		ret = anode->data;
    f3b4:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    f3b6:	b909      	cbnz	r1, f3bc <z_queue_node_peek+0x14>
		ret = anode->data;
    f3b8:	4620      	mov	r0, r4
}
    f3ba:	bd10      	pop	{r4, pc}
			k_free(anode);
    f3bc:	f000 fb65 	bl	fa8a <k_free>
		ret = anode->data;
    f3c0:	4620      	mov	r0, r4
    f3c2:	e7fa      	b.n	f3ba <z_queue_node_peek+0x12>
}
    f3c4:	4770      	bx	lr

0000f3c6 <k_queue_append>:
{
    f3c6:	b500      	push	{lr}
    f3c8:	b083      	sub	sp, #12
    f3ca:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    f3cc:	2301      	movs	r3, #1
    f3ce:	9300      	str	r3, [sp, #0]
    f3d0:	2300      	movs	r3, #0
    f3d2:	4619      	mov	r1, r3
    f3d4:	f7ff ffa6 	bl	f324 <queue_insert>
}
    f3d8:	b003      	add	sp, #12
    f3da:	f85d fb04 	ldr.w	pc, [sp], #4

0000f3de <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    f3de:	b13a      	cbz	r2, f3f0 <z_impl_k_sem_init+0x12>
    f3e0:	428a      	cmp	r2, r1
    f3e2:	d308      	bcc.n	f3f6 <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
    f3e4:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    f3e6:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    f3e8:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    f3ea:	6040      	str	r0, [r0, #4]
	return 0;
    f3ec:	2000      	movs	r0, #0
    f3ee:	4770      	bx	lr
		return -EINVAL;
    f3f0:	f06f 0015 	mvn.w	r0, #21
    f3f4:	4770      	bx	lr
    f3f6:	f06f 0015 	mvn.w	r0, #21
}
    f3fa:	4770      	bx	lr

0000f3fc <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
    f3fc:	460b      	mov	r3, r1
    f3fe:	b139      	cbz	r1, f410 <sys_slist_remove+0x14>
	return node->next;
    f400:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
    f402:	6019      	str	r1, [r3, #0]
	return list->tail;
    f404:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    f406:	428a      	cmp	r2, r1
    f408:	d009      	beq.n	f41e <sys_slist_remove+0x22>
	parent->next = child;
    f40a:	2300      	movs	r3, #0
    f40c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    f40e:	4770      	bx	lr
	return node->next;
    f410:	6813      	ldr	r3, [r2, #0]
	list->head = node;
    f412:	6003      	str	r3, [r0, #0]
	return list->tail;
    f414:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    f416:	428a      	cmp	r2, r1
    f418:	d1f7      	bne.n	f40a <sys_slist_remove+0xe>
	list->tail = node;
    f41a:	6043      	str	r3, [r0, #4]
}
    f41c:	e7f5      	b.n	f40a <sys_slist_remove+0xe>
	list->tail = node;
    f41e:	6043      	str	r3, [r0, #4]
}
    f420:	e7f3      	b.n	f40a <sys_slist_remove+0xe>

0000f422 <notify_queue_locked>:
	if (queue != NULL) {
    f422:	b130      	cbz	r0, f432 <notify_queue_locked+0x10>
{
    f424:	b508      	push	{r3, lr}
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    f426:	2200      	movs	r2, #0
    f428:	4611      	mov	r1, r2
    f42a:	30b8      	adds	r0, #184	; 0xb8
    f42c:	f000 fa17 	bl	f85e <z_sched_wake>
}
    f430:	bd08      	pop	{r3, pc}
	bool rv = false;
    f432:	2000      	movs	r0, #0
}
    f434:	4770      	bx	lr

0000f436 <submit_to_queue_locked>:
{
    f436:	b570      	push	{r4, r5, r6, lr}
    f438:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
    f43a:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    f43c:	f013 0f02 	tst.w	r3, #2
    f440:	d122      	bne.n	f488 <submit_to_queue_locked+0x52>
    f442:	4604      	mov	r4, r0
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    f444:	f013 0f04 	tst.w	r3, #4
    f448:	d123      	bne.n	f492 <submit_to_queue_locked+0x5c>
		if (*queuep == NULL) {
    f44a:	680b      	ldr	r3, [r1, #0]
    f44c:	b1ab      	cbz	r3, f47a <submit_to_queue_locked+0x44>
	return (*flagp & BIT(bit)) != 0U;
    f44e:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    f450:	f013 0f01 	tst.w	r3, #1
    f454:	d014      	beq.n	f480 <submit_to_queue_locked+0x4a>
			*queuep = work->queue;
    f456:	68a3      	ldr	r3, [r4, #8]
    f458:	602b      	str	r3, [r5, #0]
			ret = 2;
    f45a:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
    f45c:	4621      	mov	r1, r4
    f45e:	6828      	ldr	r0, [r5, #0]
    f460:	f7fb fcce 	bl	ae00 <queue_submit_locked>
		if (rc < 0) {
    f464:	2800      	cmp	r0, #0
    f466:	db11      	blt.n	f48c <submit_to_queue_locked+0x56>
	*flagp |= BIT(bit);
    f468:	68e3      	ldr	r3, [r4, #12]
    f46a:	f043 0304 	orr.w	r3, r3, #4
    f46e:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    f470:	682b      	ldr	r3, [r5, #0]
    f472:	60a3      	str	r3, [r4, #8]
	if (ret <= 0) {
    f474:	b136      	cbz	r6, f484 <submit_to_queue_locked+0x4e>
    f476:	4630      	mov	r0, r6
	return ret;
    f478:	e00a      	b.n	f490 <submit_to_queue_locked+0x5a>
			*queuep = work->queue;
    f47a:	6883      	ldr	r3, [r0, #8]
    f47c:	600b      	str	r3, [r1, #0]
    f47e:	e7e6      	b.n	f44e <submit_to_queue_locked+0x18>
		ret = 1;
    f480:	2601      	movs	r6, #1
    f482:	e7eb      	b.n	f45c <submit_to_queue_locked+0x26>
    f484:	4630      	mov	r0, r6
    f486:	e001      	b.n	f48c <submit_to_queue_locked+0x56>
		ret = -EBUSY;
    f488:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
    f48c:	2300      	movs	r3, #0
    f48e:	602b      	str	r3, [r5, #0]
}
    f490:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
    f492:	2000      	movs	r0, #0
    f494:	e7fa      	b.n	f48c <submit_to_queue_locked+0x56>

0000f496 <work_timeout>:
{
    f496:	b510      	push	{r4, lr}
    f498:	b082      	sub	sp, #8
    f49a:	4603      	mov	r3, r0
	__asm__ volatile(
    f49c:	f04f 0220 	mov.w	r2, #32
    f4a0:	f3ef 8411 	mrs	r4, BASEPRI
    f4a4:	f382 8812 	msr	BASEPRI_MAX, r2
    f4a8:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
    f4ac:	2200      	movs	r2, #0
    f4ae:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
    f4b0:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
    f4b4:	f022 0108 	bic.w	r1, r2, #8
    f4b8:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    f4bc:	f012 0f08 	tst.w	r2, #8
    f4c0:	d105      	bne.n	f4ce <work_timeout+0x38>
	__asm__ volatile(
    f4c2:	f384 8811 	msr	BASEPRI, r4
    f4c6:	f3bf 8f6f 	isb	sy
}
    f4ca:	b002      	add	sp, #8
    f4cc:	bd10      	pop	{r4, pc}
    f4ce:	3810      	subs	r0, #16
		queue = dw->queue;
    f4d0:	699b      	ldr	r3, [r3, #24]
    f4d2:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
    f4d4:	a901      	add	r1, sp, #4
    f4d6:	f7ff ffae 	bl	f436 <submit_to_queue_locked>
    f4da:	e7f2      	b.n	f4c2 <work_timeout+0x2c>

0000f4dc <z_reschedule_unlocked>:
{
    f4dc:	b508      	push	{r3, lr}
	__asm__ volatile(
    f4de:	f04f 0320 	mov.w	r3, #32
    f4e2:	f3ef 8011 	mrs	r0, BASEPRI
    f4e6:	f383 8812 	msr	BASEPRI_MAX, r3
    f4ea:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    f4ee:	f000 f875 	bl	f5dc <z_reschedule_irqlock>
}
    f4f2:	bd08      	pop	{r3, pc}

0000f4f4 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    f4f4:	2300      	movs	r3, #0
    f4f6:	6003      	str	r3, [r0, #0]
    f4f8:	6043      	str	r3, [r0, #4]
    f4fa:	6083      	str	r3, [r0, #8]
    f4fc:	60c3      	str	r3, [r0, #12]
    f4fe:	6041      	str	r1, [r0, #4]
}
    f500:	4770      	bx	lr

0000f502 <z_work_submit_to_queue>:
{
    f502:	b510      	push	{r4, lr}
    f504:	b082      	sub	sp, #8
    f506:	9001      	str	r0, [sp, #4]
    f508:	4608      	mov	r0, r1
    f50a:	f04f 0320 	mov.w	r3, #32
    f50e:	f3ef 8411 	mrs	r4, BASEPRI
    f512:	f383 8812 	msr	BASEPRI_MAX, r3
    f516:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    f51a:	a901      	add	r1, sp, #4
    f51c:	f7ff ff8b 	bl	f436 <submit_to_queue_locked>
	__asm__ volatile(
    f520:	f384 8811 	msr	BASEPRI, r4
    f524:	f3bf 8f6f 	isb	sy
}
    f528:	b002      	add	sp, #8
    f52a:	bd10      	pop	{r4, pc}

0000f52c <k_work_submit_to_queue>:
{
    f52c:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
    f52e:	f7ff ffe8 	bl	f502 <z_work_submit_to_queue>
	if (ret > 0) {
    f532:	1e04      	subs	r4, r0, #0
    f534:	dc01      	bgt.n	f53a <k_work_submit_to_queue+0xe>
}
    f536:	4620      	mov	r0, r4
    f538:	bd10      	pop	{r4, pc}
		z_reschedule_unlocked();
    f53a:	f7ff ffcf 	bl	f4dc <z_reschedule_unlocked>
	return ret;
    f53e:	e7fa      	b.n	f536 <k_work_submit_to_queue+0xa>

0000f540 <k_work_init_delayable>:
{
    f540:	b538      	push	{r3, r4, r5, lr}
    f542:	4604      	mov	r4, r0
    f544:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
    f546:	2230      	movs	r2, #48	; 0x30
    f548:	2100      	movs	r1, #0
    f54a:	f7fe fc66 	bl	de1a <memset>
    f54e:	6065      	str	r5, [r4, #4]
    f550:	f44f 7380 	mov.w	r3, #256	; 0x100
    f554:	60e3      	str	r3, [r4, #12]
}
    f556:	bd38      	pop	{r3, r4, r5, pc}

0000f558 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
    f558:	b510      	push	{r4, lr}
    f55a:	b082      	sub	sp, #8
    f55c:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
    f55e:	f04f 0020 	mov.w	r0, #32
    f562:	f3ef 8411 	mrs	r4, BASEPRI
    f566:	f380 8812 	msr	BASEPRI_MAX, r0
    f56a:	f3bf 8f6f 	isb	sy
	return *flagp;
    f56e:	68c8      	ldr	r0, [r1, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
    f570:	f010 0f0e 	tst.w	r0, #14
    f574:	d006      	beq.n	f584 <k_work_schedule_for_queue+0x2c>
	int ret = 0;
    f576:	2000      	movs	r0, #0
	__asm__ volatile(
    f578:	f384 8811 	msr	BASEPRI, r4
    f57c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    f580:	b002      	add	sp, #8
    f582:	bd10      	pop	{r4, pc}
		ret = schedule_for_queue_locked(&queue, dwork, delay);
    f584:	a801      	add	r0, sp, #4
    f586:	f7fb fd21 	bl	afcc <schedule_for_queue_locked>
    f58a:	e7f5      	b.n	f578 <k_work_schedule_for_queue+0x20>

0000f58c <thread_active_elsewhere>:
}
    f58c:	2000      	movs	r0, #0
    f58e:	4770      	bx	lr

0000f590 <pended_on_thread>:
}
    f590:	6880      	ldr	r0, [r0, #8]
    f592:	4770      	bx	lr

0000f594 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    f594:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    f598:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    f59c:	4283      	cmp	r3, r0
    f59e:	d001      	beq.n	f5a4 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    f5a0:	1ac0      	subs	r0, r0, r3
    f5a2:	4770      	bx	lr
	return 0;
    f5a4:	2000      	movs	r0, #0
}
    f5a6:	4770      	bx	lr

0000f5a8 <z_unpend_thread_no_timeout>:
{
    f5a8:	b538      	push	{r3, r4, r5, lr}
    f5aa:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    f5ac:	2300      	movs	r3, #0
	__asm__ volatile(
    f5ae:	f04f 0220 	mov.w	r2, #32
    f5b2:	f3ef 8511 	mrs	r5, BASEPRI
    f5b6:	f382 8812 	msr	BASEPRI_MAX, r2
    f5ba:	f3bf 8f6f 	isb	sy
    f5be:	e004      	b.n	f5ca <z_unpend_thread_no_timeout+0x22>
	__asm__ volatile(
    f5c0:	f385 8811 	msr	BASEPRI, r5
    f5c4:	f3bf 8f6f 	isb	sy
    f5c8:	2301      	movs	r3, #1
    f5ca:	b933      	cbnz	r3, f5da <z_unpend_thread_no_timeout+0x32>
		if (thread->base.pended_on != NULL) {
    f5cc:	68a3      	ldr	r3, [r4, #8]
    f5ce:	2b00      	cmp	r3, #0
    f5d0:	d0f6      	beq.n	f5c0 <z_unpend_thread_no_timeout+0x18>
			unpend_thread_no_timeout(thread);
    f5d2:	4620      	mov	r0, r4
    f5d4:	f000 f824 	bl	f620 <unpend_thread_no_timeout>
    f5d8:	e7f2      	b.n	f5c0 <z_unpend_thread_no_timeout+0x18>
}
    f5da:	bd38      	pop	{r3, r4, r5, pc}

0000f5dc <z_reschedule_irqlock>:
{
    f5dc:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    f5de:	4603      	mov	r3, r0
    f5e0:	b928      	cbnz	r0, f5ee <z_reschedule_irqlock+0x12>
    f5e2:	f3ef 8205 	mrs	r2, IPSR
    f5e6:	b912      	cbnz	r2, f5ee <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    f5e8:	f7f5 fa3e 	bl	4a68 <arch_swap>
	return ret;
    f5ec:	e003      	b.n	f5f6 <z_reschedule_irqlock+0x1a>
    f5ee:	f383 8811 	msr	BASEPRI, r3
    f5f2:	f3bf 8f6f 	isb	sy
}
    f5f6:	bd08      	pop	{r3, pc}

0000f5f8 <z_reschedule_unlocked>:
{
    f5f8:	b508      	push	{r3, lr}
	__asm__ volatile(
    f5fa:	f04f 0320 	mov.w	r3, #32
    f5fe:	f3ef 8011 	mrs	r0, BASEPRI
    f602:	f383 8812 	msr	BASEPRI_MAX, r3
    f606:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    f60a:	f7ff ffe7 	bl	f5dc <z_reschedule_irqlock>
}
    f60e:	bd08      	pop	{r3, pc}

0000f610 <z_priq_dumb_remove>:
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    f610:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    f612:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    f614:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    f616:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    f618:	2300      	movs	r3, #0
    f61a:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    f61c:	604b      	str	r3, [r1, #4]
}
    f61e:	4770      	bx	lr

0000f620 <unpend_thread_no_timeout>:
{
    f620:	b510      	push	{r4, lr}
    f622:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    f624:	f7ff ffb4 	bl	f590 <pended_on_thread>
    f628:	4621      	mov	r1, r4
    f62a:	f7ff fff1 	bl	f610 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    f62e:	7b63      	ldrb	r3, [r4, #13]
    f630:	f023 0302 	bic.w	r3, r3, #2
    f634:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    f636:	2300      	movs	r3, #0
    f638:	60a3      	str	r3, [r4, #8]
}
    f63a:	bd10      	pop	{r4, pc}

0000f63c <z_unpend_thread>:
{
    f63c:	b538      	push	{r3, r4, r5, lr}
    f63e:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    f640:	2300      	movs	r3, #0
    f642:	f04f 0220 	mov.w	r2, #32
    f646:	f3ef 8511 	mrs	r5, BASEPRI
    f64a:	f382 8812 	msr	BASEPRI_MAX, r2
    f64e:	f3bf 8f6f 	isb	sy
    f652:	e004      	b.n	f65e <z_unpend_thread+0x22>
	__asm__ volatile(
    f654:	f385 8811 	msr	BASEPRI, r5
    f658:	f3bf 8f6f 	isb	sy
    f65c:	2301      	movs	r3, #1
    f65e:	b933      	cbnz	r3, f66e <z_unpend_thread+0x32>
		if (thread->base.pended_on != NULL) {
    f660:	68a3      	ldr	r3, [r4, #8]
    f662:	2b00      	cmp	r3, #0
    f664:	d0f6      	beq.n	f654 <z_unpend_thread+0x18>
			unpend_thread_no_timeout(thread);
    f666:	4620      	mov	r0, r4
    f668:	f7ff ffda 	bl	f620 <unpend_thread_no_timeout>
    f66c:	e7f2      	b.n	f654 <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
    f66e:	f104 0018 	add.w	r0, r4, #24
    f672:	f000 f956 	bl	f922 <z_abort_timeout>
}
    f676:	bd38      	pop	{r3, r4, r5, pc}

0000f678 <z_priq_dumb_best>:
{
    f678:	4603      	mov	r3, r0
	return list->head == list;
    f67a:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f67c:	4283      	cmp	r3, r0
    f67e:	d000      	beq.n	f682 <z_priq_dumb_best+0xa>
}
    f680:	4770      	bx	lr
	struct k_thread *thread = NULL;
    f682:	2000      	movs	r0, #0
	return thread;
    f684:	e7fc      	b.n	f680 <z_priq_dumb_best+0x8>

0000f686 <z_ready_thread>:
{
    f686:	b538      	push	{r3, r4, r5, lr}
    f688:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    f68a:	2300      	movs	r3, #0
	__asm__ volatile(
    f68c:	f04f 0220 	mov.w	r2, #32
    f690:	f3ef 8511 	mrs	r5, BASEPRI
    f694:	f382 8812 	msr	BASEPRI_MAX, r2
    f698:	f3bf 8f6f 	isb	sy
    f69c:	e004      	b.n	f6a8 <z_ready_thread+0x22>
	__asm__ volatile(
    f69e:	f385 8811 	msr	BASEPRI, r5
    f6a2:	f3bf 8f6f 	isb	sy
    f6a6:	2301      	movs	r3, #1
    f6a8:	b943      	cbnz	r3, f6bc <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    f6aa:	4620      	mov	r0, r4
    f6ac:	f7ff ff6e 	bl	f58c <thread_active_elsewhere>
    f6b0:	2800      	cmp	r0, #0
    f6b2:	d1f4      	bne.n	f69e <z_ready_thread+0x18>
			ready_thread(thread);
    f6b4:	4620      	mov	r0, r4
    f6b6:	f7fb fe27 	bl	b308 <ready_thread>
    f6ba:	e7f0      	b.n	f69e <z_ready_thread+0x18>
}
    f6bc:	bd38      	pop	{r3, r4, r5, pc}

0000f6be <z_sched_wake_thread>:
{
    f6be:	b570      	push	{r4, r5, r6, lr}
    f6c0:	4604      	mov	r4, r0
    f6c2:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    f6c4:	2300      	movs	r3, #0
	__asm__ volatile(
    f6c6:	f04f 0220 	mov.w	r2, #32
    f6ca:	f3ef 8511 	mrs	r5, BASEPRI
    f6ce:	f382 8812 	msr	BASEPRI_MAX, r2
    f6d2:	f3bf 8f6f 	isb	sy
    f6d6:	e007      	b.n	f6e8 <z_sched_wake_thread+0x2a>
			ready_thread(thread);
    f6d8:	4620      	mov	r0, r4
    f6da:	f7fb fe15 	bl	b308 <ready_thread>
	__asm__ volatile(
    f6de:	f385 8811 	msr	BASEPRI, r5
    f6e2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    f6e6:	2301      	movs	r3, #1
    f6e8:	b993      	cbnz	r3, f710 <z_sched_wake_thread+0x52>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    f6ea:	7b63      	ldrb	r3, [r4, #13]
		if (!killed) {
    f6ec:	f013 0f28 	tst.w	r3, #40	; 0x28
    f6f0:	d1f5      	bne.n	f6de <z_sched_wake_thread+0x20>
			if (thread->base.pended_on != NULL) {
    f6f2:	68a3      	ldr	r3, [r4, #8]
    f6f4:	b113      	cbz	r3, f6fc <z_sched_wake_thread+0x3e>
				unpend_thread_no_timeout(thread);
    f6f6:	4620      	mov	r0, r4
    f6f8:	f7ff ff92 	bl	f620 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    f6fc:	7b63      	ldrb	r3, [r4, #13]
    f6fe:	f023 0204 	bic.w	r2, r3, #4
    f702:	7362      	strb	r2, [r4, #13]
			if (is_timeout) {
    f704:	2e00      	cmp	r6, #0
    f706:	d0e7      	beq.n	f6d8 <z_sched_wake_thread+0x1a>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    f708:	f023 0314 	bic.w	r3, r3, #20
    f70c:	7363      	strb	r3, [r4, #13]
}
    f70e:	e7e3      	b.n	f6d8 <z_sched_wake_thread+0x1a>
}
    f710:	bd70      	pop	{r4, r5, r6, pc}

0000f712 <z_thread_timeout>:
{
    f712:	b508      	push	{r3, lr}
	z_sched_wake_thread(thread, true);
    f714:	2101      	movs	r1, #1
    f716:	3818      	subs	r0, #24
    f718:	f7ff ffd1 	bl	f6be <z_sched_wake_thread>
}
    f71c:	bd08      	pop	{r3, pc}

0000f71e <unpend_all>:
{
    f71e:	b538      	push	{r3, r4, r5, lr}
    f720:	4605      	mov	r5, r0
	return list->head == list;
    f722:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f724:	42a5      	cmp	r5, r4
    f726:	d00e      	beq.n	f746 <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    f728:	b16c      	cbz	r4, f746 <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
    f72a:	4620      	mov	r0, r4
    f72c:	f7ff ff78 	bl	f620 <unpend_thread_no_timeout>
    f730:	f104 0018 	add.w	r0, r4, #24
    f734:	f000 f8f5 	bl	f922 <z_abort_timeout>
    f738:	2300      	movs	r3, #0
    f73a:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
		ready_thread(thread);
    f73e:	4620      	mov	r0, r4
    f740:	f7fb fde2 	bl	b308 <ready_thread>
    f744:	e7ed      	b.n	f722 <unpend_all+0x4>
}
    f746:	bd38      	pop	{r3, r4, r5, pc}

0000f748 <add_to_waitq_locked>:
{
    f748:	b570      	push	{r4, r5, r6, lr}
    f74a:	4605      	mov	r5, r0
    f74c:	460e      	mov	r6, r1
	unready_thread(thread);
    f74e:	f7fb fe35 	bl	b3bc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    f752:	7b6b      	ldrb	r3, [r5, #13]
    f754:	f043 0302 	orr.w	r3, r3, #2
    f758:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    f75a:	b1fe      	cbz	r6, f79c <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
    f75c:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    f75e:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f760:	42a6      	cmp	r6, r4
    f762:	d108      	bne.n	f776 <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f764:	2400      	movs	r4, #0
    f766:	e006      	b.n	f776 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
    f768:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    f76a:	606b      	str	r3, [r5, #4]
	node->next = successor;
    f76c:	602c      	str	r4, [r5, #0]
	prev->next = node;
    f76e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    f770:	6065      	str	r5, [r4, #4]
}
    f772:	e013      	b.n	f79c <add_to_waitq_locked+0x54>
    f774:	2400      	movs	r4, #0
    f776:	b164      	cbz	r4, f792 <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    f778:	4621      	mov	r1, r4
    f77a:	4628      	mov	r0, r5
    f77c:	f7ff ff0a 	bl	f594 <z_sched_prio_cmp>
    f780:	2800      	cmp	r0, #0
    f782:	dcf1      	bgt.n	f768 <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    f784:	2c00      	cmp	r4, #0
    f786:	d0f6      	beq.n	f776 <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
    f788:	6873      	ldr	r3, [r6, #4]
    f78a:	429c      	cmp	r4, r3
    f78c:	d0f2      	beq.n	f774 <add_to_waitq_locked+0x2c>
    f78e:	6824      	ldr	r4, [r4, #0]
    f790:	e7f1      	b.n	f776 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
    f792:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    f794:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    f796:	606b      	str	r3, [r5, #4]
	tail->next = node;
    f798:	601d      	str	r5, [r3, #0]
	list->tail = node;
    f79a:	6075      	str	r5, [r6, #4]
}
    f79c:	bd70      	pop	{r4, r5, r6, pc}

0000f79e <pend_locked>:
{
    f79e:	b570      	push	{r4, r5, r6, lr}
    f7a0:	4604      	mov	r4, r0
    f7a2:	4616      	mov	r6, r2
    f7a4:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
    f7a6:	f7ff ffcf 	bl	f748 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
    f7aa:	4632      	mov	r2, r6
    f7ac:	462b      	mov	r3, r5
    f7ae:	4620      	mov	r0, r4
    f7b0:	f7fb fc9a 	bl	b0e8 <add_thread_timeout>
}
    f7b4:	bd70      	pop	{r4, r5, r6, pc}

0000f7b6 <z_unpend1_no_timeout>:
{
    f7b6:	b570      	push	{r4, r5, r6, lr}
    f7b8:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    f7ba:	2300      	movs	r3, #0
	__asm__ volatile(
    f7bc:	f04f 0220 	mov.w	r2, #32
    f7c0:	f3ef 8511 	mrs	r5, BASEPRI
    f7c4:	f382 8812 	msr	BASEPRI_MAX, r2
    f7c8:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    f7cc:	461c      	mov	r4, r3
    f7ce:	e004      	b.n	f7da <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
    f7d0:	f385 8811 	msr	BASEPRI, r5
    f7d4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    f7d8:	2301      	movs	r3, #1
    f7da:	b943      	cbnz	r3, f7ee <z_unpend1_no_timeout+0x38>
		thread = _priq_wait_best(&wait_q->waitq);
    f7dc:	4630      	mov	r0, r6
    f7de:	f7ff ff4b 	bl	f678 <z_priq_dumb_best>
		if (thread != NULL) {
    f7e2:	4604      	mov	r4, r0
    f7e4:	2800      	cmp	r0, #0
    f7e6:	d0f3      	beq.n	f7d0 <z_unpend1_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
    f7e8:	f7ff ff1a 	bl	f620 <unpend_thread_no_timeout>
    f7ec:	e7f0      	b.n	f7d0 <z_unpend1_no_timeout+0x1a>
}
    f7ee:	4620      	mov	r0, r4
    f7f0:	bd70      	pop	{r4, r5, r6, pc}

0000f7f2 <z_unpend_first_thread>:
{
    f7f2:	b570      	push	{r4, r5, r6, lr}
    f7f4:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    f7f6:	2300      	movs	r3, #0
	__asm__ volatile(
    f7f8:	f04f 0220 	mov.w	r2, #32
    f7fc:	f3ef 8511 	mrs	r5, BASEPRI
    f800:	f382 8812 	msr	BASEPRI_MAX, r2
    f804:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    f808:	461c      	mov	r4, r3
    f80a:	e004      	b.n	f816 <z_unpend_first_thread+0x24>
	__asm__ volatile(
    f80c:	f385 8811 	msr	BASEPRI, r5
    f810:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    f814:	2301      	movs	r3, #1
    f816:	b963      	cbnz	r3, f832 <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
    f818:	4630      	mov	r0, r6
    f81a:	f7ff ff2d 	bl	f678 <z_priq_dumb_best>
		if (thread != NULL) {
    f81e:	4604      	mov	r4, r0
    f820:	2800      	cmp	r0, #0
    f822:	d0f3      	beq.n	f80c <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
    f824:	f7ff fefc 	bl	f620 <unpend_thread_no_timeout>
    f828:	f104 0018 	add.w	r0, r4, #24
    f82c:	f000 f879 	bl	f922 <z_abort_timeout>
    f830:	e7ec      	b.n	f80c <z_unpend_first_thread+0x1a>
}
    f832:	4620      	mov	r0, r4
    f834:	bd70      	pop	{r4, r5, r6, pc}

0000f836 <z_unpend_all>:
{
    f836:	b538      	push	{r3, r4, r5, lr}
    f838:	4605      	mov	r5, r0
	int need_sched = 0;
    f83a:	2000      	movs	r0, #0
	return list->head == list;
    f83c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f83e:	42a5      	cmp	r5, r4
    f840:	d008      	beq.n	f854 <z_unpend_all+0x1e>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    f842:	b13c      	cbz	r4, f854 <z_unpend_all+0x1e>
		z_unpend_thread(thread);
    f844:	4620      	mov	r0, r4
    f846:	f7ff fef9 	bl	f63c <z_unpend_thread>
		z_ready_thread(thread);
    f84a:	4620      	mov	r0, r4
    f84c:	f7ff ff1b 	bl	f686 <z_ready_thread>
		need_sched = 1;
    f850:	2001      	movs	r0, #1
    f852:	e7f3      	b.n	f83c <z_unpend_all+0x6>
}
    f854:	bd38      	pop	{r3, r4, r5, pc}

0000f856 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    f856:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    f858:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    f85a:	6083      	str	r3, [r0, #8]
}
    f85c:	4770      	bx	lr

0000f85e <z_sched_wake>:
{
    f85e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f862:	4606      	mov	r6, r0
    f864:	4688      	mov	r8, r1
    f866:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
    f868:	2300      	movs	r3, #0
	__asm__ volatile(
    f86a:	f04f 0220 	mov.w	r2, #32
    f86e:	f3ef 8511 	mrs	r5, BASEPRI
    f872:	f382 8812 	msr	BASEPRI_MAX, r2
    f876:	f3bf 8f6f 	isb	sy
	bool ret = false;
    f87a:	4699      	mov	r9, r3
    f87c:	e004      	b.n	f888 <z_sched_wake+0x2a>
	__asm__ volatile(
    f87e:	f385 8811 	msr	BASEPRI, r5
    f882:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    f886:	2301      	movs	r3, #1
    f888:	b9a3      	cbnz	r3, f8b4 <z_sched_wake+0x56>
		thread = _priq_wait_best(&wait_q->waitq);
    f88a:	4630      	mov	r0, r6
    f88c:	f7ff fef4 	bl	f678 <z_priq_dumb_best>
		if (thread != NULL) {
    f890:	4604      	mov	r4, r0
    f892:	2800      	cmp	r0, #0
    f894:	d0f3      	beq.n	f87e <z_sched_wake+0x20>
    f896:	f8c0 80ac 	str.w	r8, [r0, #172]	; 0xac
	thread->base.swap_data = data;
    f89a:	6147      	str	r7, [r0, #20]
			unpend_thread_no_timeout(thread);
    f89c:	f7ff fec0 	bl	f620 <unpend_thread_no_timeout>
    f8a0:	f104 0018 	add.w	r0, r4, #24
    f8a4:	f000 f83d 	bl	f922 <z_abort_timeout>
			ready_thread(thread);
    f8a8:	4620      	mov	r0, r4
    f8aa:	f7fb fd2d 	bl	b308 <ready_thread>
			ret = true;
    f8ae:	f04f 0901 	mov.w	r9, #1
    f8b2:	e7e4      	b.n	f87e <z_sched_wake+0x20>
}
    f8b4:	4648      	mov	r0, r9
    f8b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000f8ba <remove_timeout>:
{
    f8ba:	b510      	push	{r4, lr}
    f8bc:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    f8be:	f7fc f80f 	bl	b8e0 <next>
    f8c2:	b148      	cbz	r0, f8d8 <remove_timeout+0x1e>
    f8c4:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    f8c6:	6903      	ldr	r3, [r0, #16]
    f8c8:	6941      	ldr	r1, [r0, #20]
    f8ca:	6920      	ldr	r0, [r4, #16]
    f8cc:	181b      	adds	r3, r3, r0
    f8ce:	6960      	ldr	r0, [r4, #20]
    f8d0:	eb41 0100 	adc.w	r1, r1, r0
    f8d4:	6113      	str	r3, [r2, #16]
    f8d6:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    f8d8:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    f8da:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    f8dc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    f8de:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    f8e0:	2300      	movs	r3, #0
    f8e2:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    f8e4:	6063      	str	r3, [r4, #4]
}
    f8e6:	bd10      	pop	{r4, pc}

0000f8e8 <next_timeout>:
{
    f8e8:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    f8ea:	f7fb ffef 	bl	b8cc <first>
    f8ee:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    f8f0:	f7fc f802 	bl	b8f8 <elapsed>
	if ((to == NULL) ||
    f8f4:	b17c      	cbz	r4, f916 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    f8f6:	6923      	ldr	r3, [r4, #16]
    f8f8:	6962      	ldr	r2, [r4, #20]
    f8fa:	1a1b      	subs	r3, r3, r0
    f8fc:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    f900:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    f904:	f172 0100 	sbcs.w	r1, r2, #0
    f908:	da08      	bge.n	f91c <next_timeout+0x34>
		ret = MAX(0, to->dticks - ticks_elapsed);
    f90a:	2a00      	cmp	r2, #0
    f90c:	db01      	blt.n	f912 <next_timeout+0x2a>
    f90e:	4618      	mov	r0, r3
}
    f910:	bd10      	pop	{r4, pc}
		ret = MAX(0, to->dticks - ticks_elapsed);
    f912:	2300      	movs	r3, #0
    f914:	e7fb      	b.n	f90e <next_timeout+0x26>
		ret = MAX_WAIT;
    f916:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    f91a:	e7f9      	b.n	f910 <next_timeout+0x28>
    f91c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return ret;
    f920:	e7f6      	b.n	f910 <next_timeout+0x28>

0000f922 <z_abort_timeout>:
{
    f922:	b570      	push	{r4, r5, r6, lr}
    f924:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    f926:	2300      	movs	r3, #0
	__asm__ volatile(
    f928:	f04f 0220 	mov.w	r2, #32
    f92c:	f3ef 8611 	mrs	r6, BASEPRI
    f930:	f382 8812 	msr	BASEPRI_MAX, r2
    f934:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    f938:	f06f 0015 	mvn.w	r0, #21
    f93c:	e004      	b.n	f948 <z_abort_timeout+0x26>
	__asm__ volatile(
    f93e:	f386 8811 	msr	BASEPRI, r6
    f942:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    f946:	2301      	movs	r3, #1
    f948:	461d      	mov	r5, r3
    f94a:	b93b      	cbnz	r3, f95c <z_abort_timeout+0x3a>
	return node->next != NULL;
    f94c:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    f94e:	2b00      	cmp	r3, #0
    f950:	d0f5      	beq.n	f93e <z_abort_timeout+0x1c>
			remove_timeout(to);
    f952:	4620      	mov	r0, r4
    f954:	f7ff ffb1 	bl	f8ba <remove_timeout>
			ret = 0;
    f958:	4628      	mov	r0, r5
    f95a:	e7f0      	b.n	f93e <z_abort_timeout+0x1c>
}
    f95c:	bd70      	pop	{r4, r5, r6, pc}

0000f95e <z_get_next_timeout_expiry>:
{
    f95e:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    f960:	2300      	movs	r3, #0
	__asm__ volatile(
    f962:	f04f 0220 	mov.w	r2, #32
    f966:	f3ef 8411 	mrs	r4, BASEPRI
    f96a:	f382 8812 	msr	BASEPRI_MAX, r2
    f96e:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    f972:	f04f 30ff 	mov.w	r0, #4294967295
    f976:	e006      	b.n	f986 <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
    f978:	f7ff ffb6 	bl	f8e8 <next_timeout>
	__asm__ volatile(
    f97c:	f384 8811 	msr	BASEPRI, r4
    f980:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    f984:	2301      	movs	r3, #1
    f986:	2b00      	cmp	r3, #0
    f988:	d0f6      	beq.n	f978 <z_get_next_timeout_expiry+0x1a>
}
    f98a:	bd10      	pop	{r4, pc}

0000f98c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    f98c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    f98e:	f7fc f8a3 	bl	bad8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    f992:	bd08      	pop	{r3, pc}

0000f994 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
    f994:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
    f996:	f7fc f89f 	bl	bad8 <sys_clock_tick_get>
}
    f99a:	bd08      	pop	{r3, pc}

0000f99c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    f99c:	b900      	cbnz	r0, f9a0 <z_impl_k_busy_wait+0x4>
    f99e:	4770      	bx	lr
{
    f9a0:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    f9a2:	f7f6 fa0d 	bl	5dc0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    f9a6:	bd08      	pop	{r3, pc}

0000f9a8 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
    f9a8:	b538      	push	{r3, r4, r5, lr}
    f9aa:	460c      	mov	r4, r1
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f9ac:	f1b1 3fff 	cmp.w	r1, #4294967295
    f9b0:	bf08      	it	eq
    f9b2:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    f9b6:	d020      	beq.n	f9fa <sys_clock_timeout_end_calc+0x52>
    f9b8:	4605      	mov	r5, r0
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    f9ba:	ea51 0300 	orrs.w	r3, r1, r0
    f9be:	d009      	beq.n	f9d4 <sys_clock_timeout_end_calc+0x2c>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    f9c0:	f06f 0301 	mvn.w	r3, #1
    f9c4:	1a18      	subs	r0, r3, r0
    f9c6:	f04f 33ff 	mov.w	r3, #4294967295
    f9ca:	eb63 0101 	sbc.w	r1, r3, r1
    f9ce:	2900      	cmp	r1, #0
    f9d0:	db03      	blt.n	f9da <sys_clock_timeout_end_calc+0x32>
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    f9d2:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
    f9d4:	f7fc f880 	bl	bad8 <sys_clock_tick_get>
    f9d8:	e7fb      	b.n	f9d2 <sys_clock_timeout_end_calc+0x2a>
		return sys_clock_tick_get() + MAX(1, dt);
    f9da:	f7fc f87d 	bl	bad8 <sys_clock_tick_get>
    f9de:	4603      	mov	r3, r0
    f9e0:	462a      	mov	r2, r5
    f9e2:	46a4      	mov	ip, r4
    f9e4:	2d01      	cmp	r5, #1
    f9e6:	f174 0400 	sbcs.w	r4, r4, #0
    f9ea:	da02      	bge.n	f9f2 <sys_clock_timeout_end_calc+0x4a>
    f9ec:	2201      	movs	r2, #1
    f9ee:	f04f 0c00 	mov.w	ip, #0
    f9f2:	1898      	adds	r0, r3, r2
    f9f4:	eb41 010c 	adc.w	r1, r1, ip
    f9f8:	e7eb      	b.n	f9d2 <sys_clock_timeout_end_calc+0x2a>
		return UINT64_MAX;
    f9fa:	f04f 30ff 	mov.w	r0, #4294967295
    f9fe:	4601      	mov	r1, r0
    fa00:	e7e7      	b.n	f9d2 <sys_clock_timeout_end_calc+0x2a>

0000fa02 <z_reschedule_unlocked>:
{
    fa02:	b508      	push	{r3, lr}
	__asm__ volatile(
    fa04:	f04f 0320 	mov.w	r3, #32
    fa08:	f3ef 8011 	mrs	r0, BASEPRI
    fa0c:	f383 8812 	msr	BASEPRI_MAX, r3
    fa10:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    fa14:	f7ff fde2 	bl	f5dc <z_reschedule_irqlock>
}
    fa18:	bd08      	pop	{r3, pc}

0000fa1a <k_timer_init>:
	timer->expiry_fn = expiry_fn;
    fa1a:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
    fa1c:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
    fa1e:	2300      	movs	r3, #0
    fa20:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
    fa22:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
    fa26:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
    fa28:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
    fa2a:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
    fa2c:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
    fa2e:	6343      	str	r3, [r0, #52]	; 0x34
}
    fa30:	4770      	bx	lr

0000fa32 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    fa32:	b510      	push	{r4, lr}
    fa34:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    fa36:	f7ff ff74 	bl	f922 <z_abort_timeout>

	if (inactive) {
    fa3a:	b960      	cbnz	r0, fa56 <z_impl_k_timer_stop+0x24>
		return;
	}

	if (timer->stop_fn != NULL) {
    fa3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fa3e:	b10b      	cbz	r3, fa44 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    fa40:	4620      	mov	r0, r4
    fa42:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    fa44:	f104 0018 	add.w	r0, r4, #24
    fa48:	f7ff feb5 	bl	f7b6 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    fa4c:	b118      	cbz	r0, fa56 <z_impl_k_timer_stop+0x24>
			z_ready_thread(pending_thread);
    fa4e:	f7ff fe1a 	bl	f686 <z_ready_thread>
			z_reschedule_unlocked();
    fa52:	f7ff ffd6 	bl	fa02 <z_reschedule_unlocked>
		}
	}
}
    fa56:	bd10      	pop	{r4, pc}

0000fa58 <z_heap_aligned_alloc>:
{
    fa58:	b5d0      	push	{r4, r6, r7, lr}
    fa5a:	b082      	sub	sp, #8
    fa5c:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    fa5e:	2300      	movs	r3, #0
    fa60:	3204      	adds	r2, #4
    fa62:	d20e      	bcs.n	fa82 <z_heap_aligned_alloc+0x2a>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
    fa64:	b97b      	cbnz	r3, fa86 <z_heap_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    fa66:	2600      	movs	r6, #0
    fa68:	2700      	movs	r7, #0
    fa6a:	e9cd 6700 	strd	r6, r7, [sp]
    fa6e:	f041 0104 	orr.w	r1, r1, #4
    fa72:	4620      	mov	r0, r4
    fa74:	f000 f81a 	bl	faac <k_heap_aligned_alloc>
	if (mem == NULL) {
    fa78:	b108      	cbz	r0, fa7e <z_heap_aligned_alloc+0x26>
	*heap_ref = heap;
    fa7a:	f840 4b04 	str.w	r4, [r0], #4
}
    fa7e:	b002      	add	sp, #8
    fa80:	bdd0      	pop	{r4, r6, r7, pc}
    fa82:	2301      	movs	r3, #1
    fa84:	e7ee      	b.n	fa64 <z_heap_aligned_alloc+0xc>
		return NULL;
    fa86:	2000      	movs	r0, #0
    fa88:	e7f9      	b.n	fa7e <z_heap_aligned_alloc+0x26>

0000fa8a <k_free>:
	if (ptr != NULL) {
    fa8a:	b130      	cbz	r0, fa9a <k_free+0x10>
{
    fa8c:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
    fa8e:	1f01      	subs	r1, r0, #4
    fa90:	f850 0c04 	ldr.w	r0, [r0, #-4]
    fa94:	f000 f860 	bl	fb58 <k_heap_free>
}
    fa98:	bd08      	pop	{r3, pc}
    fa9a:	4770      	bx	lr

0000fa9c <k_heap_init>:
{
    fa9c:	b510      	push	{r4, lr}
    fa9e:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
    faa2:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    faa4:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
    faa6:	f7fc fc21 	bl	c2ec <sys_heap_init>
}
    faaa:	bd10      	pop	{r4, pc}

0000faac <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    faac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fab0:	b085      	sub	sp, #20
    fab2:	4607      	mov	r7, r0
    fab4:	9103      	str	r1, [sp, #12]
    fab6:	4692      	mov	sl, r2
    fab8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    faba:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    fabc:	4628      	mov	r0, r5
    fabe:	4621      	mov	r1, r4
    fac0:	f7ff ff72 	bl	f9a8 <sys_clock_timeout_end_calc>
    fac4:	4606      	mov	r6, r0
    fac6:	4689      	mov	r9, r1
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    fac8:	f1b4 3fff 	cmp.w	r4, #4294967295
    facc:	bf08      	it	eq
    face:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    fad2:	d00d      	beq.n	faf0 <k_heap_aligned_alloc+0x44>

	k_spinlock_key_t key = k_spin_lock(&h->lock);
    fad4:	f107 0b14 	add.w	fp, r7, #20
    fad8:	f04f 0320 	mov.w	r3, #32
    fadc:	f3ef 8511 	mrs	r5, BASEPRI
    fae0:	f383 8812 	msr	BASEPRI_MAX, r3
    fae4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
    fae8:	f04f 0800 	mov.w	r8, #0
	void *ret = NULL;
    faec:	4644      	mov	r4, r8

	while (ret == NULL) {
    faee:	e014      	b.n	fb1a <k_heap_aligned_alloc+0x6e>
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    faf0:	f04f 36ff 	mov.w	r6, #4294967295
    faf4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    faf8:	e7ec      	b.n	fad4 <k_heap_aligned_alloc+0x28>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    fafa:	9000      	str	r0, [sp, #0]
    fafc:	9101      	str	r1, [sp, #4]
    fafe:	f107 020c 	add.w	r2, r7, #12
    fb02:	4629      	mov	r1, r5
    fb04:	4658      	mov	r0, fp
    fb06:	f7fb fc75 	bl	b3f4 <z_pend_curr>
    fb0a:	f04f 0320 	mov.w	r3, #32
    fb0e:	f3ef 8511 	mrs	r5, BASEPRI
    fb12:	f383 8812 	msr	BASEPRI_MAX, r3
    fb16:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
    fb1a:	b9ac      	cbnz	r4, fb48 <k_heap_aligned_alloc+0x9c>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    fb1c:	4652      	mov	r2, sl
    fb1e:	9903      	ldr	r1, [sp, #12]
    fb20:	4638      	mov	r0, r7
    fb22:	f7fc fb6d 	bl	c200 <sys_heap_aligned_alloc>
    fb26:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
    fb28:	f7fb ffd6 	bl	bad8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    fb2c:	b964      	cbnz	r4, fb48 <k_heap_aligned_alloc+0x9c>
		    (ret != NULL) || ((end - now) <= 0)) {
    fb2e:	1a30      	subs	r0, r6, r0
    fb30:	eb69 0101 	sbc.w	r1, r9, r1
    fb34:	2801      	cmp	r0, #1
    fb36:	f171 0300 	sbcs.w	r3, r1, #0
    fb3a:	db05      	blt.n	fb48 <k_heap_aligned_alloc+0x9c>
		if (!blocked_alloc) {
    fb3c:	f1b8 0f00 	cmp.w	r8, #0
    fb40:	d1db      	bne.n	fafa <k_heap_aligned_alloc+0x4e>
			blocked_alloc = true;
    fb42:	f04f 0801 	mov.w	r8, #1
    fb46:	e7d8      	b.n	fafa <k_heap_aligned_alloc+0x4e>
	__asm__ volatile(
    fb48:	f385 8811 	msr	BASEPRI, r5
    fb4c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    fb50:	4620      	mov	r0, r4
    fb52:	b005      	add	sp, #20
    fb54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000fb58 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    fb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb5a:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    fb5c:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
    fb60:	f04f 0320 	mov.w	r3, #32
    fb64:	f3ef 8511 	mrs	r5, BASEPRI
    fb68:	f383 8812 	msr	BASEPRI_MAX, r3
    fb6c:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
    fb70:	f7fc fb02 	bl	c178 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    fb74:	f104 000c 	add.w	r0, r4, #12
    fb78:	f7ff fe5d 	bl	f836 <z_unpend_all>
    fb7c:	b920      	cbnz	r0, fb88 <k_heap_free+0x30>
	__asm__ volatile(
    fb7e:	f385 8811 	msr	BASEPRI, r5
    fb82:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    fb86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_reschedule(&h->lock, key);
    fb88:	4629      	mov	r1, r5
    fb8a:	4638      	mov	r0, r7
    fb8c:	f7fb fae4 	bl	b158 <z_reschedule>
    fb90:	e7f9      	b.n	fb86 <k_heap_free+0x2e>

0000fb92 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    fb92:	4770      	bx	lr
