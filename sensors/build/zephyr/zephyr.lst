
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

void i2c_dump_msgs_rw(const char *name, const struct i2c_msg *msgs,
		      uint8_t num_msgs, uint16_t addr, bool dump_read)
{
	LOG_DBG("I2C msg: %s, addr=%x", name, addr);
	for (unsigned int i = 0; i < num_msgs; i++) {
   0:	00 21 00 20 7d 46 00 00 29 a3 00 00 35 46 00 00     .!. }F..)...5F..
  10:	35 46 00 00 35 46 00 00 35 46 00 00 00 00 00 00     5F..5F..5F......
	...
  2c:	a9 37 00 00 35 46 00 00 00 00 00 00 51 37 00 00     .7..5F......Q7..
  3c:	35 46 00 00                                         5F..

00000040 <_irq_vector_table>:
  40:	81 38 00 00 81 38 00 00 81 38 00 00 81 38 00 00     .8...8...8...8..
  50:	81 38 00 00 81 38 00 00 81 38 00 00 81 38 00 00     .8...8...8...8..
  60:	81 38 00 00 81 38 00 00 81 38 00 00 81 38 00 00     .8...8...8...8..
  70:	81 38 00 00 81 38 00 00 81 38 00 00 81 38 00 00     .8...8...8...8..
  80:	81 38 00 00 81 38 00 00 81 38 00 00 81 38 00 00     .8...8...8...8..
  90:	81 38 00 00 81 38 00 00 81 38 00 00 81 38 00 00     .8...8...8...8..
  a0:	81 38 00 00 81 38 00 00 81 38 00 00 81 38 00 00     .8...8...8...8..
  b0:	81 38 00 00 81 38 00 00 81 38 00 00 81 38 00 00     .8...8...8...8..
  c0:	81 38 00 00 81 38 00 00 81 38 00 00 81 38 00 00     .8...8...8...8..
  d0:	81 38 00 00 81 38 00 00 81 38 00 00 81 38 00 00     .8...8...8...8..
  e0:	81 38 00 00 81 38 00 00 81 38 00 00 81 38 00 00     .8...8...8...8..
  f0:	81 38 00 00 81 38 00 00 81 38 00 00 81 38 00 00     .8...8...8...8..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <CONFIG_FLASH_SIZE+0xfa>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xf>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <CONFIG_FLASH_SIZE+0xe6>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x51>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6f>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x85>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_FLASH_SIZE+0x30>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_FLASH_SIZE+0x18>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4c>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_FLASH_SIZE+0x18>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_FLASH_SIZE+0x7a>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_FLASH_SIZE+0x76>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_FLASH_SIZE+0x90>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_FLASH_SIZE+0xde>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_FLASH_SIZE+0xc6>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5a>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1e>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3c>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_FLASH_SIZE+0x44>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_FLASH_SIZE+0x44>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_FLASH_SIZE+0x44>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x85>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x85>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16c>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c8>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x152>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x136>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x156>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x196>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1b2>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <__z_interrupt_stack_SIZEOF+0x28>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <__z_interrupt_stack_SIZEOF+0x3c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     89a:	e712      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>

0000089c <__aeabi_ldivmod>:
     89c:	b97b      	cbnz	r3, 8be <__aeabi_ldivmod+0x22>
     89e:	b972      	cbnz	r2, 8be <__aeabi_ldivmod+0x22>
     8a0:	2900      	cmp	r1, #0
     8a2:	bfbe      	ittt	lt
     8a4:	2000      	movlt	r0, #0
     8a6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     8aa:	e006      	blt.n	8ba <__aeabi_ldivmod+0x1e>
     8ac:	bf08      	it	eq
     8ae:	2800      	cmpeq	r0, #0
     8b0:	bf1c      	itt	ne
     8b2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     8b6:	f04f 30ff 	movne.w	r0, #4294967295
     8ba:	f000 b857 	b.w	96c <__aeabi_idiv0>
     8be:	f1ad 0c08 	sub.w	ip, sp, #8
     8c2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     8c6:	2900      	cmp	r1, #0
     8c8:	db09      	blt.n	8de <__aeabi_ldivmod+0x42>
     8ca:	2b00      	cmp	r3, #0
     8cc:	db1a      	blt.n	904 <__aeabi_ldivmod+0x68>
     8ce:	f000 f84f 	bl	970 <__udivmoddi4>
     8d2:	f8dd e004 	ldr.w	lr, [sp, #4]
     8d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     8da:	b004      	add	sp, #16
     8dc:	4770      	bx	lr
     8de:	4240      	negs	r0, r0
     8e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     8e4:	2b00      	cmp	r3, #0
     8e6:	db1b      	blt.n	920 <__aeabi_ldivmod+0x84>
     8e8:	f000 f842 	bl	970 <__udivmoddi4>
     8ec:	f8dd e004 	ldr.w	lr, [sp, #4]
     8f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     8f4:	b004      	add	sp, #16
     8f6:	4240      	negs	r0, r0
     8f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     8fc:	4252      	negs	r2, r2
     8fe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     902:	4770      	bx	lr
     904:	4252      	negs	r2, r2
     906:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     90a:	f000 f831 	bl	970 <__udivmoddi4>
     90e:	f8dd e004 	ldr.w	lr, [sp, #4]
     912:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     916:	b004      	add	sp, #16
     918:	4240      	negs	r0, r0
     91a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     91e:	4770      	bx	lr
     920:	4252      	negs	r2, r2
     922:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     926:	f000 f823 	bl	970 <__udivmoddi4>
     92a:	f8dd e004 	ldr.w	lr, [sp, #4]
     92e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     932:	b004      	add	sp, #16
     934:	4252      	negs	r2, r2
     936:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     93a:	4770      	bx	lr

0000093c <__aeabi_uldivmod>:
     93c:	b953      	cbnz	r3, 954 <__aeabi_uldivmod+0x18>
     93e:	b94a      	cbnz	r2, 954 <__aeabi_uldivmod+0x18>
     940:	2900      	cmp	r1, #0
     942:	bf08      	it	eq
     944:	2800      	cmpeq	r0, #0
     946:	bf1c      	itt	ne
     948:	f04f 31ff 	movne.w	r1, #4294967295
     94c:	f04f 30ff 	movne.w	r0, #4294967295
     950:	f000 b80c 	b.w	96c <__aeabi_idiv0>
     954:	f1ad 0c08 	sub.w	ip, sp, #8
     958:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     95c:	f000 f808 	bl	970 <__udivmoddi4>
     960:	f8dd e004 	ldr.w	lr, [sp, #4]
     964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     968:	b004      	add	sp, #16
     96a:	4770      	bx	lr

0000096c <__aeabi_idiv0>:
     96c:	4770      	bx	lr
     96e:	bf00      	nop

00000970 <__udivmoddi4>:
     970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     974:	4686      	mov	lr, r0
     976:	468c      	mov	ip, r1
     978:	4608      	mov	r0, r1
     97a:	9e08      	ldr	r6, [sp, #32]
     97c:	4615      	mov	r5, r2
     97e:	4674      	mov	r4, lr
     980:	4619      	mov	r1, r3
     982:	2b00      	cmp	r3, #0
     984:	f040 80c2 	bne.w	b0c <__udivmoddi4+0x19c>
     988:	4285      	cmp	r5, r0
     98a:	fab2 f282 	clz	r2, r2
     98e:	d945      	bls.n	a1c <__udivmoddi4+0xac>
     990:	b14a      	cbz	r2, 9a6 <__udivmoddi4+0x36>
     992:	f1c2 0320 	rsb	r3, r2, #32
     996:	fa00 fc02 	lsl.w	ip, r0, r2
     99a:	fa2e f303 	lsr.w	r3, lr, r3
     99e:	4095      	lsls	r5, r2
     9a0:	ea43 0c0c 	orr.w	ip, r3, ip
     9a4:	4094      	lsls	r4, r2
     9a6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     9aa:	b2a8      	uxth	r0, r5
     9ac:	fbbc f8fe 	udiv	r8, ip, lr
     9b0:	0c23      	lsrs	r3, r4, #16
     9b2:	fb0e cc18 	mls	ip, lr, r8, ip
     9b6:	fb08 f900 	mul.w	r9, r8, r0
     9ba:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     9be:	4599      	cmp	r9, r3
     9c0:	d928      	bls.n	a14 <__udivmoddi4+0xa4>
     9c2:	18eb      	adds	r3, r5, r3
     9c4:	f108 37ff 	add.w	r7, r8, #4294967295
     9c8:	d204      	bcs.n	9d4 <__udivmoddi4+0x64>
     9ca:	4599      	cmp	r9, r3
     9cc:	d902      	bls.n	9d4 <__udivmoddi4+0x64>
     9ce:	f1a8 0702 	sub.w	r7, r8, #2
     9d2:	442b      	add	r3, r5
     9d4:	eba3 0309 	sub.w	r3, r3, r9
     9d8:	b2a4      	uxth	r4, r4
     9da:	fbb3 fcfe 	udiv	ip, r3, lr
     9de:	fb0e 331c 	mls	r3, lr, ip, r3
     9e2:	fb0c f000 	mul.w	r0, ip, r0
     9e6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     9ea:	42a0      	cmp	r0, r4
     9ec:	d914      	bls.n	a18 <__udivmoddi4+0xa8>
     9ee:	192c      	adds	r4, r5, r4
     9f0:	f10c 33ff 	add.w	r3, ip, #4294967295
     9f4:	d204      	bcs.n	a00 <__udivmoddi4+0x90>
     9f6:	42a0      	cmp	r0, r4
     9f8:	d902      	bls.n	a00 <__udivmoddi4+0x90>
     9fa:	f1ac 0302 	sub.w	r3, ip, #2
     9fe:	442c      	add	r4, r5
     a00:	1a24      	subs	r4, r4, r0
     a02:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     a06:	b11e      	cbz	r6, a10 <__udivmoddi4+0xa0>
     a08:	40d4      	lsrs	r4, r2
     a0a:	2300      	movs	r3, #0
     a0c:	6034      	str	r4, [r6, #0]
     a0e:	6073      	str	r3, [r6, #4]
     a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     a14:	4647      	mov	r7, r8
     a16:	e7dd      	b.n	9d4 <__udivmoddi4+0x64>
     a18:	4663      	mov	r3, ip
     a1a:	e7f1      	b.n	a00 <__udivmoddi4+0x90>
     a1c:	bb92      	cbnz	r2, a84 <__udivmoddi4+0x114>
     a1e:	1b43      	subs	r3, r0, r5
     a20:	2101      	movs	r1, #1
     a22:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     a26:	b2af      	uxth	r7, r5
     a28:	fbb3 fcfe 	udiv	ip, r3, lr
     a2c:	0c20      	lsrs	r0, r4, #16
     a2e:	fb0e 331c 	mls	r3, lr, ip, r3
     a32:	fb0c f807 	mul.w	r8, ip, r7
     a36:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     a3a:	4598      	cmp	r8, r3
     a3c:	d962      	bls.n	b04 <__udivmoddi4+0x194>
     a3e:	18eb      	adds	r3, r5, r3
     a40:	f10c 30ff 	add.w	r0, ip, #4294967295
     a44:	d204      	bcs.n	a50 <__udivmoddi4+0xe0>
     a46:	4598      	cmp	r8, r3
     a48:	d902      	bls.n	a50 <__udivmoddi4+0xe0>
     a4a:	f1ac 0002 	sub.w	r0, ip, #2
     a4e:	442b      	add	r3, r5
     a50:	eba3 0308 	sub.w	r3, r3, r8
     a54:	b2a4      	uxth	r4, r4
     a56:	fbb3 fcfe 	udiv	ip, r3, lr
     a5a:	fb0e 331c 	mls	r3, lr, ip, r3
     a5e:	fb0c f707 	mul.w	r7, ip, r7
     a62:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     a66:	42a7      	cmp	r7, r4
     a68:	d94e      	bls.n	b08 <__udivmoddi4+0x198>
     a6a:	192c      	adds	r4, r5, r4
     a6c:	f10c 33ff 	add.w	r3, ip, #4294967295
     a70:	d204      	bcs.n	a7c <__udivmoddi4+0x10c>
     a72:	42a7      	cmp	r7, r4
     a74:	d902      	bls.n	a7c <__udivmoddi4+0x10c>
     a76:	f1ac 0302 	sub.w	r3, ip, #2
     a7a:	442c      	add	r4, r5
     a7c:	1be4      	subs	r4, r4, r7
     a7e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     a82:	e7c0      	b.n	a06 <__udivmoddi4+0x96>
     a84:	f1c2 0320 	rsb	r3, r2, #32
     a88:	fa20 f103 	lsr.w	r1, r0, r3
     a8c:	4095      	lsls	r5, r2
     a8e:	4090      	lsls	r0, r2
     a90:	fa2e f303 	lsr.w	r3, lr, r3
     a94:	4303      	orrs	r3, r0
     a96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     a9a:	b2af      	uxth	r7, r5
     a9c:	fbb1 fcfe 	udiv	ip, r1, lr
     aa0:	fb0e 101c 	mls	r0, lr, ip, r1
     aa4:	0c19      	lsrs	r1, r3, #16
     aa6:	fb0c f807 	mul.w	r8, ip, r7
     aaa:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     aae:	4588      	cmp	r8, r1
     ab0:	fa04 f402 	lsl.w	r4, r4, r2
     ab4:	d922      	bls.n	afc <__udivmoddi4+0x18c>
     ab6:	1869      	adds	r1, r5, r1
     ab8:	f10c 30ff 	add.w	r0, ip, #4294967295
     abc:	d204      	bcs.n	ac8 <__udivmoddi4+0x158>
     abe:	4588      	cmp	r8, r1
     ac0:	d902      	bls.n	ac8 <__udivmoddi4+0x158>
     ac2:	f1ac 0002 	sub.w	r0, ip, #2
     ac6:	4429      	add	r1, r5
     ac8:	eba1 0108 	sub.w	r1, r1, r8
     acc:	b29b      	uxth	r3, r3
     ace:	fbb1 fcfe 	udiv	ip, r1, lr
     ad2:	fb0e 111c 	mls	r1, lr, ip, r1
     ad6:	fb0c f707 	mul.w	r7, ip, r7
     ada:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     ade:	429f      	cmp	r7, r3
     ae0:	d90e      	bls.n	b00 <__udivmoddi4+0x190>
     ae2:	18eb      	adds	r3, r5, r3
     ae4:	f10c 31ff 	add.w	r1, ip, #4294967295
     ae8:	d204      	bcs.n	af4 <__udivmoddi4+0x184>
     aea:	429f      	cmp	r7, r3
     aec:	d902      	bls.n	af4 <__udivmoddi4+0x184>
     aee:	f1ac 0102 	sub.w	r1, ip, #2
     af2:	442b      	add	r3, r5
     af4:	1bdb      	subs	r3, r3, r7
     af6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     afa:	e792      	b.n	a22 <__udivmoddi4+0xb2>
     afc:	4660      	mov	r0, ip
     afe:	e7e3      	b.n	ac8 <__udivmoddi4+0x158>
     b00:	4661      	mov	r1, ip
     b02:	e7f7      	b.n	af4 <__udivmoddi4+0x184>
     b04:	4660      	mov	r0, ip
     b06:	e7a3      	b.n	a50 <__udivmoddi4+0xe0>
     b08:	4663      	mov	r3, ip
     b0a:	e7b7      	b.n	a7c <__udivmoddi4+0x10c>
     b0c:	4283      	cmp	r3, r0
     b0e:	d906      	bls.n	b1e <__udivmoddi4+0x1ae>
     b10:	b916      	cbnz	r6, b18 <__udivmoddi4+0x1a8>
     b12:	2100      	movs	r1, #0
     b14:	4608      	mov	r0, r1
     b16:	e77b      	b.n	a10 <__udivmoddi4+0xa0>
     b18:	e9c6 e000 	strd	lr, r0, [r6]
     b1c:	e7f9      	b.n	b12 <__udivmoddi4+0x1a2>
     b1e:	fab3 f783 	clz	r7, r3
     b22:	b98f      	cbnz	r7, b48 <__udivmoddi4+0x1d8>
     b24:	4283      	cmp	r3, r0
     b26:	d301      	bcc.n	b2c <__udivmoddi4+0x1bc>
     b28:	4572      	cmp	r2, lr
     b2a:	d808      	bhi.n	b3e <__udivmoddi4+0x1ce>
     b2c:	ebbe 0402 	subs.w	r4, lr, r2
     b30:	eb60 0303 	sbc.w	r3, r0, r3
     b34:	2001      	movs	r0, #1
     b36:	469c      	mov	ip, r3
     b38:	b91e      	cbnz	r6, b42 <__udivmoddi4+0x1d2>
     b3a:	2100      	movs	r1, #0
     b3c:	e768      	b.n	a10 <__udivmoddi4+0xa0>
     b3e:	4638      	mov	r0, r7
     b40:	e7fa      	b.n	b38 <__udivmoddi4+0x1c8>
     b42:	e9c6 4c00 	strd	r4, ip, [r6]
     b46:	e7f8      	b.n	b3a <__udivmoddi4+0x1ca>
     b48:	f1c7 0c20 	rsb	ip, r7, #32
     b4c:	40bb      	lsls	r3, r7
     b4e:	fa22 f40c 	lsr.w	r4, r2, ip
     b52:	431c      	orrs	r4, r3
     b54:	fa2e f10c 	lsr.w	r1, lr, ip
     b58:	fa20 f30c 	lsr.w	r3, r0, ip
     b5c:	40b8      	lsls	r0, r7
     b5e:	4301      	orrs	r1, r0
     b60:	ea4f 4914 	mov.w	r9, r4, lsr #16
     b64:	fa0e f507 	lsl.w	r5, lr, r7
     b68:	fbb3 f8f9 	udiv	r8, r3, r9
     b6c:	fa1f fe84 	uxth.w	lr, r4
     b70:	fb09 3018 	mls	r0, r9, r8, r3
     b74:	0c0b      	lsrs	r3, r1, #16
     b76:	fb08 fa0e 	mul.w	sl, r8, lr
     b7a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     b7e:	459a      	cmp	sl, r3
     b80:	fa02 f207 	lsl.w	r2, r2, r7
     b84:	d940      	bls.n	c08 <__udivmoddi4+0x298>
     b86:	18e3      	adds	r3, r4, r3
     b88:	f108 30ff 	add.w	r0, r8, #4294967295
     b8c:	d204      	bcs.n	b98 <__udivmoddi4+0x228>
     b8e:	459a      	cmp	sl, r3
     b90:	d902      	bls.n	b98 <__udivmoddi4+0x228>
     b92:	f1a8 0002 	sub.w	r0, r8, #2
     b96:	4423      	add	r3, r4
     b98:	eba3 030a 	sub.w	r3, r3, sl
     b9c:	b289      	uxth	r1, r1
     b9e:	fbb3 f8f9 	udiv	r8, r3, r9
     ba2:	fb09 3318 	mls	r3, r9, r8, r3
     ba6:	fb08 fe0e 	mul.w	lr, r8, lr
     baa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     bae:	458e      	cmp	lr, r1
     bb0:	d92c      	bls.n	c0c <__udivmoddi4+0x29c>
     bb2:	1861      	adds	r1, r4, r1
     bb4:	f108 33ff 	add.w	r3, r8, #4294967295
     bb8:	d204      	bcs.n	bc4 <__udivmoddi4+0x254>
     bba:	458e      	cmp	lr, r1
     bbc:	d902      	bls.n	bc4 <__udivmoddi4+0x254>
     bbe:	f1a8 0302 	sub.w	r3, r8, #2
     bc2:	4421      	add	r1, r4
     bc4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     bc8:	fba0 9802 	umull	r9, r8, r0, r2
     bcc:	eba1 010e 	sub.w	r1, r1, lr
     bd0:	4541      	cmp	r1, r8
     bd2:	46ce      	mov	lr, r9
     bd4:	4643      	mov	r3, r8
     bd6:	d302      	bcc.n	bde <__udivmoddi4+0x26e>
     bd8:	d106      	bne.n	be8 <__udivmoddi4+0x278>
     bda:	454d      	cmp	r5, r9
     bdc:	d204      	bcs.n	be8 <__udivmoddi4+0x278>
     bde:	ebb9 0e02 	subs.w	lr, r9, r2
     be2:	eb68 0304 	sbc.w	r3, r8, r4
     be6:	3801      	subs	r0, #1
     be8:	2e00      	cmp	r6, #0
     bea:	d0a6      	beq.n	b3a <__udivmoddi4+0x1ca>
     bec:	ebb5 020e 	subs.w	r2, r5, lr
     bf0:	eb61 0103 	sbc.w	r1, r1, r3
     bf4:	fa01 fc0c 	lsl.w	ip, r1, ip
     bf8:	fa22 f307 	lsr.w	r3, r2, r7
     bfc:	ea4c 0303 	orr.w	r3, ip, r3
     c00:	40f9      	lsrs	r1, r7
     c02:	e9c6 3100 	strd	r3, r1, [r6]
     c06:	e798      	b.n	b3a <__udivmoddi4+0x1ca>
     c08:	4640      	mov	r0, r8
     c0a:	e7c5      	b.n	b98 <__udivmoddi4+0x228>
     c0c:	4643      	mov	r3, r8
     c0e:	e7d9      	b.n	bc4 <__udivmoddi4+0x254>

00000c10 <main>:

const struct device *const lis3mdl = DEVICE_DT_GET_ONE(st_lis3mdl_magn);
const struct device *const bme680 = DEVICE_DT_GET_ONE(bosch_bme680);

int main(void)
{
     c10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     c14:	b095      	sub	sp, #84	; 0x54
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     c16:	485e      	ldr	r0, [pc, #376]	; (d90 <main+0x180>)
     c18:	f00a ffa7 	bl	bb6a <z_device_is_ready>
	int ret;

	if (!gpio_is_ready_dt(&red_led)) {
     c1c:	b918      	cbnz	r0, c26 <main+0x16>
		 sensor_value_to_double(&magn_xyz[2]));

		k_msleep(SLEEP_TIME_MS);
	}
	return 0;
}
     c1e:	2000      	movs	r0, #0
     c20:	b015      	add	sp, #84	; 0x54
     c22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ret = gpio_pin_configure_dt(&red_led, GPIO_OUTPUT_ACTIVE);
     c26:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     c2a:	485a      	ldr	r0, [pc, #360]	; (d94 <main+0x184>)
     c2c:	f008 f97e 	bl	8f2c <gpio_pin_configure_dt>
	if (ret < 0) {
     c30:	2800      	cmp	r0, #0
     c32:	dbf4      	blt.n	c1e <main+0xe>
     c34:	4858      	ldr	r0, [pc, #352]	; (d98 <main+0x188>)
     c36:	f00a ff98 	bl	bb6a <z_device_is_ready>
	if (!device_is_ready(bme680)) {
     c3a:	b170      	cbz	r0, c5a <main+0x4a>
	printf("Device %p name is %s\n", bme680, bme680->name);
     c3c:	4956      	ldr	r1, [pc, #344]	; (d98 <main+0x188>)
     c3e:	680a      	ldr	r2, [r1, #0]
     c40:	4856      	ldr	r0, [pc, #344]	; (d9c <main+0x18c>)
     c42:	f003 fefd 	bl	4a40 <printf>
     c46:	4856      	ldr	r0, [pc, #344]	; (da0 <main+0x190>)
     c48:	f00a ff8f 	bl	bb6a <z_device_is_ready>
	if (!device_is_ready(lis3mdl)) {
     c4c:	b148      	cbz	r0, c62 <main+0x52>
	printf("Device %p name is %s\n", lis3mdl, lis3mdl->name);
     c4e:	4954      	ldr	r1, [pc, #336]	; (da0 <main+0x190>)
     c50:	680a      	ldr	r2, [r1, #0]
     c52:	4852      	ldr	r0, [pc, #328]	; (d9c <main+0x18c>)
     c54:	f003 fef4 	bl	4a40 <printf>
     c58:	e059      	b.n	d0e <main+0xfe>
		printk("sensor: device not ready.\n");
     c5a:	4852      	ldr	r0, [pc, #328]	; (da4 <main+0x194>)
     c5c:	f008 fa46 	bl	90ec <printk>
		return 0;
     c60:	e7dd      	b.n	c1e <main+0xe>
		printk("%s: device not ready.\n", lis3mdl->name);
     c62:	4b4f      	ldr	r3, [pc, #316]	; (da0 <main+0x190>)
     c64:	6819      	ldr	r1, [r3, #0]
     c66:	4850      	ldr	r0, [pc, #320]	; (da8 <main+0x198>)
     c68:	f008 fa40 	bl	90ec <printk>
		return 0;
     c6c:	e7d7      	b.n	c1e <main+0xe>

static inline int z_impl_sensor_channel_get(const struct device *dev,
					    enum sensor_channel chan,
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
     c6e:	484c      	ldr	r0, [pc, #304]	; (da0 <main+0x190>)
     c70:	6883      	ldr	r3, [r0, #8]
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
     c72:	691b      	ldr	r3, [r3, #16]
     c74:	aa06      	add	r2, sp, #24
     c76:	210b      	movs	r1, #11
     c78:	4798      	blx	r3
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(const struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
     c7a:	9806      	ldr	r0, [sp, #24]
     c7c:	f7ff fb92 	bl	3a4 <__aeabi_i2d>
     c80:	4604      	mov	r4, r0
     c82:	460d      	mov	r5, r1
     c84:	9807      	ldr	r0, [sp, #28]
     c86:	f7ff fb8d 	bl	3a4 <__aeabi_i2d>
     c8a:	a33f      	add	r3, pc, #252	; (adr r3, d88 <main+0x178>)
     c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
     c90:	f7ff fd1c 	bl	6cc <__aeabi_ddiv>
     c94:	4602      	mov	r2, r0
     c96:	460b      	mov	r3, r1
     c98:	4620      	mov	r0, r4
     c9a:	4629      	mov	r1, r5
     c9c:	f7ff fa36 	bl	10c <__adddf3>
     ca0:	4604      	mov	r4, r0
     ca2:	460d      	mov	r5, r1
     ca4:	9808      	ldr	r0, [sp, #32]
     ca6:	f7ff fb7d 	bl	3a4 <__aeabi_i2d>
     caa:	4606      	mov	r6, r0
     cac:	460f      	mov	r7, r1
     cae:	9809      	ldr	r0, [sp, #36]	; 0x24
     cb0:	f7ff fb78 	bl	3a4 <__aeabi_i2d>
     cb4:	a334      	add	r3, pc, #208	; (adr r3, d88 <main+0x178>)
     cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
     cba:	f7ff fd07 	bl	6cc <__aeabi_ddiv>
     cbe:	4602      	mov	r2, r0
     cc0:	460b      	mov	r3, r1
     cc2:	4630      	mov	r0, r6
     cc4:	4639      	mov	r1, r7
     cc6:	f7ff fa21 	bl	10c <__adddf3>
     cca:	4606      	mov	r6, r0
     ccc:	460f      	mov	r7, r1
     cce:	980a      	ldr	r0, [sp, #40]	; 0x28
     cd0:	f7ff fb68 	bl	3a4 <__aeabi_i2d>
     cd4:	4680      	mov	r8, r0
     cd6:	4689      	mov	r9, r1
     cd8:	980b      	ldr	r0, [sp, #44]	; 0x2c
     cda:	f7ff fb63 	bl	3a4 <__aeabi_i2d>
     cde:	a32a      	add	r3, pc, #168	; (adr r3, d88 <main+0x178>)
     ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
     ce4:	f7ff fcf2 	bl	6cc <__aeabi_ddiv>
     ce8:	4602      	mov	r2, r0
     cea:	460b      	mov	r3, r1
     cec:	4640      	mov	r0, r8
     cee:	4649      	mov	r1, r9
     cf0:	f7ff fa0c 	bl	10c <__adddf3>
		printf(
     cf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
     cf8:	e9cd 6700 	strd	r6, r7, [sp]
     cfc:	4622      	mov	r2, r4
     cfe:	462b      	mov	r3, r5
     d00:	482a      	ldr	r0, [pc, #168]	; (dac <main+0x19c>)
     d02:	f003 fe9d 	bl	4a40 <printf>
		k_msleep(SLEEP_TIME_MS);
     d06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     d0a:	f008 f92a 	bl	8f62 <k_msleep>
		ret = gpio_pin_toggle_dt(&red_led);
     d0e:	4821      	ldr	r0, [pc, #132]	; (d94 <main+0x184>)
     d10:	f008 f917 	bl	8f42 <gpio_pin_toggle_dt>
		if (ret < 0) {
     d14:	2800      	cmp	r0, #0
     d16:	db82      	blt.n	c1e <main+0xe>
		sensor_sample_fetch(bme680);
     d18:	4c1f      	ldr	r4, [pc, #124]	; (d98 <main+0x188>)
     d1a:	4620      	mov	r0, r4
     d1c:	f008 f91b 	bl	8f56 <sensor_sample_fetch>
	const struct sensor_driver_api *api =
     d20:	68a5      	ldr	r5, [r4, #8]
	return api->channel_get(dev, chan, val);
     d22:	692b      	ldr	r3, [r5, #16]
     d24:	aa12      	add	r2, sp, #72	; 0x48
     d26:	210d      	movs	r1, #13
     d28:	4620      	mov	r0, r4
     d2a:	4798      	blx	r3
     d2c:	692b      	ldr	r3, [r5, #16]
     d2e:	aa10      	add	r2, sp, #64	; 0x40
     d30:	210e      	movs	r1, #14
     d32:	4620      	mov	r0, r4
     d34:	4798      	blx	r3
     d36:	692b      	ldr	r3, [r5, #16]
     d38:	aa0e      	add	r2, sp, #56	; 0x38
     d3a:	2110      	movs	r1, #16
     d3c:	4620      	mov	r0, r4
     d3e:	4798      	blx	r3
     d40:	692b      	ldr	r3, [r5, #16]
     d42:	aa0c      	add	r2, sp, #48	; 0x30
     d44:	211d      	movs	r1, #29
     d46:	4620      	mov	r0, r4
     d48:	4798      	blx	r3
		printf("T: %d.%06d; P: %d.%06d; H: %d.%06d; G: %d.%06d\n",
     d4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     d4c:	9304      	str	r3, [sp, #16]
     d4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     d50:	9303      	str	r3, [sp, #12]
     d52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
     d54:	9302      	str	r3, [sp, #8]
     d56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     d58:	9301      	str	r3, [sp, #4]
     d5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
     d5c:	9300      	str	r3, [sp, #0]
     d5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
     d60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     d62:	9912      	ldr	r1, [sp, #72]	; 0x48
     d64:	4812      	ldr	r0, [pc, #72]	; (db0 <main+0x1a0>)
     d66:	f003 fe6b 	bl	4a40 <printf>
	const struct sensor_driver_api *api =
     d6a:	480d      	ldr	r0, [pc, #52]	; (da0 <main+0x190>)
     d6c:	6883      	ldr	r3, [r0, #8]
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
     d6e:	68db      	ldr	r3, [r3, #12]
     d70:	2139      	movs	r1, #57	; 0x39
     d72:	4798      	blx	r3
		if (sensor_sample_fetch(lis3mdl) < 0) {
     d74:	2800      	cmp	r0, #0
     d76:	f6bf af7a 	bge.w	c6e <main+0x5e>
			printf("LIS3MDL Sensor sample update error\n");
     d7a:	480e      	ldr	r0, [pc, #56]	; (db4 <main+0x1a4>)
     d7c:	f003 fe60 	bl	4a40 <printf>
			return 0;
     d80:	e74d      	b.n	c1e <main+0xe>
     d82:	bf00      	nop
     d84:	f3af 8000 	nop.w
     d88:	00000000 	.word	0x00000000
     d8c:	412e8480 	.word	0x412e8480
     d90:	0000c248 	.word	0x0000c248
     d94:	0000c684 	.word	0x0000c684
     d98:	0000c290 	.word	0x0000c290
     d9c:	0000c5c4 	.word	0x0000c5c4
     da0:	0000c2a8 	.word	0x0000c2a8
     da4:	0000c5a8 	.word	0x0000c5a8
     da8:	0000c5dc 	.word	0x0000c5dc
     dac:	0000c648 	.word	0x0000c648
     db0:	0000c5f4 	.word	0x0000c5f4
     db4:	0000c624 	.word	0x0000c624

00000db8 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     dbc:	b091      	sub	sp, #68	; 0x44
     dbe:	9205      	str	r2, [sp, #20]
     dc0:	9302      	str	r3, [sp, #8]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     dc2:	4613      	mov	r3, r2
     dc4:	f002 0204 	and.w	r2, r2, #4
     dc8:	9200      	str	r2, [sp, #0]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     dca:	f3c3 02c2 	ubfx	r2, r3, #3, #3
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     dce:	f010 0303 	ands.w	r3, r0, #3
     dd2:	9301      	str	r3, [sp, #4]
     dd4:	f040 8223 	bne.w	121e <CONFIG_FPROTECT_BLOCK_SIZE+0x21e>
     dd8:	4607      	mov	r7, r0
     dda:	468a      	mov	sl, r1
     ddc:	3201      	adds	r2, #1
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
     dde:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     de0:	2800      	cmp	r0, #0
     de2:	d047      	beq.n	e74 <cbvprintf_package+0xbc>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     de4:	b127      	cbz	r7, df0 <cbvprintf_package+0x38>
     de6:	1be3      	subs	r3, r4, r7
     de8:	3304      	adds	r3, #4
     dea:	4553      	cmp	r3, sl
     dec:	f200 821a 	bhi.w	1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
     df0:	9b02      	ldr	r3, [sp, #8]
     df2:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     df4:	9b01      	ldr	r3, [sp, #4]
     df6:	9304      	str	r3, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     df8:	9306      	str	r3, [sp, #24]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
     dfa:	9303      	str	r3, [sp, #12]
	bool parsing = false;
     dfc:	2600      	movs	r6, #0
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
     dfe:	f04f 3bff 	mov.w	fp, #4294967295
	align = VA_STACK_ALIGN(char *);
     e02:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
     e06:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
     e08:	b10f      	cbz	r7, e0e <cbvprintf_package+0x56>
				*(const char **)buf = s;
     e0a:	9b02      	ldr	r3, [sp, #8]
     e0c:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     e0e:	1e53      	subs	r3, r2, #1
     e10:	9307      	str	r3, [sp, #28]
     e12:	2a00      	cmp	r2, #0
     e14:	f340 815f 	ble.w	10d6 <CONFIG_FPROTECT_BLOCK_SIZE+0xd6>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
     e18:	9b05      	ldr	r3, [sp, #20]
     e1a:	f013 0202 	ands.w	r2, r3, #2
     e1e:	d026      	beq.n	e6e <cbvprintf_package+0xb6>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     e20:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     e22:	1be1      	subs	r1, r4, r7
     e24:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     e26:	b11a      	cbz	r2, e30 <cbvprintf_package+0x78>
     e28:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
     e2c:	f080 8200 	bcs.w	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     e30:	9903      	ldr	r1, [sp, #12]
     e32:	290f      	cmp	r1, #15
     e34:	f200 81ff 	bhi.w	1236 <CONFIG_FPROTECT_BLOCK_SIZE+0x236>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
     e38:	2f00      	cmp	r7, #0
     e3a:	f000 8164 	beq.w	1106 <CONFIG_FPROTECT_BLOCK_SIZE+0x106>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
     e3e:	b2db      	uxtb	r3, r3
     e40:	f101 0240 	add.w	r2, r1, #64	; 0x40
     e44:	446a      	add	r2, sp
     e46:	f802 3c10 	strb.w	r3, [r2, #-16]
					str_ptr_arg[s_idx] = arg_idx;
     e4a:	f802 bc20 	strb.w	fp, [r2, #-32]
					if (is_ro) {
     e4e:	2800      	cmp	r0, #0
     e50:	f000 8155 	beq.w	10fe <CONFIG_FPROTECT_BLOCK_SIZE+0xfe>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     e54:	f063 037f 	orn	r3, r3, #127	; 0x7f
     e58:	f101 0240 	add.w	r2, r1, #64	; 0x40
     e5c:	446a      	add	r2, sp
     e5e:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
     e62:	9b04      	ldr	r3, [sp, #16]
     e64:	3301      	adds	r3, #1
     e66:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
     e68:	9b03      	ldr	r3, [sp, #12]
     e6a:	3301      	adds	r3, #1
     e6c:	9303      	str	r3, [sp, #12]
			}
			buf += sizeof(char *);
     e6e:	3404      	adds	r4, #4

			is_str_arg = false;
     e70:	2200      	movs	r2, #0
     e72:	e03d      	b.n	ef0 <cbvprintf_package+0x138>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     e74:	f001 0a07 	and.w	sl, r1, #7
     e78:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     e7a:	f1ca 0a08 	rsb	sl, sl, #8
     e7e:	e7b1      	b.n	de4 <cbvprintf_package+0x2c>
				parsing = false;
     e80:	2600      	movs	r6, #0
     e82:	e034      	b.n	eee <cbvprintf_package+0x136>
     e84:	2600      	movs	r6, #0
     e86:	e032      	b.n	eee <cbvprintf_package+0x136>
     e88:	2600      	movs	r6, #0
     e8a:	e030      	b.n	eee <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(intmax_t);
     e8c:	f04f 0808 	mov.w	r8, #8
				size = sizeof(intmax_t);
     e90:	46c1      	mov	r9, r8
     e92:	e02c      	b.n	eee <cbvprintf_package+0x136>
				if (*fmt == '%') {
     e94:	2925      	cmp	r1, #37	; 0x25
     e96:	d12a      	bne.n	eee <cbvprintf_package+0x136>
					arg_idx++;
     e98:	f10b 0b01 	add.w	fp, fp, #1
					parsing = true;
     e9c:	2601      	movs	r6, #1
					align = VA_STACK_ALIGN(int);
     e9e:	f04f 0804 	mov.w	r8, #4
					size = sizeof(int);
     ea2:	46c1      	mov	r9, r8
				continue;
     ea4:	e023      	b.n	eee <cbvprintf_package+0x136>
			switch (*fmt) {
     ea6:	2947      	cmp	r1, #71	; 0x47
     ea8:	d8ec      	bhi.n	e84 <cbvprintf_package+0xcc>
     eaa:	292a      	cmp	r1, #42	; 0x2a
     eac:	d312      	bcc.n	ed4 <cbvprintf_package+0x11c>
     eae:	392a      	subs	r1, #42	; 0x2a
     eb0:	b2c9      	uxtb	r1, r1
     eb2:	2001      	movs	r0, #1
     eb4:	fa00 f101 	lsl.w	r1, r0, r1
     eb8:	f64f 70da 	movw	r0, #65498	; 0xffda
     ebc:	4201      	tst	r1, r0
     ebe:	d116      	bne.n	eee <cbvprintf_package+0x136>
     ec0:	f011 5f62 	tst.w	r1, #947912704	; 0x38800000
     ec4:	f040 80c4 	bne.w	1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>
     ec8:	f011 0f01 	tst.w	r1, #1
     ecc:	f040 808e 	bne.w	fec <cbvprintf_package+0x234>
				parsing = false;
     ed0:	2600      	movs	r6, #0
     ed2:	e00c      	b.n	eee <cbvprintf_package+0x136>
			switch (*fmt) {
     ed4:	2925      	cmp	r1, #37	; 0x25
     ed6:	d103      	bne.n	ee0 <cbvprintf_package+0x128>
				arg_idx--;
     ed8:	f10b 3bff 	add.w	fp, fp, #4294967295
				parsing = false;
     edc:	2600      	movs	r6, #0
				continue;
     ede:	e006      	b.n	eee <cbvprintf_package+0x136>
			switch (*fmt) {
     ee0:	d901      	bls.n	ee6 <cbvprintf_package+0x12e>
				parsing = false;
     ee2:	2600      	movs	r6, #0
     ee4:	e003      	b.n	eee <cbvprintf_package+0x136>
			switch (*fmt) {
     ee6:	2920      	cmp	r1, #32
     ee8:	d001      	beq.n	eee <cbvprintf_package+0x136>
     eea:	2923      	cmp	r1, #35	; 0x23
     eec:	d1cc      	bne.n	e88 <cbvprintf_package+0xd0>
				parsing = false;
     eee:	461d      	mov	r5, r3
			if (*++fmt == '\0') {
     ef0:	1c6b      	adds	r3, r5, #1
     ef2:	7869      	ldrb	r1, [r5, #1]
     ef4:	2900      	cmp	r1, #0
     ef6:	f000 811d 	beq.w	1134 <CONFIG_FPROTECT_BLOCK_SIZE+0x134>
			if (!parsing) {
     efa:	2e00      	cmp	r6, #0
     efc:	d0ca      	beq.n	e94 <cbvprintf_package+0xdc>
			switch (*fmt) {
     efe:	297a      	cmp	r1, #122	; 0x7a
     f00:	d8be      	bhi.n	e80 <cbvprintf_package+0xc8>
     f02:	294c      	cmp	r1, #76	; 0x4c
     f04:	d3cf      	bcc.n	ea6 <cbvprintf_package+0xee>
     f06:	394c      	subs	r1, #76	; 0x4c
     f08:	292e      	cmp	r1, #46	; 0x2e
     f0a:	d861      	bhi.n	fd0 <cbvprintf_package+0x218>
     f0c:	a001      	add	r0, pc, #4	; (adr r0, f14 <cbvprintf_package+0x15c>)
     f0e:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     f12:	bf00      	nop
     f14:	00000eef 	.word	0x00000eef
     f18:	00000fd1 	.word	0x00000fd1
     f1c:	00000fd1 	.word	0x00000fd1
     f20:	00000fd1 	.word	0x00000fd1
     f24:	00000fd1 	.word	0x00000fd1
     f28:	00000fd1 	.word	0x00000fd1
     f2c:	00000fd1 	.word	0x00000fd1
     f30:	00000fd1 	.word	0x00000fd1
     f34:	00000fd1 	.word	0x00000fd1
     f38:	00000fd1 	.word	0x00000fd1
     f3c:	00000fd1 	.word	0x00000fd1
     f40:	00000fd1 	.word	0x00000fd1
     f44:	00000fe5 	.word	0x00000fe5
     f48:	00000fd1 	.word	0x00000fd1
     f4c:	00000fd1 	.word	0x00000fd1
     f50:	00000fd1 	.word	0x00000fd1
     f54:	00000fd1 	.word	0x00000fd1
     f58:	00000fd1 	.word	0x00000fd1
     f5c:	00000fd1 	.word	0x00000fd1
     f60:	00000fd1 	.word	0x00000fd1
     f64:	00000fd1 	.word	0x00000fd1
     f68:	00001051 	.word	0x00001051
     f6c:	00000fd1 	.word	0x00000fd1
     f70:	00000fe5 	.word	0x00000fe5
     f74:	00000fe5 	.word	0x00000fe5
     f78:	00001051 	.word	0x00001051
     f7c:	00001051 	.word	0x00001051
     f80:	00001051 	.word	0x00001051
     f84:	00000eef 	.word	0x00000eef
     f88:	00000fe5 	.word	0x00000fe5
     f8c:	00000e8d 	.word	0x00000e8d
     f90:	00000fd1 	.word	0x00000fd1
     f94:	00000eef 	.word	0x00000eef
     f98:	00000fd1 	.word	0x00000fd1
     f9c:	000010af 	.word	0x000010af
     fa0:	00000fe5 	.word	0x00000fe5
     fa4:	000010af 	.word	0x000010af
     fa8:	00000fd1 	.word	0x00000fd1
     fac:	00000fd1 	.word	0x00000fd1
     fb0:	000010b9 	.word	0x000010b9
     fb4:	00000fdd 	.word	0x00000fdd
     fb8:	00000fe5 	.word	0x00000fe5
     fbc:	00000fd1 	.word	0x00000fd1
     fc0:	00000fd1 	.word	0x00000fd1
     fc4:	00000fe5 	.word	0x00000fe5
     fc8:	00000fd1 	.word	0x00000fd1
     fcc:	00000fd5 	.word	0x00000fd5
				parsing = false;
     fd0:	2600      	movs	r6, #0
     fd2:	e78c      	b.n	eee <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(size_t);
     fd4:	f04f 0804 	mov.w	r8, #4
				size = sizeof(size_t);
     fd8:	46c1      	mov	r9, r8
				continue;
     fda:	e788      	b.n	eee <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(ptrdiff_t);
     fdc:	f04f 0804 	mov.w	r8, #4
				size = sizeof(ptrdiff_t);
     fe0:	46c1      	mov	r9, r8
				continue;
     fe2:	e784      	b.n	eee <cbvprintf_package+0x136>
				if (fmt[-1] == 'l') {
     fe4:	7829      	ldrb	r1, [r5, #0]
     fe6:	296c      	cmp	r1, #108	; 0x6c
     fe8:	d024      	beq.n	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
				parsing = false;
     fea:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
     fec:	4444      	add	r4, r8
     fee:	3c01      	subs	r4, #1
     ff0:	f1c8 0100 	rsb	r1, r8, #0
     ff4:	400c      	ands	r4, r1
     ff6:	4620      	mov	r0, r4
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     ff8:	b127      	cbz	r7, 1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
     ffa:	1be1      	subs	r1, r4, r7
     ffc:	4449      	add	r1, r9
     ffe:	4551      	cmp	r1, sl
    1000:	f200 8113 	bhi.w	122a <CONFIG_FPROTECT_BLOCK_SIZE+0x22a>
		if (is_str_arg) {
    1004:	2a00      	cmp	r2, #0
    1006:	d15d      	bne.n	10c4 <CONFIG_FPROTECT_BLOCK_SIZE+0xc4>
		} else if (size == sizeof(int)) {
    1008:	f1b9 0f04 	cmp.w	r9, #4
    100c:	f000 808a 	beq.w	1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
    1010:	f1b9 0f08 	cmp.w	r9, #8
    1014:	f040 8112 	bne.w	123c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>
			long long v = va_arg(ap, long long);
    1018:	991a      	ldr	r1, [sp, #104]	; 0x68
    101a:	3107      	adds	r1, #7
    101c:	f021 0107 	bic.w	r1, r1, #7
    1020:	f101 0008 	add.w	r0, r1, #8
    1024:	901a      	str	r0, [sp, #104]	; 0x68
    1026:	e9d1 0100 	ldrd	r0, r1, [r1]

			if (buf0 != NULL) {
    102a:	b10f      	cbz	r7, 1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
    102c:	e9c4 0100 	strd	r0, r1, [r4]
				}
			}
			buf += sizeof(long long);
    1030:	3408      	adds	r4, #8
    1032:	e75c      	b.n	eee <cbvprintf_package+0x136>
					if (fmt[-2] == 'l') {
    1034:	f813 1c02 	ldrb.w	r1, [r3, #-2]
    1038:	296c      	cmp	r1, #108	; 0x6c
    103a:	d004      	beq.n	1046 <CONFIG_FPROTECT_BLOCK_SIZE+0x46>
				parsing = false;
    103c:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long);
    103e:	f04f 0804 	mov.w	r8, #4
						size = sizeof(long);
    1042:	46c1      	mov	r9, r8
    1044:	e7d2      	b.n	fec <cbvprintf_package+0x234>
				parsing = false;
    1046:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long long);
    1048:	f04f 0808 	mov.w	r8, #8
						size = sizeof(long long);
    104c:	46c1      	mov	r9, r8
    104e:	e7cd      	b.n	fec <cbvprintf_package+0x234>
				if (fmt[-1] == 'L') {
    1050:	7829      	ldrb	r1, [r5, #0]
    1052:	294c      	cmp	r1, #76	; 0x4c
    1054:	d01b      	beq.n	108e <CONFIG_FPROTECT_BLOCK_SIZE+0x8e>
					v.d = va_arg(ap, double);
    1056:	991a      	ldr	r1, [sp, #104]	; 0x68
    1058:	3107      	adds	r1, #7
    105a:	f021 0107 	bic.w	r1, r1, #7
    105e:	f101 0008 	add.w	r0, r1, #8
    1062:	901a      	str	r0, [sp, #104]	; 0x68
    1064:	e9d1 0100 	ldrd	r0, r1, [r1]
				buf = (void *) ROUND_UP(buf, align);
    1068:	3407      	adds	r4, #7
    106a:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
    106e:	b147      	cbz	r7, 1082 <CONFIG_FPROTECT_BLOCK_SIZE+0x82>
					if (BUF_OFFSET + size > len) {
    1070:	1be6      	subs	r6, r4, r7
    1072:	3608      	adds	r6, #8
    1074:	4556      	cmp	r6, sl
    1076:	d814      	bhi.n	10a2 <CONFIG_FPROTECT_BLOCK_SIZE+0xa2>
					} else if (fmt[-1] == 'L') {
    1078:	782d      	ldrb	r5, [r5, #0]
    107a:	2d4c      	cmp	r5, #76	; 0x4c
    107c:	d014      	beq.n	10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>
						*(double *)buf = v.d;
    107e:	e9c4 0100 	strd	r0, r1, [r4]
				buf += size;
    1082:	3408      	adds	r4, #8
				parsing = false;
    1084:	2600      	movs	r6, #0
				continue;
    1086:	f04f 0808 	mov.w	r8, #8
    108a:	46c1      	mov	r9, r8
    108c:	e72f      	b.n	eee <cbvprintf_package+0x136>
					v.ld = va_arg(ap, long double);
    108e:	991a      	ldr	r1, [sp, #104]	; 0x68
    1090:	3107      	adds	r1, #7
    1092:	f021 0107 	bic.w	r1, r1, #7
    1096:	f101 0008 	add.w	r0, r1, #8
    109a:	901a      	str	r0, [sp, #104]	; 0x68
    109c:	e9d1 0100 	ldrd	r0, r1, [r1]
					size = sizeof(long double);
    10a0:	e7e2      	b.n	1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
						return -ENOSPC;
    10a2:	f06f 001b 	mvn.w	r0, #27
    10a6:	e0b7      	b.n	1218 <CONFIG_FPROTECT_BLOCK_SIZE+0x218>
						*(long double *)buf = v.ld;
    10a8:	e9c4 0100 	strd	r0, r1, [r4]
    10ac:	e7e9      	b.n	1082 <CONFIG_FPROTECT_BLOCK_SIZE+0x82>
				parsing = false;
    10ae:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
    10b0:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
    10b4:	46c1      	mov	r9, r8
    10b6:	e799      	b.n	fec <cbvprintf_package+0x234>
				is_str_arg = true;
    10b8:	4632      	mov	r2, r6
				parsing = false;
    10ba:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
    10bc:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
    10c0:	46c1      	mov	r9, r8
    10c2:	e793      	b.n	fec <cbvprintf_package+0x234>
			s = va_arg(ap, char *);
    10c4:	4604      	mov	r4, r0
    10c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    10c8:	1d11      	adds	r1, r2, #4
    10ca:	911a      	str	r1, [sp, #104]	; 0x68
    10cc:	6812      	ldr	r2, [r2, #0]
    10ce:	9202      	str	r2, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    10d0:	9a07      	ldr	r2, [sp, #28]
			if (*++fmt == '\0') {
    10d2:	461d      	mov	r5, r3
    10d4:	e698      	b.n	e08 <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    10d6:	4b5f      	ldr	r3, [pc, #380]	; (1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>)
    10d8:	9a02      	ldr	r2, [sp, #8]
    10da:	429a      	cmp	r2, r3
    10dc:	d304      	bcc.n	10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
    10de:	4b5e      	ldr	r3, [pc, #376]	; (1258 <CONFIG_FPROTECT_BLOCK_SIZE+0x258>)
    10e0:	429a      	cmp	r2, r3
    10e2:	d30a      	bcc.n	10fa <CONFIG_FPROTECT_BLOCK_SIZE+0xfa>
    10e4:	2300      	movs	r3, #0
    10e6:	e000      	b.n	10ea <CONFIG_FPROTECT_BLOCK_SIZE+0xea>
    10e8:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    10ea:	2b00      	cmp	r3, #0
    10ec:	f47f ae94 	bne.w	e18 <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
    10f0:	9b05      	ldr	r3, [sp, #20]
    10f2:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    10f6:	2000      	movs	r0, #0
    10f8:	e693      	b.n	e22 <cbvprintf_package+0x6a>
    10fa:	2301      	movs	r3, #1
    10fc:	e7f5      	b.n	10ea <CONFIG_FPROTECT_BLOCK_SIZE+0xea>
						s_rw_cnt++;
    10fe:	9b06      	ldr	r3, [sp, #24]
    1100:	3301      	adds	r3, #1
    1102:	9306      	str	r3, [sp, #24]
    1104:	e6b0      	b.n	e68 <cbvprintf_package+0xb0>
				} else if (is_ro) {
    1106:	b110      	cbz	r0, 110e <CONFIG_FPROTECT_BLOCK_SIZE+0x10e>
					len += 1;
    1108:	f10a 0a01 	add.w	sl, sl, #1
    110c:	e6ac      	b.n	e68 <cbvprintf_package+0xb0>
				} else if (rws_pos_en) {
    110e:	9b00      	ldr	r3, [sp, #0]
    1110:	b113      	cbz	r3, 1118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>
					len += 2;
    1112:	f10a 0a02 	add.w	sl, sl, #2
    1116:	e6a7      	b.n	e68 <cbvprintf_package+0xb0>
					len += strlen(s) + 1 + 1;
    1118:	9802      	ldr	r0, [sp, #8]
    111a:	f009 f98e 	bl	a43a <strlen>
    111e:	1c83      	adds	r3, r0, #2
    1120:	449a      	add	sl, r3
    1122:	e6a1      	b.n	e68 <cbvprintf_package+0xb0>
			int v = va_arg(ap, int);
    1124:	991a      	ldr	r1, [sp, #104]	; 0x68
    1126:	1d08      	adds	r0, r1, #4
    1128:	901a      	str	r0, [sp, #104]	; 0x68
    112a:	6809      	ldr	r1, [r1, #0]
			if (buf0 != NULL) {
    112c:	b107      	cbz	r7, 1130 <CONFIG_FPROTECT_BLOCK_SIZE+0x130>
				*(int *)buf = v;
    112e:	6021      	str	r1, [r4, #0]
			buf += sizeof(int);
    1130:	3404      	adds	r4, #4
    1132:	e6dc      	b.n	eee <cbvprintf_package+0x136>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
    1134:	1be3      	subs	r3, r4, r7
    1136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    113a:	f080 8082 	bcs.w	1242 <CONFIG_FPROTECT_BLOCK_SIZE+0x242>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
    113e:	b197      	cbz	r7, 1166 <CONFIG_FPROTECT_BLOCK_SIZE+0x166>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
    1140:	2200      	movs	r2, #0
    1142:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    1144:	089b      	lsrs	r3, r3, #2
    1146:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
    1148:	9b00      	ldr	r3, [sp, #0]
    114a:	b183      	cbz	r3, 116e <CONFIG_FPROTECT_BLOCK_SIZE+0x16e>
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    114c:	9b06      	ldr	r3, [sp, #24]
    114e:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    1150:	9b04      	ldr	r3, [sp, #16]
    1152:	70bb      	strb	r3, [r7, #2]
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
    1154:	bb1b      	cbnz	r3, 119e <CONFIG_FPROTECT_BLOCK_SIZE+0x19e>
			/* retrieve the string pointer */
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
			/* clear the in-buffer pointer (less entropy if compressed) */
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
    1156:	9d01      	ldr	r5, [sp, #4]
    1158:	f8dd 900c 	ldr.w	r9, [sp, #12]
    115c:	f8dd b010 	ldr.w	fp, [sp, #16]
    1160:	f8dd 8008 	ldr.w	r8, [sp, #8]
    1164:	e03b      	b.n	11de <CONFIG_FPROTECT_BLOCK_SIZE+0x1de>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    1166:	4453      	add	r3, sl
    1168:	f1a3 0008 	sub.w	r0, r3, #8
    116c:	e054      	b.n	1218 <CONFIG_FPROTECT_BLOCK_SIZE+0x218>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    116e:	9b06      	ldr	r3, [sp, #24]
    1170:	707b      	strb	r3, [r7, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    1172:	e7ed      	b.n	1150 <CONFIG_FPROTECT_BLOCK_SIZE+0x150>
		for (i = 0; i < s_idx; i++) {
    1174:	3301      	adds	r3, #1
    1176:	4298      	cmp	r0, r3
    1178:	d9ed      	bls.n	1156 <CONFIG_FPROTECT_BLOCK_SIZE+0x156>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    117a:	f103 0240 	add.w	r2, r3, #64	; 0x40
    117e:	446a      	add	r2, sp
    1180:	f812 1c10 	ldrb.w	r1, [r2, #-16]
    1184:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
    1188:	2a00      	cmp	r2, #0
    118a:	daf3      	bge.n	1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    118c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    1190:	1be2      	subs	r2, r4, r7
    1192:	3201      	adds	r2, #1
    1194:	4552      	cmp	r2, sl
    1196:	d857      	bhi.n	1248 <CONFIG_FPROTECT_BLOCK_SIZE+0x248>
			*buf++ = pos;
    1198:	f804 1b01 	strb.w	r1, [r4], #1
    119c:	e7ea      	b.n	1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>
		for (i = 0; i < s_idx; i++) {
    119e:	9b01      	ldr	r3, [sp, #4]
    11a0:	9803      	ldr	r0, [sp, #12]
    11a2:	e7e8      	b.n	1176 <CONFIG_FPROTECT_BLOCK_SIZE+0x176>
		if (rws_pos_en) {
    11a4:	9b00      	ldr	r3, [sp, #0]
    11a6:	b33b      	cbz	r3, 11f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f8>
			*buf++ = str_ptr_arg[i];
    11a8:	f105 0340 	add.w	r3, r5, #64	; 0x40
    11ac:	446b      	add	r3, sp
    11ae:	f813 3c20 	ldrb.w	r3, [r3, #-32]
    11b2:	f804 3b01 	strb.w	r3, [r4], #1
			size = 0;
    11b6:	9e01      	ldr	r6, [sp, #4]
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
    11b8:	1be3      	subs	r3, r4, r7
    11ba:	4433      	add	r3, r6
    11bc:	3301      	adds	r3, #1
    11be:	4553      	cmp	r3, sl
    11c0:	d845      	bhi.n	124e <CONFIG_FPROTECT_BLOCK_SIZE+0x24e>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
    11c2:	f105 0340 	add.w	r3, r5, #64	; 0x40
    11c6:	446b      	add	r3, sp
    11c8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    11cc:	f804 3b01 	strb.w	r3, [r4], #1
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
    11d0:	4632      	mov	r2, r6
    11d2:	4641      	mov	r1, r8
    11d4:	4620      	mov	r0, r4
    11d6:	f009 f94e 	bl	a476 <memcpy>
		buf += size;
    11da:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
    11dc:	3501      	adds	r5, #1
    11de:	45a9      	cmp	r9, r5
    11e0:	d919      	bls.n	1216 <CONFIG_FPROTECT_BLOCK_SIZE+0x216>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    11e2:	f1bb 0f00 	cmp.w	fp, #0
    11e6:	d0dd      	beq.n	11a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a4>
    11e8:	f105 0340 	add.w	r3, r5, #64	; 0x40
    11ec:	446b      	add	r3, sp
    11ee:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
    11f2:	2b00      	cmp	r3, #0
    11f4:	dad6      	bge.n	11a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a4>
    11f6:	e7f1      	b.n	11dc <CONFIG_FPROTECT_BLOCK_SIZE+0x1dc>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    11f8:	f105 0340 	add.w	r3, r5, #64	; 0x40
    11fc:	446b      	add	r3, sp
    11fe:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    1202:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    1206:	2200      	movs	r2, #0
    1208:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
    120c:	4640      	mov	r0, r8
    120e:	f009 f914 	bl	a43a <strlen>
    1212:	1c46      	adds	r6, r0, #1
    1214:	e7d0      	b.n	11b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b8>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
    1216:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    1218:	b011      	add	sp, #68	; 0x44
    121a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
    121e:	f06f 000d 	mvn.w	r0, #13
    1222:	e7f9      	b.n	1218 <CONFIG_FPROTECT_BLOCK_SIZE+0x218>
		return -ENOSPC;
    1224:	f06f 001b 	mvn.w	r0, #27
    1228:	e7f6      	b.n	1218 <CONFIG_FPROTECT_BLOCK_SIZE+0x218>
			return -ENOSPC;
    122a:	f06f 001b 	mvn.w	r0, #27
    122e:	e7f3      	b.n	1218 <CONFIG_FPROTECT_BLOCK_SIZE+0x218>
					return -EINVAL;
    1230:	f06f 0015 	mvn.w	r0, #21
    1234:	e7f0      	b.n	1218 <CONFIG_FPROTECT_BLOCK_SIZE+0x218>
					return -EINVAL;
    1236:	f06f 0015 	mvn.w	r0, #21
    123a:	e7ed      	b.n	1218 <CONFIG_FPROTECT_BLOCK_SIZE+0x218>
			return -EINVAL;
    123c:	f06f 0015 	mvn.w	r0, #21
    1240:	e7ea      	b.n	1218 <CONFIG_FPROTECT_BLOCK_SIZE+0x218>
		return -EINVAL;
    1242:	f06f 0015 	mvn.w	r0, #21
    1246:	e7e7      	b.n	1218 <CONFIG_FPROTECT_BLOCK_SIZE+0x218>
				return -ENOSPC;
    1248:	f06f 001b 	mvn.w	r0, #27
    124c:	e7e4      	b.n	1218 <CONFIG_FPROTECT_BLOCK_SIZE+0x218>
			return -ENOSPC;
    124e:	f06f 001b 	mvn.w	r0, #27
    1252:	e7e1      	b.n	1218 <CONFIG_FPROTECT_BLOCK_SIZE+0x218>
    1254:	0000c1a8 	.word	0x0000c1a8
    1258:	0000d3f0 	.word	0x0000d3f0

0000125c <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    125c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1260:	b097      	sub	sp, #92	; 0x5c
    1262:	af00      	add	r7, sp, #0
    1264:	4683      	mov	fp, r0
    1266:	61ba      	str	r2, [r7, #24]
    1268:	613b      	str	r3, [r7, #16]
	__ASSERT_NO_MSG(in_packaged != NULL);

	uint8_t *buf = in_packaged;
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
    126a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    126e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    1272:	623b      	str	r3, [r7, #32]
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    1274:	60f9      	str	r1, [r7, #12]
    1276:	b151      	cbz	r1, 128e <cbprintf_package_convert+0x32>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
    1278:	f89b 6002 	ldrb.w	r6, [fp, #2]
    127c:	46b1      	mov	r9, r6
	ro_cpy = ros_nbr &&
    127e:	b156      	cbz	r6, 1296 <cbprintf_package_convert+0x3a>
    1280:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1284:	f013 0f01 	tst.w	r3, #1
    1288:	d111      	bne.n	12ae <cbprintf_package_convert+0x52>
    128a:	2300      	movs	r3, #0
    128c:	e004      	b.n	1298 <cbprintf_package_convert+0x3c>
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    128e:	f007 fe8c 	bl	8faa <get_package_len>
    1292:	60f8      	str	r0, [r7, #12]
    1294:	e7f0      	b.n	1278 <cbprintf_package_convert+0x1c>
	ro_cpy = ros_nbr &&
    1296:	2300      	movs	r3, #0
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
    1298:	f89b 2003 	ldrb.w	r2, [fp, #3]
    129c:	627a      	str	r2, [r7, #36]	; 0x24
	rw_cpy = rws_nbr > 0 &&
    129e:	b142      	cbz	r2, 12b2 <cbprintf_package_convert+0x56>
    12a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    12a4:	f012 0f02 	tst.w	r2, #2
    12a8:	d122      	bne.n	12f0 <cbprintf_package_convert+0x94>
    12aa:	2200      	movs	r2, #0
    12ac:	e002      	b.n	12b4 <cbprintf_package_convert+0x58>
	ro_cpy = ros_nbr &&
    12ae:	2301      	movs	r3, #1
    12b0:	e7f2      	b.n	1298 <cbprintf_package_convert+0x3c>
	rw_cpy = rws_nbr > 0 &&
    12b2:	2200      	movs	r2, #0

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
    12b4:	b902      	cbnz	r2, 12b8 <cbprintf_package_convert+0x5c>
    12b6:	b1eb      	cbz	r3, 12f4 <cbprintf_package_convert+0x98>

	/* If we got here, it means that coping will be more complex and will be
	 * done with strings appending.
	 * Retrieve the size of the arg list.
	 */
	args_size = in_desc->len * sizeof(int);
    12b8:	f89b 5000 	ldrb.w	r5, [fp]
    12bc:	00aa      	lsls	r2, r5, #2
    12be:	60ba      	str	r2, [r7, #8]
	int out_len;

	/* Pointer to array with string locations. Array starts with read-only
	 * string locations.
	 */
	const char *fmt = *(const char **)(buf + sizeof(void *));
    12c0:	f8db 2004 	ldr.w	r2, [fp, #4]
    12c4:	617a      	str	r2, [r7, #20]
	uint8_t *str_pos = &buf[args_size];
    12c6:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
	size_t strl_cnt = 0;

	/* If null destination, just calculate output length. */
	if (cb == NULL) {
    12ca:	69ba      	ldr	r2, [r7, #24]
    12cc:	b1f2      	cbz	r2, 130c <cbprintf_package_convert+0xb0>

	/* If read-only strings shall be appended to the output package copy
	 * their indexes to the local array, otherwise indicate that indexes
	 * shall remain in the output package.
	 */
	if (ro_cpy) {
    12ce:	2b00      	cmp	r3, #0
    12d0:	f040 8110 	bne.w	14f4 <cbprintf_package_convert+0x298>
		scpy_cnt = ros_nbr;
		keep_cnt = 0;
		dst = cpy_str_pos;
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    12d4:	f1b9 0f00 	cmp.w	r9, #0
    12d8:	f000 811b 	beq.w	1512 <cbprintf_package_convert+0x2b6>
    12dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    12e0:	f013 0f04 	tst.w	r3, #4
    12e4:	f040 8119 	bne.w	151a <cbprintf_package_convert+0x2be>
		keep_cnt = ros_nbr;
		dst = keep_str_pos;
	} else {
		scpy_cnt = 0;
		keep_cnt = 0;
		dst = NULL;
    12e8:	2000      	movs	r0, #0
		keep_cnt = 0;
    12ea:	61f8      	str	r0, [r7, #28]
		scpy_cnt = 0;
    12ec:	4606      	mov	r6, r0
    12ee:	e105      	b.n	14fc <cbprintf_package_convert+0x2a0>
	rw_cpy = rws_nbr > 0 &&
    12f0:	2201      	movs	r2, #1
    12f2:	e7df      	b.n	12b4 <cbprintf_package_convert+0x58>
		if (cb) {
    12f4:	69bb      	ldr	r3, [r7, #24]
    12f6:	b11b      	cbz	r3, 1300 <cbprintf_package_convert+0xa4>
			cb(in_packaged, in_len, ctx);
    12f8:	693a      	ldr	r2, [r7, #16]
    12fa:	68f9      	ldr	r1, [r7, #12]
    12fc:	4658      	mov	r0, fp
    12fe:	4798      	blx	r3
		return in_len;
    1300:	68fc      	ldr	r4, [r7, #12]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    1302:	4620      	mov	r0, r4
    1304:	375c      	adds	r7, #92	; 0x5c
    1306:	46bd      	mov	sp, r7
    1308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_len = (int)in_len;
    130c:	68fc      	ldr	r4, [r7, #12]
		if (ro_cpy) {
    130e:	bb2b      	cbnz	r3, 135c <cbprintf_package_convert+0x100>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    1310:	f1b9 0f00 	cmp.w	r9, #0
    1314:	d038      	beq.n	1388 <cbprintf_package_convert+0x12c>
    1316:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    131a:	f013 0304 	ands.w	r3, r3, #4
    131e:	613b      	str	r3, [r7, #16]
    1320:	d027      	beq.n	1372 <cbprintf_package_convert+0x116>
				str_pos += ros_nbr;
    1322:	444d      	add	r5, r9
	size_t strl_cnt = 0;
    1324:	2300      	movs	r3, #0
    1326:	613b      	str	r3, [r7, #16]
    1328:	e023      	b.n	1372 <cbprintf_package_convert+0x116>
				out_len += len;
    132a:	4404      	add	r4, r0
				str_pos++;
    132c:	3501      	adds	r5, #1
			for (unsigned int i = 0; i < ros_nbr; i++) {
    132e:	3601      	adds	r6, #1
    1330:	454e      	cmp	r6, r9
    1332:	d21a      	bcs.n	136a <cbprintf_package_convert+0x10e>
				const char *str = *(const char **)&buf32[*str_pos];
    1334:	782a      	ldrb	r2, [r5, #0]
				int len = append_string(cb, NULL, str, 0);
    1336:	2300      	movs	r3, #0
    1338:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
    133c:	4619      	mov	r1, r3
    133e:	69b8      	ldr	r0, [r7, #24]
    1340:	f007 fe48 	bl	8fd4 <append_string>
				if (strl && strl_cnt < strl_len) {
    1344:	f1ba 0f00 	cmp.w	sl, #0
    1348:	d0ef      	beq.n	132a <cbprintf_package_convert+0xce>
    134a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    134e:	4598      	cmp	r8, r3
    1350:	d2eb      	bcs.n	132a <cbprintf_package_convert+0xce>
					strl[strl_cnt++] = (uint16_t)len;
    1352:	f82a 0018 	strh.w	r0, [sl, r8, lsl #1]
    1356:	f108 0801 	add.w	r8, r8, #1
    135a:	e7e6      	b.n	132a <cbprintf_package_convert+0xce>
			for (unsigned int i = 0; i < ros_nbr; i++) {
    135c:	2600      	movs	r6, #0
	size_t strl_cnt = 0;
    135e:	f8c7 801c 	str.w	r8, [r7, #28]
    1362:	46b0      	mov	r8, r6
    1364:	f8d7 a084 	ldr.w	sl, [r7, #132]	; 0x84
    1368:	e7e2      	b.n	1330 <cbprintf_package_convert+0xd4>
    136a:	f8c7 8010 	str.w	r8, [r7, #16]
    136e:	f8d7 801c 	ldr.w	r8, [r7, #28]
		bool drop_ro_str_pos = !(flags &
    1372:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1376:	f003 0305 	and.w	r3, r3, #5
    137a:	60fb      	str	r3, [r7, #12]
		for (unsigned int i = 0; i < rws_nbr; i++) {
    137c:	f04f 0a00 	mov.w	sl, #0
    1380:	46a1      	mov	r9, r4
    1382:	f8c7 b01c 	str.w	fp, [r7, #28]
    1386:	e09f      	b.n	14c8 <cbprintf_package_convert+0x26c>
	size_t strl_cnt = 0;
    1388:	f8c7 9010 	str.w	r9, [r7, #16]
    138c:	e7f1      	b.n	1372 <cbprintf_package_convert+0x116>
    138e:	2500      	movs	r5, #0
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    1390:	6a3b      	ldr	r3, [r7, #32]
    1392:	b97b      	cbnz	r3, 13b4 <cbprintf_package_convert+0x158>
			if (is_ro) {
    1394:	2d00      	cmp	r5, #0
    1396:	d079      	beq.n	148c <cbprintf_package_convert+0x230>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    1398:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    139c:	f013 0f01 	tst.w	r3, #1
    13a0:	d179      	bne.n	1496 <cbprintf_package_convert+0x23a>
					out_len -= drop_ro_str_pos ? 2 : 1;
    13a2:	68fb      	ldr	r3, [r7, #12]
    13a4:	2b00      	cmp	r3, #0
    13a6:	d16f      	bne.n	1488 <cbprintf_package_convert+0x22c>
    13a8:	2302      	movs	r3, #2
    13aa:	eba9 0903 	sub.w	r9, r9, r3
    13ae:	e088      	b.n	14c2 <cbprintf_package_convert+0x266>
    13b0:	2501      	movs	r5, #1
    13b2:	e7ed      	b.n	1390 <cbprintf_package_convert+0x134>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    13b4:	4659      	mov	r1, fp
    13b6:	6978      	ldr	r0, [r7, #20]
    13b8:	f007 fe53 	bl	9062 <is_ptr>
    13bc:	2800      	cmp	r0, #0
    13be:	d0e9      	beq.n	1394 <cbprintf_package_convert+0x138>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    13c0:	466c      	mov	r4, sp
    13c2:	2300      	movs	r3, #0
    13c4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    13c8:	2302      	movs	r3, #2
    13ca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    13ce:	b08a      	sub	sp, #40	; 0x28
    13d0:	4669      	mov	r1, sp
    13d2:	f111 0210 	adds.w	r2, r1, #16
    13d6:	d037      	beq.n	1448 <cbprintf_package_convert+0x1ec>
    13d8:	2512      	movs	r5, #18
    13da:	b11a      	cbz	r2, 13e4 <cbprintf_package_convert+0x188>
    13dc:	2d04      	cmp	r5, #4
    13de:	dd01      	ble.n	13e4 <cbprintf_package_convert+0x188>
    13e0:	4bb2      	ldr	r3, [pc, #712]	; (16ac <cbprintf_package_convert+0x450>)
    13e2:	614b      	str	r3, [r1, #20]
    13e4:	2300      	movs	r3, #0
    13e6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    13ea:	2302      	movs	r3, #2
    13ec:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    13f0:	bb6a      	cbnz	r2, 144e <cbprintf_package_convert+0x1f2>
    13f2:	2d11      	cmp	r5, #17
    13f4:	dd45      	ble.n	1482 <cbprintf_package_convert+0x226>
    13f6:	2312      	movs	r3, #18
    13f8:	b162      	cbz	r2, 1414 <cbprintf_package_convert+0x1b8>
    13fa:	2004      	movs	r0, #4
    13fc:	f887 002c 	strb.w	r0, [r7, #44]	; 0x2c
    1400:	2000      	movs	r0, #0
    1402:	f887 002d 	strb.w	r0, [r7, #45]	; 0x2d
    1406:	f887 002e 	strb.w	r0, [r7, #46]	; 0x2e
    140a:	2001      	movs	r0, #1
    140c:	f887 002f 	strb.w	r0, [r7, #47]	; 0x2f
    1410:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1412:	6108      	str	r0, [r1, #16]
    1414:	f36f 0800 	bfc	r8, #0, #1
    1418:	f36f 0841 	bfc	r8, #1, #1
    141c:	f36f 0882 	bfc	r8, #2, #1
    1420:	f36f 08c5 	bfc	r8, #3, #3
    1424:	2102      	movs	r1, #2
    1426:	f361 1888 	bfi	r8, r1, #6, #3
    142a:	f3c3 030a 	ubfx	r3, r3, #0, #11
    142e:	f363 2853 	bfi	r8, r3, #9, #11
    1432:	f36f 581f 	bfc	r8, #20, #12
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
    1436:	2300      	movs	r3, #0
    1438:	4641      	mov	r1, r8
    143a:	489d      	ldr	r0, [pc, #628]	; (16b0 <cbprintf_package_convert+0x454>)
    143c:	f001 fb12 	bl	2a64 <z_impl_z_log_msg_static_create>
    1440:	46a5      	mov	sp, r4
				out_len -= 2;
    1442:	f1a9 0902 	sub.w	r9, r9, #2
				continue;
    1446:	e03c      	b.n	14c2 <cbprintf_package_convert+0x266>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    1448:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    144c:	e7c5      	b.n	13da <cbprintf_package_convert+0x17e>
    144e:	462b      	mov	r3, r5
    1450:	2d08      	cmp	r5, #8
    1452:	dd01      	ble.n	1458 <cbprintf_package_convert+0x1fc>
    1454:	6978      	ldr	r0, [r7, #20]
    1456:	6188      	str	r0, [r1, #24]
    1458:	2b0c      	cmp	r3, #12
    145a:	dd01      	ble.n	1460 <cbprintf_package_convert+0x204>
    145c:	f8c1 b01c 	str.w	fp, [r1, #28]
    1460:	f101 0320 	add.w	r3, r1, #32
    1464:	2000      	movs	r0, #0
    1466:	e009      	b.n	147c <cbprintf_package_convert+0x220>
    1468:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    146c:	f107 0e28 	add.w	lr, r7, #40	; 0x28
    1470:	44f4      	add	ip, lr
    1472:	f81c cc30 	ldrb.w	ip, [ip, #-48]
    1476:	f803 cb01 	strb.w	ip, [r3], #1
    147a:	3001      	adds	r0, #1
    147c:	2801      	cmp	r0, #1
    147e:	d9f3      	bls.n	1468 <cbprintf_package_convert+0x20c>
    1480:	e7b7      	b.n	13f2 <cbprintf_package_convert+0x196>
    1482:	f06f 031b 	mvn.w	r3, #27
    1486:	e7b7      	b.n	13f8 <cbprintf_package_convert+0x19c>
					out_len -= drop_ro_str_pos ? 2 : 1;
    1488:	2301      	movs	r3, #1
    148a:	e78e      	b.n	13aa <cbprintf_package_convert+0x14e>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    148c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1490:	f013 0f02 	tst.w	r3, #2
    1494:	d015      	beq.n	14c2 <cbprintf_package_convert+0x266>
				len = append_string(cb, NULL, str, 0);
    1496:	2300      	movs	r3, #0
    1498:	4622      	mov	r2, r4
    149a:	4619      	mov	r1, r3
    149c:	69b8      	ldr	r0, [r7, #24]
    149e:	f007 fd99 	bl	8fd4 <append_string>
				if (strl && strl_cnt < strl_len) {
    14a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    14a6:	b153      	cbz	r3, 14be <cbprintf_package_convert+0x262>
    14a8:	693b      	ldr	r3, [r7, #16]
    14aa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
    14ae:	4293      	cmp	r3, r2
    14b0:	d205      	bcs.n	14be <cbprintf_package_convert+0x262>
					strl[strl_cnt++] = (uint16_t)len;
    14b2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    14b6:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
    14ba:	3301      	adds	r3, #1
    14bc:	613b      	str	r3, [r7, #16]
				out_len += (len - 1);
    14be:	3801      	subs	r0, #1
    14c0:	4481      	add	r9, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
    14c2:	f10a 0a01 	add.w	sl, sl, #1
			uint8_t arg_pos = *str_pos++;
    14c6:	4635      	mov	r5, r6
		for (unsigned int i = 0; i < rws_nbr; i++) {
    14c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    14ca:	459a      	cmp	sl, r3
    14cc:	d210      	bcs.n	14f0 <cbprintf_package_convert+0x294>
			uint8_t arg_idx = *str_pos++;
    14ce:	462e      	mov	r6, r5
    14d0:	f816 bb02 	ldrb.w	fp, [r6], #2
			uint8_t arg_pos = *str_pos++;
    14d4:	786b      	ldrb	r3, [r5, #1]
			const char *str = *(const char **)&buf32[arg_pos];
    14d6:	69fa      	ldr	r2, [r7, #28]
    14d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    14dc:	4b75      	ldr	r3, [pc, #468]	; (16b4 <cbprintf_package_convert+0x458>)
    14de:	429c      	cmp	r4, r3
    14e0:	f4ff af55 	bcc.w	138e <cbprintf_package_convert+0x132>
    14e4:	4b74      	ldr	r3, [pc, #464]	; (16b8 <cbprintf_package_convert+0x45c>)
    14e6:	429c      	cmp	r4, r3
    14e8:	f4ff af62 	bcc.w	13b0 <cbprintf_package_convert+0x154>
    14ec:	2500      	movs	r5, #0
    14ee:	e74f      	b.n	1390 <cbprintf_package_convert+0x134>
    14f0:	464c      	mov	r4, r9
    14f2:	e706      	b.n	1302 <cbprintf_package_convert+0xa6>
		dst = cpy_str_pos;
    14f4:	f107 0044 	add.w	r0, r7, #68	; 0x44
		keep_cnt = 0;
    14f8:	2300      	movs	r3, #0
    14fa:	61fb      	str	r3, [r7, #28]
	if (dst) {
    14fc:	b118      	cbz	r0, 1506 <cbprintf_package_convert+0x2aa>
		memcpy(dst, str_pos, ros_nbr);
    14fe:	464a      	mov	r2, r9
    1500:	4629      	mov	r1, r5
    1502:	f008 ffb8 	bl	a476 <memcpy>
	str_pos += ros_nbr;
    1506:	444d      	add	r5, r9
	for (unsigned int i = 0; i < rws_nbr; i++) {
    1508:	f04f 0800 	mov.w	r8, #0
    150c:	f8c7 9004 	str.w	r9, [r7, #4]
    1510:	e01e      	b.n	1550 <cbprintf_package_convert+0x2f4>
		dst = NULL;
    1512:	2000      	movs	r0, #0
		keep_cnt = 0;
    1514:	61f8      	str	r0, [r7, #28]
		scpy_cnt = 0;
    1516:	4606      	mov	r6, r0
    1518:	e7f0      	b.n	14fc <cbprintf_package_convert+0x2a0>
		keep_cnt = ros_nbr;
    151a:	61fe      	str	r6, [r7, #28]
		dst = keep_str_pos;
    151c:	f107 0034 	add.w	r0, r7, #52	; 0x34
		scpy_cnt = 0;
    1520:	2600      	movs	r6, #0
    1522:	e7eb      	b.n	14fc <cbprintf_package_convert+0x2a0>
    1524:	2500      	movs	r5, #0
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    1526:	6a3b      	ldr	r3, [r7, #32]
    1528:	bb33      	cbnz	r3, 1578 <cbprintf_package_convert+0x31c>
		if (is_ro) {
    152a:	2d00      	cmp	r5, #0
    152c:	d03b      	beq.n	15a6 <cbprintf_package_convert+0x34a>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    152e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1532:	f013 0f01 	tst.w	r3, #1
    1536:	d026      	beq.n	1586 <cbprintf_package_convert+0x32a>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    1538:	1c73      	adds	r3, r6, #1
    153a:	f106 0230 	add.w	r2, r6, #48	; 0x30
    153e:	f107 0128 	add.w	r1, r7, #40	; 0x28
    1542:	1856      	adds	r6, r2, r1
    1544:	f806 9c14 	strb.w	r9, [r6, #-20]
    1548:	b2de      	uxtb	r6, r3
	for (unsigned int i = 0; i < rws_nbr; i++) {
    154a:	f108 0801 	add.w	r8, r8, #1
		uint8_t arg_pos = *str_pos++;
    154e:	4625      	mov	r5, r4
	for (unsigned int i = 0; i < rws_nbr; i++) {
    1550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1552:	4598      	cmp	r8, r3
    1554:	d24a      	bcs.n	15ec <cbprintf_package_convert+0x390>
		uint8_t arg_idx = *str_pos++;
    1556:	462c      	mov	r4, r5
    1558:	f814 ab02 	ldrb.w	sl, [r4], #2
		uint8_t arg_pos = *str_pos++;
    155c:	f895 9001 	ldrb.w	r9, [r5, #1]
		const char *str = *(const char **)&buf32[arg_pos];
    1560:	f85b 3029 	ldr.w	r3, [fp, r9, lsl #2]
    1564:	4a53      	ldr	r2, [pc, #332]	; (16b4 <cbprintf_package_convert+0x458>)
    1566:	4293      	cmp	r3, r2
    1568:	d3dc      	bcc.n	1524 <cbprintf_package_convert+0x2c8>
    156a:	4a53      	ldr	r2, [pc, #332]	; (16b8 <cbprintf_package_convert+0x45c>)
    156c:	4293      	cmp	r3, r2
    156e:	d301      	bcc.n	1574 <cbprintf_package_convert+0x318>
    1570:	2500      	movs	r5, #0
    1572:	e7d8      	b.n	1526 <cbprintf_package_convert+0x2ca>
    1574:	2501      	movs	r5, #1
    1576:	e7d6      	b.n	1526 <cbprintf_package_convert+0x2ca>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    1578:	4651      	mov	r1, sl
    157a:	6978      	ldr	r0, [r7, #20]
    157c:	f007 fd71 	bl	9062 <is_ptr>
    1580:	2800      	cmp	r0, #0
    1582:	d0d2      	beq.n	152a <cbprintf_package_convert+0x2ce>
    1584:	e7e1      	b.n	154a <cbprintf_package_convert+0x2ee>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    1586:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    158a:	f013 0f04 	tst.w	r3, #4
    158e:	d0dc      	beq.n	154a <cbprintf_package_convert+0x2ee>
				keep_str_pos[keep_cnt++] = arg_pos;
    1590:	69fa      	ldr	r2, [r7, #28]
    1592:	1c53      	adds	r3, r2, #1
    1594:	3230      	adds	r2, #48	; 0x30
    1596:	f107 0128 	add.w	r1, r7, #40	; 0x28
    159a:	440a      	add	r2, r1
    159c:	f802 9c24 	strb.w	r9, [r2, #-36]
    15a0:	b2db      	uxtb	r3, r3
    15a2:	61fb      	str	r3, [r7, #28]
    15a4:	e7d1      	b.n	154a <cbprintf_package_convert+0x2ee>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    15a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    15aa:	f013 0f02 	tst.w	r3, #2
    15ae:	d009      	beq.n	15c4 <cbprintf_package_convert+0x368>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    15b0:	1c73      	adds	r3, r6, #1
    15b2:	f106 0230 	add.w	r2, r6, #48	; 0x30
    15b6:	f107 0128 	add.w	r1, r7, #40	; 0x28
    15ba:	1856      	adds	r6, r2, r1
    15bc:	f806 9c14 	strb.w	r9, [r6, #-20]
    15c0:	b2de      	uxtb	r6, r3
    15c2:	e7c2      	b.n	154a <cbprintf_package_convert+0x2ee>
				keep_str_pos[keep_cnt++] = arg_idx;
    15c4:	69f8      	ldr	r0, [r7, #28]
    15c6:	1c43      	adds	r3, r0, #1
    15c8:	f100 0130 	add.w	r1, r0, #48	; 0x30
    15cc:	f107 0228 	add.w	r2, r7, #40	; 0x28
    15d0:	188a      	adds	r2, r1, r2
    15d2:	f802 ac24 	strb.w	sl, [r2, #-36]
				keep_str_pos[keep_cnt++] = arg_pos;
    15d6:	4602      	mov	r2, r0
    15d8:	3202      	adds	r2, #2
    15da:	b2d2      	uxtb	r2, r2
    15dc:	61fa      	str	r2, [r7, #28]
    15de:	f107 0258 	add.w	r2, r7, #88	; 0x58
    15e2:	fa52 f383 	uxtab	r3, r2, r3
    15e6:	f803 9c24 	strb.w	r9, [r3, #-36]
    15ea:	e7ae      	b.n	154a <cbprintf_package_convert+0x2ee>
	out_desc.len = in_desc->len;
    15ec:	f8d7 9004 	ldr.w	r9, [r7, #4]
    15f0:	f89b 3000 	ldrb.w	r3, [fp]
    15f4:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    15f8:	f89b 3001 	ldrb.w	r3, [fp, #1]
    15fc:	4433      	add	r3, r6
    15fe:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    1602:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1606:	f013 0f02 	tst.w	r3, #2
    160a:	d10e      	bne.n	162a <cbprintf_package_convert+0x3ce>
    160c:	69fb      	ldr	r3, [r7, #28]
    160e:	f3c3 0347 	ubfx	r3, r3, #1, #8
    1612:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    1616:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    161a:	f013 0f01 	tst.w	r3, #1
    161e:	d106      	bne.n	162e <cbprintf_package_convert+0x3d2>
    1620:	f013 0f04 	tst.w	r3, #4
    1624:	d13f      	bne.n	16a6 <cbprintf_package_convert+0x44a>
    1626:	2300      	movs	r3, #0
    1628:	e002      	b.n	1630 <cbprintf_package_convert+0x3d4>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    162a:	2300      	movs	r3, #0
    162c:	e7f1      	b.n	1612 <cbprintf_package_convert+0x3b6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    162e:	2300      	movs	r3, #0
    1630:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	struct cbprintf_package_desc in_desc_backup = *in_desc;
    1634:	f8db 0000 	ldr.w	r0, [fp]
    1638:	6338      	str	r0, [r7, #48]	; 0x30
	*in_desc = out_desc;
    163a:	6d78      	ldr	r0, [r7, #84]	; 0x54
    163c:	f8cb 0000 	str.w	r0, [fp]
	rv = cb(in_packaged, args_size, ctx);
    1640:	f8d7 8010 	ldr.w	r8, [r7, #16]
    1644:	4642      	mov	r2, r8
    1646:	68b9      	ldr	r1, [r7, #8]
    1648:	4658      	mov	r0, fp
    164a:	f8d7 a018 	ldr.w	sl, [r7, #24]
    164e:	47d0      	blx	sl
	if (rv < 0) {
    1650:	1e04      	subs	r4, r0, #0
    1652:	f6ff ae56 	blt.w	1302 <cbprintf_package_convert+0xa6>
	*in_desc = in_desc_backup;
    1656:	6b38      	ldr	r0, [r7, #48]	; 0x30
    1658:	f8cb 0000 	str.w	r0, [fp]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    165c:	f8c7 8010 	str.w	r8, [r7, #16]
    1660:	4642      	mov	r2, r8
    1662:	69f9      	ldr	r1, [r7, #28]
    1664:	f107 0034 	add.w	r0, r7, #52	; 0x34
    1668:	47d0      	blx	sl
	if (rv < 0) {
    166a:	2800      	cmp	r0, #0
    166c:	db57      	blt.n	171e <cbprintf_package_convert+0x4c2>
	out_len += rv;
    166e:	eb04 0800 	add.w	r8, r4, r0
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    1672:	68b9      	ldr	r1, [r7, #8]
    1674:	4449      	add	r1, r9
    1676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1678:	eb01 0143 	add.w	r1, r1, r3, lsl #1
	rv = cb(str_pos, strs_len, ctx);
    167c:	f8d7 9010 	ldr.w	r9, [r7, #16]
    1680:	464a      	mov	r2, r9
    1682:	68fb      	ldr	r3, [r7, #12]
    1684:	1a59      	subs	r1, r3, r1
    1686:	4628      	mov	r0, r5
    1688:	47d0      	blx	sl
	if (rv < 0) {
    168a:	1e04      	subs	r4, r0, #0
    168c:	f6ff ae39 	blt.w	1302 <cbprintf_package_convert+0xa6>
	out_len += rv;
    1690:	eb08 0504 	add.w	r5, r8, r4
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    1694:	f04f 0800 	mov.w	r8, #0
    1698:	627e      	str	r6, [r7, #36]	; 0x24
    169a:	f8c7 b020 	str.w	fp, [r7, #32]
    169e:	4656      	mov	r6, sl
    16a0:	f8d7 b084 	ldr.w	fp, [r7, #132]	; 0x84
    16a4:	e01f      	b.n	16e6 <cbprintf_package_convert+0x48a>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    16a6:	69fb      	ldr	r3, [r7, #28]
    16a8:	e7c2      	b.n	1630 <cbprintf_package_convert+0x3d4>
    16aa:	bf00      	nop
    16ac:	0000c68c 	.word	0x0000c68c
    16b0:	0000c4c0 	.word	0x0000c4c0
    16b4:	0000c1a8 	.word	0x0000c1a8
    16b8:	0000d3f0 	.word	0x0000d3f0
		uint16_t str_len = strl ? strl[i] : 0;
    16bc:	f04f 0a00 	mov.w	sl, #0
		rv = cb(&loc, 1, ctx);
    16c0:	464a      	mov	r2, r9
    16c2:	2101      	movs	r1, #1
    16c4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
    16c8:	47b0      	blx	r6
		if (rv < 0) {
    16ca:	2800      	cmp	r0, #0
    16cc:	db29      	blt.n	1722 <cbprintf_package_convert+0x4c6>
		out_len += rv;
    16ce:	4405      	add	r5, r0
		rv = append_string(cb, ctx, str, str_len);
    16d0:	4653      	mov	r3, sl
    16d2:	4622      	mov	r2, r4
    16d4:	4649      	mov	r1, r9
    16d6:	4630      	mov	r0, r6
    16d8:	f007 fc7c 	bl	8fd4 <append_string>
		if (rv < 0) {
    16dc:	2800      	cmp	r0, #0
    16de:	db22      	blt.n	1726 <cbprintf_package_convert+0x4ca>
		out_len += rv;
    16e0:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    16e2:	f108 0801 	add.w	r8, r8, #1
    16e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    16e8:	4598      	cmp	r8, r3
    16ea:	d211      	bcs.n	1710 <cbprintf_package_convert+0x4b4>
		uint8_t loc = cpy_str_pos[i];
    16ec:	f108 0330 	add.w	r3, r8, #48	; 0x30
    16f0:	f107 0228 	add.w	r2, r7, #40	; 0x28
    16f4:	4413      	add	r3, r2
    16f6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    16fa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		const char *str = *(const char **)&buf32[loc];
    16fe:	6a3a      	ldr	r2, [r7, #32]
    1700:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
    1704:	f1bb 0f00 	cmp.w	fp, #0
    1708:	d0d8      	beq.n	16bc <cbprintf_package_convert+0x460>
    170a:	f83b a018 	ldrh.w	sl, [fp, r8, lsl #1]
    170e:	e7d7      	b.n	16c0 <cbprintf_package_convert+0x464>
	(void)cb(NULL, 0, ctx);
    1710:	693a      	ldr	r2, [r7, #16]
    1712:	2100      	movs	r1, #0
    1714:	4608      	mov	r0, r1
    1716:	69bb      	ldr	r3, [r7, #24]
    1718:	4798      	blx	r3
	return out_len;
    171a:	462c      	mov	r4, r5
    171c:	e5f1      	b.n	1302 <cbprintf_package_convert+0xa6>
		return rv;
    171e:	4604      	mov	r4, r0
    1720:	e5ef      	b.n	1302 <cbprintf_package_convert+0xa6>
    1722:	4604      	mov	r4, r0
    1724:	e5ed      	b.n	1302 <cbprintf_package_convert+0xa6>
    1726:	4604      	mov	r4, r0
    1728:	e5eb      	b.n	1302 <cbprintf_package_convert+0xa6>
    172a:	bf00      	nop

0000172c <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    172c:	4b01      	ldr	r3, [pc, #4]	; (1734 <__printk_hook_install+0x8>)
    172e:	6018      	str	r0, [r3, #0]
}
    1730:	4770      	bx	lr
    1732:	bf00      	nop
    1734:	20000000 	.word	0x20000000

00001738 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    1738:	b510      	push	{r4, lr}
    173a:	b086      	sub	sp, #24
    173c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    173e:	9003      	str	r0, [sp, #12]
    1740:	9104      	str	r1, [sp, #16]
    1742:	2100      	movs	r1, #0
    1744:	9105      	str	r1, [sp, #20]
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    1746:	9100      	str	r1, [sp, #0]
    1748:	a903      	add	r1, sp, #12
    174a:	4806      	ldr	r0, [pc, #24]	; (1764 <vsnprintk+0x2c>)
    174c:	f000 fb14 	bl	1d78 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    1750:	9b05      	ldr	r3, [sp, #20]
    1752:	9a04      	ldr	r2, [sp, #16]
    1754:	4293      	cmp	r3, r2
    1756:	da01      	bge.n	175c <vsnprintk+0x24>
		str[ctx.count] = '\0';
    1758:	2200      	movs	r2, #0
    175a:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    175c:	9805      	ldr	r0, [sp, #20]
    175e:	b006      	add	sp, #24
    1760:	bd10      	pop	{r4, pc}
    1762:	bf00      	nop
    1764:	000090b5 	.word	0x000090b5

00001768 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    176c:	b083      	sub	sp, #12
    176e:	4604      	mov	r4, r0
    1770:	4608      	mov	r0, r1
    1772:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1774:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1776:	f013 0f08 	tst.w	r3, #8
    177a:	d105      	bne.n	1788 <process_event+0x20>
    177c:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    1780:	2300      	movs	r3, #0
    1782:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    1784:	9301      	str	r3, [sp, #4]
}
    1786:	e055      	b.n	1834 <process_event+0xcc>
		if (evt == EVT_COMPLETE) {
    1788:	2901      	cmp	r1, #1
    178a:	d009      	beq.n	17a0 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    178c:	f043 0320 	orr.w	r3, r3, #32
    1790:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1792:	f385 8811 	msr	BASEPRI, r5
    1796:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    179a:	b003      	add	sp, #12
    179c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    17a0:	f043 0310 	orr.w	r3, r3, #16
    17a4:	8323      	strh	r3, [r4, #24]
    17a6:	e7f4      	b.n	1792 <process_event+0x2a>
			evt = process_recheck(mgr);
    17a8:	4620      	mov	r0, r4
    17aa:	f007 fcef 	bl	918c <process_recheck>
    17ae:	e043      	b.n	1838 <process_event+0xd0>
			res = mgr->last_res;
    17b0:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
    17b4:	464a      	mov	r2, r9
    17b6:	4669      	mov	r1, sp
    17b8:	4620      	mov	r0, r4
    17ba:	f007 fd00 	bl	91be <process_complete>
		onoff_transition_fn transit = NULL;
    17be:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    17c2:	8b23      	ldrh	r3, [r4, #24]
    17c4:	f003 0707 	and.w	r7, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    17c8:	42b7      	cmp	r7, r6
    17ca:	d069      	beq.n	18a0 <process_event+0x138>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    17cc:	68a2      	ldr	r2, [r4, #8]
    17ce:	2a00      	cmp	r2, #0
    17d0:	d066      	beq.n	18a0 <process_event+0x138>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    17d2:	2201      	movs	r2, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    17d4:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    17d8:	8323      	strh	r3, [r4, #24]
    17da:	f385 8811 	msr	BASEPRI, r5
    17de:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    17e2:	2a00      	cmp	r2, #0
    17e4:	d164      	bne.n	18b0 <process_event+0x148>
    17e6:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    17e8:	b12b      	cbz	r3, 17f6 <process_event+0x8e>
				notify_all(mgr, &clients, state, res);
    17ea:	464b      	mov	r3, r9
    17ec:	463a      	mov	r2, r7
    17ee:	4669      	mov	r1, sp
    17f0:	4620      	mov	r0, r4
    17f2:	f007 fd5d 	bl	92b0 <notify_all>
			if (transit != NULL) {
    17f6:	f1b8 0f00 	cmp.w	r8, #0
    17fa:	d002      	beq.n	1802 <process_event+0x9a>
				transit(mgr, transition_complete);
    17fc:	4934      	ldr	r1, [pc, #208]	; (18d0 <process_event+0x168>)
    17fe:	4620      	mov	r0, r4
    1800:	47c0      	blx	r8
	__asm__ volatile(
    1802:	f04f 0320 	mov.w	r3, #32
    1806:	f3ef 8511 	mrs	r5, BASEPRI
    180a:	f383 8812 	msr	BASEPRI_MAX, r3
    180e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1812:	8b23      	ldrh	r3, [r4, #24]
    1814:	f023 0308 	bic.w	r3, r3, #8
    1818:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    181a:	8b23      	ldrh	r3, [r4, #24]
    181c:	f013 0f10 	tst.w	r3, #16
    1820:	d04c      	beq.n	18bc <process_event+0x154>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1822:	f023 0310 	bic.w	r3, r3, #16
    1826:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    1828:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    182a:	8b26      	ldrh	r6, [r4, #24]
    182c:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    1830:	2800      	cmp	r0, #0
    1832:	d0ae      	beq.n	1792 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    1834:	2802      	cmp	r0, #2
    1836:	d0b7      	beq.n	17a8 <process_event+0x40>
		if (evt == EVT_NOP) {
    1838:	2800      	cmp	r0, #0
    183a:	d0aa      	beq.n	1792 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    183c:	3801      	subs	r0, #1
    183e:	2804      	cmp	r0, #4
    1840:	d82a      	bhi.n	1898 <process_event+0x130>
    1842:	a301      	add	r3, pc, #4	; (adr r3, 1848 <process_event+0xe0>)
    1844:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
    1848:	000017b1 	.word	0x000017b1
    184c:	00001899 	.word	0x00001899
    1850:	0000185d 	.word	0x0000185d
    1854:	00001871 	.word	0x00001871
    1858:	00001885 	.word	0x00001885
			transit = mgr->transitions->start;
    185c:	6923      	ldr	r3, [r4, #16]
    185e:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
    1862:	2106      	movs	r1, #6
    1864:	4620      	mov	r0, r4
    1866:	f007 fc67 	bl	9138 <set_state>
		res = 0;
    186a:	f04f 0900 	mov.w	r9, #0
    186e:	e7a8      	b.n	17c2 <process_event+0x5a>
			transit = mgr->transitions->stop;
    1870:	6923      	ldr	r3, [r4, #16]
    1872:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    1876:	2104      	movs	r1, #4
    1878:	4620      	mov	r0, r4
    187a:	f007 fc5d 	bl	9138 <set_state>
		res = 0;
    187e:	f04f 0900 	mov.w	r9, #0
    1882:	e79e      	b.n	17c2 <process_event+0x5a>
			transit = mgr->transitions->reset;
    1884:	6923      	ldr	r3, [r4, #16]
    1886:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    188a:	2105      	movs	r1, #5
    188c:	4620      	mov	r0, r4
    188e:	f007 fc53 	bl	9138 <set_state>
		res = 0;
    1892:	f04f 0900 	mov.w	r9, #0
    1896:	e794      	b.n	17c2 <process_event+0x5a>
		if (evt == EVT_NOP) {
    1898:	f04f 0800 	mov.w	r8, #0
    189c:	46c1      	mov	r9, r8
    189e:	e790      	b.n	17c2 <process_event+0x5a>
    18a0:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    18a2:	b10a      	cbz	r2, 18a8 <process_event+0x140>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    18a4:	2200      	movs	r2, #0
    18a6:	e795      	b.n	17d4 <process_event+0x6c>
		    || (transit != NULL)) {
    18a8:	f1b8 0f00 	cmp.w	r8, #0
    18ac:	d192      	bne.n	17d4 <process_event+0x6c>
    18ae:	e7b4      	b.n	181a <process_event+0xb2>
				notify_monitors(mgr, state, res);
    18b0:	464a      	mov	r2, r9
    18b2:	4639      	mov	r1, r7
    18b4:	4620      	mov	r0, r4
    18b6:	f007 fc47 	bl	9148 <notify_monitors>
    18ba:	e794      	b.n	17e6 <process_event+0x7e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    18bc:	f013 0f20 	tst.w	r3, #32
    18c0:	d004      	beq.n	18cc <process_event+0x164>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    18c2:	f023 0320 	bic.w	r3, r3, #32
    18c6:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
    18c8:	2002      	movs	r0, #2
    18ca:	e7ae      	b.n	182a <process_event+0xc2>
		evt = EVT_NOP;
    18cc:	2000      	movs	r0, #0
    18ce:	e7ac      	b.n	182a <process_event+0xc2>
    18d0:	000092df 	.word	0x000092df

000018d4 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
    18d4:	4684      	mov	ip, r0
    18d6:	4608      	mov	r0, r1
	bool loop = true;
    18d8:	2201      	movs	r2, #1
    18da:	e026      	b.n	192a <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
    18dc:	f89c 3000 	ldrb.w	r3, [ip]
    18e0:	f043 0304 	orr.w	r3, r3, #4
    18e4:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
    18e8:	b1f2      	cbz	r2, 1928 <extract_flags+0x54>
			++sp;
    18ea:	3001      	adds	r0, #1
    18ec:	e01c      	b.n	1928 <extract_flags+0x54>
			conv->flag_plus = true;
    18ee:	f89c 3000 	ldrb.w	r3, [ip]
    18f2:	f043 0308 	orr.w	r3, r3, #8
    18f6:	f88c 3000 	strb.w	r3, [ip]
			break;
    18fa:	e7f5      	b.n	18e8 <extract_flags+0x14>
			conv->flag_space = true;
    18fc:	f89c 3000 	ldrb.w	r3, [ip]
    1900:	f043 0310 	orr.w	r3, r3, #16
    1904:	f88c 3000 	strb.w	r3, [ip]
			break;
    1908:	e7ee      	b.n	18e8 <extract_flags+0x14>
			conv->flag_hash = true;
    190a:	f89c 3000 	ldrb.w	r3, [ip]
    190e:	f043 0320 	orr.w	r3, r3, #32
    1912:	f88c 3000 	strb.w	r3, [ip]
			break;
    1916:	e7e7      	b.n	18e8 <extract_flags+0x14>
			conv->flag_zero = true;
    1918:	f89c 3000 	ldrb.w	r3, [ip]
    191c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1920:	f88c 3000 	strb.w	r3, [ip]
			break;
    1924:	e7e0      	b.n	18e8 <extract_flags+0x14>
		switch (*sp) {
    1926:	2200      	movs	r2, #0
		}
	} while (loop);
    1928:	b342      	cbz	r2, 197c <extract_flags+0xa8>
		switch (*sp) {
    192a:	7803      	ldrb	r3, [r0, #0]
    192c:	3b20      	subs	r3, #32
    192e:	2b10      	cmp	r3, #16
    1930:	d8f9      	bhi.n	1926 <extract_flags+0x52>
    1932:	a101      	add	r1, pc, #4	; (adr r1, 1938 <extract_flags+0x64>)
    1934:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    1938:	000018fd 	.word	0x000018fd
    193c:	00001927 	.word	0x00001927
    1940:	00001927 	.word	0x00001927
    1944:	0000190b 	.word	0x0000190b
    1948:	00001927 	.word	0x00001927
    194c:	00001927 	.word	0x00001927
    1950:	00001927 	.word	0x00001927
    1954:	00001927 	.word	0x00001927
    1958:	00001927 	.word	0x00001927
    195c:	00001927 	.word	0x00001927
    1960:	00001927 	.word	0x00001927
    1964:	000018ef 	.word	0x000018ef
    1968:	00001927 	.word	0x00001927
    196c:	000018dd 	.word	0x000018dd
    1970:	00001927 	.word	0x00001927
    1974:	00001927 	.word	0x00001927
    1978:	00001919 	.word	0x00001919

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
    197c:	f89c 3000 	ldrb.w	r3, [ip]
    1980:	f003 0344 	and.w	r3, r3, #68	; 0x44
    1984:	2b44      	cmp	r3, #68	; 0x44
    1986:	d000      	beq.n	198a <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
    1988:	4770      	bx	lr
		conv->flag_zero = false;
    198a:	f89c 3000 	ldrb.w	r3, [ip]
    198e:	f36f 1386 	bfc	r3, #6, #1
    1992:	f88c 3000 	strb.w	r3, [ip]
    1996:	e7f7      	b.n	1988 <extract_flags+0xb4>

00001998 <encode_float>:
			  struct conversion *conv,
			  int precision,
			  char *sign,
			  char *bps,
			  const char **bpe)
{
    1998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    199c:	b087      	sub	sp, #28
    199e:	4617      	mov	r7, r2
    19a0:	461e      	mov	r6, r3
    19a2:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
	char *buf = bps;

	/* Prepend the sign: '-' if negative, flags control
	 * non-negative behavior.
	 */
	if ((u.u64 & SIGN_MASK) != 0U) {
    19a6:	4602      	mov	r2, r0
    19a8:	1e0b      	subs	r3, r1, #0
    19aa:	db07      	blt.n	19bc <encode_float+0x24>
		*sign = '-';
	} else if (conv->flag_plus) {
    19ac:	7839      	ldrb	r1, [r7, #0]
    19ae:	f011 0f08 	tst.w	r1, #8
    19b2:	d014      	beq.n	19de <encode_float+0x46>
		*sign = '+';
    19b4:	212b      	movs	r1, #43	; 0x2b
    19b6:	9810      	ldr	r0, [sp, #64]	; 0x40
    19b8:	7001      	strb	r1, [r0, #0]
    19ba:	e002      	b.n	19c2 <encode_float+0x2a>
		*sign = '-';
    19bc:	212d      	movs	r1, #45	; 0x2d
    19be:	9810      	ldr	r0, [sp, #64]	; 0x40
    19c0:	7001      	strb	r1, [r0, #0]
	}

	/* Extract the non-negative offset exponent and fraction.  Record
	 * whether the value is subnormal.
	 */
	char c = conv->specifier;
    19c2:	f897 8003 	ldrb.w	r8, [r7, #3]
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    19c6:	f3c3 540a 	ubfx	r4, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    19ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
    19ce:	9204      	str	r2, [sp, #16]
    19d0:	9305      	str	r3, [sp, #20]
	bool is_subnormal = (expo == 0) && (fract != 0);
    19d2:	b95c      	cbnz	r4, 19ec <encode_float+0x54>
    19d4:	ea52 0103 	orrs.w	r1, r2, r3
    19d8:	d128      	bne.n	1a2c <encode_float+0x94>
    19da:	2100      	movs	r1, #0
    19dc:	e007      	b.n	19ee <encode_float+0x56>
	} else if (conv->flag_space) {
    19de:	f011 0f10 	tst.w	r1, #16
    19e2:	d0ee      	beq.n	19c2 <encode_float+0x2a>
		*sign = ' ';
    19e4:	2120      	movs	r1, #32
    19e6:	9810      	ldr	r0, [sp, #64]	; 0x40
    19e8:	7001      	strb	r1, [r0, #0]
    19ea:	e7ea      	b.n	19c2 <encode_float+0x2a>
	bool is_subnormal = (expo == 0) && (fract != 0);
    19ec:	2100      	movs	r1, #0

	/* Exponent of all-ones signals infinity or NaN, which are
	 * text constants regardless of specifier.
	 */
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    19ee:	f240 70ff 	movw	r0, #2047	; 0x7ff
    19f2:	4284      	cmp	r4, r0
    19f4:	d01c      	beq.n	1a30 <encode_float+0x98>
		*bpe = buf;
		return bps;
	}

	/* The case of an F specifier is no longer relevant. */
	if (c == 'F') {
    19f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
    19fa:	d059      	beq.n	1ab0 <encode_float+0x118>

	/* Remainder of code operates on a 64-bit fraction, so shift up (and
	 * discard garbage from the exponent where the implicit 1 would be
	 * stored).
	 */
	fract <<= EXPONENT_BITS;
    19fc:	02db      	lsls	r3, r3, #11
    19fe:	ea43 5352 	orr.w	r3, r3, r2, lsr #21
    1a02:	02d2      	lsls	r2, r2, #11
    1a04:	9204      	str	r2, [sp, #16]
    1a06:	9305      	str	r3, [sp, #20]
	fract &= ~SIGN_MASK;
    1a08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    1a0c:	9305      	str	r3, [sp, #20]

	/* Non-zero values need normalization. */
	if ((expo | fract) != 0) {
    1a0e:	4322      	orrs	r2, r4
    1a10:	ea43 73e4 	orr.w	r3, r3, r4, asr #31
    1a14:	431a      	orrs	r2, r3
    1a16:	d007      	beq.n	1a28 <encode_float+0x90>
		if (is_subnormal) {
    1a18:	2900      	cmp	r1, #0
    1a1a:	d14d      	bne.n	1ab8 <encode_float+0x120>
		}
		/* Adjust the offset exponent to be signed rather than offset,
		 * and set the implicit 1 bit in the (shifted) 53-bit
		 * fraction.
		 */
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    1a1c:	f2a4 34fe 	subw	r4, r4, #1022	; 0x3fe
		fract |= BIT_63;
    1a20:	9b05      	ldr	r3, [sp, #20]
    1a22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1a26:	9305      	str	r3, [sp, #20]
		c = 'f';
    1a28:	2500      	movs	r5, #0
    1a2a:	e066      	b.n	1afa <encode_float+0x162>
	bool is_subnormal = (expo == 0) && (fract != 0);
    1a2c:	2101      	movs	r1, #1
    1a2e:	e7de      	b.n	19ee <encode_float+0x56>
		if (fract == 0) {
    1a30:	4313      	orrs	r3, r2
    1a32:	d122      	bne.n	1a7a <encode_float+0xe2>
extern "C" {
#endif

static inline int isupper(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    1a34:	f1a8 0841 	sub.w	r8, r8, #65	; 0x41
			if (isupper((unsigned char)c) != 0) {
    1a38:	f1b8 0f19 	cmp.w	r8, #25
    1a3c:	d811      	bhi.n	1a62 <encode_float+0xca>
				*buf++ = 'I';
    1a3e:	2349      	movs	r3, #73	; 0x49
    1a40:	f889 3000 	strb.w	r3, [r9]
				*buf++ = 'N';
    1a44:	234e      	movs	r3, #78	; 0x4e
    1a46:	f889 3001 	strb.w	r3, [r9, #1]
				*buf++ = 'F';
    1a4a:	f109 0203 	add.w	r2, r9, #3
    1a4e:	2346      	movs	r3, #70	; 0x46
    1a50:	f889 3002 	strb.w	r3, [r9, #2]
		conv->flag_zero = false;
    1a54:	783b      	ldrb	r3, [r7, #0]
    1a56:	f36f 1386 	bfc	r3, #6, #1
    1a5a:	703b      	strb	r3, [r7, #0]
		*bpe = buf;
    1a5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1a5e:	601a      	str	r2, [r3, #0]
		return bps;
    1a60:	e174      	b.n	1d4c <encode_float+0x3b4>
				*buf++ = 'i';
    1a62:	2369      	movs	r3, #105	; 0x69
    1a64:	f889 3000 	strb.w	r3, [r9]
				*buf++ = 'n';
    1a68:	236e      	movs	r3, #110	; 0x6e
    1a6a:	f889 3001 	strb.w	r3, [r9, #1]
				*buf++ = 'f';
    1a6e:	f109 0203 	add.w	r2, r9, #3
    1a72:	2366      	movs	r3, #102	; 0x66
    1a74:	f889 3002 	strb.w	r3, [r9, #2]
    1a78:	e7ec      	b.n	1a54 <encode_float+0xbc>
    1a7a:	f1a8 0841 	sub.w	r8, r8, #65	; 0x41
			if (isupper((unsigned char)c) != 0) {
    1a7e:	f1b8 0f19 	cmp.w	r8, #25
    1a82:	d80a      	bhi.n	1a9a <encode_float+0x102>
				*buf++ = 'N';
    1a84:	234e      	movs	r3, #78	; 0x4e
    1a86:	f889 3000 	strb.w	r3, [r9]
				*buf++ = 'A';
    1a8a:	2241      	movs	r2, #65	; 0x41
    1a8c:	f889 2001 	strb.w	r2, [r9, #1]
				*buf++ = 'N';
    1a90:	f109 0203 	add.w	r2, r9, #3
    1a94:	f889 3002 	strb.w	r3, [r9, #2]
    1a98:	e7dc      	b.n	1a54 <encode_float+0xbc>
				*buf++ = 'n';
    1a9a:	236e      	movs	r3, #110	; 0x6e
    1a9c:	f889 3000 	strb.w	r3, [r9]
				*buf++ = 'a';
    1aa0:	2261      	movs	r2, #97	; 0x61
    1aa2:	f889 2001 	strb.w	r2, [r9, #1]
				*buf++ = 'n';
    1aa6:	f109 0203 	add.w	r2, r9, #3
    1aaa:	f889 3002 	strb.w	r3, [r9, #2]
    1aae:	e7d1      	b.n	1a54 <encode_float+0xbc>
		c = 'f';
    1ab0:	f04f 0866 	mov.w	r8, #102	; 0x66
    1ab4:	e7a2      	b.n	19fc <encode_float+0x64>
				expo--;
    1ab6:	3c01      	subs	r4, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    1ab8:	9b04      	ldr	r3, [sp, #16]
    1aba:	9a05      	ldr	r2, [sp, #20]
    1abc:	18db      	adds	r3, r3, r3
    1abe:	4152      	adcs	r2, r2
    1ac0:	9304      	str	r3, [sp, #16]
    1ac2:	9205      	str	r2, [sp, #20]
    1ac4:	2a00      	cmp	r2, #0
    1ac6:	daf6      	bge.n	1ab6 <encode_float+0x11e>
    1ac8:	e7a8      	b.n	1a1c <encode_float+0x84>
		/*
		 * Make room to allow a multiplication by 5 without overflow.
		 * We test only the top part for faster code.
		 */
		do {
			fract >>= 1;
    1aca:	9b05      	ldr	r3, [sp, #20]
    1acc:	9a04      	ldr	r2, [sp, #16]
    1ace:	0852      	lsrs	r2, r2, #1
    1ad0:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
    1ad4:	085b      	lsrs	r3, r3, #1
    1ad6:	9204      	str	r2, [sp, #16]
    1ad8:	9305      	str	r3, [sp, #20]
			expo++;
    1ada:	4621      	mov	r1, r4
    1adc:	3401      	adds	r4, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    1ade:	f1b3 3f33 	cmp.w	r3, #858993459	; 0x33333333
    1ae2:	d2f2      	bcs.n	1aca <encode_float+0x132>

		/* Perform fract * 5 * 2 / 10 */
		fract *= 5U;
    1ae4:	009c      	lsls	r4, r3, #2
    1ae6:	ea44 7492 	orr.w	r4, r4, r2, lsr #30
    1aea:	0090      	lsls	r0, r2, #2
    1aec:	1880      	adds	r0, r0, r2
    1aee:	eb43 0304 	adc.w	r3, r3, r4
    1af2:	9004      	str	r0, [sp, #16]
    1af4:	9305      	str	r3, [sp, #20]
		expo++;
    1af6:	1c8c      	adds	r4, r1, #2
		decexp--;
    1af8:	3d01      	subs	r5, #1
	while (expo < -2) {
    1afa:	f114 0f02 	cmn.w	r4, #2
    1afe:	dbe4      	blt.n	1aca <encode_float+0x132>
    1b00:	e014      	b.n	1b2c <encode_float+0x194>
		/*
		 * Perform fract / 5 / 2 * 10.
		 * The +2 is there to do round the result of the division
		 * by 5 not to lose too much precision in extreme cases.
		 */
		fract += 2;
    1b02:	9b04      	ldr	r3, [sp, #16]
    1b04:	3302      	adds	r3, #2
    1b06:	9a05      	ldr	r2, [sp, #20]
    1b08:	f142 0200 	adc.w	r2, r2, #0
    1b0c:	9304      	str	r3, [sp, #16]
    1b0e:	9205      	str	r2, [sp, #20]
		_ldiv5(&fract);
    1b10:	a804      	add	r0, sp, #16
    1b12:	f007 fe75 	bl	9800 <_ldiv5>
		expo--;
    1b16:	3c01      	subs	r4, #1
		decexp++;
    1b18:	3501      	adds	r5, #1

		/* Bring back our fractional number to full scale */
		do {
			fract <<= 1;
    1b1a:	9904      	ldr	r1, [sp, #16]
    1b1c:	9b05      	ldr	r3, [sp, #20]
    1b1e:	1849      	adds	r1, r1, r1
    1b20:	415b      	adcs	r3, r3
    1b22:	9104      	str	r1, [sp, #16]
    1b24:	9305      	str	r3, [sp, #20]
			expo--;
    1b26:	3c01      	subs	r4, #1
		} while (!(fract & BIT_63));
    1b28:	2b00      	cmp	r3, #0
    1b2a:	daf6      	bge.n	1b1a <encode_float+0x182>
	while (expo > 0) {
    1b2c:	2c00      	cmp	r4, #0
    1b2e:	dce8      	bgt.n	1b02 <encode_float+0x16a>
	/*
	 * The binary fractional point is located somewhere above bit 63.
	 * Move it between bits 59 and 60 to give 4 bits of room to the
	 * integer part.
	 */
	fract >>= (4 - expo);
    1b30:	f1c4 0104 	rsb	r1, r4, #4
    1b34:	9a05      	ldr	r2, [sp, #20]
    1b36:	341c      	adds	r4, #28
    1b38:	f1a1 0020 	sub.w	r0, r1, #32
    1b3c:	9b04      	ldr	r3, [sp, #16]
    1b3e:	40cb      	lsrs	r3, r1
    1b40:	fa02 f404 	lsl.w	r4, r2, r4
    1b44:	4323      	orrs	r3, r4
    1b46:	fa22 f000 	lsr.w	r0, r2, r0
    1b4a:	4303      	orrs	r3, r0
    1b4c:	40ca      	lsrs	r2, r1
    1b4e:	9304      	str	r3, [sp, #16]
    1b50:	9205      	str	r2, [sp, #20]

	if ((c == 'g') || (c == 'G')) {
    1b52:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
    1b56:	d014      	beq.n	1b82 <encode_float+0x1ea>
    1b58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
    1b5c:	d011      	beq.n	1b82 <encode_float+0x1ea>
	bool prune_zero = false;
    1b5e:	f04f 0b00 	mov.w	fp, #0
			prune_zero = true;
		}
	}

	int decimals;
	if (c == 'f') {
    1b62:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
    1b66:	d02a      	beq.n	1bbe <encode_float+0x226>
		decimals = precision + decexp;
		if (decimals < 0) {
			decimals = 0;
		}
	} else {
		decimals = precision + 1;
    1b68:	f106 0a01 	add.w	sl, r6, #1
	}

	int digit_count = 16;
    1b6c:	2310      	movs	r3, #16
    1b6e:	9303      	str	r3, [sp, #12]

	if (decimals > 16) {
    1b70:	459a      	cmp	sl, r3
    1b72:	dd00      	ble.n	1b76 <encode_float+0x1de>
		decimals = 16;
    1b74:	469a      	mov	sl, r3
	}

	/* Round the value to the last digit being printed. */
	uint64_t round = BIT64(59); /* 0.5 */
    1b76:	2200      	movs	r2, #0
    1b78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    1b7c:	e9cd 2300 	strd	r2, r3, [sp]
	while (decimals--) {
    1b80:	e029      	b.n	1bd6 <encode_float+0x23e>
		if (decexp < (-4 + 1) || decexp > precision) {
    1b82:	f115 0f03 	cmn.w	r5, #3
    1b86:	db01      	blt.n	1b8c <encode_float+0x1f4>
    1b88:	42b5      	cmp	r5, r6
    1b8a:	dd11      	ble.n	1bb0 <encode_float+0x218>
			c += 'e' - 'g';  /* e or E */
    1b8c:	f1a8 0802 	sub.w	r8, r8, #2
    1b90:	fa5f f888 	uxtb.w	r8, r8
			if (precision > 0) {
    1b94:	2e00      	cmp	r6, #0
    1b96:	dd00      	ble.n	1b9a <encode_float+0x202>
				precision--;
    1b98:	3e01      	subs	r6, #1
		if (!conv->flag_hash && (precision > 0)) {
    1b9a:	783b      	ldrb	r3, [r7, #0]
    1b9c:	f3c3 1b40 	ubfx	fp, r3, #5, #1
    1ba0:	f013 0f20 	tst.w	r3, #32
    1ba4:	d108      	bne.n	1bb8 <encode_float+0x220>
    1ba6:	2e00      	cmp	r6, #0
    1ba8:	dddb      	ble.n	1b62 <encode_float+0x1ca>
			prune_zero = true;
    1baa:	f04f 0b01 	mov.w	fp, #1
    1bae:	e7d8      	b.n	1b62 <encode_float+0x1ca>
			precision -= decexp;
    1bb0:	1b76      	subs	r6, r6, r5
			c = 'f';
    1bb2:	f04f 0866 	mov.w	r8, #102	; 0x66
    1bb6:	e7f0      	b.n	1b9a <encode_float+0x202>
	bool prune_zero = false;
    1bb8:	f04f 0b00 	mov.w	fp, #0
    1bbc:	e7d1      	b.n	1b62 <encode_float+0x1ca>
		if (decimals < 0) {
    1bbe:	eb15 0a06 	adds.w	sl, r5, r6
    1bc2:	d5d3      	bpl.n	1b6c <encode_float+0x1d4>
	int digit_count = 16;
    1bc4:	2310      	movs	r3, #16
    1bc6:	9303      	str	r3, [sp, #12]
			decimals = 0;
    1bc8:	f04f 0a00 	mov.w	sl, #0
    1bcc:	e7d3      	b.n	1b76 <encode_float+0x1de>
		_ldiv10(&round);
    1bce:	4668      	mov	r0, sp
    1bd0:	f007 fe32 	bl	9838 <_ldiv10>
	while (decimals--) {
    1bd4:	46a2      	mov	sl, r4
    1bd6:	f10a 34ff 	add.w	r4, sl, #4294967295
    1bda:	f1ba 0f00 	cmp.w	sl, #0
    1bde:	d1f6      	bne.n	1bce <encode_float+0x236>
	}
	fract += round;
    1be0:	9b04      	ldr	r3, [sp, #16]
    1be2:	9a00      	ldr	r2, [sp, #0]
    1be4:	189b      	adds	r3, r3, r2
    1be6:	9a05      	ldr	r2, [sp, #20]
    1be8:	9901      	ldr	r1, [sp, #4]
    1bea:	eb42 0201 	adc.w	r2, r2, r1
    1bee:	9304      	str	r3, [sp, #16]
    1bf0:	9205      	str	r2, [sp, #20]
	/* Make sure rounding didn't make fract >= 1.0 */
	if (fract >= BIT64(60)) {
    1bf2:	f04f 31ff 	mov.w	r1, #4294967295
    1bf6:	4299      	cmp	r1, r3
    1bf8:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    1bfc:	4193      	sbcs	r3, r2
    1bfe:	d306      	bcc.n	1c0e <encode_float+0x276>
		_ldiv10(&fract);
		decexp++;
	}

	if (c == 'f') {
    1c00:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
    1c04:	d138      	bne.n	1c78 <encode_float+0x2e0>
		if (decexp > 0) {
    1c06:	2d00      	cmp	r5, #0
    1c08:	dd31      	ble.n	1c6e <encode_float+0x2d6>
	char *buf = bps;
    1c0a:	464c      	mov	r4, r9
    1c0c:	e00b      	b.n	1c26 <encode_float+0x28e>
		_ldiv10(&fract);
    1c0e:	a804      	add	r0, sp, #16
    1c10:	f007 fe12 	bl	9838 <_ldiv10>
		decexp++;
    1c14:	3501      	adds	r5, #1
    1c16:	e7f3      	b.n	1c00 <encode_float+0x268>
			/* Emit the digits above the decimal point. */
			while (decexp > 0 && digit_count > 0) {
				*buf++ = _get_digit(&fract, &digit_count);
    1c18:	a903      	add	r1, sp, #12
    1c1a:	a804      	add	r0, sp, #16
    1c1c:	f007 fe18 	bl	9850 <_get_digit>
    1c20:	f804 0b01 	strb.w	r0, [r4], #1
				decexp--;
    1c24:	3d01      	subs	r5, #1
			while (decexp > 0 && digit_count > 0) {
    1c26:	2d00      	cmp	r5, #0
    1c28:	dd02      	ble.n	1c30 <encode_float+0x298>
    1c2a:	9b03      	ldr	r3, [sp, #12]
    1c2c:	2b00      	cmp	r3, #0
    1c2e:	dcf3      	bgt.n	1c18 <encode_float+0x280>
			}

			conv->pad0_value = decexp;
    1c30:	607d      	str	r5, [r7, #4]

			decexp = 0;
    1c32:	4655      	mov	r5, sl
		}

		/* Emit the decimal point only if required by the alternative
		 * format, or if more digits are to follow.
		 */
		if (conv->flag_hash || (precision > 0)) {
    1c34:	783b      	ldrb	r3, [r7, #0]
    1c36:	f013 0f20 	tst.w	r3, #32
    1c3a:	d101      	bne.n	1c40 <encode_float+0x2a8>
    1c3c:	2e00      	cmp	r6, #0
    1c3e:	dd02      	ble.n	1c46 <encode_float+0x2ae>
			*buf++ = '.';
    1c40:	232e      	movs	r3, #46	; 0x2e
    1c42:	f804 3b01 	strb.w	r3, [r4], #1
		}

		if (decexp < 0 && precision > 0) {
    1c46:	2d00      	cmp	r5, #0
    1c48:	da33      	bge.n	1cb2 <encode_float+0x31a>
    1c4a:	2e00      	cmp	r6, #0
    1c4c:	dd31      	ble.n	1cb2 <encode_float+0x31a>
			conv->pad0_value = -decexp;
    1c4e:	426b      	negs	r3, r5
    1c50:	607b      	str	r3, [r7, #4]
			if (conv->pad0_value > precision) {
    1c52:	429e      	cmp	r6, r3
    1c54:	da00      	bge.n	1c58 <encode_float+0x2c0>
				conv->pad0_value = precision;
    1c56:	607e      	str	r6, [r7, #4]
			}

			precision -= conv->pad0_value;
    1c58:	687b      	ldr	r3, [r7, #4]
    1c5a:	1af6      	subs	r6, r6, r3
			conv->pad_postdp = (conv->pad0_value > 0);
    1c5c:	2b00      	cmp	r3, #0
    1c5e:	bfd4      	ite	le
    1c60:	2300      	movle	r3, #0
    1c62:	2301      	movgt	r3, #1
    1c64:	78ba      	ldrb	r2, [r7, #2]
    1c66:	f363 1245 	bfi	r2, r3, #5, #1
    1c6a:	70ba      	strb	r2, [r7, #2]
    1c6c:	e021      	b.n	1cb2 <encode_float+0x31a>
			*buf++ = '0';
    1c6e:	464c      	mov	r4, r9
    1c70:	2330      	movs	r3, #48	; 0x30
    1c72:	f804 3b01 	strb.w	r3, [r4], #1
    1c76:	e7dd      	b.n	1c34 <encode_float+0x29c>
		}
	} else { /* e or E */
		/* Emit the one digit before the decimal.  If it's not zero,
		 * this is significant so reduce the base-10 exponent.
		 */
		*buf = _get_digit(&fract, &digit_count);
    1c78:	a903      	add	r1, sp, #12
    1c7a:	a804      	add	r0, sp, #16
    1c7c:	f007 fde8 	bl	9850 <_get_digit>
    1c80:	464c      	mov	r4, r9
    1c82:	f804 0b01 	strb.w	r0, [r4], #1
		if (*buf++ != '0') {
    1c86:	2830      	cmp	r0, #48	; 0x30
    1c88:	d000      	beq.n	1c8c <encode_float+0x2f4>
			decexp--;
    1c8a:	3d01      	subs	r5, #1
		}

		/* Emit the decimal point only if required by the alternative
		 * format, or if more digits are to follow.
		 */
		if (conv->flag_hash || (precision > 0)) {
    1c8c:	783b      	ldrb	r3, [r7, #0]
    1c8e:	f013 0f20 	tst.w	r3, #32
    1c92:	d101      	bne.n	1c98 <encode_float+0x300>
    1c94:	2e00      	cmp	r6, #0
    1c96:	dd0c      	ble.n	1cb2 <encode_float+0x31a>
			*buf++ = '.';
    1c98:	f109 0402 	add.w	r4, r9, #2
    1c9c:	232e      	movs	r3, #46	; 0x2e
    1c9e:	f889 3001 	strb.w	r3, [r9, #1]
    1ca2:	e006      	b.n	1cb2 <encode_float+0x31a>
		}
	}

	while (precision > 0 && digit_count > 0) {
		*buf++ = _get_digit(&fract, &digit_count);
    1ca4:	a903      	add	r1, sp, #12
    1ca6:	a804      	add	r0, sp, #16
    1ca8:	f007 fdd2 	bl	9850 <_get_digit>
    1cac:	f804 0b01 	strb.w	r0, [r4], #1
		precision--;
    1cb0:	3e01      	subs	r6, #1
	while (precision > 0 && digit_count > 0) {
    1cb2:	2e00      	cmp	r6, #0
    1cb4:	dd02      	ble.n	1cbc <encode_float+0x324>
    1cb6:	9b03      	ldr	r3, [sp, #12]
    1cb8:	2b00      	cmp	r3, #0
    1cba:	dcf3      	bgt.n	1ca4 <encode_float+0x30c>
	}

	conv->pad0_pre_exp = precision;
    1cbc:	60be      	str	r6, [r7, #8]

	if (prune_zero) {
    1cbe:	f1bb 0f00 	cmp.w	fp, #0
    1cc2:	d009      	beq.n	1cd8 <encode_float+0x340>
		conv->pad0_pre_exp = 0;
    1cc4:	2300      	movs	r3, #0
    1cc6:	60bb      	str	r3, [r7, #8]
		while (*--buf == '0') {
    1cc8:	4623      	mov	r3, r4
    1cca:	461c      	mov	r4, r3
    1ccc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    1cd0:	2a30      	cmp	r2, #48	; 0x30
    1cd2:	d0fa      	beq.n	1cca <encode_float+0x332>
			;
		}
		if (*buf != '.') {
    1cd4:	2a2e      	cmp	r2, #46	; 0x2e
    1cd6:	d03d      	beq.n	1d54 <encode_float+0x3bc>
			buf++;
		}
	}

	/* Emit the explicit exponent, if format requires it. */
	if ((c == 'e') || (c == 'E')) {
    1cd8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
    1cdc:	d002      	beq.n	1ce4 <encode_float+0x34c>
    1cde:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
    1ce2:	d126      	bne.n	1d32 <encode_float+0x39a>
		*buf++ = c;
    1ce4:	f884 8000 	strb.w	r8, [r4]
		if (decexp < 0) {
    1ce8:	2d00      	cmp	r5, #0
    1cea:	db35      	blt.n	1d58 <encode_float+0x3c0>
			decexp = -decexp;
			*buf++ = '-';
		} else {
			*buf++ = '+';
    1cec:	1ca2      	adds	r2, r4, #2
    1cee:	232b      	movs	r3, #43	; 0x2b
    1cf0:	7063      	strb	r3, [r4, #1]
		}

		/* At most 3 digits to the decimal.  Spit them out. */
		if (decexp >= 100) {
    1cf2:	2d63      	cmp	r5, #99	; 0x63
    1cf4:	dd0c      	ble.n	1d10 <encode_float+0x378>
			*buf++ = (decexp / 100) + '0';
    1cf6:	491e      	ldr	r1, [pc, #120]	; (1d70 <encode_float+0x3d8>)
    1cf8:	fb81 3105 	smull	r3, r1, r1, r5
    1cfc:	17eb      	asrs	r3, r5, #31
    1cfe:	ebc3 1361 	rsb	r3, r3, r1, asr #5
    1d02:	f103 0130 	add.w	r1, r3, #48	; 0x30
    1d06:	f802 1b01 	strb.w	r1, [r2], #1
			decexp %= 100;
    1d0a:	2164      	movs	r1, #100	; 0x64
    1d0c:	fb01 5513 	mls	r5, r1, r3, r5
		}

		*buf++ = (decexp / 10) + '0';
    1d10:	4918      	ldr	r1, [pc, #96]	; (1d74 <encode_float+0x3dc>)
    1d12:	fb81 3105 	smull	r3, r1, r1, r5
    1d16:	17eb      	asrs	r3, r5, #31
    1d18:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
    1d1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
    1d20:	4614      	mov	r4, r2
    1d22:	f804 1b02 	strb.w	r1, [r4], #2
		*buf++ = (decexp % 10) + '0';
    1d26:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1d2a:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
    1d2e:	3330      	adds	r3, #48	; 0x30
    1d30:	7053      	strb	r3, [r2, #1]
	}

	/* Cache whether there's padding required */
	conv->pad_fp = (conv->pad0_value > 0)
    1d32:	687b      	ldr	r3, [r7, #4]
		|| (conv->pad0_pre_exp > 0);
    1d34:	2b00      	cmp	r3, #0
    1d36:	dd14      	ble.n	1d62 <encode_float+0x3ca>
    1d38:	f04f 0a01 	mov.w	sl, #1
	conv->pad_fp = (conv->pad0_value > 0)
    1d3c:	78bb      	ldrb	r3, [r7, #2]
    1d3e:	f36a 1386 	bfi	r3, sl, #6, #1
    1d42:	70bb      	strb	r3, [r7, #2]

	/* Set the end of the encoded sequence, and return its start.  Also
	 * store EOS as a non-digit/non-decimal value so we don't have to
	 * check against bpe when iterating in multiple places.
	 */
	*bpe = buf;
    1d44:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1d46:	601c      	str	r4, [r3, #0]
	*buf = 0;
    1d48:	2300      	movs	r3, #0
    1d4a:	7023      	strb	r3, [r4, #0]
	return bps;
}
    1d4c:	4648      	mov	r0, r9
    1d4e:	b007      	add	sp, #28
    1d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (*--buf == '0') {
    1d54:	461c      	mov	r4, r3
    1d56:	e7bf      	b.n	1cd8 <encode_float+0x340>
			decexp = -decexp;
    1d58:	426d      	negs	r5, r5
			*buf++ = '-';
    1d5a:	1ca2      	adds	r2, r4, #2
    1d5c:	232d      	movs	r3, #45	; 0x2d
    1d5e:	7063      	strb	r3, [r4, #1]
    1d60:	e7c7      	b.n	1cf2 <encode_float+0x35a>
		|| (conv->pad0_pre_exp > 0);
    1d62:	68bb      	ldr	r3, [r7, #8]
    1d64:	2b00      	cmp	r3, #0
    1d66:	dde9      	ble.n	1d3c <encode_float+0x3a4>
    1d68:	f04f 0a01 	mov.w	sl, #1
    1d6c:	e7e6      	b.n	1d3c <encode_float+0x3a4>
    1d6e:	bf00      	nop
    1d70:	51eb851f 	.word	0x51eb851f
    1d74:	66666667 	.word	0x66666667

00001d78 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    1d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d7c:	b097      	sub	sp, #92	; 0x5c
    1d7e:	4606      	mov	r6, r0
    1d80:	460d      	mov	r5, r1
    1d82:	4690      	mov	r8, r2
    1d84:	9305      	str	r3, [sp, #20]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1d86:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1d88:	f898 0000 	ldrb.w	r0, [r8]
    1d8c:	2800      	cmp	r0, #0
    1d8e:	f000 8345 	beq.w	241c <z_cbvprintf_impl+0x6a4>
		if (*fp != '%') {
    1d92:	2825      	cmp	r0, #37	; 0x25
    1d94:	d008      	beq.n	1da8 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
    1d96:	f108 0801 	add.w	r8, r8, #1
    1d9a:	4629      	mov	r1, r5
    1d9c:	47b0      	blx	r6
    1d9e:	2800      	cmp	r0, #0
    1da0:	f2c0 833d 	blt.w	241e <z_cbvprintf_impl+0x6a6>
    1da4:	3401      	adds	r4, #1
			continue;
    1da6:	e7ef      	b.n	1d88 <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    1da8:	2300      	movs	r3, #0
    1daa:	9308      	str	r3, [sp, #32]
    1dac:	9309      	str	r3, [sp, #36]	; 0x24
    1dae:	930a      	str	r3, [sp, #40]	; 0x28
    1db0:	930b      	str	r3, [sp, #44]	; 0x2c
    1db2:	930c      	str	r3, [sp, #48]	; 0x30
    1db4:	930d      	str	r3, [sp, #52]	; 0x34
		union argument_value *const value = &state.value;
		const char *sp = fp;
		int width = -1;
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
    1db6:	f10d 0255 	add.w	r2, sp, #85	; 0x55
    1dba:	9207      	str	r2, [sp, #28]
		char sign = 0;
    1dbc:	f88d 301b 	strb.w	r3, [sp, #27]

		fp = extract_conversion(conv, sp);
    1dc0:	4641      	mov	r1, r8
    1dc2:	a80a      	add	r0, sp, #40	; 0x28
    1dc4:	f007 fcfa 	bl	97bc <extract_conversion>
    1dc8:	4681      	mov	r9, r0

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    1dca:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    1dce:	f013 0f01 	tst.w	r3, #1
    1dd2:	f000 809e 	beq.w	1f12 <z_cbvprintf_impl+0x19a>
			width = va_arg(ap, int);
    1dd6:	9b05      	ldr	r3, [sp, #20]
    1dd8:	1d1a      	adds	r2, r3, #4
    1dda:	9205      	str	r2, [sp, #20]
    1ddc:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    1dde:	2f00      	cmp	r7, #0
    1de0:	f2c0 808f 	blt.w	1f02 <z_cbvprintf_impl+0x18a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    1de4:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    1de8:	f013 0f04 	tst.w	r3, #4
    1dec:	f000 80a3 	beq.w	1f36 <z_cbvprintf_impl+0x1be>
			int arg = va_arg(ap, int);
    1df0:	9b05      	ldr	r3, [sp, #20]
    1df2:	1d1a      	adds	r2, r3, #4
    1df4:	9205      	str	r2, [sp, #20]
    1df6:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    1dfa:	f1ba 0f00 	cmp.w	sl, #0
    1dfe:	f2c0 8091 	blt.w	1f24 <z_cbvprintf_impl+0x1ac>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    1e02:	2300      	movs	r3, #0
    1e04:	930b      	str	r3, [sp, #44]	; 0x2c
		conv->pad0_pre_exp = 0;
    1e06:	930c      	str	r3, [sp, #48]	; 0x30

		/* FP conversion requires knowing the precision. */
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
		    && (conv->specifier_cat == SPECIFIER_FP)
    1e08:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    1e0c:	f003 0307 	and.w	r3, r3, #7
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    1e10:	2b04      	cmp	r3, #4
    1e12:	f000 8099 	beq.w	1f48 <z_cbvprintf_impl+0x1d0>
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    1e16:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    1e1a:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    1e1e:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
    1e22:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    1e26:	2b01      	cmp	r3, #1
    1e28:	f000 809e 	beq.w	1f68 <z_cbvprintf_impl+0x1f0>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    1e2c:	2b02      	cmp	r3, #2
    1e2e:	f000 80e3 	beq.w	1ff8 <z_cbvprintf_impl+0x280>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    1e32:	2b04      	cmp	r3, #4
    1e34:	f000 8134 	beq.w	20a0 <z_cbvprintf_impl+0x328>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    1e38:	2b03      	cmp	r3, #3
    1e3a:	f000 814b 	beq.w	20d4 <z_cbvprintf_impl+0x35c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    1e3e:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
    1e42:	f012 0f03 	tst.w	r2, #3
    1e46:	f040 814b 	bne.w	20e0 <z_cbvprintf_impl+0x368>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    1e4a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    1e4e:	3b25      	subs	r3, #37	; 0x25
    1e50:	2b53      	cmp	r3, #83	; 0x53
    1e52:	f200 81fc 	bhi.w	224e <z_cbvprintf_impl+0x4d6>
    1e56:	e8df f013 	tbh	[pc, r3, lsl #1]
    1e5a:	014f      	.short	0x014f
    1e5c:	01fa01fa 	.word	0x01fa01fa
    1e60:	01fa01fa 	.word	0x01fa01fa
    1e64:	01fa01fa 	.word	0x01fa01fa
    1e68:	01fa01fa 	.word	0x01fa01fa
    1e6c:	01fa01fa 	.word	0x01fa01fa
    1e70:	01fa01fa 	.word	0x01fa01fa
    1e74:	01fa01fa 	.word	0x01fa01fa
    1e78:	01fa01fa 	.word	0x01fa01fa
    1e7c:	01fa01fa 	.word	0x01fa01fa
    1e80:	01fa01fa 	.word	0x01fa01fa
    1e84:	01fa01fa 	.word	0x01fa01fa
    1e88:	01fa01fa 	.word	0x01fa01fa
    1e8c:	01fa01fa 	.word	0x01fa01fa
    1e90:	01fc01fa 	.word	0x01fc01fa
    1e94:	01fa01fa 	.word	0x01fa01fa
    1e98:	01fc01fa 	.word	0x01fc01fa
    1e9c:	01fc01fc 	.word	0x01fc01fc
    1ea0:	01fa01fa 	.word	0x01fa01fa
    1ea4:	01fa01fa 	.word	0x01fa01fa
    1ea8:	01fa01fa 	.word	0x01fa01fa
    1eac:	01fa01fa 	.word	0x01fa01fa
    1eb0:	01fa01fa 	.word	0x01fa01fa
    1eb4:	01fa01fa 	.word	0x01fa01fa
    1eb8:	01fa01fa 	.word	0x01fa01fa
    1ebc:	01fa01fa 	.word	0x01fa01fa
    1ec0:	01fa01b1 	.word	0x01fa01b1
    1ec4:	01fa01fa 	.word	0x01fa01fa
    1ec8:	01fa01fa 	.word	0x01fa01fa
    1ecc:	01fa01fa 	.word	0x01fa01fa
    1ed0:	01fc01fa 	.word	0x01fc01fa
    1ed4:	019c01fa 	.word	0x019c01fa
    1ed8:	01fc01a5 	.word	0x01fc01a5
    1edc:	01fc01fc 	.word	0x01fc01fc
    1ee0:	01a501fa 	.word	0x01a501fa
    1ee4:	01fa01fa 	.word	0x01fa01fa
    1ee8:	01fa01fa 	.word	0x01fa01fa
    1eec:	01b101f5 	.word	0x01b101f5
    1ef0:	01fa01dc 	.word	0x01fa01dc
    1ef4:	015701fa 	.word	0x015701fa
    1ef8:	01b101fa 	.word	0x01b101fa
    1efc:	01fa01fa 	.word	0x01fa01fa
    1f00:	01b1      	.short	0x01b1
				conv->flag_dash = true;
    1f02:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    1f06:	f043 0304 	orr.w	r3, r3, #4
    1f0a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
				width = -width;
    1f0e:	427f      	negs	r7, r7
    1f10:	e768      	b.n	1de4 <z_cbvprintf_impl+0x6c>
		} else if (conv->width_present) {
    1f12:	f99d 3028 	ldrsb.w	r3, [sp, #40]	; 0x28
    1f16:	2b00      	cmp	r3, #0
    1f18:	db02      	blt.n	1f20 <z_cbvprintf_impl+0x1a8>
		int width = -1;
    1f1a:	f04f 37ff 	mov.w	r7, #4294967295
    1f1e:	e761      	b.n	1de4 <z_cbvprintf_impl+0x6c>
			width = conv->width_value;
    1f20:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    1f22:	e75f      	b.n	1de4 <z_cbvprintf_impl+0x6c>
				conv->prec_present = false;
    1f24:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    1f28:	f36f 0341 	bfc	r3, #1, #1
    1f2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
		int precision = -1;
    1f30:	f04f 3aff 	mov.w	sl, #4294967295
    1f34:	e765      	b.n	1e02 <z_cbvprintf_impl+0x8a>
		} else if (conv->prec_present) {
    1f36:	f013 0f02 	tst.w	r3, #2
    1f3a:	d002      	beq.n	1f42 <z_cbvprintf_impl+0x1ca>
			precision = conv->prec_value;
    1f3c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    1f40:	e75f      	b.n	1e02 <z_cbvprintf_impl+0x8a>
		int precision = -1;
    1f42:	f04f 3aff 	mov.w	sl, #4294967295
    1f46:	e75c      	b.n	1e02 <z_cbvprintf_impl+0x8a>
		    && !conv->prec_present) {
    1f48:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    1f4c:	f013 0f02 	tst.w	r3, #2
    1f50:	f47f af61 	bne.w	1e16 <z_cbvprintf_impl+0x9e>
			if (conv->specifier_a) {
    1f54:	f99d 3029 	ldrsb.w	r3, [sp, #41]	; 0x29
    1f58:	2b00      	cmp	r3, #0
    1f5a:	db02      	blt.n	1f62 <z_cbvprintf_impl+0x1ea>
				precision = 6;
    1f5c:	f04f 0a06 	mov.w	sl, #6
    1f60:	e759      	b.n	1e16 <z_cbvprintf_impl+0x9e>
				precision = FRACTION_HEX;
    1f62:	f04f 0a0d 	mov.w	sl, #13
    1f66:	e756      	b.n	1e16 <z_cbvprintf_impl+0x9e>
			switch (length_mod) {
    1f68:	1ecb      	subs	r3, r1, #3
    1f6a:	2b04      	cmp	r3, #4
    1f6c:	d804      	bhi.n	1f78 <z_cbvprintf_impl+0x200>
    1f6e:	e8df f003 	tbb	[pc, r3]
    1f72:	1d0b      	.short	0x1d0b
    1f74:	3529      	.short	0x3529
    1f76:	35          	.byte	0x35
    1f77:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    1f78:	9b05      	ldr	r3, [sp, #20]
    1f7a:	1d1a      	adds	r2, r3, #4
    1f7c:	9205      	str	r2, [sp, #20]
    1f7e:	681b      	ldr	r3, [r3, #0]
    1f80:	17da      	asrs	r2, r3, #31
    1f82:	9308      	str	r3, [sp, #32]
    1f84:	9209      	str	r2, [sp, #36]	; 0x24
				break;
    1f86:	e006      	b.n	1f96 <z_cbvprintf_impl+0x21e>
					value->sint = va_arg(ap, long);
    1f88:	9b05      	ldr	r3, [sp, #20]
    1f8a:	1d1a      	adds	r2, r3, #4
    1f8c:	9205      	str	r2, [sp, #20]
    1f8e:	681b      	ldr	r3, [r3, #0]
    1f90:	17da      	asrs	r2, r3, #31
    1f92:	9308      	str	r3, [sp, #32]
    1f94:	9209      	str	r2, [sp, #36]	; 0x24
			if (length_mod == LENGTH_HH) {
    1f96:	2901      	cmp	r1, #1
    1f98:	d028      	beq.n	1fec <z_cbvprintf_impl+0x274>
			} else if (length_mod == LENGTH_H) {
    1f9a:	2902      	cmp	r1, #2
    1f9c:	f47f af4f 	bne.w	1e3e <z_cbvprintf_impl+0xc6>
				value->sint = (short)value->sint;
    1fa0:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
    1fa4:	17da      	asrs	r2, r3, #31
    1fa6:	9308      	str	r3, [sp, #32]
    1fa8:	9209      	str	r2, [sp, #36]	; 0x24
    1faa:	e748      	b.n	1e3e <z_cbvprintf_impl+0xc6>
					(sint_value_type)va_arg(ap, long long);
    1fac:	9b05      	ldr	r3, [sp, #20]
    1fae:	3307      	adds	r3, #7
    1fb0:	f023 0307 	bic.w	r3, r3, #7
    1fb4:	f103 0208 	add.w	r2, r3, #8
    1fb8:	9205      	str	r2, [sp, #20]
    1fba:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    1fbe:	e9cd 2308 	strd	r2, r3, [sp, #32]
				break;
    1fc2:	e7e8      	b.n	1f96 <z_cbvprintf_impl+0x21e>
					(sint_value_type)va_arg(ap, intmax_t);
    1fc4:	9b05      	ldr	r3, [sp, #20]
    1fc6:	3307      	adds	r3, #7
    1fc8:	f023 0307 	bic.w	r3, r3, #7
    1fcc:	f103 0208 	add.w	r2, r3, #8
    1fd0:	9205      	str	r2, [sp, #20]
    1fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    1fd6:	e9cd 2308 	strd	r2, r3, [sp, #32]
				break;
    1fda:	e7dc      	b.n	1f96 <z_cbvprintf_impl+0x21e>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1fdc:	9b05      	ldr	r3, [sp, #20]
    1fde:	1d1a      	adds	r2, r3, #4
    1fe0:	9205      	str	r2, [sp, #20]
    1fe2:	681b      	ldr	r3, [r3, #0]
    1fe4:	17da      	asrs	r2, r3, #31
				value->sint =
    1fe6:	9308      	str	r3, [sp, #32]
    1fe8:	9209      	str	r2, [sp, #36]	; 0x24
				break;
    1fea:	e7d4      	b.n	1f96 <z_cbvprintf_impl+0x21e>
				value->sint = (signed char)value->sint;
    1fec:	f99d 3020 	ldrsb.w	r3, [sp, #32]
    1ff0:	17da      	asrs	r2, r3, #31
    1ff2:	9308      	str	r3, [sp, #32]
    1ff4:	9209      	str	r2, [sp, #36]	; 0x24
    1ff6:	e722      	b.n	1e3e <z_cbvprintf_impl+0xc6>
			switch (length_mod) {
    1ff8:	1ecb      	subs	r3, r1, #3
    1ffa:	2b04      	cmp	r3, #4
    1ffc:	d804      	bhi.n	2008 <z_cbvprintf_impl+0x290>
    1ffe:	e8df f003 	tbb	[pc, r3]
    2002:	1f0b      	.short	0x1f0b
    2004:	4135      	.short	0x4135
    2006:	41          	.byte	0x41
    2007:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    2008:	9b05      	ldr	r3, [sp, #20]
    200a:	1d1a      	adds	r2, r3, #4
    200c:	9205      	str	r2, [sp, #20]
    200e:	681b      	ldr	r3, [r3, #0]
    2010:	9308      	str	r3, [sp, #32]
    2012:	2300      	movs	r3, #0
    2014:	9309      	str	r3, [sp, #36]	; 0x24
				break;
    2016:	e01e      	b.n	2056 <z_cbvprintf_impl+0x2de>
				    && (conv->specifier == 'c')) {
    2018:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
				if ((!WCHAR_IS_SIGNED)
    201c:	2b63      	cmp	r3, #99	; 0x63
    201e:	d007      	beq.n	2030 <z_cbvprintf_impl+0x2b8>
					value->uint = va_arg(ap, unsigned long);
    2020:	9b05      	ldr	r3, [sp, #20]
    2022:	1d1a      	adds	r2, r3, #4
    2024:	9205      	str	r2, [sp, #20]
    2026:	681b      	ldr	r3, [r3, #0]
    2028:	9308      	str	r3, [sp, #32]
    202a:	2300      	movs	r3, #0
    202c:	9309      	str	r3, [sp, #36]	; 0x24
    202e:	e012      	b.n	2056 <z_cbvprintf_impl+0x2de>
					value->uint = (wchar_t)va_arg(ap,
    2030:	9b05      	ldr	r3, [sp, #20]
    2032:	1d1a      	adds	r2, r3, #4
    2034:	9205      	str	r2, [sp, #20]
    2036:	681b      	ldr	r3, [r3, #0]
    2038:	9308      	str	r3, [sp, #32]
    203a:	2300      	movs	r3, #0
    203c:	9309      	str	r3, [sp, #36]	; 0x24
    203e:	e00a      	b.n	2056 <z_cbvprintf_impl+0x2de>
					(uint_value_type)va_arg(ap,
    2040:	9b05      	ldr	r3, [sp, #20]
    2042:	3307      	adds	r3, #7
    2044:	f023 0307 	bic.w	r3, r3, #7
    2048:	f103 0208 	add.w	r2, r3, #8
    204c:	9205      	str	r2, [sp, #20]
    204e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    2052:	e9cd 2308 	strd	r2, r3, [sp, #32]
			if (length_mod == LENGTH_HH) {
    2056:	2901      	cmp	r1, #1
    2058:	d01c      	beq.n	2094 <z_cbvprintf_impl+0x31c>
			} else if (length_mod == LENGTH_H) {
    205a:	2902      	cmp	r1, #2
    205c:	f47f aeef 	bne.w	1e3e <z_cbvprintf_impl+0xc6>
				value->uint = (unsigned short)value->uint;
    2060:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    2064:	9308      	str	r3, [sp, #32]
    2066:	2300      	movs	r3, #0
    2068:	9309      	str	r3, [sp, #36]	; 0x24
    206a:	e6e8      	b.n	1e3e <z_cbvprintf_impl+0xc6>
					(uint_value_type)va_arg(ap,
    206c:	9b05      	ldr	r3, [sp, #20]
    206e:	3307      	adds	r3, #7
    2070:	f023 0307 	bic.w	r3, r3, #7
    2074:	f103 0208 	add.w	r2, r3, #8
    2078:	9205      	str	r2, [sp, #20]
    207a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    207e:	e9cd 2308 	strd	r2, r3, [sp, #32]
				break;
    2082:	e7e8      	b.n	2056 <z_cbvprintf_impl+0x2de>
					(uint_value_type)va_arg(ap, size_t);
    2084:	9b05      	ldr	r3, [sp, #20]
    2086:	1d1a      	adds	r2, r3, #4
    2088:	9205      	str	r2, [sp, #20]
    208a:	681b      	ldr	r3, [r3, #0]
				value->uint =
    208c:	9308      	str	r3, [sp, #32]
    208e:	2300      	movs	r3, #0
    2090:	9309      	str	r3, [sp, #36]	; 0x24
				break;
    2092:	e7e0      	b.n	2056 <z_cbvprintf_impl+0x2de>
				value->uint = (unsigned char)value->uint;
    2094:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2098:	9308      	str	r3, [sp, #32]
    209a:	2300      	movs	r3, #0
    209c:	9309      	str	r3, [sp, #36]	; 0x24
    209e:	e6ce      	b.n	1e3e <z_cbvprintf_impl+0xc6>
			if (length_mod == LENGTH_UPPER_L) {
    20a0:	2908      	cmp	r1, #8
    20a2:	d00b      	beq.n	20bc <z_cbvprintf_impl+0x344>
				value->dbl = va_arg(ap, double);
    20a4:	9b05      	ldr	r3, [sp, #20]
    20a6:	3307      	adds	r3, #7
    20a8:	f023 0307 	bic.w	r3, r3, #7
    20ac:	f103 0208 	add.w	r2, r3, #8
    20b0:	9205      	str	r2, [sp, #20]
    20b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    20b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
    20ba:	e6c0      	b.n	1e3e <z_cbvprintf_impl+0xc6>
				value->ldbl = va_arg(ap, long double);
    20bc:	9b05      	ldr	r3, [sp, #20]
    20be:	3307      	adds	r3, #7
    20c0:	f023 0307 	bic.w	r3, r3, #7
    20c4:	f103 0208 	add.w	r2, r3, #8
    20c8:	9205      	str	r2, [sp, #20]
    20ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    20ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
    20d2:	e6b4      	b.n	1e3e <z_cbvprintf_impl+0xc6>
			value->ptr = va_arg(ap, void *);
    20d4:	9b05      	ldr	r3, [sp, #20]
    20d6:	1d1a      	adds	r2, r3, #4
    20d8:	9205      	str	r2, [sp, #20]
    20da:	681b      	ldr	r3, [r3, #0]
    20dc:	9308      	str	r3, [sp, #32]
    20de:	e6ae      	b.n	1e3e <z_cbvprintf_impl+0xc6>
			OUTS(sp, fp);
    20e0:	464b      	mov	r3, r9
    20e2:	4642      	mov	r2, r8
    20e4:	4629      	mov	r1, r5
    20e6:	4630      	mov	r0, r6
    20e8:	f007 fc54 	bl	9994 <outs>
    20ec:	2800      	cmp	r0, #0
    20ee:	f2c0 8196 	blt.w	241e <z_cbvprintf_impl+0x6a6>
    20f2:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    20f4:	46c8      	mov	r8, r9
			continue;
    20f6:	e647      	b.n	1d88 <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
    20f8:	4629      	mov	r1, r5
    20fa:	2025      	movs	r0, #37	; 0x25
    20fc:	47b0      	blx	r6
    20fe:	2800      	cmp	r0, #0
    2100:	f2c0 818d 	blt.w	241e <z_cbvprintf_impl+0x6a6>
    2104:	3401      	adds	r4, #1
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    2106:	e0a2      	b.n	224e <z_cbvprintf_impl+0x4d6>
			bps = (const char *)value->ptr;
    2108:	f8dd 8020 	ldr.w	r8, [sp, #32]
			if (precision >= 0) {
    210c:	f1ba 0f00 	cmp.w	sl, #0
    2110:	db3b      	blt.n	218a <z_cbvprintf_impl+0x412>
				len = strnlen(bps, precision);
    2112:	4651      	mov	r1, sl
    2114:	4640      	mov	r0, r8
    2116:	f008 f999 	bl	a44c <strnlen>
			bpe = bps + len;
    211a:	4440      	add	r0, r8
    211c:	9007      	str	r0, [sp, #28]
		if (bps == NULL) {
    211e:	f1b8 0f00 	cmp.w	r8, #0
    2122:	f000 8094 	beq.w	224e <z_cbvprintf_impl+0x4d6>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    2126:	9b07      	ldr	r3, [sp, #28]
    2128:	eba3 0308 	sub.w	r3, r3, r8
		int pad_len = 0;

		if (sign != 0) {
    212c:	f89d 001b 	ldrb.w	r0, [sp, #27]
    2130:	b100      	cbz	r0, 2134 <z_cbvprintf_impl+0x3bc>
			nj_len += 1U;
    2132:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
    2134:	f89d 102a 	ldrb.w	r1, [sp, #42]	; 0x2a
    2138:	f011 0f10 	tst.w	r1, #16
    213c:	f000 8098 	beq.w	2270 <z_cbvprintf_impl+0x4f8>
			nj_len += 2U;
    2140:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    2142:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2144:	4413      	add	r3, r2
		if (conv->pad_fp) {
    2146:	f011 0f40 	tst.w	r1, #64	; 0x40
    214a:	d001      	beq.n	2150 <z_cbvprintf_impl+0x3d8>
			nj_len += conv->pad0_pre_exp;
    214c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    214e:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    2150:	2f00      	cmp	r7, #0
    2152:	f340 80a5 	ble.w	22a0 <z_cbvprintf_impl+0x528>
			width -= (int)nj_len;
    2156:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    2158:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    215c:	f013 0f04 	tst.w	r3, #4
    2160:	f040 809e 	bne.w	22a0 <z_cbvprintf_impl+0x528>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    2164:	f013 0f40 	tst.w	r3, #64	; 0x40
    2168:	f000 8093 	beq.w	2292 <z_cbvprintf_impl+0x51a>
					if (sign != 0) {
    216c:	2800      	cmp	r0, #0
    216e:	f000 8093 	beq.w	2298 <z_cbvprintf_impl+0x520>
						OUTC(sign);
    2172:	4629      	mov	r1, r5
    2174:	47b0      	blx	r6
    2176:	2800      	cmp	r0, #0
    2178:	f2c0 8151 	blt.w	241e <z_cbvprintf_impl+0x6a6>
    217c:	3401      	adds	r4, #1
						sign = 0;
    217e:	2300      	movs	r3, #0
    2180:	f88d 301b 	strb.w	r3, [sp, #27]
					}
					pad = '0';
    2184:	f04f 0a30 	mov.w	sl, #48	; 0x30
    2188:	e088      	b.n	229c <z_cbvprintf_impl+0x524>
				len = strlen(bps);
    218a:	4640      	mov	r0, r8
    218c:	f008 f955 	bl	a43a <strlen>
    2190:	e7c3      	b.n	211a <z_cbvprintf_impl+0x3a2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    2192:	9b08      	ldr	r3, [sp, #32]
    2194:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
			bpe = buf + 1;
    2198:	f10d 033d 	add.w	r3, sp, #61	; 0x3d
    219c:	9307      	str	r3, [sp, #28]
			bps = buf;
    219e:	f10d 083c 	add.w	r8, sp, #60	; 0x3c
    21a2:	e7c0      	b.n	2126 <z_cbvprintf_impl+0x3ae>
			if (conv->flag_plus) {
    21a4:	f012 0f08 	tst.w	r2, #8
    21a8:	d023      	beq.n	21f2 <z_cbvprintf_impl+0x47a>
				sign = '+';
    21aa:	232b      	movs	r3, #43	; 0x2b
    21ac:	f88d 301b 	strb.w	r3, [sp, #27]
			sint = value->sint;
    21b0:	9a08      	ldr	r2, [sp, #32]
    21b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
			if (sint < 0) {
    21b4:	2b00      	cmp	r3, #0
    21b6:	db23      	blt.n	2200 <z_cbvprintf_impl+0x488>
				value->uint = (uint_value_type)sint;
    21b8:	9208      	str	r2, [sp, #32]
    21ba:	9309      	str	r3, [sp, #36]	; 0x24
			bps = encode_uint(value->uint, conv, buf, bpe);
    21bc:	9b07      	ldr	r3, [sp, #28]
    21be:	9300      	str	r3, [sp, #0]
    21c0:	ab0f      	add	r3, sp, #60	; 0x3c
    21c2:	aa0a      	add	r2, sp, #40	; 0x28
    21c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    21c8:	f007 fb75 	bl	98b6 <encode_uint>
    21cc:	4680      	mov	r8, r0
			if (precision >= 0) {
    21ce:	f1ba 0f00 	cmp.w	sl, #0
    21d2:	dba4      	blt.n	211e <z_cbvprintf_impl+0x3a6>
				size_t len = bpe - bps;
    21d4:	9b07      	ldr	r3, [sp, #28]
    21d6:	eba3 0308 	sub.w	r3, r3, r8
				conv->flag_zero = false;
    21da:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
    21de:	f36f 1286 	bfc	r2, #6, #1
    21e2:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
				if (len < (size_t)precision) {
    21e6:	459a      	cmp	sl, r3
    21e8:	d999      	bls.n	211e <z_cbvprintf_impl+0x3a6>
					conv->pad0_value = precision - (int)len;
    21ea:	ebaa 0303 	sub.w	r3, sl, r3
    21ee:	930b      	str	r3, [sp, #44]	; 0x2c
    21f0:	e795      	b.n	211e <z_cbvprintf_impl+0x3a6>
			} else if (conv->flag_space) {
    21f2:	f012 0f10 	tst.w	r2, #16
    21f6:	d0db      	beq.n	21b0 <z_cbvprintf_impl+0x438>
				sign = ' ';
    21f8:	2320      	movs	r3, #32
    21fa:	f88d 301b 	strb.w	r3, [sp, #27]
    21fe:	e7d7      	b.n	21b0 <z_cbvprintf_impl+0x438>
				sign = '-';
    2200:	212d      	movs	r1, #45	; 0x2d
    2202:	f88d 101b 	strb.w	r1, [sp, #27]
				value->uint = (uint_value_type)-sint;
    2206:	4252      	negs	r2, r2
    2208:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    220c:	9208      	str	r2, [sp, #32]
    220e:	9309      	str	r3, [sp, #36]	; 0x24
    2210:	e7d4      	b.n	21bc <z_cbvprintf_impl+0x444>
			if (value->ptr != NULL) {
    2212:	9808      	ldr	r0, [sp, #32]
    2214:	b920      	cbnz	r0, 2220 <z_cbvprintf_impl+0x4a8>
			bpe = bps + 5;
    2216:	4b83      	ldr	r3, [pc, #524]	; (2424 <z_cbvprintf_impl+0x6ac>)
    2218:	9307      	str	r3, [sp, #28]
			bps = "(nil)";
    221a:	f1a3 0805 	sub.w	r8, r3, #5
    221e:	e782      	b.n	2126 <z_cbvprintf_impl+0x3ae>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2220:	9b07      	ldr	r3, [sp, #28]
    2222:	9300      	str	r3, [sp, #0]
    2224:	ab0f      	add	r3, sp, #60	; 0x3c
    2226:	aa0a      	add	r2, sp, #40	; 0x28
    2228:	2100      	movs	r1, #0
    222a:	f007 fb44 	bl	98b6 <encode_uint>
    222e:	4680      	mov	r8, r0
				conv->altform_0c = true;
    2230:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    2234:	f043 0310 	orr.w	r3, r3, #16
    2238:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
				conv->specifier = 'x';
    223c:	2378      	movs	r3, #120	; 0x78
    223e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
				goto prec_int_pad0;
    2242:	e7c4      	b.n	21ce <z_cbvprintf_impl+0x456>
				store_count(conv, value->ptr, count);
    2244:	4622      	mov	r2, r4
    2246:	9908      	ldr	r1, [sp, #32]
    2248:	a80a      	add	r0, sp, #40	; 0x28
    224a:	f007 fb84 	bl	9956 <store_count>
		fp = extract_conversion(conv, sp);
    224e:	46c8      	mov	r8, r9
			continue;
    2250:	e59a      	b.n	1d88 <z_cbvprintf_impl+0x10>
				bps = encode_float(value->dbl, conv, precision,
    2252:	ab07      	add	r3, sp, #28
    2254:	9302      	str	r3, [sp, #8]
    2256:	ab0f      	add	r3, sp, #60	; 0x3c
    2258:	9301      	str	r3, [sp, #4]
    225a:	f10d 031b 	add.w	r3, sp, #27
    225e:	9300      	str	r3, [sp, #0]
    2260:	4653      	mov	r3, sl
    2262:	aa0a      	add	r2, sp, #40	; 0x28
    2264:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    2268:	f7ff fb96 	bl	1998 <encode_float>
    226c:	4680      	mov	r8, r0
			break;
    226e:	e756      	b.n	211e <z_cbvprintf_impl+0x3a6>
		} else if (conv->altform_0) {
    2270:	f011 0f08 	tst.w	r1, #8
    2274:	f43f af65 	beq.w	2142 <z_cbvprintf_impl+0x3ca>
			nj_len += 1U;
    2278:	3301      	adds	r3, #1
    227a:	e762      	b.n	2142 <z_cbvprintf_impl+0x3ca>
				}

				while (width-- > 0) {
					OUTC(pad);
    227c:	3401      	adds	r4, #1
				while (width-- > 0) {
    227e:	463b      	mov	r3, r7
    2280:	1e5f      	subs	r7, r3, #1
    2282:	2b00      	cmp	r3, #0
    2284:	dd0c      	ble.n	22a0 <z_cbvprintf_impl+0x528>
					OUTC(pad);
    2286:	4629      	mov	r1, r5
    2288:	4650      	mov	r0, sl
    228a:	47b0      	blx	r6
    228c:	2800      	cmp	r0, #0
    228e:	daf5      	bge.n	227c <z_cbvprintf_impl+0x504>
    2290:	e0c5      	b.n	241e <z_cbvprintf_impl+0x6a6>
				char pad = ' ';
    2292:	f04f 0a20 	mov.w	sl, #32
    2296:	e001      	b.n	229c <z_cbvprintf_impl+0x524>
					pad = '0';
    2298:	f04f 0a30 	mov.w	sl, #48	; 0x30
    229c:	463b      	mov	r3, r7
    229e:	e7ef      	b.n	2280 <z_cbvprintf_impl+0x508>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    22a0:	f89d 001b 	ldrb.w	r0, [sp, #27]
    22a4:	b128      	cbz	r0, 22b2 <z_cbvprintf_impl+0x53a>
			OUTC(sign);
    22a6:	4629      	mov	r1, r5
    22a8:	47b0      	blx	r6
    22aa:	2800      	cmp	r0, #0
    22ac:	f2c0 80b7 	blt.w	241e <z_cbvprintf_impl+0x6a6>
    22b0:	3401      	adds	r4, #1
		}

		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    22b2:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    22b6:	f013 0f40 	tst.w	r3, #64	; 0x40
    22ba:	d072      	beq.n	23a2 <z_cbvprintf_impl+0x62a>
			const char *cp = bps;

			if (conv->specifier_a) {
    22bc:	f99d 3029 	ldrsb.w	r3, [sp, #41]	; 0x29
    22c0:	2b00      	cmp	r3, #0
    22c2:	db0e      	blt.n	22e2 <z_cbvprintf_impl+0x56a>
				/* Only padding is pre_exp */
				while (*cp != 'p') {
					OUTC(*cp++);
				}
			} else {
				while (isdigit((unsigned char)*cp) != 0) {
    22c4:	f898 0000 	ldrb.w	r0, [r8]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    22c8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    22cc:	2b09      	cmp	r3, #9
    22ce:	d815      	bhi.n	22fc <z_cbvprintf_impl+0x584>
					OUTC(*cp++);
    22d0:	f108 0801 	add.w	r8, r8, #1
    22d4:	4629      	mov	r1, r5
    22d6:	47b0      	blx	r6
    22d8:	2800      	cmp	r0, #0
    22da:	f2c0 80a0 	blt.w	241e <z_cbvprintf_impl+0x6a6>
    22de:	3401      	adds	r4, #1
    22e0:	e7f0      	b.n	22c4 <z_cbvprintf_impl+0x54c>
				while (*cp != 'p') {
    22e2:	f898 0000 	ldrb.w	r0, [r8]
    22e6:	2870      	cmp	r0, #112	; 0x70
    22e8:	d044      	beq.n	2374 <z_cbvprintf_impl+0x5fc>
					OUTC(*cp++);
    22ea:	f108 0801 	add.w	r8, r8, #1
    22ee:	4629      	mov	r1, r5
    22f0:	47b0      	blx	r6
    22f2:	2800      	cmp	r0, #0
    22f4:	f2c0 8093 	blt.w	241e <z_cbvprintf_impl+0x6a6>
    22f8:	3401      	adds	r4, #1
    22fa:	e7f2      	b.n	22e2 <z_cbvprintf_impl+0x56a>
				}

				pad_len = conv->pad0_value;
    22fc:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
				if (!conv->pad_postdp) {
    2300:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    2304:	f013 0f20 	tst.w	r3, #32
    2308:	d011      	beq.n	232e <z_cbvprintf_impl+0x5b6>
					while (pad_len-- > 0) {
						OUTC('0');
					}
				}

				if (*cp == '.') {
    230a:	f898 0000 	ldrb.w	r0, [r8]
    230e:	282e      	cmp	r0, #46	; 0x2e
    2310:	d01c      	beq.n	234c <z_cbvprintf_impl+0x5d4>
					 */
					while (pad_len-- > 0) {
						OUTC('0');
					}
				}
				while (isdigit((unsigned char)*cp) != 0) {
    2312:	f898 0000 	ldrb.w	r0, [r8]
    2316:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    231a:	2b09      	cmp	r3, #9
    231c:	d82a      	bhi.n	2374 <z_cbvprintf_impl+0x5fc>
					OUTC(*cp++);
    231e:	f108 0801 	add.w	r8, r8, #1
    2322:	4629      	mov	r1, r5
    2324:	47b0      	blx	r6
    2326:	2800      	cmp	r0, #0
    2328:	db79      	blt.n	241e <z_cbvprintf_impl+0x6a6>
    232a:	3401      	adds	r4, #1
    232c:	e7f1      	b.n	2312 <z_cbvprintf_impl+0x59a>
					while (pad_len-- > 0) {
    232e:	f10a 3bff 	add.w	fp, sl, #4294967295
    2332:	f1ba 0f00 	cmp.w	sl, #0
    2336:	dd07      	ble.n	2348 <z_cbvprintf_impl+0x5d0>
						OUTC('0');
    2338:	4629      	mov	r1, r5
    233a:	2030      	movs	r0, #48	; 0x30
    233c:	47b0      	blx	r6
    233e:	2800      	cmp	r0, #0
    2340:	db6d      	blt.n	241e <z_cbvprintf_impl+0x6a6>
    2342:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
    2344:	46da      	mov	sl, fp
    2346:	e7f2      	b.n	232e <z_cbvprintf_impl+0x5b6>
    2348:	46da      	mov	sl, fp
    234a:	e7de      	b.n	230a <z_cbvprintf_impl+0x592>
					OUTC(*cp++);
    234c:	f108 0801 	add.w	r8, r8, #1
    2350:	4629      	mov	r1, r5
    2352:	47b0      	blx	r6
    2354:	2800      	cmp	r0, #0
    2356:	db62      	blt.n	241e <z_cbvprintf_impl+0x6a6>
    2358:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
    235a:	f10a 3bff 	add.w	fp, sl, #4294967295
    235e:	f1ba 0f00 	cmp.w	sl, #0
    2362:	ddd6      	ble.n	2312 <z_cbvprintf_impl+0x59a>
						OUTC('0');
    2364:	4629      	mov	r1, r5
    2366:	2030      	movs	r0, #48	; 0x30
    2368:	47b0      	blx	r6
    236a:	2800      	cmp	r0, #0
    236c:	db57      	blt.n	241e <z_cbvprintf_impl+0x6a6>
    236e:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
    2370:	46da      	mov	sl, fp
    2372:	e7f2      	b.n	235a <z_cbvprintf_impl+0x5e2>
				}
			}

			pad_len = conv->pad0_pre_exp;
    2374:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			while (pad_len-- > 0) {
    2376:	f103 3aff 	add.w	sl, r3, #4294967295
    237a:	2b00      	cmp	r3, #0
    237c:	dd07      	ble.n	238e <z_cbvprintf_impl+0x616>
				OUTC('0');
    237e:	4629      	mov	r1, r5
    2380:	2030      	movs	r0, #48	; 0x30
    2382:	47b0      	blx	r6
    2384:	2800      	cmp	r0, #0
    2386:	db4a      	blt.n	241e <z_cbvprintf_impl+0x6a6>
    2388:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    238a:	4653      	mov	r3, sl
    238c:	e7f3      	b.n	2376 <z_cbvprintf_impl+0x5fe>
			}

			OUTS(cp, bpe);
    238e:	9b07      	ldr	r3, [sp, #28]
    2390:	4642      	mov	r2, r8
    2392:	4629      	mov	r1, r5
    2394:	4630      	mov	r0, r6
    2396:	f007 fafd 	bl	9994 <outs>
    239a:	2800      	cmp	r0, #0
    239c:	db3f      	blt.n	241e <z_cbvprintf_impl+0x6a6>
    239e:	4404      	add	r4, r0
    23a0:	e032      	b.n	2408 <z_cbvprintf_impl+0x690>
		} else {
			if (conv->altform_0c | conv->altform_0) {
    23a2:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    23a6:	f3c3 1200 	ubfx	r2, r3, #4, #1
    23aa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    23ae:	431a      	orrs	r2, r3
    23b0:	d005      	beq.n	23be <z_cbvprintf_impl+0x646>
				OUTC('0');
    23b2:	4629      	mov	r1, r5
    23b4:	2030      	movs	r0, #48	; 0x30
    23b6:	47b0      	blx	r6
    23b8:	2800      	cmp	r0, #0
    23ba:	db30      	blt.n	241e <z_cbvprintf_impl+0x6a6>
    23bc:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    23be:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    23c2:	f013 0f10 	tst.w	r3, #16
    23c6:	d006      	beq.n	23d6 <z_cbvprintf_impl+0x65e>
				OUTC(conv->specifier);
    23c8:	4629      	mov	r1, r5
    23ca:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
    23ce:	47b0      	blx	r6
    23d0:	2800      	cmp	r0, #0
    23d2:	db24      	blt.n	241e <z_cbvprintf_impl+0x6a6>
    23d4:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    23d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			while (pad_len-- > 0) {
    23d8:	f103 3aff 	add.w	sl, r3, #4294967295
    23dc:	2b00      	cmp	r3, #0
    23de:	dd07      	ble.n	23f0 <z_cbvprintf_impl+0x678>
				OUTC('0');
    23e0:	4629      	mov	r1, r5
    23e2:	2030      	movs	r0, #48	; 0x30
    23e4:	47b0      	blx	r6
    23e6:	2800      	cmp	r0, #0
    23e8:	db19      	blt.n	241e <z_cbvprintf_impl+0x6a6>
    23ea:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    23ec:	4653      	mov	r3, sl
    23ee:	e7f3      	b.n	23d8 <z_cbvprintf_impl+0x660>
			}

			OUTS(bps, bpe);
    23f0:	9b07      	ldr	r3, [sp, #28]
    23f2:	4642      	mov	r2, r8
    23f4:	4629      	mov	r1, r5
    23f6:	4630      	mov	r0, r6
    23f8:	f007 facc 	bl	9994 <outs>
    23fc:	2800      	cmp	r0, #0
    23fe:	db0e      	blt.n	241e <z_cbvprintf_impl+0x6a6>
    2400:	4404      	add	r4, r0
    2402:	e001      	b.n	2408 <z_cbvprintf_impl+0x690>
		}

		/* Finish left justification */
		while (width > 0) {
			OUTC(' ');
    2404:	3401      	adds	r4, #1
			--width;
    2406:	3f01      	subs	r7, #1
		while (width > 0) {
    2408:	2f00      	cmp	r7, #0
    240a:	dd05      	ble.n	2418 <z_cbvprintf_impl+0x6a0>
			OUTC(' ');
    240c:	4629      	mov	r1, r5
    240e:	2020      	movs	r0, #32
    2410:	47b0      	blx	r6
    2412:	2800      	cmp	r0, #0
    2414:	daf6      	bge.n	2404 <z_cbvprintf_impl+0x68c>
    2416:	e002      	b.n	241e <z_cbvprintf_impl+0x6a6>
		fp = extract_conversion(conv, sp);
    2418:	46c8      	mov	r8, r9
    241a:	e4b5      	b.n	1d88 <z_cbvprintf_impl+0x10>
		}
	}

	return count;
    241c:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    241e:	b017      	add	sp, #92	; 0x5c
    2420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2424:	0000c749 	.word	0x0000c749

00002428 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    2428:	f004 b928 	b.w	667c <SystemInit>

0000242c <msg_process>:
		return true;
	}
}

static void msg_process(union log_msg_generic *msg)
{
    242c:	b538      	push	{r3, r4, r5, lr}
    242e:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2430:	4c0b      	ldr	r4, [pc, #44]	; (2460 <msg_process+0x34>)
    2432:	e000      	b.n	2436 <msg_process+0xa>
    2434:	3410      	adds	r4, #16
    2436:	4b0b      	ldr	r3, [pc, #44]	; (2464 <msg_process+0x38>)
    2438:	429c      	cmp	r4, r3
    243a:	d20f      	bcs.n	245c <msg_process+0x30>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    243c:	6863      	ldr	r3, [r4, #4]
    243e:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend) &&
    2440:	2b00      	cmp	r3, #0
    2442:	d0f7      	beq.n	2434 <msg_process+0x8>
		    msg_filter_check(backend, msg)) {
    2444:	4629      	mov	r1, r5
    2446:	4620      	mov	r0, r4
    2448:	f007 fdc6 	bl	9fd8 <msg_filter_check>
		if (log_backend_is_active(backend) &&
    244c:	2800      	cmp	r0, #0
    244e:	d0f1      	beq.n	2434 <msg_process+0x8>
	backend->api->process(backend, msg);
    2450:	6823      	ldr	r3, [r4, #0]
    2452:	681b      	ldr	r3, [r3, #0]
    2454:	4629      	mov	r1, r5
    2456:	4620      	mov	r0, r4
    2458:	4798      	blx	r3
}
    245a:	e7eb      	b.n	2434 <msg_process+0x8>
			log_backend_msg_process(backend, msg);
		}
	}
}
    245c:	bd38      	pop	{r3, r4, r5, pc}
    245e:	bf00      	nop
    2460:	0000c530 	.word	0x0000c530
    2464:	0000c550 	.word	0x0000c550

00002468 <log_backend_notify_all>:
	return mpsc_pbuf_get_max_utilization(&log_buffer, max);
}

static void log_backend_notify_all(enum log_backend_evt event,
				   union log_backend_evt_arg *arg)
{
    2468:	b570      	push	{r4, r5, r6, lr}
    246a:	4606      	mov	r6, r0
    246c:	460d      	mov	r5, r1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    246e:	4c08      	ldr	r4, [pc, #32]	; (2490 <log_backend_notify_all+0x28>)
    2470:	e004      	b.n	247c <log_backend_notify_all+0x14>
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
		backend->api->notify(backend, event, arg);
    2472:	462a      	mov	r2, r5
    2474:	4631      	mov	r1, r6
    2476:	4620      	mov	r0, r4
    2478:	4798      	blx	r3
    247a:	3410      	adds	r4, #16
    247c:	4b05      	ldr	r3, [pc, #20]	; (2494 <log_backend_notify_all+0x2c>)
    247e:	429c      	cmp	r4, r3
    2480:	d204      	bcs.n	248c <log_backend_notify_all+0x24>
	if (backend->api->notify) {
    2482:	6823      	ldr	r3, [r4, #0]
    2484:	699b      	ldr	r3, [r3, #24]
    2486:	2b00      	cmp	r3, #0
    2488:	d1f3      	bne.n	2472 <log_backend_notify_all+0xa>
    248a:	e7f6      	b.n	247a <log_backend_notify_all+0x12>
		log_backend_notify(backend, event, arg);
	}
}
    248c:	bd70      	pop	{r4, r5, r6, pc}
    248e:	bf00      	nop
    2490:	0000c530 	.word	0x0000c530
    2494:	0000c550 	.word	0x0000c550

00002498 <activate_foreach_backend>:
{
    2498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    249c:	4607      	mov	r7, r0
	uint32_t mask_cpy = mask;
    249e:	4605      	mov	r5, r0
	while (mask_cpy) {
    24a0:	e00a      	b.n	24b8 <activate_foreach_backend+0x20>
			mask &= ~BIT(i);
    24a2:	ea07 0708 	and.w	r7, r7, r8
					   backend->cb->ctx,
    24a6:	4b14      	ldr	r3, [pc, #80]	; (24f8 <activate_foreach_backend+0x60>)
    24a8:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    24ac:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    24ae:	2204      	movs	r2, #4
    24b0:	6819      	ldr	r1, [r3, #0]
    24b2:	4620      	mov	r0, r4
    24b4:	f000 faa8 	bl	2a08 <log_backend_enable>
	while (mask_cpy) {
    24b8:	b1d5      	cbz	r5, 24f0 <activate_foreach_backend+0x58>
		uint32_t i = __builtin_ctz(mask_cpy);
    24ba:	fa95 f6a5 	rbit	r6, r5
    24be:	fab6 f686 	clz	r6, r6
	STRUCT_SECTION_GET(log_backend, idx, &backend);
    24c2:	4c0d      	ldr	r4, [pc, #52]	; (24f8 <activate_foreach_backend+0x60>)
    24c4:	eb04 1406 	add.w	r4, r4, r6, lsl #4
		mask_cpy &= ~BIT(i);
    24c8:	2301      	movs	r3, #1
    24ca:	40b3      	lsls	r3, r6
    24cc:	ea6f 0803 	mvn.w	r8, r3
    24d0:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    24d4:	7b23      	ldrb	r3, [r4, #12]
    24d6:	2b00      	cmp	r3, #0
    24d8:	d0ee      	beq.n	24b8 <activate_foreach_backend+0x20>
	if (backend->api->is_ready != NULL) {
    24da:	0133      	lsls	r3, r6, #4
    24dc:	4a06      	ldr	r2, [pc, #24]	; (24f8 <activate_foreach_backend+0x60>)
    24de:	58d3      	ldr	r3, [r2, r3]
    24e0:	691b      	ldr	r3, [r3, #16]
    24e2:	2b00      	cmp	r3, #0
    24e4:	d0dd      	beq.n	24a2 <activate_foreach_backend+0xa>
		return backend->api->is_ready(backend);
    24e6:	4620      	mov	r0, r4
    24e8:	4798      	blx	r3
    24ea:	2800      	cmp	r0, #0
    24ec:	d1e4      	bne.n	24b8 <activate_foreach_backend+0x20>
    24ee:	e7d8      	b.n	24a2 <activate_foreach_backend+0xa>
}
    24f0:	4638      	mov	r0, r7
    24f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    24f6:	bf00      	nop
    24f8:	0000c530 	.word	0x0000c530

000024fc <z_log_init>:
{
    24fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2500:	4680      	mov	r8, r0
    2502:	460f      	mov	r7, r1
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    2504:	4b20      	ldr	r3, [pc, #128]	; (2588 <z_log_init+0x8c>)
    2506:	f3bf 8f5b 	dmb	ish
    250a:	e853 5f00 	ldrex	r5, [r3]
    250e:	1c6a      	adds	r2, r5, #1
    2510:	e843 2100 	strex	r1, r2, [r3]
    2514:	2900      	cmp	r1, #0
    2516:	d1f8      	bne.n	250a <z_log_init+0xe>
    2518:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    251c:	2d00      	cmp	r5, #0
    251e:	d12f      	bne.n	2580 <z_log_init+0x84>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2520:	4c1a      	ldr	r4, [pc, #104]	; (258c <z_log_init+0x90>)
	int i = 0;
    2522:	2600      	movs	r6, #0
    2524:	e007      	b.n	2536 <z_log_init+0x3a>
						   backend->cb->ctx,
    2526:	6863      	ldr	r3, [r4, #4]
				log_backend_enable(backend,
    2528:	2204      	movs	r2, #4
    252a:	6819      	ldr	r1, [r3, #0]
    252c:	4620      	mov	r0, r4
    252e:	f000 fa6b 	bl	2a08 <log_backend_enable>
			i++;
    2532:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2534:	3410      	adds	r4, #16
    2536:	4b16      	ldr	r3, [pc, #88]	; (2590 <z_log_init+0x94>)
    2538:	429c      	cmp	r4, r3
    253a:	d213      	bcs.n	2564 <z_log_init+0x68>
		if (backend->autostart) {
    253c:	7b23      	ldrb	r3, [r4, #12]
    253e:	2b00      	cmp	r3, #0
    2540:	d0f8      	beq.n	2534 <z_log_init+0x38>
	if (backend->api->init) {
    2542:	6823      	ldr	r3, [r4, #0]
    2544:	68db      	ldr	r3, [r3, #12]
    2546:	b10b      	cbz	r3, 254c <z_log_init+0x50>
		backend->api->init(backend);
    2548:	4620      	mov	r0, r4
    254a:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    254c:	6823      	ldr	r3, [r4, #0]
    254e:	691b      	ldr	r3, [r3, #16]
    2550:	2b00      	cmp	r3, #0
    2552:	d0e8      	beq.n	2526 <z_log_init+0x2a>
		return backend->api->is_ready(backend);
    2554:	4620      	mov	r0, r4
    2556:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    2558:	2800      	cmp	r0, #0
    255a:	d0e4      	beq.n	2526 <z_log_init+0x2a>
				mask |= BIT(i);
    255c:	2301      	movs	r3, #1
    255e:	40b3      	lsls	r3, r6
    2560:	431d      	orrs	r5, r3
    2562:	e7e6      	b.n	2532 <z_log_init+0x36>
	if (blocking) {
    2564:	f1b8 0f00 	cmp.w	r8, #0
    2568:	d00b      	beq.n	2582 <z_log_init+0x86>
		while (mask) {
    256a:	b155      	cbz	r5, 2582 <z_log_init+0x86>
			mask = activate_foreach_backend(mask);
    256c:	4628      	mov	r0, r5
    256e:	f7ff ff93 	bl	2498 <activate_foreach_backend>
    2572:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    2574:	2f00      	cmp	r7, #0
    2576:	d0f8      	beq.n	256a <z_log_init+0x6e>
				k_msleep(10);
    2578:	200a      	movs	r0, #10
    257a:	f007 fd33 	bl	9fe4 <k_msleep>
    257e:	e7f4      	b.n	256a <z_log_init+0x6e>
		return 0;
    2580:	2500      	movs	r5, #0
}
    2582:	4628      	mov	r0, r5
    2584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2588:	200008c4 	.word	0x200008c4
    258c:	0000c530 	.word	0x0000c530
    2590:	0000c550 	.word	0x0000c550

00002594 <thread_set>:
{
    2594:	b508      	push	{r3, lr}
	proc_tid = process_tid;
    2596:	4b06      	ldr	r3, [pc, #24]	; (25b0 <thread_set+0x1c>)
    2598:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    259a:	b118      	cbz	r0, 25a4 <thread_set+0x10>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    259c:	4b05      	ldr	r3, [pc, #20]	; (25b4 <thread_set+0x20>)
    259e:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
    25a0:	2b09      	cmp	r3, #9
    25a2:	dc00      	bgt.n	25a6 <thread_set+0x12>
}
    25a4:	bd08      	pop	{r3, pc}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    25a6:	4804      	ldr	r0, [pc, #16]	; (25b8 <thread_set+0x24>)
    25a8:	f005 fd36 	bl	8018 <z_impl_k_sem_give>
}
    25ac:	e7fa      	b.n	25a4 <thread_set+0x10>
    25ae:	bf00      	nop
    25b0:	200008b8 	.word	0x200008b8
    25b4:	200008c0 	.word	0x200008c0
    25b8:	20000140 	.word	0x20000140

000025bc <log_process_thread_timer_expiry_fn>:

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
    25bc:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    25be:	4802      	ldr	r0, [pc, #8]	; (25c8 <log_process_thread_timer_expiry_fn+0xc>)
    25c0:	f005 fd2a 	bl	8018 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
    25c4:	bd08      	pop	{r3, pc}
    25c6:	bf00      	nop
    25c8:	20000140 	.word	0x20000140

000025cc <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
    25cc:	b530      	push	{r4, r5, lr}
    25ce:	b089      	sub	sp, #36	; 0x24
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    25d0:	2200      	movs	r2, #0
    25d2:	490f      	ldr	r1, [pc, #60]	; (2610 <enable_logger+0x44>)
    25d4:	480f      	ldr	r0, [pc, #60]	; (2614 <enable_logger+0x48>)
    25d6:	f009 fdc2 	bl	c15e <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    25da:	4d0f      	ldr	r5, [pc, #60]	; (2618 <enable_logger+0x4c>)
    25dc:	2200      	movs	r2, #0
    25de:	2300      	movs	r3, #0
    25e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    25e4:	2400      	movs	r4, #0
    25e6:	9404      	str	r4, [sp, #16]
    25e8:	230e      	movs	r3, #14
    25ea:	9303      	str	r3, [sp, #12]
    25ec:	9402      	str	r4, [sp, #8]
    25ee:	9401      	str	r4, [sp, #4]
    25f0:	9400      	str	r4, [sp, #0]
    25f2:	4b0a      	ldr	r3, [pc, #40]	; (261c <enable_logger+0x50>)
    25f4:	f44f 7240 	mov.w	r2, #768	; 0x300
    25f8:	4909      	ldr	r1, [pc, #36]	; (2620 <enable_logger+0x54>)
    25fa:	4628      	mov	r0, r5
    25fc:	f009 faf7 	bl	bbee <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    2600:	4908      	ldr	r1, [pc, #32]	; (2624 <enable_logger+0x58>)
    2602:	4628      	mov	r0, r5
    2604:	f005 fb5a 	bl	7cbc <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    2608:	4620      	mov	r0, r4
    260a:	b009      	add	sp, #36	; 0x24
    260c:	bd30      	pop	{r4, r5, pc}
    260e:	bf00      	nop
    2610:	000025bd 	.word	0x000025bd
    2614:	20000608 	.word	0x20000608
    2618:	20000150 	.word	0x20000150
    261c:	00002969 	.word	0x00002969
    2620:	20001000 	.word	0x20001000
    2624:	0000c74c 	.word	0x0000c74c

00002628 <log_format_func_t_get>:
}
    2628:	4b01      	ldr	r3, [pc, #4]	; (2630 <log_format_func_t_get+0x8>)
    262a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    262e:	4770      	bx	lr
    2630:	0000c768 	.word	0x0000c768

00002634 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    2634:	b148      	cbz	r0, 264a <log_set_timestamp_func+0x16>
{
    2636:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    2638:	4a05      	ldr	r2, [pc, #20]	; (2650 <log_set_timestamp_func+0x1c>)
    263a:	6010      	str	r0, [r2, #0]
	timestamp_freq = freq;
    263c:	4b05      	ldr	r3, [pc, #20]	; (2654 <log_set_timestamp_func+0x20>)
    263e:	6019      	str	r1, [r3, #0]
		log_output_timestamp_freq_set(freq);
    2640:	4608      	mov	r0, r1
    2642:	f000 fcaf 	bl	2fa4 <log_output_timestamp_freq_set>
	return 0;
    2646:	2000      	movs	r0, #0
}
    2648:	bd08      	pop	{r3, pc}
		return -EINVAL;
    264a:	f06f 0015 	mvn.w	r0, #21
}
    264e:	4770      	bx	lr
    2650:	20000004 	.word	0x20000004
    2654:	200008b4 	.word	0x200008b4

00002658 <z_log_notify_backend_enabled>:
{
    2658:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    265a:	4b05      	ldr	r3, [pc, #20]	; (2670 <z_log_notify_backend_enabled+0x18>)
    265c:	781b      	ldrb	r3, [r3, #0]
    265e:	b11b      	cbz	r3, 2668 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
    2660:	4b03      	ldr	r3, [pc, #12]	; (2670 <z_log_notify_backend_enabled+0x18>)
    2662:	2201      	movs	r2, #1
    2664:	701a      	strb	r2, [r3, #0]
}
    2666:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
    2668:	4802      	ldr	r0, [pc, #8]	; (2674 <z_log_notify_backend_enabled+0x1c>)
    266a:	f005 fcd5 	bl	8018 <z_impl_k_sem_give>
}
    266e:	e7f7      	b.n	2660 <z_log_notify_backend_enabled+0x8>
    2670:	20000fcc 	.word	0x20000fcc
    2674:	20000140 	.word	0x20000140

00002678 <z_log_dropped>:
    2678:	4b0d      	ldr	r3, [pc, #52]	; (26b0 <z_log_dropped+0x38>)
    267a:	f3bf 8f5b 	dmb	ish
    267e:	e853 1f00 	ldrex	r1, [r3]
    2682:	3101      	adds	r1, #1
    2684:	e843 1200 	strex	r2, r1, [r3]
    2688:	2a00      	cmp	r2, #0
    268a:	d1f8      	bne.n	267e <z_log_dropped+0x6>
    268c:	f3bf 8f5b 	dmb	ish
	if (buffered) {
    2690:	b900      	cbnz	r0, 2694 <z_log_dropped+0x1c>
}
    2692:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2694:	4b07      	ldr	r3, [pc, #28]	; (26b4 <z_log_dropped+0x3c>)
    2696:	f3bf 8f5b 	dmb	ish
    269a:	e853 1f00 	ldrex	r1, [r3]
    269e:	3901      	subs	r1, #1
    26a0:	e843 1200 	strex	r2, r1, [r3]
    26a4:	2a00      	cmp	r2, #0
    26a6:	d1f8      	bne.n	269a <z_log_dropped+0x22>
    26a8:	f3bf 8f5b 	dmb	ish
    26ac:	e7f1      	b.n	2692 <z_log_dropped+0x1a>
    26ae:	bf00      	nop
    26b0:	200008bc 	.word	0x200008bc
    26b4:	200008c0 	.word	0x200008c0

000026b8 <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    26b8:	4b06      	ldr	r3, [pc, #24]	; (26d4 <z_log_dropped_read_and_clear+0x1c>)
}
    26ba:	2000      	movs	r0, #0
    26bc:	4601      	mov	r1, r0
    26be:	f3bf 8f5b 	dmb	ish
    26c2:	e853 0f00 	ldrex	r0, [r3]
    26c6:	e843 1200 	strex	r2, r1, [r3]
    26ca:	2a00      	cmp	r2, #0
    26cc:	d1f9      	bne.n	26c2 <z_log_dropped_read_and_clear+0xa>
    26ce:	f3bf 8f5b 	dmb	ish
    26d2:	4770      	bx	lr
    26d4:	200008bc 	.word	0x200008bc

000026d8 <dropped_notify>:
{
    26d8:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    26da:	f7ff ffed 	bl	26b8 <z_log_dropped_read_and_clear>
    26de:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    26e0:	4c09      	ldr	r4, [pc, #36]	; (2708 <dropped_notify+0x30>)
    26e2:	e000      	b.n	26e6 <dropped_notify+0xe>
    26e4:	3410      	adds	r4, #16
    26e6:	4b09      	ldr	r3, [pc, #36]	; (270c <dropped_notify+0x34>)
    26e8:	429c      	cmp	r4, r3
    26ea:	d20b      	bcs.n	2704 <dropped_notify+0x2c>
	return backend->cb->active;
    26ec:	6863      	ldr	r3, [r4, #4]
    26ee:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    26f0:	2b00      	cmp	r3, #0
    26f2:	d0f7      	beq.n	26e4 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
    26f4:	6823      	ldr	r3, [r4, #0]
    26f6:	685b      	ldr	r3, [r3, #4]
    26f8:	2b00      	cmp	r3, #0
    26fa:	d0f3      	beq.n	26e4 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
    26fc:	4629      	mov	r1, r5
    26fe:	4620      	mov	r0, r4
    2700:	4798      	blx	r3
    2702:	e7ef      	b.n	26e4 <dropped_notify+0xc>
}
    2704:	bd38      	pop	{r3, r4, r5, pc}
    2706:	bf00      	nop
    2708:	0000c530 	.word	0x0000c530
    270c:	0000c550 	.word	0x0000c550

00002710 <z_log_dropped_pending>:
	return dropped_cnt > 0;
    2710:	4b03      	ldr	r3, [pc, #12]	; (2720 <z_log_dropped_pending+0x10>)
    2712:	6818      	ldr	r0, [r3, #0]
}
    2714:	2800      	cmp	r0, #0
    2716:	bfd4      	ite	le
    2718:	2000      	movle	r0, #0
    271a:	2001      	movgt	r0, #1
    271c:	4770      	bx	lr
    271e:	bf00      	nop
    2720:	200008bc 	.word	0x200008bc

00002724 <z_log_msg_init>:
{
    2724:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    2726:	4c04      	ldr	r4, [pc, #16]	; (2738 <z_log_msg_init+0x14>)
    2728:	4904      	ldr	r1, [pc, #16]	; (273c <z_log_msg_init+0x18>)
    272a:	4620      	mov	r0, r4
    272c:	f007 faa3 	bl	9c76 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    2730:	4b03      	ldr	r3, [pc, #12]	; (2740 <z_log_msg_init+0x1c>)
    2732:	601c      	str	r4, [r3, #0]
}
    2734:	bd10      	pop	{r4, pc}
    2736:	bf00      	nop
    2738:	200000f0 	.word	0x200000f0
    273c:	0000c754 	.word	0x0000c754
    2740:	200008b0 	.word	0x200008b0

00002744 <log_core_init>:
{
    2744:	b508      	push	{r3, lr}
	panic_mode = false;
    2746:	2300      	movs	r3, #0
    2748:	4a06      	ldr	r2, [pc, #24]	; (2764 <log_core_init+0x20>)
    274a:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    274c:	4a06      	ldr	r2, [pc, #24]	; (2768 <log_core_init+0x24>)
    274e:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    2750:	4a06      	ldr	r2, [pc, #24]	; (276c <log_core_init+0x28>)
    2752:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    2754:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2758:	4805      	ldr	r0, [pc, #20]	; (2770 <log_core_init+0x2c>)
    275a:	f7ff ff6b 	bl	2634 <log_set_timestamp_func>
		z_log_msg_init();
    275e:	f7ff ffe1 	bl	2724 <z_log_msg_init>
}
    2762:	bd08      	pop	{r3, pc}
    2764:	20000fcd 	.word	0x20000fcd
    2768:	200008bc 	.word	0x200008bc
    276c:	200008c0 	.word	0x200008c0
    2770:	00009fdd 	.word	0x00009fdd

00002774 <z_log_msg_alloc>:
{
    2774:	b508      	push	{r3, lr}
    2776:	4601      	mov	r1, r0
	return msg_alloc(&log_buffer, wlen);
    2778:	4801      	ldr	r0, [pc, #4]	; (2780 <z_log_msg_alloc+0xc>)
    277a:	f007 fc49 	bl	a010 <msg_alloc>
}
    277e:	bd08      	pop	{r3, pc}
    2780:	200000f0 	.word	0x200000f0

00002784 <z_log_msg_local_claim>:
{
    2784:	b508      	push	{r3, lr}
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    2786:	4802      	ldr	r0, [pc, #8]	; (2790 <z_log_msg_local_claim+0xc>)
    2788:	f007 fb59 	bl	9e3e <mpsc_pbuf_claim>
}
    278c:	bd08      	pop	{r3, pc}
    278e:	bf00      	nop
    2790:	200000f0 	.word	0x200000f0

00002794 <z_log_msg_free>:
{
    2794:	b508      	push	{r3, lr}
    2796:	4601      	mov	r1, r0
	msg_free(curr_log_buffer, msg);
    2798:	4b02      	ldr	r3, [pc, #8]	; (27a4 <z_log_msg_free+0x10>)
    279a:	6818      	ldr	r0, [r3, #0]
    279c:	f007 fc3e 	bl	a01c <msg_free>
}
    27a0:	bd08      	pop	{r3, pc}
    27a2:	bf00      	nop
    27a4:	200008b0 	.word	0x200008b0

000027a8 <z_log_msg_pending>:
{
    27a8:	b508      	push	{r3, lr}
		return msg_pending(&log_buffer);
    27aa:	4802      	ldr	r0, [pc, #8]	; (27b4 <z_log_msg_pending+0xc>)
    27ac:	f007 fc3a 	bl	a024 <msg_pending>
}
    27b0:	bd08      	pop	{r3, pc}
    27b2:	bf00      	nop
    27b4:	200000f0 	.word	0x200000f0

000027b8 <z_impl_log_process>:
{
    27b8:	b510      	push	{r4, lr}
    27ba:	b082      	sub	sp, #8
	k_timeout_t backoff = K_NO_WAIT;
    27bc:	2200      	movs	r2, #0
    27be:	2300      	movs	r3, #0
    27c0:	e9cd 2300 	strd	r2, r3, [sp]
	if (!backend_attached) {
    27c4:	4b28      	ldr	r3, [pc, #160]	; (2868 <z_impl_log_process+0xb0>)
    27c6:	7818      	ldrb	r0, [r3, #0]
    27c8:	b908      	cbnz	r0, 27ce <z_impl_log_process+0x16>
}
    27ca:	b002      	add	sp, #8
    27cc:	bd10      	pop	{r4, pc}
	msg = z_log_msg_claim(&backoff);
    27ce:	4668      	mov	r0, sp
    27d0:	f007 fc40 	bl	a054 <z_log_msg_claim>
	if (msg) {
    27d4:	4604      	mov	r4, r0
    27d6:	b188      	cbz	r0, 27fc <z_impl_log_process+0x44>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    27d8:	4b24      	ldr	r3, [pc, #144]	; (286c <z_impl_log_process+0xb4>)
    27da:	f3bf 8f5b 	dmb	ish
    27de:	e853 1f00 	ldrex	r1, [r3]
    27e2:	3901      	subs	r1, #1
    27e4:	e843 1200 	strex	r2, r1, [r3]
    27e8:	2a00      	cmp	r2, #0
    27ea:	d1f8      	bne.n	27de <z_impl_log_process+0x26>
    27ec:	f3bf 8f5b 	dmb	ish
		msg_process(msg);
    27f0:	4620      	mov	r0, r4
    27f2:	f7ff fe1b 	bl	242c <msg_process>
		z_log_msg_free(msg);
    27f6:	4620      	mov	r0, r4
    27f8:	f7ff ffcc 	bl	2794 <z_log_msg_free>
		bool dropped_pend = z_log_dropped_pending();
    27fc:	f7ff ff88 	bl	2710 <z_log_dropped_pending>
		if ((dropped_pend || unordered_pend) &&
    2800:	b958      	cbnz	r0, 281a <z_impl_log_process+0x62>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    2802:	4a1b      	ldr	r2, [pc, #108]	; (2870 <z_impl_log_process+0xb8>)
    2804:	6813      	ldr	r3, [r2, #0]
    2806:	6851      	ldr	r1, [r2, #4]
    2808:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    280c:	f141 0100 	adc.w	r1, r1, #0
    2810:	6013      	str	r3, [r2, #0]
    2812:	6051      	str	r1, [r2, #4]
	return z_log_msg_pending();
    2814:	f7ff ffc8 	bl	27a8 <z_log_msg_pending>
    2818:	e7d7      	b.n	27ca <z_impl_log_process+0x12>
	return z_impl_k_uptime_ticks();
    281a:	f009 fc8a 	bl	c132 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    281e:	014a      	lsls	r2, r1, #5
    2820:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    2824:	0143      	lsls	r3, r0, #5
    2826:	1a1b      	subs	r3, r3, r0
    2828:	eb62 0201 	sbc.w	r2, r2, r1
    282c:	0092      	lsls	r2, r2, #2
    282e:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    2832:	009b      	lsls	r3, r3, #2
    2834:	181b      	adds	r3, r3, r0
    2836:	eb42 0201 	adc.w	r2, r2, r1
    283a:	00d2      	lsls	r2, r2, #3
    283c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    2840:	f3c3 3310 	ubfx	r3, r3, #12, #17
    2844:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
    2848:	0bd2      	lsrs	r2, r2, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    284a:	4809      	ldr	r0, [pc, #36]	; (2870 <z_impl_log_process+0xb8>)
    284c:	6801      	ldr	r1, [r0, #0]
    284e:	6840      	ldr	r0, [r0, #4]
    2850:	1a5b      	subs	r3, r3, r1
    2852:	eb62 0200 	sbc.w	r2, r2, r0
		if ((dropped_pend || unordered_pend) &&
    2856:	f240 31e9 	movw	r1, #1001	; 0x3e9
    285a:	428b      	cmp	r3, r1
    285c:	f172 0200 	sbcs.w	r2, r2, #0
    2860:	d3cf      	bcc.n	2802 <z_impl_log_process+0x4a>
				dropped_notify();
    2862:	f7ff ff39 	bl	26d8 <dropped_notify>
			if (unordered_pend) {
    2866:	e7cc      	b.n	2802 <z_impl_log_process+0x4a>
    2868:	20000fcc 	.word	0x20000fcc
    286c:	200008c0 	.word	0x200008c0
    2870:	20000600 	.word	0x20000600

00002874 <z_impl_log_panic>:
	if (panic_mode) {
    2874:	4b0f      	ldr	r3, [pc, #60]	; (28b4 <z_impl_log_panic+0x40>)
    2876:	781b      	ldrb	r3, [r3, #0]
    2878:	b103      	cbz	r3, 287c <z_impl_log_panic+0x8>
    287a:	4770      	bx	lr
{
    287c:	b510      	push	{r4, lr}
	(void)z_log_init(true, false);
    287e:	2100      	movs	r1, #0
    2880:	2001      	movs	r0, #1
    2882:	f7ff fe3b 	bl	24fc <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2886:	4c0c      	ldr	r4, [pc, #48]	; (28b8 <z_impl_log_panic+0x44>)
    2888:	e000      	b.n	288c <z_impl_log_panic+0x18>
    288a:	3410      	adds	r4, #16
    288c:	4b0b      	ldr	r3, [pc, #44]	; (28bc <z_impl_log_panic+0x48>)
    288e:	429c      	cmp	r4, r3
    2890:	d208      	bcs.n	28a4 <z_impl_log_panic+0x30>
	return backend->cb->active;
    2892:	6863      	ldr	r3, [r4, #4]
    2894:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    2896:	2b00      	cmp	r3, #0
    2898:	d0f7      	beq.n	288a <z_impl_log_panic+0x16>
	backend->api->panic(backend);
    289a:	6823      	ldr	r3, [r4, #0]
    289c:	689b      	ldr	r3, [r3, #8]
    289e:	4620      	mov	r0, r4
    28a0:	4798      	blx	r3
}
    28a2:	e7f2      	b.n	288a <z_impl_log_panic+0x16>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    28a4:	f7ff ff88 	bl	27b8 <z_impl_log_process>
		while (log_process() == true) {
    28a8:	2800      	cmp	r0, #0
    28aa:	d1fb      	bne.n	28a4 <z_impl_log_panic+0x30>
	panic_mode = true;
    28ac:	4b01      	ldr	r3, [pc, #4]	; (28b4 <z_impl_log_panic+0x40>)
    28ae:	2201      	movs	r2, #1
    28b0:	701a      	strb	r2, [r3, #0]
}
    28b2:	bd10      	pop	{r4, pc}
    28b4:	20000fcd 	.word	0x20000fcd
    28b8:	0000c530 	.word	0x0000c530
    28bc:	0000c550 	.word	0x0000c550

000028c0 <z_log_msg_post_finalize>:
{
    28c0:	b510      	push	{r4, lr}
    28c2:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    28c4:	4b1b      	ldr	r3, [pc, #108]	; (2934 <z_log_msg_post_finalize+0x74>)
    28c6:	f3bf 8f5b 	dmb	ish
    28ca:	e853 2f00 	ldrex	r2, [r3]
    28ce:	1c51      	adds	r1, r2, #1
    28d0:	e843 1000 	strex	r0, r1, [r3]
    28d4:	2800      	cmp	r0, #0
    28d6:	d1f8      	bne.n	28ca <z_log_msg_post_finalize+0xa>
    28d8:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    28dc:	4b16      	ldr	r3, [pc, #88]	; (2938 <z_log_msg_post_finalize+0x78>)
    28de:	781b      	ldrb	r3, [r3, #0]
    28e0:	b963      	cbnz	r3, 28fc <z_log_msg_post_finalize+0x3c>
	} else if (proc_tid != NULL) {
    28e2:	4b16      	ldr	r3, [pc, #88]	; (293c <z_log_msg_post_finalize+0x7c>)
    28e4:	681b      	ldr	r3, [r3, #0]
    28e6:	b1bb      	cbz	r3, 2918 <z_log_msg_post_finalize+0x58>
		if (cnt == 0) {
    28e8:	b1c2      	cbz	r2, 291c <z_log_msg_post_finalize+0x5c>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    28ea:	2a0a      	cmp	r2, #10
    28ec:	d114      	bne.n	2918 <z_log_msg_post_finalize+0x58>
	z_impl_k_timer_stop(timer);
    28ee:	4814      	ldr	r0, [pc, #80]	; (2940 <z_log_msg_post_finalize+0x80>)
    28f0:	f009 fc41 	bl	c176 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    28f4:	4813      	ldr	r0, [pc, #76]	; (2944 <z_log_msg_post_finalize+0x84>)
    28f6:	f005 fb8f 	bl	8018 <z_impl_k_sem_give>
}
    28fa:	e00d      	b.n	2918 <z_log_msg_post_finalize+0x58>
    28fc:	f04f 0320 	mov.w	r3, #32
    2900:	f3ef 8411 	mrs	r4, BASEPRI
    2904:	f383 8812 	msr	BASEPRI_MAX, r3
    2908:	f3bf 8f6f 	isb	sy
    290c:	f7ff ff54 	bl	27b8 <z_impl_log_process>
	__asm__ volatile(
    2910:	f384 8811 	msr	BASEPRI, r4
    2914:	f3bf 8f6f 	isb	sy
    2918:	b002      	add	sp, #8
    291a:	bd10      	pop	{r4, pc}
	z_impl_k_timer_start(timer, duration, period);
    291c:	2200      	movs	r2, #0
    291e:	2300      	movs	r3, #0
    2920:	e9cd 2300 	strd	r2, r3, [sp]
    2924:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2928:	2300      	movs	r3, #0
    292a:	4805      	ldr	r0, [pc, #20]	; (2940 <z_log_msg_post_finalize+0x80>)
    292c:	f006 fa84 	bl	8e38 <z_impl_k_timer_start>
    2930:	e7f2      	b.n	2918 <z_log_msg_post_finalize+0x58>
    2932:	bf00      	nop
    2934:	200008c0 	.word	0x200008c0
    2938:	20000fcd 	.word	0x20000fcd
    293c:	200008b8 	.word	0x200008b8
    2940:	20000608 	.word	0x20000608
    2944:	20000140 	.word	0x20000140

00002948 <z_log_msg_commit>:
{
    2948:	b510      	push	{r4, lr}
    294a:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    294c:	4b04      	ldr	r3, [pc, #16]	; (2960 <z_log_msg_commit+0x18>)
    294e:	681b      	ldr	r3, [r3, #0]
    2950:	4798      	blx	r3
    2952:	60a0      	str	r0, [r4, #8]
	msg_commit(&log_buffer, msg);
    2954:	4621      	mov	r1, r4
    2956:	4803      	ldr	r0, [pc, #12]	; (2964 <z_log_msg_commit+0x1c>)
    2958:	f007 fb80 	bl	a05c <msg_commit>
}
    295c:	bd10      	pop	{r4, pc}
    295e:	bf00      	nop
    2960:	20000004 	.word	0x20000004
    2964:	200000f0 	.word	0x200000f0

00002968 <log_process_thread_func>:
{
    2968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t activate_mask = z_log_init(false, false);
    296c:	2100      	movs	r1, #0
    296e:	4608      	mov	r0, r1
    2970:	f7ff fdc4 	bl	24fc <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    2974:	4680      	mov	r8, r0
    2976:	b140      	cbz	r0, 298a <log_process_thread_func+0x22>
    2978:	f240 6667 	movw	r6, #1639	; 0x667
    297c:	2700      	movs	r7, #0
	return z_impl_z_current_get();
    297e:	f006 f849 	bl	8a14 <z_impl_z_current_get>
	thread_set(k_current_get());
    2982:	f7ff fe07 	bl	2594 <thread_set>
	bool processed_any = false;
    2986:	2500      	movs	r5, #0
    2988:	e015      	b.n	29b6 <log_process_thread_func+0x4e>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    298a:	f04f 36ff 	mov.w	r6, #4294967295
    298e:	f04f 37ff 	mov.w	r7, #4294967295
    2992:	e7f4      	b.n	297e <log_process_thread_func+0x16>
			activate_mask = activate_foreach_backend(activate_mask);
    2994:	4640      	mov	r0, r8
    2996:	f7ff fd7f 	bl	2498 <activate_foreach_backend>
			if (!activate_mask) {
    299a:	4680      	mov	r8, r0
    299c:	b970      	cbnz	r0, 29bc <log_process_thread_func+0x54>
				timeout = K_FOREVER;
    299e:	f04f 36ff 	mov.w	r6, #4294967295
    29a2:	f04f 37ff 	mov.w	r7, #4294967295
    29a6:	e009      	b.n	29bc <log_process_thread_func+0x54>
    29a8:	462c      	mov	r4, r5
	return z_impl_k_sem_take(sem, timeout);
    29aa:	4632      	mov	r2, r6
    29ac:	463b      	mov	r3, r7
    29ae:	4809      	ldr	r0, [pc, #36]	; (29d4 <log_process_thread_func+0x6c>)
    29b0:	f005 fb56 	bl	8060 <z_impl_k_sem_take>
{
    29b4:	4625      	mov	r5, r4
		if (activate_mask) {
    29b6:	f1b8 0f00 	cmp.w	r8, #0
    29ba:	d1eb      	bne.n	2994 <log_process_thread_func+0x2c>
    29bc:	f7ff fefc 	bl	27b8 <z_impl_log_process>
		if (log_process() == false) {
    29c0:	4604      	mov	r4, r0
    29c2:	2800      	cmp	r0, #0
    29c4:	d1f6      	bne.n	29b4 <log_process_thread_func+0x4c>
			if (processed_any) {
    29c6:	2d00      	cmp	r5, #0
    29c8:	d0ee      	beq.n	29a8 <log_process_thread_func+0x40>
				log_backend_notify_all(LOG_BACKEND_EVT_PROCESS_THREAD_DONE, NULL);
    29ca:	2100      	movs	r1, #0
    29cc:	4608      	mov	r0, r1
    29ce:	f7ff fd4b 	bl	2468 <log_backend_notify_all>
    29d2:	e7ea      	b.n	29aa <log_process_thread_func+0x42>
    29d4:	20000140 	.word	0x20000140

000029d8 <log_src_cnt_get>:
	if (z_log_is_local_domain(domain_id)) {
		return log_const_source_id(__log_const_end);
	}

	return link_source_count(domain_id);
}
    29d8:	4802      	ldr	r0, [pc, #8]	; (29e4 <log_src_cnt_get+0xc>)
    29da:	4b03      	ldr	r3, [pc, #12]	; (29e8 <log_src_cnt_get+0x10>)
    29dc:	1ac0      	subs	r0, r0, r3
    29de:	08c0      	lsrs	r0, r0, #3
    29e0:	4770      	bx	lr
    29e2:	bf00      	nop
    29e4:	0000c530 	.word	0x0000c530
    29e8:	0000c490 	.word	0x0000c490

000029ec <log_source_name_get>:

	return (const char *)cached;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
    29ec:	b510      	push	{r4, lr}
    29ee:	460c      	mov	r4, r1
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    29f0:	f7ff fff2 	bl	29d8 <log_src_cnt_get>
    29f4:	42a0      	cmp	r0, r4
    29f6:	d903      	bls.n	2a00 <log_source_name_get+0x14>
			return __log_const_start[source_id].name;
    29f8:	4b02      	ldr	r3, [pc, #8]	; (2a04 <log_source_name_get+0x18>)
    29fa:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			return NULL;
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    29fe:	bd10      	pop	{r4, pc}
			return NULL;
    2a00:	2000      	movs	r0, #0
    2a02:	e7fc      	b.n	29fe <log_source_name_get+0x12>
    2a04:	0000c490 	.word	0x0000c490

00002a08 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    2a08:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    2a0a:	4b09      	ldr	r3, [pc, #36]	; (2a30 <log_backend_enable+0x28>)
    2a0c:	1ac3      	subs	r3, r0, r3
    2a0e:	111b      	asrs	r3, r3, #4
    2a10:	3301      	adds	r3, #1
	backend->cb->id = id;
    2a12:	f8d0 c004 	ldr.w	ip, [r0, #4]
    2a16:	f88c 3004 	strb.w	r3, [ip, #4]

	log_backend_id_set(backend, id);
	backend->cb->level = level;
    2a1a:	6843      	ldr	r3, [r0, #4]
    2a1c:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
    2a1e:	6843      	ldr	r3, [r0, #4]
    2a20:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    2a22:	6843      	ldr	r3, [r0, #4]
    2a24:	2201      	movs	r2, #1
    2a26:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    2a28:	f7ff fe16 	bl	2658 <z_log_notify_backend_enabled>
}
    2a2c:	bd08      	pop	{r3, pc}
    2a2e:	bf00      	nop
    2a30:	0000c530 	.word	0x0000c530

00002a34 <cbprintf_package_copy>:
{
    2a34:	b500      	push	{lr}
    2a36:	b089      	sub	sp, #36	; 0x24
	struct z_cbprintf_buf_desc buf_desc = {
    2a38:	9205      	str	r2, [sp, #20]
    2a3a:	9306      	str	r3, [sp, #24]
    2a3c:	2300      	movs	r3, #0
    2a3e:	9307      	str	r3, [sp, #28]
	return cbprintf_package_convert(in_packaged, in_len,
    2a40:	b162      	cbz	r2, 2a5c <cbprintf_package_copy+0x28>
    2a42:	4a07      	ldr	r2, [pc, #28]	; (2a60 <cbprintf_package_copy+0x2c>)
    2a44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2a46:	9302      	str	r3, [sp, #8]
    2a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2a4a:	9301      	str	r3, [sp, #4]
    2a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2a4e:	9300      	str	r3, [sp, #0]
    2a50:	ab05      	add	r3, sp, #20
    2a52:	f7fe fc03 	bl	125c <cbprintf_package_convert>
}
    2a56:	b009      	add	sp, #36	; 0x24
    2a58:	f85d fb04 	ldr.w	pc, [sp], #4
	return cbprintf_package_convert(in_packaged, in_len,
    2a5c:	2200      	movs	r2, #0
    2a5e:	e7f1      	b.n	2a44 <cbprintf_package_copy+0x10>
    2a60:	0000a06d 	.word	0x0000a06d

00002a64 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    2a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a68:	b08b      	sub	sp, #44	; 0x2c
    2a6a:	af04      	add	r7, sp, #16
    2a6c:	4605      	mov	r5, r0
    2a6e:	461e      	mov	r6, r3

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
    2a70:	4688      	mov	r8, r1
	int inlen = desc.package_len;
    2a72:	f3c1 244a 	ubfx	r4, r1, #9, #11
	struct log_msg *msg;

	if (inlen > 0) {
    2a76:	2c00      	cmp	r4, #0
    2a78:	f000 8089 	beq.w	2b8e <z_impl_z_log_msg_static_create+0x12a>
    2a7c:	4691      	mov	r9, r2
	struct z_cbprintf_buf_desc buf_desc = {
    2a7e:	2200      	movs	r2, #0
    2a80:	60fa      	str	r2, [r7, #12]
    2a82:	613a      	str	r2, [r7, #16]
    2a84:	617a      	str	r2, [r7, #20]
	return cbprintf_package_convert(in_packaged, in_len,
    2a86:	2304      	movs	r3, #4
    2a88:	9302      	str	r3, [sp, #8]
    2a8a:	18fb      	adds	r3, r7, r3
    2a8c:	9301      	str	r3, [sp, #4]
    2a8e:	230a      	movs	r3, #10
    2a90:	9300      	str	r3, [sp, #0]
    2a92:	f107 030c 	add.w	r3, r7, #12
    2a96:	4621      	mov	r1, r4
    2a98:	4648      	mov	r0, r9
    2a9a:	f7fe fbdf 	bl	125c <cbprintf_package_convert>

		len = cbprintf_package_copy(package, inlen,
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
    2a9e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    2aa2:	d358      	bcc.n	2b56 <z_impl_z_log_msg_static_create+0xf2>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
    2aa4:	f8d9 1004 	ldr.w	r1, [r9, #4]
    2aa8:	466d      	mov	r5, sp
    2aaa:	2300      	movs	r3, #0
    2aac:	733b      	strb	r3, [r7, #12]
    2aae:	2302      	movs	r3, #2
    2ab0:	737b      	strb	r3, [r7, #13]
    2ab2:	b08a      	sub	sp, #40	; 0x28
    2ab4:	ac04      	add	r4, sp, #16
    2ab6:	f114 0210 	adds.w	r2, r4, #16
    2aba:	d017      	beq.n	2aec <z_impl_z_log_msg_static_create+0x88>
    2abc:	2012      	movs	r0, #18
    2abe:	b11a      	cbz	r2, 2ac8 <z_impl_z_log_msg_static_create+0x64>
    2ac0:	2804      	cmp	r0, #4
    2ac2:	dd01      	ble.n	2ac8 <z_impl_z_log_msg_static_create+0x64>
    2ac4:	4b3b      	ldr	r3, [pc, #236]	; (2bb4 <z_impl_z_log_msg_static_create+0x150>)
    2ac6:	6163      	str	r3, [r4, #20]
    2ac8:	2300      	movs	r3, #0
    2aca:	703b      	strb	r3, [r7, #0]
    2acc:	2302      	movs	r3, #2
    2ace:	707b      	strb	r3, [r7, #1]
    2ad0:	b1ca      	cbz	r2, 2b06 <z_impl_z_log_msg_static_create+0xa2>
    2ad2:	4603      	mov	r3, r0
    2ad4:	2808      	cmp	r0, #8
    2ad6:	dd00      	ble.n	2ada <z_impl_z_log_msg_static_create+0x76>
    2ad8:	61a1      	str	r1, [r4, #24]
    2ada:	2b0c      	cmp	r3, #12
    2adc:	dd02      	ble.n	2ae4 <z_impl_z_log_msg_static_create+0x80>
    2ade:	f240 73ff 	movw	r3, #2047	; 0x7ff
    2ae2:	61e3      	str	r3, [r4, #28]
    2ae4:	f104 0320 	add.w	r3, r4, #32
    2ae8:	2100      	movs	r1, #0
    2aea:	e00a      	b.n	2b02 <z_impl_z_log_msg_static_create+0x9e>
    2aec:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    2af0:	e7e5      	b.n	2abe <z_impl_z_log_msg_static_create+0x5a>
    2af2:	f101 0618 	add.w	r6, r1, #24
    2af6:	443e      	add	r6, r7
    2af8:	f816 6c18 	ldrb.w	r6, [r6, #-24]
    2afc:	f803 6b01 	strb.w	r6, [r3], #1
    2b00:	3101      	adds	r1, #1
    2b02:	2901      	cmp	r1, #1
    2b04:	d9f5      	bls.n	2af2 <z_impl_z_log_msg_static_create+0x8e>
    2b06:	2811      	cmp	r0, #17
    2b08:	dd22      	ble.n	2b50 <z_impl_z_log_msg_static_create+0xec>
    2b0a:	2312      	movs	r3, #18
    2b0c:	b142      	cbz	r2, 2b20 <z_impl_z_log_msg_static_create+0xbc>
    2b0e:	2104      	movs	r1, #4
    2b10:	7339      	strb	r1, [r7, #12]
    2b12:	2100      	movs	r1, #0
    2b14:	7379      	strb	r1, [r7, #13]
    2b16:	73b9      	strb	r1, [r7, #14]
    2b18:	2101      	movs	r1, #1
    2b1a:	73f9      	strb	r1, [r7, #15]
    2b1c:	68f8      	ldr	r0, [r7, #12]
    2b1e:	6120      	str	r0, [r4, #16]
    2b20:	2100      	movs	r1, #0
    2b22:	f36f 0100 	bfc	r1, #0, #1
    2b26:	f36f 0141 	bfc	r1, #1, #1
    2b2a:	f36f 0182 	bfc	r1, #2, #1
    2b2e:	f36f 01c5 	bfc	r1, #3, #3
    2b32:	2002      	movs	r0, #2
    2b34:	f360 1188 	bfi	r1, r0, #6, #3
    2b38:	f3c3 030a 	ubfx	r3, r3, #0, #11
    2b3c:	f363 2153 	bfi	r1, r3, #9, #11
    2b40:	2300      	movs	r3, #0
    2b42:	f3c1 0113 	ubfx	r1, r1, #0, #20
    2b46:	481c      	ldr	r0, [pc, #112]	; (2bb8 <z_impl_z_log_msg_static_create+0x154>)
    2b48:	f007 fabd 	bl	a0c6 <z_log_msg_static_create>
    2b4c:	46ad      	mov	sp, r5
				pkg->fmt, (uint32_t)Z_LOG_MSG_MAX_PACKAGE);
			return;
    2b4e:	e02d      	b.n	2bac <z_impl_z_log_msg_static_create+0x148>
			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
    2b50:	f06f 031b 	mvn.w	r3, #27
    2b54:	e7da      	b.n	2b0c <z_impl_z_log_msg_static_create+0xa8>
		}
		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    2b56:	f360 2853 	bfi	r8, r0, #9, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    2b5a:	f3c0 0a0a 	ubfx	sl, r0, #0, #11
    2b5e:	eb0a 5018 	add.w	r0, sl, r8, lsr #20
    2b62:	3017      	adds	r0, #23
    2b64:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    2b68:	0880      	lsrs	r0, r0, #2
    2b6a:	f7ff fe03 	bl	2774 <z_log_msg_alloc>
		if (msg) {
    2b6e:	4683      	mov	fp, r0
    2b70:	b1b0      	cbz	r0, 2ba0 <z_impl_z_log_msg_static_create+0x13c>
			len = cbprintf_package_copy(package, inlen,
    2b72:	2304      	movs	r3, #4
    2b74:	9302      	str	r3, [sp, #8]
    2b76:	18fb      	adds	r3, r7, r3
    2b78:	9301      	str	r3, [sp, #4]
    2b7a:	230a      	movs	r3, #10
    2b7c:	9300      	str	r3, [sp, #0]
    2b7e:	4653      	mov	r3, sl
    2b80:	f100 0210 	add.w	r2, r0, #16
    2b84:	4621      	mov	r1, r4
    2b86:	4648      	mov	r0, r9
    2b88:	f7ff ff54 	bl	2a34 <cbprintf_package_copy>
						    msg->data, out_desc.package_len,
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
    2b8c:	e008      	b.n	2ba0 <z_impl_z_log_msg_static_create+0x13c>
    2b8e:	eb04 5411 	add.w	r4, r4, r1, lsr #20
    2b92:	3417      	adds	r4, #23
    2b94:	f024 0407 	bic.w	r4, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    2b98:	08a0      	lsrs	r0, r4, #2
    2b9a:	f7ff fdeb 	bl	2774 <z_log_msg_alloc>
    2b9e:	4683      	mov	fp, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
    2ba0:	4633      	mov	r3, r6
    2ba2:	4642      	mov	r2, r8
    2ba4:	4629      	mov	r1, r5
    2ba6:	4658      	mov	r0, fp
    2ba8:	f007 fa76 	bl	a098 <z_log_msg_finalize>
}
    2bac:	371c      	adds	r7, #28
    2bae:	46bd      	mov	sp, r7
    2bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bb4:	0000c788 	.word	0x0000c788
    2bb8:	0000c4e8 	.word	0x0000c4e8

00002bbc <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    2bbc:	b40e      	push	{r1, r2, r3}
    2bbe:	b500      	push	{lr}
    2bc0:	b084      	sub	sp, #16
    2bc2:	4601      	mov	r1, r0
    2bc4:	ab05      	add	r3, sp, #20
    2bc6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    2bca:	9303      	str	r3, [sp, #12]
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    2bcc:	2000      	movs	r0, #0
    2bce:	9000      	str	r0, [sp, #0]
    2bd0:	4803      	ldr	r0, [pc, #12]	; (2be0 <print_formatted+0x24>)
    2bd2:	f7ff f8d1 	bl	1d78 <z_cbvprintf_impl>
	length = cbvprintf(out_func, (void *)output, fmt, args);
	va_end(args);

	return length;
}
    2bd6:	b004      	add	sp, #16
    2bd8:	f85d eb04 	ldr.w	lr, [sp], #4
    2bdc:	b003      	add	sp, #12
    2bde:	4770      	bx	lr
    2be0:	0000a1fd 	.word	0x0000a1fd

00002be4 <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
    2be4:	b530      	push	{r4, r5, lr}
    2be6:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_CUSTOM_TIMESTAMP);


	if (!format) {
    2be8:	f011 0f44 	tst.w	r1, #68	; 0x44
    2bec:	d005      	beq.n	2bfa <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
    2bee:	4b1a      	ldr	r3, [pc, #104]	; (2c58 <timestamp_print+0x74>)
    2bf0:	681c      	ldr	r4, [r3, #0]
    2bf2:	b934      	cbnz	r4, 2c02 <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
    2bf4:	2000      	movs	r0, #0
	}

	return length;
}
    2bf6:	b005      	add	sp, #20
    2bf8:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    2bfa:	4918      	ldr	r1, [pc, #96]	; (2c5c <timestamp_print+0x78>)
    2bfc:	f7ff ffde 	bl	2bbc <print_formatted>
    2c00:	e7f9      	b.n	2bf6 <timestamp_print+0x12>
		timestamp /= timestamp_div;
    2c02:	4b17      	ldr	r3, [pc, #92]	; (2c60 <timestamp_print+0x7c>)
    2c04:	6819      	ldr	r1, [r3, #0]
    2c06:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    2c0a:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
    2c0e:	4a15      	ldr	r2, [pc, #84]	; (2c64 <timestamp_print+0x80>)
    2c10:	fba2 320c 	umull	r3, r2, r2, ip
    2c14:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    2c16:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    2c1a:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
    2c1e:	4b12      	ldr	r3, [pc, #72]	; (2c68 <timestamp_print+0x84>)
    2c20:	fba3 530e 	umull	r5, r3, r3, lr
    2c24:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    2c26:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
    2c2a:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    2c2e:	fb0c f101 	mul.w	r1, ip, r1
    2c32:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2c36:	fb04 1115 	mls	r1, r4, r5, r1
    2c3a:	fb0c f101 	mul.w	r1, ip, r1
    2c3e:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
    2c42:	9102      	str	r1, [sp, #8]
    2c44:	9501      	str	r5, [sp, #4]
    2c46:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    2c4a:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
    2c4e:	9100      	str	r1, [sp, #0]
    2c50:	4906      	ldr	r1, [pc, #24]	; (2c6c <timestamp_print+0x88>)
    2c52:	f7ff ffb3 	bl	2bbc <print_formatted>
    2c56:	e7ce      	b.n	2bf6 <timestamp_print+0x12>
    2c58:	200008cc 	.word	0x200008cc
    2c5c:	0000c7c8 	.word	0x0000c7c8
    2c60:	200008c8 	.word	0x200008c8
    2c64:	91a2b3c5 	.word	0x91a2b3c5
    2c68:	88888889 	.word	0x88888889
    2c6c:	0000c7d4 	.word	0x0000c7d4

00002c70 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    2c70:	b161      	cbz	r1, 2c8c <color_print+0x1c>
{
    2c72:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    2c74:	b12a      	cbz	r2, 2c82 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    2c76:	4a06      	ldr	r2, [pc, #24]	; (2c90 <color_print+0x20>)
    2c78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2c7c:	b912      	cbnz	r2, 2c84 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    2c7e:	4a05      	ldr	r2, [pc, #20]	; (2c94 <color_print+0x24>)
    2c80:	e000      	b.n	2c84 <color_print+0x14>
    2c82:	4a04      	ldr	r2, [pc, #16]	; (2c94 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    2c84:	4904      	ldr	r1, [pc, #16]	; (2c98 <color_print+0x28>)
    2c86:	f7ff ff99 	bl	2bbc <print_formatted>
	}
}
    2c8a:	bd08      	pop	{r3, pc}
    2c8c:	4770      	bx	lr
    2c8e:	bf00      	nop
    2c90:	0000c878 	.word	0x0000c878
    2c94:	0000c7f0 	.word	0x0000c7f0
    2c98:	0000c7f8 	.word	0x0000c7f8

00002c9c <ids_print>:
		     bool level_on,
		     bool func_on,
		     const char *domain,
		     const char *source,
		     uint32_t level)
{
    2c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ca0:	4605      	mov	r5, r0
    2ca2:	4690      	mov	r8, r2
    2ca4:	461e      	mov	r6, r3
    2ca6:	9f06      	ldr	r7, [sp, #24]
	int total = 0;

	if (level_on) {
    2ca8:	b981      	cbnz	r1, 2ccc <ids_print+0x30>
	int total = 0;
    2caa:	2400      	movs	r4, #0
		total += print_formatted(output, "<%s> ", severity[level]);
	}

	if (domain) {
    2cac:	b12e      	cbz	r6, 2cba <ids_print+0x1e>
		total += print_formatted(output, "%s/", domain);
    2cae:	4632      	mov	r2, r6
    2cb0:	4910      	ldr	r1, [pc, #64]	; (2cf4 <ids_print+0x58>)
    2cb2:	4628      	mov	r0, r5
    2cb4:	f7ff ff82 	bl	2bbc <print_formatted>
    2cb8:	4404      	add	r4, r0
	}

	if (source) {
    2cba:	b1b7      	cbz	r7, 2cea <ids_print+0x4e>
		total += print_formatted(output,
    2cbc:	f1b8 0f00 	cmp.w	r8, #0
    2cc0:	d00d      	beq.n	2cde <ids_print+0x42>
				(func_on &&
    2cc2:	9b07      	ldr	r3, [sp, #28]
    2cc4:	2b04      	cmp	r3, #4
    2cc6:	d013      	beq.n	2cf0 <ids_print+0x54>
		total += print_formatted(output,
    2cc8:	490b      	ldr	r1, [pc, #44]	; (2cf8 <ids_print+0x5c>)
    2cca:	e009      	b.n	2ce0 <ids_print+0x44>
		total += print_formatted(output, "<%s> ", severity[level]);
    2ccc:	4b0b      	ldr	r3, [pc, #44]	; (2cfc <ids_print+0x60>)
    2cce:	9a07      	ldr	r2, [sp, #28]
    2cd0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2cd4:	490a      	ldr	r1, [pc, #40]	; (2d00 <ids_print+0x64>)
    2cd6:	f7ff ff71 	bl	2bbc <print_formatted>
    2cda:	4604      	mov	r4, r0
    2cdc:	e7e6      	b.n	2cac <ids_print+0x10>
		total += print_formatted(output,
    2cde:	4906      	ldr	r1, [pc, #24]	; (2cf8 <ids_print+0x5c>)
    2ce0:	463a      	mov	r2, r7
    2ce2:	4628      	mov	r0, r5
    2ce4:	f7ff ff6a 	bl	2bbc <print_formatted>
    2ce8:	4404      	add	r4, r0
				"%s." : "%s: ",
				source);
	}

	return total;
}
    2cea:	4620      	mov	r0, r4
    2cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    2cf0:	4904      	ldr	r1, [pc, #16]	; (2d04 <ids_print+0x68>)
    2cf2:	e7f5      	b.n	2ce0 <ids_print+0x44>
    2cf4:	0000c810 	.word	0x0000c810
    2cf8:	0000c800 	.word	0x0000c800
    2cfc:	0000c88c 	.word	0x0000c88c
    2d00:	0000c808 	.word	0x0000c808
    2d04:	0000c7fc 	.word	0x0000c7fc

00002d08 <prefix_print>:
			     bool func_on,
			     log_timestamp_t timestamp,
			     const char *domain,
			     const char *source,
			     uint8_t level)
{
    2d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d0c:	b085      	sub	sp, #20
    2d0e:	4605      	mov	r5, r0
    2d10:	460c      	mov	r4, r1
    2d12:	4616      	mov	r6, r2
    2d14:	9303      	str	r3, [sp, #12]
    2d16:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    2d1a:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    2d1e:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    2d22:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    2d26:	f007 f99f 	bl	a068 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    2d2a:	b1d8      	cbz	r0, 2d64 <prefix_print+0x5c>
    2d2c:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    2d2e:	4912      	ldr	r1, [pc, #72]	; (2d78 <prefix_print+0x70>)
    2d30:	4628      	mov	r0, r5
    2d32:	f7ff ff43 	bl	2bbc <print_formatted>
    2d36:	4607      	mov	r7, r0
	}

	if (stamp) {
    2d38:	f1bb 0f00 	cmp.w	fp, #0
    2d3c:	d114      	bne.n	2d68 <prefix_print+0x60>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    2d3e:	4642      	mov	r2, r8
    2d40:	4651      	mov	r1, sl
    2d42:	4628      	mov	r0, r5
    2d44:	f007 fa1a 	bl	a17c <color_prefix>
	}

	length += ids_print(output, level_on, func_on, domain, source, level);
    2d48:	f8cd 8004 	str.w	r8, [sp, #4]
    2d4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2d4e:	9300      	str	r3, [sp, #0]
    2d50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2d52:	4632      	mov	r2, r6
    2d54:	4649      	mov	r1, r9
    2d56:	4628      	mov	r0, r5
    2d58:	f7ff ffa0 	bl	2c9c <ids_print>

	return length;
}
    2d5c:	4438      	add	r0, r7
    2d5e:	b005      	add	sp, #20
    2d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    2d64:	2700      	movs	r7, #0
    2d66:	e7e7      	b.n	2d38 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    2d68:	9a03      	ldr	r2, [sp, #12]
    2d6a:	4621      	mov	r1, r4
    2d6c:	4628      	mov	r0, r5
    2d6e:	f7ff ff39 	bl	2be4 <timestamp_print>
    2d72:	4407      	add	r7, r0
    2d74:	e7e3      	b.n	2d3e <prefix_print+0x36>
    2d76:	bf00      	nop
    2d78:	0000c814 	.word	0x0000c814

00002d7c <newline_print>:
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2d7c:	f011 0f10 	tst.w	r1, #16
    2d80:	d10b      	bne.n	2d9a <newline_print+0x1e>
{
    2d82:	b508      	push	{r3, lr}
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2d84:	f011 0f20 	tst.w	r1, #32
    2d88:	d003      	beq.n	2d92 <newline_print+0x16>
		print_formatted(ctx, "\n");
    2d8a:	4904      	ldr	r1, [pc, #16]	; (2d9c <newline_print+0x20>)
    2d8c:	f7ff ff16 	bl	2bbc <print_formatted>
}
    2d90:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    2d92:	4903      	ldr	r1, [pc, #12]	; (2da0 <newline_print+0x24>)
    2d94:	f7ff ff12 	bl	2bbc <print_formatted>
    2d98:	e7fa      	b.n	2d90 <newline_print+0x14>
    2d9a:	4770      	bx	lr
    2d9c:	0000c5d8 	.word	0x0000c5d8
    2da0:	0000c818 	.word	0x0000c818

00002da4 <hexdump_line_print>:
{
    2da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2da8:	4605      	mov	r5, r0
    2daa:	460f      	mov	r7, r1
    2dac:	4616      	mov	r6, r2
    2dae:	4698      	mov	r8, r3
	newline_print(output, flags);
    2db0:	9906      	ldr	r1, [sp, #24]
    2db2:	f7ff ffe3 	bl	2d7c <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    2db6:	2400      	movs	r4, #0
    2db8:	4544      	cmp	r4, r8
    2dba:	da05      	bge.n	2dc8 <hexdump_line_print+0x24>
		print_formatted(output, " ");
    2dbc:	4923      	ldr	r1, [pc, #140]	; (2e4c <hexdump_line_print+0xa8>)
    2dbe:	4628      	mov	r0, r5
    2dc0:	f7ff fefc 	bl	2bbc <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    2dc4:	3401      	adds	r4, #1
    2dc6:	e7f7      	b.n	2db8 <hexdump_line_print+0x14>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2dc8:	2400      	movs	r4, #0
    2dca:	e009      	b.n	2de0 <hexdump_line_print+0x3c>
			print_formatted(output, " ");
    2dcc:	491f      	ldr	r1, [pc, #124]	; (2e4c <hexdump_line_print+0xa8>)
    2dce:	4628      	mov	r0, r5
    2dd0:	f7ff fef4 	bl	2bbc <print_formatted>
    2dd4:	e00b      	b.n	2dee <hexdump_line_print+0x4a>
			print_formatted(output, "   ");
    2dd6:	491e      	ldr	r1, [pc, #120]	; (2e50 <hexdump_line_print+0xac>)
    2dd8:	4628      	mov	r0, r5
    2dda:	f7ff feef 	bl	2bbc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2dde:	3401      	adds	r4, #1
    2de0:	2c0f      	cmp	r4, #15
    2de2:	dc0c      	bgt.n	2dfe <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    2de4:	2c00      	cmp	r4, #0
    2de6:	dd02      	ble.n	2dee <hexdump_line_print+0x4a>
    2de8:	f014 0f07 	tst.w	r4, #7
    2dec:	d0ee      	beq.n	2dcc <hexdump_line_print+0x28>
		if (i < length) {
    2dee:	42b4      	cmp	r4, r6
    2df0:	d2f1      	bcs.n	2dd6 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    2df2:	5d3a      	ldrb	r2, [r7, r4]
    2df4:	4917      	ldr	r1, [pc, #92]	; (2e54 <hexdump_line_print+0xb0>)
    2df6:	4628      	mov	r0, r5
    2df8:	f7ff fee0 	bl	2bbc <print_formatted>
    2dfc:	e7ef      	b.n	2dde <hexdump_line_print+0x3a>
	print_formatted(output, "|");
    2dfe:	4916      	ldr	r1, [pc, #88]	; (2e58 <hexdump_line_print+0xb4>)
    2e00:	4628      	mov	r0, r5
    2e02:	f7ff fedb 	bl	2bbc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2e06:	2400      	movs	r4, #0
    2e08:	e009      	b.n	2e1e <hexdump_line_print+0x7a>
			print_formatted(output, " ");
    2e0a:	4910      	ldr	r1, [pc, #64]	; (2e4c <hexdump_line_print+0xa8>)
    2e0c:	4628      	mov	r0, r5
    2e0e:	f7ff fed5 	bl	2bbc <print_formatted>
    2e12:	e00b      	b.n	2e2c <hexdump_line_print+0x88>
			print_formatted(output, "%c",
    2e14:	4911      	ldr	r1, [pc, #68]	; (2e5c <hexdump_line_print+0xb8>)
    2e16:	4628      	mov	r0, r5
    2e18:	f7ff fed0 	bl	2bbc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2e1c:	3401      	adds	r4, #1
    2e1e:	2c0f      	cmp	r4, #15
    2e20:	dc12      	bgt.n	2e48 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    2e22:	2c00      	cmp	r4, #0
    2e24:	dd02      	ble.n	2e2c <hexdump_line_print+0x88>
    2e26:	f014 0f07 	tst.w	r4, #7
    2e2a:	d0ee      	beq.n	2e0a <hexdump_line_print+0x66>
		if (i < length) {
    2e2c:	42b4      	cmp	r4, r6
    2e2e:	d206      	bcs.n	2e3e <hexdump_line_print+0x9a>
			unsigned char c = (unsigned char)data[i];
    2e30:	5d3a      	ldrb	r2, [r7, r4]
	return (int)((((unsigned)c) >= ' ') &&
    2e32:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    2e36:	2b5e      	cmp	r3, #94	; 0x5e
    2e38:	d9ec      	bls.n	2e14 <hexdump_line_print+0x70>
    2e3a:	222e      	movs	r2, #46	; 0x2e
    2e3c:	e7ea      	b.n	2e14 <hexdump_line_print+0x70>
			print_formatted(output, " ");
    2e3e:	4903      	ldr	r1, [pc, #12]	; (2e4c <hexdump_line_print+0xa8>)
    2e40:	4628      	mov	r0, r5
    2e42:	f7ff febb 	bl	2bbc <print_formatted>
    2e46:	e7e9      	b.n	2e1c <hexdump_line_print+0x78>
}
    2e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2e4c:	0000c80c 	.word	0x0000c80c
    2e50:	0000c824 	.word	0x0000c824
    2e54:	0000c81c 	.word	0x0000c81c
    2e58:	0000c828 	.word	0x0000c828
    2e5c:	0000c82c 	.word	0x0000c82c

00002e60 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    2e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2e64:	b084      	sub	sp, #16
    2e66:	4604      	mov	r4, r0
    2e68:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
    2e6c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2e6e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    2e70:	b995      	cbnz	r5, 2e98 <log_output_process+0x38>
		prefix_offset = 0;
		/* source set to 1 indicates raw string and contrary to printk
		 * case it should not append anything to the output (printk is
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    2e72:	2b01      	cmp	r3, #1
    2e74:	d01b      	beq.n	2eae <log_output_process+0x4e>
    2e76:	4817      	ldr	r0, [pc, #92]	; (2ed4 <log_output_process+0x74>)
		prefix_offset = 0;
    2e78:	f04f 0800 	mov.w	r8, #0
	}

	if (package) {
    2e7c:	b127      	cbz	r7, 2e88 <log_output_process+0x28>
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    2e7e:	463b      	mov	r3, r7
    2e80:	4622      	mov	r2, r4
    2e82:	4915      	ldr	r1, [pc, #84]	; (2ed8 <log_output_process+0x78>)
    2e84:	f006 f8bd 	bl	9002 <cbpprintf_external>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    2e88:	b9ae      	cbnz	r6, 2eb6 <log_output_process+0x56>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    2e8a:	b9ed      	cbnz	r5, 2ec8 <log_output_process+0x68>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    2e8c:	4620      	mov	r0, r4
    2e8e:	f007 f9a8 	bl	a1e2 <log_output_flush>
}
    2e92:	b004      	add	sp, #16
    2e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
    2e98:	9502      	str	r5, [sp, #8]
    2e9a:	9301      	str	r3, [sp, #4]
    2e9c:	9200      	str	r2, [sp, #0]
    2e9e:	460b      	mov	r3, r1
    2ea0:	2200      	movs	r2, #0
    2ea2:	990e      	ldr	r1, [sp, #56]	; 0x38
    2ea4:	f7ff ff30 	bl	2d08 <prefix_print>
    2ea8:	4680      	mov	r8, r0
		cb = out_func;
    2eaa:	480c      	ldr	r0, [pc, #48]	; (2edc <log_output_process+0x7c>)
    2eac:	e7e6      	b.n	2e7c <log_output_process+0x1c>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    2eae:	480b      	ldr	r0, [pc, #44]	; (2edc <log_output_process+0x7c>)
		prefix_offset = 0;
    2eb0:	f04f 0800 	mov.w	r8, #0
    2eb4:	e7e2      	b.n	2e7c <log_output_process+0x1c>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
    2eb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2eb8:	9300      	str	r3, [sp, #0]
    2eba:	4643      	mov	r3, r8
    2ebc:	4632      	mov	r2, r6
    2ebe:	990c      	ldr	r1, [sp, #48]	; 0x30
    2ec0:	4620      	mov	r0, r4
    2ec2:	f007 f973 	bl	a1ac <log_msg_hexdump>
    2ec6:	e7e0      	b.n	2e8a <log_output_process+0x2a>
		postfix_print(output, flags, level);
    2ec8:	462a      	mov	r2, r5
    2eca:	990e      	ldr	r1, [sp, #56]	; 0x38
    2ecc:	4620      	mov	r0, r4
    2ece:	f007 f961 	bl	a194 <postfix_print>
    2ed2:	e7db      	b.n	2e8c <log_output_process+0x2c>
    2ed4:	0000a235 	.word	0x0000a235
    2ed8:	0000a16d 	.word	0x0000a16d
    2edc:	0000a1fd 	.word	0x0000a1fd

00002ee0 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    2ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ee4:	b086      	sub	sp, #24
    2ee6:	4605      	mov	r5, r0
    2ee8:	460c      	mov	r4, r1
    2eea:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    2eec:	f8d1 8008 	ldr.w	r8, [r1, #8]
	return msg->hdr.desc.level;
    2ef0:	880e      	ldrh	r6, [r1, #0]
    2ef2:	f3c6 1682 	ubfx	r6, r6, #6, #3
	return msg->hdr.desc.domain;
    2ef6:	7808      	ldrb	r0, [r1, #0]
    2ef8:	f3c0 00c2 	ubfx	r0, r0, #3, #3
	return msg->hdr.source;
    2efc:	684b      	ldr	r3, [r1, #4]
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    2efe:	b133      	cbz	r3, 2f0e <log_output_msg_process+0x2e>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    2f00:	4a11      	ldr	r2, [pc, #68]	; (2f48 <log_output_msg_process+0x68>)
    2f02:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    2f04:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    2f08:	2900      	cmp	r1, #0
    2f0a:	da18      	bge.n	2f3e <log_output_msg_process+0x5e>
    2f0c:	2300      	movs	r3, #0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    2f0e:	4622      	mov	r2, r4
    2f10:	f852 1b10 	ldr.w	r1, [r2], #16
    2f14:	f3c1 214a 	ubfx	r1, r1, #9, #11
	*len = msg->hdr.desc.data_len;
    2f18:	8860      	ldrh	r0, [r4, #2]
    2f1a:	f3c0 100b 	ubfx	r0, r0, #4, #12
	return msg->data + msg->hdr.desc.package_len;
    2f1e:	1854      	adds	r4, r2, r1
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    2f20:	b901      	cbnz	r1, 2f24 <log_output_msg_process+0x44>
    2f22:	2200      	movs	r2, #0
    2f24:	9704      	str	r7, [sp, #16]
    2f26:	9003      	str	r0, [sp, #12]
    2f28:	9402      	str	r4, [sp, #8]
    2f2a:	9201      	str	r2, [sp, #4]
    2f2c:	9600      	str	r6, [sp, #0]
    2f2e:	2200      	movs	r2, #0
    2f30:	4641      	mov	r1, r8
    2f32:	4628      	mov	r0, r5
    2f34:	f7ff ff94 	bl	2e60 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    2f38:	b006      	add	sp, #24
    2f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    2f3e:	f7ff fd55 	bl	29ec <log_source_name_get>
    2f42:	4603      	mov	r3, r0
    2f44:	e7e3      	b.n	2f0e <log_output_msg_process+0x2e>
    2f46:	bf00      	nop
    2f48:	0000c490 	.word	0x0000c490

00002f4c <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    2f4c:	b570      	push	{r4, r5, r6, lr}
    2f4e:	b082      	sub	sp, #8
    2f50:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
    2f52:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2f54:	f242 730f 	movw	r3, #9999	; 0x270f
    2f58:	428b      	cmp	r3, r1
    2f5a:	bf28      	it	cs
    2f5c:	460b      	movcs	r3, r1
    2f5e:	4a0e      	ldr	r2, [pc, #56]	; (2f98 <log_output_dropped_process+0x4c>)
    2f60:	2105      	movs	r1, #5
    2f62:	4668      	mov	r0, sp
    2f64:	f006 f8d0 	bl	9108 <snprintk>
    2f68:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
    2f6a:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    2f6c:	685b      	ldr	r3, [r3, #4]
    2f6e:	220b      	movs	r2, #11
    2f70:	490a      	ldr	r1, [pc, #40]	; (2f9c <log_output_dropped_process+0x50>)
    2f72:	4628      	mov	r0, r5
    2f74:	f007 f8ed 	bl	a152 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
    2f78:	6863      	ldr	r3, [r4, #4]
    2f7a:	685b      	ldr	r3, [r3, #4]
    2f7c:	4632      	mov	r2, r6
    2f7e:	4669      	mov	r1, sp
    2f80:	4628      	mov	r0, r5
    2f82:	f007 f8e6 	bl	a152 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
    2f86:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    2f88:	685b      	ldr	r3, [r3, #4]
    2f8a:	221b      	movs	r2, #27
    2f8c:	4904      	ldr	r1, [pc, #16]	; (2fa0 <log_output_dropped_process+0x54>)
    2f8e:	4628      	mov	r0, r5
    2f90:	f007 f8df 	bl	a152 <buffer_write>
}
    2f94:	b002      	add	sp, #8
    2f96:	bd70      	pop	{r4, r5, r6, pc}
    2f98:	0000c72c 	.word	0x0000c72c
    2f9c:	0000c84c 	.word	0x0000c84c
    2fa0:	0000c830 	.word	0x0000c830

00002fa4 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    2fa4:	4b07      	ldr	r3, [pc, #28]	; (2fc4 <log_output_timestamp_freq_set+0x20>)
    2fa6:	2201      	movs	r2, #1
    2fa8:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    2faa:	e004      	b.n	2fb6 <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
    2fac:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    2fae:	4a05      	ldr	r2, [pc, #20]	; (2fc4 <log_output_timestamp_freq_set+0x20>)
    2fb0:	6813      	ldr	r3, [r2, #0]
    2fb2:	005b      	lsls	r3, r3, #1
    2fb4:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    2fb6:	4b04      	ldr	r3, [pc, #16]	; (2fc8 <log_output_timestamp_freq_set+0x24>)
    2fb8:	4298      	cmp	r0, r3
    2fba:	d8f7      	bhi.n	2fac <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
    2fbc:	4b03      	ldr	r3, [pc, #12]	; (2fcc <log_output_timestamp_freq_set+0x28>)
    2fbe:	6018      	str	r0, [r3, #0]
}
    2fc0:	4770      	bx	lr
    2fc2:	bf00      	nop
    2fc4:	200008c8 	.word	0x200008c8
    2fc8:	000f4240 	.word	0x000f4240
    2fcc:	200008cc 	.word	0x200008cc

00002fd0 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    2fd0:	4b03      	ldr	r3, [pc, #12]	; (2fe0 <log_backend_rtt_init+0x10>)
    2fd2:	2201      	movs	r2, #1
    2fd4:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
    2fd6:	4b03      	ldr	r3, [pc, #12]	; (2fe4 <log_backend_rtt_init+0x14>)
    2fd8:	4a03      	ldr	r2, [pc, #12]	; (2fe8 <log_backend_rtt_init+0x18>)
    2fda:	601a      	str	r2, [r3, #0]
}
    2fdc:	4770      	bx	lr
    2fde:	bf00      	nop
    2fe0:	20000fce 	.word	0x20000fce
    2fe4:	200008f8 	.word	0x200008f8
    2fe8:	200008fc 	.word	0x200008fc

00002fec <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    2fec:	4b01      	ldr	r3, [pc, #4]	; (2ff4 <format_set+0x8>)
    2fee:	6019      	str	r1, [r3, #0]
	return 0;
}
    2ff0:	2000      	movs	r0, #0
    2ff2:	4770      	bx	lr
    2ff4:	200008e4 	.word	0x200008e4

00002ff8 <on_failed_write>:
{
    2ff8:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    2ffa:	b918      	cbnz	r0, 3004 <on_failed_write+0xc>
		host_present = false;
    2ffc:	4b07      	ldr	r3, [pc, #28]	; (301c <on_failed_write+0x24>)
    2ffe:	2200      	movs	r2, #0
    3000:	701a      	strb	r2, [r3, #0]
}
    3002:	bd08      	pop	{r3, pc}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    3004:	4b06      	ldr	r3, [pc, #24]	; (3020 <on_failed_write+0x28>)
    3006:	781b      	ldrb	r3, [r3, #0]
	} else if (is_sync_mode()) {
    3008:	b123      	cbz	r3, 3014 <on_failed_write+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
    300a:	f241 3088 	movw	r0, #5000	; 0x1388
    300e:	f009 f894 	bl	c13a <z_impl_k_busy_wait>
}
    3012:	e7f6      	b.n	3002 <on_failed_write+0xa>
		k_msleep(CONFIG_LOG_BACKEND_RTT_RETRY_DELAY_MS);
    3014:	2005      	movs	r0, #5
    3016:	f007 f91c 	bl	a252 <k_msleep>
}
    301a:	e7f2      	b.n	3002 <on_failed_write+0xa>
    301c:	20000fce 	.word	0x20000fce
    3020:	20000fcf 	.word	0x20000fcf

00003024 <on_write>:
{
    3024:	b538      	push	{r3, r4, r5, lr}
    3026:	4604      	mov	r4, r0
	host_present = true;
    3028:	4b0a      	ldr	r3, [pc, #40]	; (3054 <on_write+0x30>)
    302a:	2201      	movs	r2, #1
    302c:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    302e:	4b0a      	ldr	r3, [pc, #40]	; (3058 <on_write+0x34>)
    3030:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    3032:	b92b      	cbnz	r3, 3040 <on_write+0x1c>
}
    3034:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
    3036:	1e65      	subs	r5, r4, #1
    3038:	4620      	mov	r0, r4
    303a:	f7ff ffdd 	bl	2ff8 <on_failed_write>
    303e:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    3040:	2000      	movs	r0, #0
    3042:	f004 fb85 	bl	7750 <SEGGER_RTT_HasDataUp>
    3046:	2800      	cmp	r0, #0
    3048:	d0f4      	beq.n	3034 <on_write+0x10>
    304a:	4b02      	ldr	r3, [pc, #8]	; (3054 <on_write+0x30>)
    304c:	781b      	ldrb	r3, [r3, #0]
    304e:	2b00      	cmp	r3, #0
    3050:	d1f1      	bne.n	3036 <on_write+0x12>
    3052:	e7ef      	b.n	3034 <on_write+0x10>
    3054:	20000fce 	.word	0x20000fce
    3058:	20000fcf 	.word	0x20000fcf

0000305c <data_out_block_mode>:
{
    305c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    305e:	4606      	mov	r6, r0
    3060:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    3062:	2704      	movs	r7, #4
    3064:	e00d      	b.n	3082 <data_out_block_mode+0x26>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    3066:	462a      	mov	r2, r5
    3068:	4631      	mov	r1, r6
    306a:	2000      	movs	r0, #0
    306c:	f004 fb0c 	bl	7688 <SEGGER_RTT_WriteSkipNoLock>
    3070:	4604      	mov	r4, r0
    3072:	e014      	b.n	309e <data_out_block_mode+0x42>
			on_write(retry_cnt);
    3074:	4638      	mov	r0, r7
    3076:	f7ff ffd5 	bl	3024 <on_write>
	} while ((ret == 0) && host_present);
    307a:	b9dc      	cbnz	r4, 30b4 <data_out_block_mode+0x58>
    307c:	4b11      	ldr	r3, [pc, #68]	; (30c4 <data_out_block_mode+0x68>)
    307e:	781b      	ldrb	r3, [r3, #0]
    3080:	b1c3      	cbz	r3, 30b4 <data_out_block_mode+0x58>
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    3082:	4b11      	ldr	r3, [pc, #68]	; (30c8 <data_out_block_mode+0x6c>)
    3084:	781b      	ldrb	r3, [r3, #0]
		if (!is_sync_mode()) {
    3086:	2b00      	cmp	r3, #0
    3088:	d1ed      	bne.n	3066 <data_out_block_mode+0xa>
			RTT_LOCK();
    308a:	f004 fb71 	bl	7770 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    308e:	462a      	mov	r2, r5
    3090:	4631      	mov	r1, r6
    3092:	2000      	movs	r0, #0
    3094:	f004 faf8 	bl	7688 <SEGGER_RTT_WriteSkipNoLock>
    3098:	4604      	mov	r4, r0
			RTT_UNLOCK();
    309a:	f004 fb75 	bl	7788 <zephyr_rtt_mutex_unlock>
		if (ret) {
    309e:	2c00      	cmp	r4, #0
    30a0:	d1e8      	bne.n	3074 <data_out_block_mode+0x18>
		} else if (host_present) {
    30a2:	4b08      	ldr	r3, [pc, #32]	; (30c4 <data_out_block_mode+0x68>)
    30a4:	781b      	ldrb	r3, [r3, #0]
    30a6:	2b00      	cmp	r3, #0
    30a8:	d0e7      	beq.n	307a <data_out_block_mode+0x1e>
			retry_cnt--;
    30aa:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    30ac:	4638      	mov	r0, r7
    30ae:	f7ff ffa3 	bl	2ff8 <on_failed_write>
    30b2:	e7e2      	b.n	307a <data_out_block_mode+0x1e>
	return ((ret == 0) && host_present) ? 0 : length;
    30b4:	b914      	cbnz	r4, 30bc <data_out_block_mode+0x60>
    30b6:	4b03      	ldr	r3, [pc, #12]	; (30c4 <data_out_block_mode+0x68>)
    30b8:	781b      	ldrb	r3, [r3, #0]
    30ba:	b903      	cbnz	r3, 30be <data_out_block_mode+0x62>
    30bc:	462c      	mov	r4, r5
}
    30be:	4620      	mov	r0, r4
    30c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    30c2:	bf00      	nop
    30c4:	20000fce 	.word	0x20000fce
    30c8:	20000fcf 	.word	0x20000fcf

000030cc <panic>:
{
    30cc:	b508      	push	{r3, lr}
	panic_mode = true;
    30ce:	4b03      	ldr	r3, [pc, #12]	; (30dc <panic+0x10>)
    30d0:	2201      	movs	r2, #1
    30d2:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    30d4:	4802      	ldr	r0, [pc, #8]	; (30e0 <panic+0x14>)
    30d6:	f007 f884 	bl	a1e2 <log_output_flush>
}
    30da:	bd08      	pop	{r3, pc}
    30dc:	20000fcf 	.word	0x20000fcf
    30e0:	0000c8cc 	.word	0x0000c8cc

000030e4 <dropped>:
{
    30e4:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    30e6:	4802      	ldr	r0, [pc, #8]	; (30f0 <dropped+0xc>)
    30e8:	f7ff ff30 	bl	2f4c <log_output_dropped_process>
}
    30ec:	bd08      	pop	{r3, pc}
    30ee:	bf00      	nop
    30f0:	0000c8cc 	.word	0x0000c8cc

000030f4 <process>:
{
    30f4:	b510      	push	{r4, lr}
    30f6:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    30f8:	4b04      	ldr	r3, [pc, #16]	; (310c <process+0x18>)
    30fa:	6818      	ldr	r0, [r3, #0]
    30fc:	f7ff fa94 	bl	2628 <log_format_func_t_get>
    3100:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    3102:	220f      	movs	r2, #15
    3104:	4621      	mov	r1, r4
    3106:	4802      	ldr	r0, [pc, #8]	; (3110 <process+0x1c>)
    3108:	4798      	blx	r3
}
    310a:	bd10      	pop	{r4, pc}
    310c:	200008e4 	.word	0x200008e4
    3110:	0000c8cc 	.word	0x0000c8cc

00003114 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    3114:	b570      	push	{r4, r5, r6, lr}
    3116:	4606      	mov	r6, r0
    3118:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		goto cleanup;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
    311a:	2400      	movs	r4, #0
    311c:	e005      	b.n	312a <char_out+0x16>
			uart_poll_out(uart_dev, data[i]);
    311e:	5d31      	ldrb	r1, [r6, r4]
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    3120:	4804      	ldr	r0, [pc, #16]	; (3134 <char_out+0x20>)
    3122:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    3124:	685b      	ldr	r3, [r3, #4]
    3126:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    3128:	3401      	adds	r4, #1
    312a:	42ac      	cmp	r4, r5
    312c:	d3f7      	bcc.n	311e <char_out+0xa>
		/* As errors cannot be returned, ignore the return value */
		(void)pm_device_runtime_put(uart_dev);
	}

	return length;
}
    312e:	4628      	mov	r0, r5
    3130:	bd70      	pop	{r4, r5, r6, pc}
    3132:	bf00      	nop
    3134:	0000c260 	.word	0x0000c260

00003138 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    3138:	4b01      	ldr	r3, [pc, #4]	; (3140 <format_set+0x8>)
    313a:	6019      	str	r1, [r3, #0]
	return 0;
}
    313c:	2000      	movs	r0, #0
    313e:	4770      	bx	lr
    3140:	2000092c 	.word	0x2000092c

00003144 <panic>:
		}
	}
}

static void panic(struct log_backend const *const backend)
{
    3144:	b508      	push	{r3, lr}
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
    3146:	4b03      	ldr	r3, [pc, #12]	; (3154 <panic+0x10>)
    3148:	2201      	movs	r2, #1
    314a:	701a      	strb	r2, [r3, #0]
	log_output_flush(output);
    314c:	4802      	ldr	r0, [pc, #8]	; (3158 <panic+0x14>)
    314e:	f007 f848 	bl	a1e2 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    3152:	bd08      	pop	{r3, pc}
    3154:	20000fd0 	.word	0x20000fd0
    3158:	0000c918 	.word	0x0000c918

0000315c <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    315c:	b508      	push	{r3, lr}
	log_output_dropped_process(output, cnt);
    315e:	4802      	ldr	r0, [pc, #8]	; (3168 <dropped+0xc>)
    3160:	f7ff fef4 	bl	2f4c <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
    3164:	bd08      	pop	{r3, pc}
    3166:	bf00      	nop
    3168:	0000c918 	.word	0x0000c918

0000316c <process>:
{
    316c:	b510      	push	{r4, lr}
    316e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3170:	4b04      	ldr	r3, [pc, #16]	; (3184 <process+0x18>)
    3172:	6818      	ldr	r0, [r3, #0]
    3174:	f7ff fa58 	bl	2628 <log_format_func_t_get>
    3178:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    317a:	220f      	movs	r2, #15
    317c:	4621      	mov	r1, r4
    317e:	4802      	ldr	r0, [pc, #8]	; (3188 <process+0x1c>)
    3180:	4798      	blx	r3
}
    3182:	bd10      	pop	{r4, pc}
    3184:	2000092c 	.word	0x2000092c
    3188:	0000c918 	.word	0x0000c918

0000318c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    318c:	b570      	push	{r4, r5, r6, lr}
    318e:	4605      	mov	r5, r0
	__asm__ volatile(
    3190:	f04f 0320 	mov.w	r3, #32
    3194:	f3ef 8611 	mrs	r6, BASEPRI
    3198:	f383 8812 	msr	BASEPRI_MAX, r3
    319c:	f3bf 8f6f 	isb	sy
    31a0:	4b0e      	ldr	r3, [pc, #56]	; (31dc <pm_state_notify+0x50>)
    31a2:	681c      	ldr	r4, [r3, #0]
    31a4:	e00d      	b.n	31c2 <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
    31a6:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
    31a8:	b13a      	cbz	r2, 31ba <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    31aa:	4b0d      	ldr	r3, [pc, #52]	; (31e0 <pm_state_notify+0x54>)
    31ac:	7c1b      	ldrb	r3, [r3, #16]
    31ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    31b2:	490c      	ldr	r1, [pc, #48]	; (31e4 <pm_state_notify+0x58>)
    31b4:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    31b8:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    31ba:	4623      	mov	r3, r4
	return node->next;
    31bc:	6824      	ldr	r4, [r4, #0]
    31be:	b104      	cbz	r4, 31c2 <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    31c0:	b123      	cbz	r3, 31cc <pm_state_notify+0x40>
    31c2:	b12c      	cbz	r4, 31d0 <pm_state_notify+0x44>
		if (entering_state) {
    31c4:	2d00      	cmp	r5, #0
    31c6:	d0ee      	beq.n	31a6 <pm_state_notify+0x1a>
			callback = notifier->state_entry;
    31c8:	6862      	ldr	r2, [r4, #4]
    31ca:	e7ed      	b.n	31a8 <pm_state_notify+0x1c>
    31cc:	461c      	mov	r4, r3
    31ce:	e7f8      	b.n	31c2 <pm_state_notify+0x36>
	__asm__ volatile(
    31d0:	f386 8811 	msr	BASEPRI, r6
    31d4:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    31d8:	bd70      	pop	{r4, r5, r6, pc}
    31da:	bf00      	nop
    31dc:	20000948 	.word	0x20000948
    31e0:	20000f88 	.word	0x20000f88
    31e4:	2000093c 	.word	0x2000093c

000031e8 <pm_exit_pos_ops>:
{
    31e8:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
    31ea:	4b06      	ldr	r3, [pc, #24]	; (3204 <pm_exit_pos_ops+0x1c>)
    31ec:	b123      	cbz	r3, 31f8 <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
    31ee:	7841      	ldrb	r1, [r0, #1]
    31f0:	7800      	ldrb	r0, [r0, #0]
    31f2:	f007 f9ab 	bl	a54c <pm_state_exit_post_ops>
}
    31f6:	bd08      	pop	{r3, pc}
    31f8:	2300      	movs	r3, #0
    31fa:	f383 8811 	msr	BASEPRI, r3
    31fe:	f3bf 8f6f 	isb	sy
    3202:	e7f8      	b.n	31f6 <pm_exit_pos_ops+0xe>
    3204:	0000a54d 	.word	0x0000a54d

00003208 <pm_system_resume>:

void pm_system_resume(void)
{
    3208:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    320a:	4b0e      	ldr	r3, [pc, #56]	; (3244 <pm_system_resume+0x3c>)
    320c:	7c1c      	ldrb	r4, [r3, #16]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    320e:	4621      	mov	r1, r4
    3210:	480d      	ldr	r0, [pc, #52]	; (3248 <pm_system_resume+0x40>)
    3212:	f007 f835 	bl	a280 <atomic_test_and_clear_bit>
    3216:	b900      	cbnz	r0, 321a <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    3218:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    321a:	0065      	lsls	r5, r4, #1
    321c:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    3220:	4e0a      	ldr	r6, [pc, #40]	; (324c <pm_system_resume+0x44>)
    3222:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    3226:	f7ff ffdf 	bl	31e8 <pm_exit_pos_ops>
		pm_state_notify(false);
    322a:	2000      	movs	r0, #0
    322c:	f7ff ffae 	bl	318c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    3230:	192b      	adds	r3, r5, r4
    3232:	0099      	lsls	r1, r3, #2
    3234:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    3238:	2200      	movs	r2, #0
    323a:	5072      	str	r2, [r6, r1]
    323c:	605a      	str	r2, [r3, #4]
    323e:	609a      	str	r2, [r3, #8]
}
    3240:	e7ea      	b.n	3218 <pm_system_resume+0x10>
    3242:	bf00      	nop
    3244:	20000f88 	.word	0x20000f88
    3248:	20000950 	.word	0x20000950
    324c:	2000093c 	.word	0x2000093c

00003250 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    3250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3252:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
    3254:	4b38      	ldr	r3, [pc, #224]	; (3338 <pm_system_suspend+0xe8>)
    3256:	7c1c      	ldrb	r4, [r3, #16]
	__asm__ volatile(
    3258:	f04f 0320 	mov.w	r3, #32
    325c:	f3ef 8611 	mrs	r6, BASEPRI
    3260:	f383 8812 	msr	BASEPRI_MAX, r3
    3264:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    3268:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    326c:	4b33      	ldr	r3, [pc, #204]	; (333c <pm_system_suspend+0xec>)
    326e:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
    3272:	2b00      	cmp	r3, #0
    3274:	d039      	beq.n	32ea <pm_system_suspend+0x9a>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    3276:	4b32      	ldr	r3, [pc, #200]	; (3340 <pm_system_suspend+0xf0>)
    3278:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
    327c:	4f2f      	ldr	r7, [pc, #188]	; (333c <pm_system_suspend+0xec>)
    327e:	ea4f 0e82 	mov.w	lr, r2, lsl #2
    3282:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    3286:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    328a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    328e:	2300      	movs	r3, #0
    3290:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
    3294:	f386 8811 	msr	BASEPRI, r6
    3298:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    329c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    32a0:	4a27      	ldr	r2, [pc, #156]	; (3340 <pm_system_suspend+0xf0>)
    32a2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    32a6:	2b00      	cmp	r3, #0
    32a8:	d044      	beq.n	3334 <pm_system_suspend+0xe4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    32aa:	f1b5 3fff 	cmp.w	r5, #4294967295
    32ae:	d12b      	bne.n	3308 <pm_system_suspend+0xb8>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    32b0:	f005 f8ae 	bl	8410 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    32b4:	2001      	movs	r0, #1
    32b6:	f7ff ff69 	bl	318c <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
    32ba:	4621      	mov	r1, r4
    32bc:	4821      	ldr	r0, [pc, #132]	; (3344 <pm_system_suspend+0xf4>)
    32be:	f006 fffb 	bl	a2b8 <atomic_set_bit>
	if (pm_state_set != NULL) {
    32c2:	4b21      	ldr	r3, [pc, #132]	; (3348 <pm_system_suspend+0xf8>)
    32c4:	b15b      	cbz	r3, 32de <pm_system_suspend+0x8e>
		pm_state_set(info->state, info->substate_id);
    32c6:	4a1e      	ldr	r2, [pc, #120]	; (3340 <pm_system_suspend+0xf0>)
    32c8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    32cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    32d0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    32d4:	7859      	ldrb	r1, [r3, #1]
    32d6:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
    32da:	f007 f92f 	bl	a53c <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    32de:	f7ff ff93 	bl	3208 <pm_system_resume>
	k_sched_unlock();
    32e2:	f005 fa81 	bl	87e8 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    32e6:	2001      	movs	r0, #1
}
    32e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
    32ea:	4601      	mov	r1, r0
    32ec:	4620      	mov	r0, r4
    32ee:	f000 f831 	bl	3354 <pm_policy_next_state>
		if (info != NULL) {
    32f2:	2800      	cmp	r0, #0
    32f4:	d0ce      	beq.n	3294 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    32f6:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    32fa:	4b11      	ldr	r3, [pc, #68]	; (3340 <pm_system_suspend+0xf0>)
    32fc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3300:	c807      	ldmia	r0, {r0, r1, r2}
    3302:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    3306:	e7c5      	b.n	3294 <pm_system_suspend+0x44>
		     k_us_to_ticks_ceil32(
    3308:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    330c:	4b0c      	ldr	r3, [pc, #48]	; (3340 <pm_system_suspend+0xf0>)
    330e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3312:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
    3314:	0c41      	lsrs	r1, r0, #17
    3316:	03c0      	lsls	r0, r0, #15
    3318:	4b0c      	ldr	r3, [pc, #48]	; (334c <pm_system_suspend+0xfc>)
    331a:	18c0      	adds	r0, r0, r3
    331c:	4a0c      	ldr	r2, [pc, #48]	; (3350 <pm_system_suspend+0x100>)
    331e:	f04f 0300 	mov.w	r3, #0
    3322:	f141 0100 	adc.w	r1, r1, #0
    3326:	f7fd fb09 	bl	93c <__aeabi_uldivmod>
		sys_clock_set_timeout(ticks -
    332a:	2101      	movs	r1, #1
    332c:	1a28      	subs	r0, r5, r0
    332e:	f003 f90b 	bl	6548 <sys_clock_set_timeout>
    3332:	e7bd      	b.n	32b0 <pm_system_suspend+0x60>
		return false;
    3334:	2000      	movs	r0, #0
    3336:	e7d7      	b.n	32e8 <pm_system_suspend+0x98>
    3338:	20000f88 	.word	0x20000f88
    333c:	20000930 	.word	0x20000930
    3340:	2000093c 	.word	0x2000093c
    3344:	20000950 	.word	0x20000950
    3348:	0000a53d 	.word	0x0000a53d
    334c:	000f423f 	.word	0x000f423f
    3350:	000f4240 	.word	0x000f4240

00003354 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    3354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3358:	b082      	sub	sp, #8
    335a:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    335c:	a901      	add	r1, sp, #4
    335e:	f000 f845 	bl	33ec <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3362:	1e44      	subs	r4, r0, #1
    3364:	b224      	sxth	r4, r4
    3366:	e007      	b.n	3378 <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
    3368:	f1b6 3fff 	cmp.w	r6, #4294967295
    336c:	d033      	beq.n	33d6 <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
    336e:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
    3370:	45b0      	cmp	r8, r6
    3372:	d930      	bls.n	33d6 <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3374:	3c01      	subs	r4, #1
    3376:	b224      	sxth	r4, r4
    3378:	2c00      	cmp	r4, #0
    337a:	db2b      	blt.n	33d4 <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
    337c:	9b01      	ldr	r3, [sp, #4]
    337e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    3382:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
    3386:	7869      	ldrb	r1, [r5, #1]
    3388:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    338c:	f006 ffa7 	bl	a2de <pm_policy_state_lock_is_active>
    3390:	2800      	cmp	r0, #0
    3392:	d1ef      	bne.n	3374 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    3394:	6868      	ldr	r0, [r5, #4]
    3396:	0c41      	lsrs	r1, r0, #17
    3398:	03c0      	lsls	r0, r0, #15
    339a:	4f11      	ldr	r7, [pc, #68]	; (33e0 <pm_policy_next_state+0x8c>)
    339c:	19c0      	adds	r0, r0, r7
    339e:	4a11      	ldr	r2, [pc, #68]	; (33e4 <pm_policy_next_state+0x90>)
    33a0:	f04f 0300 	mov.w	r3, #0
    33a4:	f141 0100 	adc.w	r1, r1, #0
    33a8:	f7fd fac8 	bl	93c <__aeabi_uldivmod>
    33ac:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    33ae:	68ab      	ldr	r3, [r5, #8]
    33b0:	0c59      	lsrs	r1, r3, #17
    33b2:	03db      	lsls	r3, r3, #15
    33b4:	19d8      	adds	r0, r3, r7
    33b6:	4a0b      	ldr	r2, [pc, #44]	; (33e4 <pm_policy_next_state+0x90>)
    33b8:	f04f 0300 	mov.w	r3, #0
    33bc:	f141 0100 	adc.w	r1, r1, #0
    33c0:	f7fd fabc 	bl	93c <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    33c4:	4b08      	ldr	r3, [pc, #32]	; (33e8 <pm_policy_next_state+0x94>)
    33c6:	681b      	ldr	r3, [r3, #0]
    33c8:	f1b3 3fff 	cmp.w	r3, #4294967295
    33cc:	d0cc      	beq.n	3368 <pm_policy_next_state+0x14>
    33ce:	4283      	cmp	r3, r0
    33d0:	d8ca      	bhi.n	3368 <pm_policy_next_state+0x14>
    33d2:	e7cf      	b.n	3374 <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
    33d4:	2500      	movs	r5, #0
}
    33d6:	4628      	mov	r0, r5
    33d8:	b002      	add	sp, #8
    33da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    33de:	bf00      	nop
    33e0:	000f423f 	.word	0x000f423f
    33e4:	000f4240 	.word	0x000f4240
    33e8:	20000008 	.word	0x20000008

000033ec <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    33ec:	b908      	cbnz	r0, 33f2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    33ee:	4b02      	ldr	r3, [pc, #8]	; (33f8 <pm_state_cpu_get_all+0xc>)
    33f0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    33f2:	2000      	movs	r0, #0
    33f4:	4770      	bx	lr
    33f6:	bf00      	nop
    33f8:	0000c92c 	.word	0x0000c92c

000033fc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    33fc:	4901      	ldr	r1, [pc, #4]	; (3404 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    33fe:	2210      	movs	r2, #16
	str	r2, [r1]
    3400:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3402:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3404:	e000ed10 	.word	0xe000ed10

00003408 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3408:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    340a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    340c:	f380 8811 	msr	BASEPRI, r0
	isb
    3410:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    3414:	f3bf 8f4f 	dsb	sy
    3418:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    341a:	b662      	cpsie	i
	isb
    341c:	f3bf 8f6f 	isb	sy

	bx	lr
    3420:	4770      	bx	lr
    3422:	bf00      	nop

00003424 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3424:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    3426:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3428:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    342c:	f3bf 8f4f 	dsb	sy
    3430:	bf20      	wfe

	msr	BASEPRI, r0
    3432:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3436:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3438:	4770      	bx	lr
    343a:	bf00      	nop

0000343c <esf_dump>:
#include <kernel_arch_data.h>
#include <zephyr/logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    343c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3440:	b082      	sub	sp, #8
    3442:	af00      	add	r7, sp, #0
    3444:	4604      	mov	r4, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    3446:	f8d0 e000 	ldr.w	lr, [r0]
    344a:	f8d0 c004 	ldr.w	ip, [r0, #4]
    344e:	6886      	ldr	r6, [r0, #8]
    3450:	466d      	mov	r5, sp
    3452:	b08a      	sub	sp, #40	; 0x28
    3454:	466b      	mov	r3, sp
    3456:	f113 0210 	adds.w	r2, r3, #16
    345a:	f000 80eb 	beq.w	3634 <esf_dump+0x1f8>
    345e:	2114      	movs	r1, #20
    3460:	b18a      	cbz	r2, 3486 <esf_dump+0x4a>
    3462:	4608      	mov	r0, r1
    3464:	2904      	cmp	r1, #4
    3466:	dd03      	ble.n	3470 <esf_dump+0x34>
    3468:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 3664 <esf_dump+0x228>
    346c:	f8c3 8014 	str.w	r8, [r3, #20]
    3470:	2808      	cmp	r0, #8
    3472:	dd01      	ble.n	3478 <esf_dump+0x3c>
    3474:	f8c3 e018 	str.w	lr, [r3, #24]
    3478:	280c      	cmp	r0, #12
    347a:	dd01      	ble.n	3480 <esf_dump+0x44>
    347c:	f8c3 c01c 	str.w	ip, [r3, #28]
    3480:	2810      	cmp	r0, #16
    3482:	dd00      	ble.n	3486 <esf_dump+0x4a>
    3484:	621e      	str	r6, [r3, #32]
    3486:	2913      	cmp	r1, #19
    3488:	f340 80d7 	ble.w	363a <esf_dump+0x1fe>
    348c:	f04f 0c14 	mov.w	ip, #20
    3490:	b13a      	cbz	r2, 34a2 <esf_dump+0x66>
    3492:	2105      	movs	r1, #5
    3494:	7139      	strb	r1, [r7, #4]
    3496:	2100      	movs	r1, #0
    3498:	7179      	strb	r1, [r7, #5]
    349a:	71b9      	strb	r1, [r7, #6]
    349c:	71f9      	strb	r1, [r7, #7]
    349e:	6878      	ldr	r0, [r7, #4]
    34a0:	6118      	str	r0, [r3, #16]
    34a2:	2100      	movs	r1, #0
    34a4:	f36f 0100 	bfc	r1, #0, #1
    34a8:	f36f 0141 	bfc	r1, #1, #1
    34ac:	f36f 0182 	bfc	r1, #2, #1
    34b0:	f36f 01c5 	bfc	r1, #3, #3
    34b4:	2301      	movs	r3, #1
    34b6:	f363 1188 	bfi	r1, r3, #6, #3
    34ba:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    34be:	f36c 2153 	bfi	r1, ip, #9, #11
    34c2:	f36f 511f 	bfc	r1, #20, #12
    34c6:	2300      	movs	r3, #0
    34c8:	4867      	ldr	r0, [pc, #412]	; (3668 <esf_dump+0x22c>)
    34ca:	f7ff facb 	bl	2a64 <z_impl_z_log_msg_static_create>
    34ce:	46ad      	mov	sp, r5
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    34d0:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    34d4:	f8d4 c010 	ldr.w	ip, [r4, #16]
    34d8:	6966      	ldr	r6, [r4, #20]
    34da:	466d      	mov	r5, sp
    34dc:	b08a      	sub	sp, #40	; 0x28
    34de:	466b      	mov	r3, sp
    34e0:	f113 0210 	adds.w	r2, r3, #16
    34e4:	f000 80ac 	beq.w	3640 <esf_dump+0x204>
    34e8:	2114      	movs	r1, #20
    34ea:	b18a      	cbz	r2, 3510 <esf_dump+0xd4>
    34ec:	4608      	mov	r0, r1
    34ee:	2904      	cmp	r1, #4
    34f0:	dd03      	ble.n	34fa <esf_dump+0xbe>
    34f2:	f8df 8178 	ldr.w	r8, [pc, #376]	; 366c <esf_dump+0x230>
    34f6:	f8c3 8014 	str.w	r8, [r3, #20]
    34fa:	2808      	cmp	r0, #8
    34fc:	dd01      	ble.n	3502 <esf_dump+0xc6>
    34fe:	f8c3 e018 	str.w	lr, [r3, #24]
    3502:	280c      	cmp	r0, #12
    3504:	dd01      	ble.n	350a <esf_dump+0xce>
    3506:	f8c3 c01c 	str.w	ip, [r3, #28]
    350a:	2810      	cmp	r0, #16
    350c:	dd00      	ble.n	3510 <esf_dump+0xd4>
    350e:	621e      	str	r6, [r3, #32]
    3510:	2913      	cmp	r1, #19
    3512:	f340 8098 	ble.w	3646 <esf_dump+0x20a>
    3516:	f04f 0c14 	mov.w	ip, #20
    351a:	b13a      	cbz	r2, 352c <esf_dump+0xf0>
    351c:	2105      	movs	r1, #5
    351e:	7139      	strb	r1, [r7, #4]
    3520:	2100      	movs	r1, #0
    3522:	7179      	strb	r1, [r7, #5]
    3524:	71b9      	strb	r1, [r7, #6]
    3526:	71f9      	strb	r1, [r7, #7]
    3528:	6878      	ldr	r0, [r7, #4]
    352a:	6118      	str	r0, [r3, #16]
    352c:	2100      	movs	r1, #0
    352e:	f36f 0100 	bfc	r1, #0, #1
    3532:	f36f 0141 	bfc	r1, #1, #1
    3536:	f36f 0182 	bfc	r1, #2, #1
    353a:	f36f 01c5 	bfc	r1, #3, #3
    353e:	2301      	movs	r3, #1
    3540:	f363 1188 	bfi	r1, r3, #6, #3
    3544:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    3548:	f36c 2153 	bfi	r1, ip, #9, #11
    354c:	f36f 511f 	bfc	r1, #20, #12
    3550:	2300      	movs	r3, #0
    3552:	4845      	ldr	r0, [pc, #276]	; (3668 <esf_dump+0x22c>)
    3554:	f7ff fa86 	bl	2a64 <z_impl_z_log_msg_static_create>
    3558:	46ad      	mov	sp, r5
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    355a:	69e6      	ldr	r6, [r4, #28]
    355c:	466d      	mov	r5, sp
    355e:	b088      	sub	sp, #32
    3560:	466b      	mov	r3, sp
    3562:	f113 0210 	adds.w	r2, r3, #16
    3566:	d071      	beq.n	364c <esf_dump+0x210>
    3568:	210c      	movs	r1, #12
    356a:	b14a      	cbz	r2, 3580 <esf_dump+0x144>
    356c:	4608      	mov	r0, r1
    356e:	2904      	cmp	r1, #4
    3570:	dd03      	ble.n	357a <esf_dump+0x13e>
    3572:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 3670 <esf_dump+0x234>
    3576:	f8c3 c014 	str.w	ip, [r3, #20]
    357a:	2808      	cmp	r0, #8
    357c:	dd00      	ble.n	3580 <esf_dump+0x144>
    357e:	619e      	str	r6, [r3, #24]
    3580:	290b      	cmp	r1, #11
    3582:	dd66      	ble.n	3652 <esf_dump+0x216>
    3584:	f04f 0c0c 	mov.w	ip, #12
    3588:	b13a      	cbz	r2, 359a <esf_dump+0x15e>
    358a:	2103      	movs	r1, #3
    358c:	7139      	strb	r1, [r7, #4]
    358e:	2100      	movs	r1, #0
    3590:	7179      	strb	r1, [r7, #5]
    3592:	71b9      	strb	r1, [r7, #6]
    3594:	71f9      	strb	r1, [r7, #7]
    3596:	6878      	ldr	r0, [r7, #4]
    3598:	6118      	str	r0, [r3, #16]
    359a:	2100      	movs	r1, #0
    359c:	f36f 0100 	bfc	r1, #0, #1
    35a0:	f36f 0141 	bfc	r1, #1, #1
    35a4:	f36f 0182 	bfc	r1, #2, #1
    35a8:	f36f 01c5 	bfc	r1, #3, #3
    35ac:	2301      	movs	r3, #1
    35ae:	f363 1188 	bfi	r1, r3, #6, #3
    35b2:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    35b6:	f36c 2153 	bfi	r1, ip, #9, #11
    35ba:	f36f 511f 	bfc	r1, #20, #12
    35be:	2300      	movs	r3, #0
    35c0:	4829      	ldr	r0, [pc, #164]	; (3668 <esf_dump+0x22c>)
    35c2:	f7ff fa4f 	bl	2a64 <z_impl_z_log_msg_static_create>
    35c6:	46ad      	mov	sp, r5
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    35c8:	69a4      	ldr	r4, [r4, #24]
    35ca:	b088      	sub	sp, #32
    35cc:	466b      	mov	r3, sp
    35ce:	f113 0210 	adds.w	r2, r3, #16
    35d2:	d041      	beq.n	3658 <esf_dump+0x21c>
    35d4:	210c      	movs	r1, #12
    35d6:	b13a      	cbz	r2, 35e8 <esf_dump+0x1ac>
    35d8:	4608      	mov	r0, r1
    35da:	2904      	cmp	r1, #4
    35dc:	dd01      	ble.n	35e2 <esf_dump+0x1a6>
    35de:	4d25      	ldr	r5, [pc, #148]	; (3674 <esf_dump+0x238>)
    35e0:	615d      	str	r5, [r3, #20]
    35e2:	2808      	cmp	r0, #8
    35e4:	dd00      	ble.n	35e8 <esf_dump+0x1ac>
    35e6:	619c      	str	r4, [r3, #24]
    35e8:	290b      	cmp	r1, #11
    35ea:	dd38      	ble.n	365e <esf_dump+0x222>
    35ec:	240c      	movs	r4, #12
    35ee:	b13a      	cbz	r2, 3600 <esf_dump+0x1c4>
    35f0:	2103      	movs	r1, #3
    35f2:	7139      	strb	r1, [r7, #4]
    35f4:	2100      	movs	r1, #0
    35f6:	7179      	strb	r1, [r7, #5]
    35f8:	71b9      	strb	r1, [r7, #6]
    35fa:	71f9      	strb	r1, [r7, #7]
    35fc:	6878      	ldr	r0, [r7, #4]
    35fe:	6118      	str	r0, [r3, #16]
    3600:	2100      	movs	r1, #0
    3602:	f36f 0100 	bfc	r1, #0, #1
    3606:	f36f 0141 	bfc	r1, #1, #1
    360a:	f36f 0182 	bfc	r1, #2, #1
    360e:	f36f 01c5 	bfc	r1, #3, #3
    3612:	2301      	movs	r3, #1
    3614:	f363 1188 	bfi	r1, r3, #6, #3
    3618:	f3c4 040a 	ubfx	r4, r4, #0, #11
    361c:	f364 2153 	bfi	r1, r4, #9, #11
    3620:	f36f 511f 	bfc	r1, #20, #12
    3624:	2300      	movs	r3, #0
    3626:	4810      	ldr	r0, [pc, #64]	; (3668 <esf_dump+0x22c>)
    3628:	f7ff fa1c 	bl	2a64 <z_impl_z_log_msg_static_create>
		esf->basic.pc);
}
    362c:	3708      	adds	r7, #8
    362e:	46bd      	mov	sp, r7
    3630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    3634:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3638:	e712      	b.n	3460 <esf_dump+0x24>
    363a:	f06f 0c1b 	mvn.w	ip, #27
    363e:	e727      	b.n	3490 <esf_dump+0x54>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    3640:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3644:	e751      	b.n	34ea <esf_dump+0xae>
    3646:	f06f 0c1b 	mvn.w	ip, #27
    364a:	e766      	b.n	351a <esf_dump+0xde>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    364c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3650:	e78b      	b.n	356a <esf_dump+0x12e>
    3652:	f06f 0c1b 	mvn.w	ip, #27
    3656:	e797      	b.n	3588 <esf_dump+0x14c>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    3658:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    365c:	e7bb      	b.n	35d6 <esf_dump+0x19a>
    365e:	f06f 041b 	mvn.w	r4, #27
    3662:	e7c4      	b.n	35ee <esf_dump+0x1b2>
    3664:	0000c92c 	.word	0x0000c92c
    3668:	0000c508 	.word	0x0000c508
    366c:	0000c95c 	.word	0x0000c95c
    3670:	0000c98c 	.word	0x0000c98c
    3674:	0000c99c 	.word	0x0000c99c

00003678 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3678:	2800      	cmp	r0, #0
    367a:	db07      	blt.n	368c <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    367c:	f000 021f 	and.w	r2, r0, #31
    3680:	0940      	lsrs	r0, r0, #5
    3682:	2301      	movs	r3, #1
    3684:	4093      	lsls	r3, r2
    3686:	4a02      	ldr	r2, [pc, #8]	; (3690 <__NVIC_EnableIRQ+0x18>)
    3688:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
    368c:	4770      	bx	lr
    368e:	bf00      	nop
    3690:	e000e100 	.word	0xe000e100

00003694 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3694:	2800      	cmp	r0, #0
    3696:	db08      	blt.n	36aa <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3698:	0149      	lsls	r1, r1, #5
    369a:	b2c9      	uxtb	r1, r1
    369c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    36a0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    36a4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    36a8:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    36aa:	f000 000f 	and.w	r0, r0, #15
    36ae:	0149      	lsls	r1, r1, #5
    36b0:	b2c9      	uxtb	r1, r1
    36b2:	4b01      	ldr	r3, [pc, #4]	; (36b8 <__NVIC_SetPriority+0x24>)
    36b4:	5419      	strb	r1, [r3, r0]
  }
}
    36b6:	4770      	bx	lr
    36b8:	e000ed14 	.word	0xe000ed14

000036bc <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    36bc:	0942      	lsrs	r2, r0, #5
    36be:	4b05      	ldr	r3, [pc, #20]	; (36d4 <arch_irq_is_enabled+0x18>)
    36c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    36c4:	f000 001f 	and.w	r0, r0, #31
    36c8:	2301      	movs	r3, #1
    36ca:	fa03 f000 	lsl.w	r0, r3, r0
}
    36ce:	4010      	ands	r0, r2
    36d0:	4770      	bx	lr
    36d2:	bf00      	nop
    36d4:	e000e100 	.word	0xe000e100

000036d8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    36d8:	bf30      	wfi
    b z_SysNmiOnReset
    36da:	f7ff bffd 	b.w	36d8 <z_SysNmiOnReset>
    36de:	bf00      	nop

000036e0 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    36e0:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    36e2:	4b0b      	ldr	r3, [pc, #44]	; (3710 <z_arm_prep_c+0x30>)
    36e4:	4a0b      	ldr	r2, [pc, #44]	; (3714 <z_arm_prep_c+0x34>)
    36e6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    36ea:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    36ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    36f0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    36f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    36f8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    36fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3700:	f004 fa16 	bl	7b30 <z_bss_zero>
	z_data_copy();
    3704:	f005 f9d8 	bl	8ab8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3708:	f000 ff9e 	bl	4648 <z_arm_interrupt_init>
	z_cstart();
    370c:	f004 fa6e 	bl	7bec <z_cstart>
    3710:	e000ed00 	.word	0xe000ed00
    3714:	00000000 	.word	0x00000000

00003718 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3718:	4a0a      	ldr	r2, [pc, #40]	; (3744 <arch_swap+0x2c>)
    371a:	6893      	ldr	r3, [r2, #8]
    371c:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    3720:	4909      	ldr	r1, [pc, #36]	; (3748 <arch_swap+0x30>)
    3722:	6809      	ldr	r1, [r1, #0]
    3724:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3728:	4908      	ldr	r1, [pc, #32]	; (374c <arch_swap+0x34>)
    372a:	684b      	ldr	r3, [r1, #4]
    372c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3730:	604b      	str	r3, [r1, #4]
    3732:	2300      	movs	r3, #0
    3734:	f383 8811 	msr	BASEPRI, r3
    3738:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    373c:	6893      	ldr	r3, [r2, #8]
}
    373e:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    3742:	4770      	bx	lr
    3744:	20000f88 	.word	0x20000f88
    3748:	0000d2b8 	.word	0x0000d2b8
    374c:	e000ed00 	.word	0xe000ed00

00003750 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3750:	4913      	ldr	r1, [pc, #76]	; (37a0 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3752:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3754:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3758:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    375a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    375e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3762:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3764:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3768:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    376c:	4f0d      	ldr	r7, [pc, #52]	; (37a4 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    376e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3772:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    3774:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3776:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3778:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    377c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    377e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3782:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    3786:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    3788:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    378a:	f001 f80d 	bl	47a8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    378e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3792:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3796:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    379a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    379e:	4770      	bx	lr
    ldr r1, =_kernel
    37a0:	20000f88 	.word	0x20000f88
    ldr v4, =_SCS_ICSR
    37a4:	e000ed04 	.word	0xe000ed04

000037a8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    37a8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    37ac:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    37ae:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    37b2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    37b6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    37b8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    37bc:	2902      	cmp	r1, #2
    beq _oops
    37be:	d0ff      	beq.n	37c0 <_oops>

000037c0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    37c0:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    37c2:	f006 fd9a 	bl	a2fa <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    37c6:	bd01      	pop	{r0, pc}

000037c8 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    37c8:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    37ca:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    37ce:	490e      	ldr	r1, [pc, #56]	; (3808 <arch_new_thread+0x40>)
    37d0:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    37d4:	f021 0101 	bic.w	r1, r1, #1
    37d8:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    37dc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    37e0:	9b01      	ldr	r3, [sp, #4]
    37e2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    37e6:	9b02      	ldr	r3, [sp, #8]
    37e8:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    37ec:	9b03      	ldr	r3, [sp, #12]
    37ee:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    37f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    37f6:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
    37fa:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    37fc:	2300      	movs	r3, #0
    37fe:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3802:	bc10      	pop	{r4}
    3804:	4770      	bx	lr
    3806:	bf00      	nop
    3808:	00009125 	.word	0x00009125

0000380c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    380c:	4b10      	ldr	r3, [pc, #64]	; (3850 <z_check_thread_stack_fail+0x44>)
    380e:	689b      	ldr	r3, [r3, #8]

	if (thread == NULL) {
    3810:	b1bb      	cbz	r3, 3842 <z_check_thread_stack_fail+0x36>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3812:	f110 0f16 	cmn.w	r0, #22
    3816:	d00b      	beq.n	3830 <z_check_thread_stack_fail+0x24>
    3818:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    381c:	f1a2 0c40 	sub.w	ip, r2, #64	; 0x40
    3820:	4584      	cmp	ip, r0
    3822:	d810      	bhi.n	3846 <z_check_thread_stack_fail+0x3a>
    3824:	4282      	cmp	r2, r0
    3826:	d910      	bls.n	384a <z_check_thread_stack_fail+0x3e>
    3828:	428a      	cmp	r2, r1
    382a:	d807      	bhi.n	383c <z_check_thread_stack_fail+0x30>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    382c:	2000      	movs	r0, #0
    382e:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3830:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    3834:	428a      	cmp	r2, r1
    3836:	d801      	bhi.n	383c <z_check_thread_stack_fail+0x30>
	return 0;
    3838:	2000      	movs	r0, #0
}
    383a:	4770      	bx	lr
		return thread->stack_info.start;
    383c:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    3840:	4770      	bx	lr
		return 0;
    3842:	2000      	movs	r0, #0
    3844:	4770      	bx	lr
	return 0;
    3846:	2000      	movs	r0, #0
    3848:	4770      	bx	lr
    384a:	2000      	movs	r0, #0
    384c:	4770      	bx	lr
    384e:	bf00      	nop
    3850:	20000f88 	.word	0x20000f88

00003854 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    3854:	b508      	push	{r3, lr}
    3856:	460d      	mov	r5, r1
    3858:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    385a:	4b08      	ldr	r3, [pc, #32]	; (387c <arch_switch_to_main_thread+0x28>)
    385c:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    385e:	f000 ffa3 	bl	47a8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3862:	4620      	mov	r0, r4
    3864:	f385 8809 	msr	PSP, r5
    3868:	2100      	movs	r1, #0
    386a:	b663      	cpsie	if
    386c:	f381 8811 	msr	BASEPRI, r1
    3870:	f3bf 8f6f 	isb	sy
    3874:	2200      	movs	r2, #0
    3876:	2300      	movs	r3, #0
    3878:	f005 fc54 	bl	9124 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    387c:	20000f88 	.word	0x20000f88

00003880 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3880:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    3882:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3884:	4a0b      	ldr	r2, [pc, #44]	; (38b4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    3886:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    3888:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    388a:	bf1e      	ittt	ne
	movne	r1, #0
    388c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    388e:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    3890:	f008 f9cf 	blne	bc32 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3894:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3896:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    389a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    389e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    38a2:	4905      	ldr	r1, [pc, #20]	; (38b8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    38a4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    38a6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    38a8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    38aa:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    38ae:	4903      	ldr	r1, [pc, #12]	; (38bc <_isr_wrapper+0x3c>)
	bx r1
    38b0:	4708      	bx	r1
    38b2:	0000      	.short	0x0000
	ldr r2, =_kernel
    38b4:	20000f88 	.word	0x20000f88
	ldr r1, =_sw_isr_table
    38b8:	0000c2d8 	.word	0x0000c2d8
	ldr r1, =z_arm_int_exit
    38bc:	000038c1 	.word	0x000038c1

000038c0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    38c0:	4b04      	ldr	r3, [pc, #16]	; (38d4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    38c2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    38c4:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    38c6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    38c8:	d003      	beq.n	38d2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    38ca:	4903      	ldr	r1, [pc, #12]	; (38d8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    38cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    38d0:	600a      	str	r2, [r1, #0]

000038d2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    38d2:	4770      	bx	lr
	ldr r3, =_kernel
    38d4:	20000f88 	.word	0x20000f88
	ldr r1, =_SCS_ICSR
    38d8:	e000ed04 	.word	0xe000ed04

000038dc <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    38dc:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    38de:	4b0d      	ldr	r3, [pc, #52]	; (3914 <z_arm_is_synchronous_svc+0x38>)
    38e0:	695a      	ldr	r2, [r3, #20]
    38e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    38e6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    38e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    38ec:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
    38f0:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    38f4:	695a      	ldr	r2, [r3, #20]
    38f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    38fa:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    38fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3900:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    3904:	f64d 7302 	movw	r3, #57090	; 0xdf02
    3908:	4299      	cmp	r1, r3
    390a:	d001      	beq.n	3910 <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
    390c:	2000      	movs	r0, #0
    390e:	4770      	bx	lr
		return true;
    3910:	2001      	movs	r0, #1
}
    3912:	4770      	bx	lr
    3914:	e000ed00 	.word	0xe000ed00

00003918 <get_esf>:
 *
 * @return ESF pointer on success, otherwise return NULL
 */
static inline z_arch_esf_t *get_esf(uint32_t msp, uint32_t psp, uint32_t exc_return,
	bool *nested_exc)
{
    3918:	b510      	push	{r4, lr}
    391a:	b088      	sub	sp, #32
	bool alternative_state_exc = false;
	z_arch_esf_t *ptr_esf = NULL;

	*nested_exc = false;
    391c:	2400      	movs	r4, #0
    391e:	701c      	strb	r4, [r3, #0]

	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3920:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
    3924:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
    3928:	d132      	bne.n	3990 <get_esf+0x78>
	}
#else
	/* The processor has a single execution state.
	 * We verify that the Thread mode is using PSP.
	 */
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    392a:	f002 040c 	and.w	r4, r2, #12
    392e:	2c08      	cmp	r4, #8
    3930:	d005      	beq.n	393e <get_esf+0x26>
		return NULL;
	}
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	if (!alternative_state_exc) {
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3932:	f012 0f08 	tst.w	r2, #8
    3936:	d028      	beq.n	398a <get_esf+0x72>
			/* Returning to thread mode */
			ptr_esf =  (z_arch_esf_t *)psp;
    3938:	4608      	mov	r0, r1
			*nested_exc = true;
		}
	}

	return ptr_esf;
}
    393a:	b008      	add	sp, #32
    393c:	bd10      	pop	{r4, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    393e:	4b15      	ldr	r3, [pc, #84]	; (3994 <get_esf+0x7c>)
    3940:	9307      	str	r3, [sp, #28]
    3942:	2302      	movs	r3, #2
    3944:	f88d 3004 	strb.w	r3, [sp, #4]
    3948:	2400      	movs	r4, #0
    394a:	f88d 4005 	strb.w	r4, [sp, #5]
    394e:	f88d 4006 	strb.w	r4, [sp, #6]
    3952:	f88d 4007 	strb.w	r4, [sp, #7]
    3956:	9b01      	ldr	r3, [sp, #4]
    3958:	9306      	str	r3, [sp, #24]
    395a:	4621      	mov	r1, r4
    395c:	f364 0100 	bfi	r1, r4, #0, #1
    3960:	f364 0141 	bfi	r1, r4, #1, #1
    3964:	f364 0182 	bfi	r1, r4, #2, #1
    3968:	f364 01c5 	bfi	r1, r4, #3, #3
    396c:	2301      	movs	r3, #1
    396e:	f363 1188 	bfi	r1, r3, #6, #3
    3972:	2308      	movs	r3, #8
    3974:	f363 2153 	bfi	r1, r3, #9, #11
    3978:	f364 511f 	bfi	r1, r4, #20, #12
    397c:	4623      	mov	r3, r4
    397e:	aa06      	add	r2, sp, #24
    3980:	4805      	ldr	r0, [pc, #20]	; (3998 <get_esf+0x80>)
    3982:	f7ff f86f 	bl	2a64 <z_impl_z_log_msg_static_create>
		return NULL;
    3986:	4620      	mov	r0, r4
    3988:	e7d7      	b.n	393a <get_esf+0x22>
			*nested_exc = true;
    398a:	2201      	movs	r2, #1
    398c:	701a      	strb	r2, [r3, #0]
    398e:	e7d4      	b.n	393a <get_esf+0x22>
		return NULL;
    3990:	2000      	movs	r0, #0
    3992:	e7d2      	b.n	393a <get_esf+0x22>
    3994:	0000c9cc 	.word	0x0000c9cc
    3998:	0000c508 	.word	0x0000c508

0000399c <bus_fault>:
{
    399c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39a0:	b0ac      	sub	sp, #176	; 0xb0
    39a2:	af00      	add	r7, sp, #0
    39a4:	4605      	mov	r5, r0
    39a6:	4688      	mov	r8, r1
    39a8:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** BUS FAULT *****");
    39aa:	4bb9      	ldr	r3, [pc, #740]	; (3c90 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1f8>)
    39ac:	61fb      	str	r3, [r7, #28]
    39ae:	2302      	movs	r3, #2
    39b0:	713b      	strb	r3, [r7, #4]
    39b2:	2300      	movs	r3, #0
    39b4:	717b      	strb	r3, [r7, #5]
    39b6:	71bb      	strb	r3, [r7, #6]
    39b8:	71fb      	strb	r3, [r7, #7]
    39ba:	687a      	ldr	r2, [r7, #4]
    39bc:	61ba      	str	r2, [r7, #24]
    39be:	4619      	mov	r1, r3
    39c0:	f363 0100 	bfi	r1, r3, #0, #1
    39c4:	f363 0141 	bfi	r1, r3, #1, #1
    39c8:	f363 0182 	bfi	r1, r3, #2, #1
    39cc:	f363 01c5 	bfi	r1, r3, #3, #3
    39d0:	2201      	movs	r2, #1
    39d2:	f362 1188 	bfi	r1, r2, #6, #3
    39d6:	2208      	movs	r2, #8
    39d8:	f362 2153 	bfi	r1, r2, #9, #11
    39dc:	f363 511f 	bfi	r1, r3, #20, #12
    39e0:	f107 0218 	add.w	r2, r7, #24
    39e4:	48ab      	ldr	r0, [pc, #684]	; (3c94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1fc>)
    39e6:	f7ff f83d 	bl	2a64 <z_impl_z_log_msg_static_create>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    39ea:	4bab      	ldr	r3, [pc, #684]	; (3c98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x200>)
    39ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    39ee:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    39f2:	d12b      	bne.n	3a4c <bus_fault+0xb0>
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    39f4:	2616      	movs	r6, #22
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    39f6:	4ba8      	ldr	r3, [pc, #672]	; (3c98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x200>)
    39f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    39fa:	f413 6f00 	tst.w	r3, #2048	; 0x800
    39fe:	d147      	bne.n	3a90 <bus_fault+0xf4>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3a00:	4ba5      	ldr	r3, [pc, #660]	; (3c98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x200>)
    3a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3a04:	f413 7f00 	tst.w	r3, #512	; 0x200
    3a08:	d164      	bne.n	3ad4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3a0a:	4ba3      	ldr	r3, [pc, #652]	; (3c98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x200>)
    3a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3a0e:	f413 6f80 	tst.w	r3, #1024	; 0x400
    3a12:	f040 80d3 	bne.w	3bbc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x124>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3a16:	4ba0      	ldr	r3, [pc, #640]	; (3c98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x200>)
    3a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3a1a:	f413 7f80 	tst.w	r3, #256	; 0x100
    3a1e:	f040 80ef 	bne.w	3c00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x168>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3a22:	4b9d      	ldr	r3, [pc, #628]	; (3c98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x200>)
    3a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3a26:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    3a2a:	f040 810d 	bne.w	3c48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3a2e:	4a9a      	ldr	r2, [pc, #616]	; (3c98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x200>)
    3a30:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3a32:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3a36:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3a38:	2101      	movs	r1, #1
    3a3a:	4628      	mov	r0, r5
    3a3c:	f006 fc7a 	bl	a334 <memory_fault_recoverable>
    3a40:	7020      	strb	r0, [r4, #0]
}
    3a42:	4630      	mov	r0, r6
    3a44:	37b0      	adds	r7, #176	; 0xb0
    3a46:	46bd      	mov	sp, r7
    3a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Stacking error");
    3a4c:	4b93      	ldr	r3, [pc, #588]	; (3c9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x204>)
    3a4e:	637b      	str	r3, [r7, #52]	; 0x34
    3a50:	2302      	movs	r3, #2
    3a52:	713b      	strb	r3, [r7, #4]
    3a54:	2300      	movs	r3, #0
    3a56:	717b      	strb	r3, [r7, #5]
    3a58:	71bb      	strb	r3, [r7, #6]
    3a5a:	71fb      	strb	r3, [r7, #7]
    3a5c:	687a      	ldr	r2, [r7, #4]
    3a5e:	633a      	str	r2, [r7, #48]	; 0x30
    3a60:	4619      	mov	r1, r3
    3a62:	f363 0100 	bfi	r1, r3, #0, #1
    3a66:	f363 0141 	bfi	r1, r3, #1, #1
    3a6a:	f363 0182 	bfi	r1, r3, #2, #1
    3a6e:	f363 01c5 	bfi	r1, r3, #3, #3
    3a72:	2201      	movs	r2, #1
    3a74:	f362 1188 	bfi	r1, r2, #6, #3
    3a78:	2208      	movs	r2, #8
    3a7a:	f362 2153 	bfi	r1, r2, #9, #11
    3a7e:	f363 511f 	bfi	r1, r3, #20, #12
    3a82:	f107 0230 	add.w	r2, r7, #48	; 0x30
    3a86:	4883      	ldr	r0, [pc, #524]	; (3c94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1fc>)
    3a88:	f7fe ffec 	bl	2a64 <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_BUS_STACKING;
    3a8c:	2617      	movs	r6, #23
    3a8e:	e7b2      	b.n	39f6 <bus_fault+0x5a>
		PR_FAULT_INFO("  Unstacking error");
    3a90:	4b83      	ldr	r3, [pc, #524]	; (3ca0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x208>)
    3a92:	64fb      	str	r3, [r7, #76]	; 0x4c
    3a94:	2302      	movs	r3, #2
    3a96:	713b      	strb	r3, [r7, #4]
    3a98:	2300      	movs	r3, #0
    3a9a:	717b      	strb	r3, [r7, #5]
    3a9c:	71bb      	strb	r3, [r7, #6]
    3a9e:	71fb      	strb	r3, [r7, #7]
    3aa0:	687a      	ldr	r2, [r7, #4]
    3aa2:	64ba      	str	r2, [r7, #72]	; 0x48
    3aa4:	4619      	mov	r1, r3
    3aa6:	f363 0100 	bfi	r1, r3, #0, #1
    3aaa:	f363 0141 	bfi	r1, r3, #1, #1
    3aae:	f363 0182 	bfi	r1, r3, #2, #1
    3ab2:	f363 01c5 	bfi	r1, r3, #3, #3
    3ab6:	2201      	movs	r2, #1
    3ab8:	f362 1188 	bfi	r1, r2, #6, #3
    3abc:	2208      	movs	r2, #8
    3abe:	f362 2153 	bfi	r1, r2, #9, #11
    3ac2:	f363 511f 	bfi	r1, r3, #20, #12
    3ac6:	f107 0248 	add.w	r2, r7, #72	; 0x48
    3aca:	4872      	ldr	r0, [pc, #456]	; (3c94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1fc>)
    3acc:	f7fe ffca 	bl	2a64 <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    3ad0:	2618      	movs	r6, #24
    3ad2:	e795      	b.n	3a00 <bus_fault+0x64>
		PR_FAULT_INFO("  Precise data bus error");
    3ad4:	4b73      	ldr	r3, [pc, #460]	; (3ca4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20c>)
    3ad6:	667b      	str	r3, [r7, #100]	; 0x64
    3ad8:	2302      	movs	r3, #2
    3ada:	713b      	strb	r3, [r7, #4]
    3adc:	2300      	movs	r3, #0
    3ade:	717b      	strb	r3, [r7, #5]
    3ae0:	71bb      	strb	r3, [r7, #6]
    3ae2:	71fb      	strb	r3, [r7, #7]
    3ae4:	687a      	ldr	r2, [r7, #4]
    3ae6:	663a      	str	r2, [r7, #96]	; 0x60
    3ae8:	4619      	mov	r1, r3
    3aea:	f363 0100 	bfi	r1, r3, #0, #1
    3aee:	f363 0141 	bfi	r1, r3, #1, #1
    3af2:	f363 0182 	bfi	r1, r3, #2, #1
    3af6:	f363 01c5 	bfi	r1, r3, #3, #3
    3afa:	2201      	movs	r2, #1
    3afc:	f362 1188 	bfi	r1, r2, #6, #3
    3b00:	2208      	movs	r2, #8
    3b02:	f362 2153 	bfi	r1, r2, #9, #11
    3b06:	f363 511f 	bfi	r1, r3, #20, #12
    3b0a:	f107 0260 	add.w	r2, r7, #96	; 0x60
    3b0e:	4861      	ldr	r0, [pc, #388]	; (3c94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1fc>)
    3b10:	f7fe ffa8 	bl	2a64 <z_impl_z_log_msg_static_create>
		STORE_xFAR(bfar, SCB->BFAR);
    3b14:	4b60      	ldr	r3, [pc, #384]	; (3c98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x200>)
    3b16:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3b1a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    3b1e:	d049      	beq.n	3bb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x11c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3b20:	466e      	mov	r6, sp
    3b22:	b088      	sub	sp, #32
    3b24:	466b      	mov	r3, sp
    3b26:	f113 0210 	adds.w	r2, r3, #16
    3b2a:	d011      	beq.n	3b50 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb8>
    3b2c:	210c      	movs	r1, #12
    3b2e:	b152      	cbz	r2, 3b46 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xae>
    3b30:	468c      	mov	ip, r1
    3b32:	2904      	cmp	r1, #4
    3b34:	dd03      	ble.n	3b3e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa6>
    3b36:	f8df e170 	ldr.w	lr, [pc, #368]	; 3ca8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x210>
    3b3a:	f8c3 e014 	str.w	lr, [r3, #20]
    3b3e:	f1bc 0f08 	cmp.w	ip, #8
    3b42:	dd08      	ble.n	3b56 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xbe>
    3b44:	6198      	str	r0, [r3, #24]
    3b46:	290b      	cmp	r1, #11
    3b48:	dd31      	ble.n	3bae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x116>
    3b4a:	f04f 0c0c 	mov.w	ip, #12
    3b4e:	e004      	b.n	3b5a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc2>
    3b50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3b54:	e7eb      	b.n	3b2e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x96>
    3b56:	f06f 0c1b 	mvn.w	ip, #27
    3b5a:	b13a      	cbz	r2, 3b6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd4>
    3b5c:	2103      	movs	r1, #3
    3b5e:	7139      	strb	r1, [r7, #4]
    3b60:	2100      	movs	r1, #0
    3b62:	7179      	strb	r1, [r7, #5]
    3b64:	71b9      	strb	r1, [r7, #6]
    3b66:	71f9      	strb	r1, [r7, #7]
    3b68:	6878      	ldr	r0, [r7, #4]
    3b6a:	6118      	str	r0, [r3, #16]
    3b6c:	2100      	movs	r1, #0
    3b6e:	f36f 0100 	bfc	r1, #0, #1
    3b72:	f36f 0141 	bfc	r1, #1, #1
    3b76:	f36f 0182 	bfc	r1, #2, #1
    3b7a:	f36f 01c5 	bfc	r1, #3, #3
    3b7e:	2301      	movs	r3, #1
    3b80:	f363 1188 	bfi	r1, r3, #6, #3
    3b84:	f3cc 030a 	ubfx	r3, ip, #0, #11
    3b88:	f363 2153 	bfi	r1, r3, #9, #11
    3b8c:	f36f 511f 	bfc	r1, #20, #12
    3b90:	2300      	movs	r3, #0
    3b92:	4840      	ldr	r0, [pc, #256]	; (3c94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1fc>)
    3b94:	f7fe ff66 	bl	2a64 <z_impl_z_log_msg_static_create>
    3b98:	46b5      	mov	sp, r6
			if (from_hard_fault != 0) {
    3b9a:	f1b8 0f00 	cmp.w	r8, #0
    3b9e:	d00b      	beq.n	3bb8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x120>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3ba0:	4a3d      	ldr	r2, [pc, #244]	; (3c98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x200>)
    3ba2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3ba4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3ba8:	6293      	str	r3, [r2, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    3baa:	2619      	movs	r6, #25
    3bac:	e72d      	b.n	3a0a <bus_fault+0x6e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3bae:	f06f 0c1b 	mvn.w	ip, #27
    3bb2:	e7d2      	b.n	3b5a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc2>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    3bb4:	2619      	movs	r6, #25
    3bb6:	e728      	b.n	3a0a <bus_fault+0x6e>
    3bb8:	2619      	movs	r6, #25
    3bba:	e726      	b.n	3a0a <bus_fault+0x6e>
		PR_FAULT_INFO("  Imprecise data bus error");
    3bbc:	4b3b      	ldr	r3, [pc, #236]	; (3cac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x214>)
    3bbe:	67fb      	str	r3, [r7, #124]	; 0x7c
    3bc0:	2302      	movs	r3, #2
    3bc2:	713b      	strb	r3, [r7, #4]
    3bc4:	2300      	movs	r3, #0
    3bc6:	717b      	strb	r3, [r7, #5]
    3bc8:	71bb      	strb	r3, [r7, #6]
    3bca:	71fb      	strb	r3, [r7, #7]
    3bcc:	687a      	ldr	r2, [r7, #4]
    3bce:	67ba      	str	r2, [r7, #120]	; 0x78
    3bd0:	4619      	mov	r1, r3
    3bd2:	f363 0100 	bfi	r1, r3, #0, #1
    3bd6:	f363 0141 	bfi	r1, r3, #1, #1
    3bda:	f363 0182 	bfi	r1, r3, #2, #1
    3bde:	f363 01c5 	bfi	r1, r3, #3, #3
    3be2:	2201      	movs	r2, #1
    3be4:	f362 1188 	bfi	r1, r2, #6, #3
    3be8:	2208      	movs	r2, #8
    3bea:	f362 2153 	bfi	r1, r2, #9, #11
    3bee:	f363 511f 	bfi	r1, r3, #20, #12
    3bf2:	f107 0278 	add.w	r2, r7, #120	; 0x78
    3bf6:	4827      	ldr	r0, [pc, #156]	; (3c94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1fc>)
    3bf8:	f7fe ff34 	bl	2a64 <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    3bfc:	261a      	movs	r6, #26
    3bfe:	e70a      	b.n	3a16 <bus_fault+0x7a>
		PR_FAULT_INFO("  Instruction bus error");
    3c00:	4b2b      	ldr	r3, [pc, #172]	; (3cb0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x218>)
    3c02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    3c06:	2302      	movs	r3, #2
    3c08:	713b      	strb	r3, [r7, #4]
    3c0a:	2300      	movs	r3, #0
    3c0c:	717b      	strb	r3, [r7, #5]
    3c0e:	71bb      	strb	r3, [r7, #6]
    3c10:	71fb      	strb	r3, [r7, #7]
    3c12:	687a      	ldr	r2, [r7, #4]
    3c14:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    3c18:	4619      	mov	r1, r3
    3c1a:	f363 0100 	bfi	r1, r3, #0, #1
    3c1e:	f363 0141 	bfi	r1, r3, #1, #1
    3c22:	f363 0182 	bfi	r1, r3, #2, #1
    3c26:	f363 01c5 	bfi	r1, r3, #3, #3
    3c2a:	2201      	movs	r2, #1
    3c2c:	f362 1188 	bfi	r1, r2, #6, #3
    3c30:	2208      	movs	r2, #8
    3c32:	f362 2153 	bfi	r1, r2, #9, #11
    3c36:	f363 511f 	bfi	r1, r3, #20, #12
    3c3a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
    3c3e:	4815      	ldr	r0, [pc, #84]	; (3c94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1fc>)
    3c40:	f7fe ff10 	bl	2a64 <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    3c44:	261b      	movs	r6, #27
    3c46:	e6f2      	b.n	3a2e <bus_fault+0x92>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3c48:	4b1a      	ldr	r3, [pc, #104]	; (3cb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x21c>)
    3c4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    3c4e:	2302      	movs	r3, #2
    3c50:	713b      	strb	r3, [r7, #4]
    3c52:	2300      	movs	r3, #0
    3c54:	717b      	strb	r3, [r7, #5]
    3c56:	71bb      	strb	r3, [r7, #6]
    3c58:	71fb      	strb	r3, [r7, #7]
    3c5a:	687a      	ldr	r2, [r7, #4]
    3c5c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    3c60:	4619      	mov	r1, r3
    3c62:	f363 0100 	bfi	r1, r3, #0, #1
    3c66:	f363 0141 	bfi	r1, r3, #1, #1
    3c6a:	f363 0182 	bfi	r1, r3, #2, #1
    3c6e:	f363 01c5 	bfi	r1, r3, #3, #3
    3c72:	2201      	movs	r2, #1
    3c74:	f362 1188 	bfi	r1, r2, #6, #3
    3c78:	2208      	movs	r2, #8
    3c7a:	f362 2153 	bfi	r1, r2, #9, #11
    3c7e:	f363 511f 	bfi	r1, r3, #20, #12
    3c82:	f107 0290 	add.w	r2, r7, #144	; 0x90
    3c86:	4803      	ldr	r0, [pc, #12]	; (3c94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1fc>)
    3c88:	f7fe feec 	bl	2a64 <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    3c8c:	261c      	movs	r6, #28
    3c8e:	e6ce      	b.n	3a2e <bus_fault+0x92>
    3c90:	0000c9f8 	.word	0x0000c9f8
    3c94:	0000c508 	.word	0x0000c508
    3c98:	e000ed00 	.word	0xe000ed00
    3c9c:	0000ca10 	.word	0x0000ca10
    3ca0:	0000ca24 	.word	0x0000ca24
    3ca4:	0000ca38 	.word	0x0000ca38
    3ca8:	0000ca54 	.word	0x0000ca54
    3cac:	0000ca6c 	.word	0x0000ca6c
    3cb0:	0000ca88 	.word	0x0000ca88
    3cb4:	0000caa0 	.word	0x0000caa0

00003cb8 <usage_fault>:
{
    3cb8:	b500      	push	{lr}
    3cba:	b0ad      	sub	sp, #180	; 0xb4
	PR_FAULT_INFO("***** USAGE FAULT *****");
    3cbc:	4b96      	ldr	r3, [pc, #600]	; (3f18 <usage_fault+0x260>)
    3cbe:	9307      	str	r3, [sp, #28]
    3cc0:	2302      	movs	r3, #2
    3cc2:	f88d 3004 	strb.w	r3, [sp, #4]
    3cc6:	2300      	movs	r3, #0
    3cc8:	f88d 3005 	strb.w	r3, [sp, #5]
    3ccc:	f88d 3006 	strb.w	r3, [sp, #6]
    3cd0:	f88d 3007 	strb.w	r3, [sp, #7]
    3cd4:	9a01      	ldr	r2, [sp, #4]
    3cd6:	9206      	str	r2, [sp, #24]
    3cd8:	4619      	mov	r1, r3
    3cda:	f363 0100 	bfi	r1, r3, #0, #1
    3cde:	f363 0141 	bfi	r1, r3, #1, #1
    3ce2:	f363 0182 	bfi	r1, r3, #2, #1
    3ce6:	f363 01c5 	bfi	r1, r3, #3, #3
    3cea:	2201      	movs	r2, #1
    3cec:	f362 1188 	bfi	r1, r2, #6, #3
    3cf0:	2208      	movs	r2, #8
    3cf2:	f362 2153 	bfi	r1, r2, #9, #11
    3cf6:	f363 511f 	bfi	r1, r3, #20, #12
    3cfa:	aa06      	add	r2, sp, #24
    3cfc:	4887      	ldr	r0, [pc, #540]	; (3f1c <usage_fault+0x264>)
    3cfe:	f7fe feb1 	bl	2a64 <z_impl_z_log_msg_static_create>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3d02:	4b87      	ldr	r3, [pc, #540]	; (3f20 <usage_fault+0x268>)
    3d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d06:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    3d0a:	d126      	bne.n	3d5a <usage_fault+0xa2>
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    3d0c:	201d      	movs	r0, #29
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3d0e:	4b84      	ldr	r3, [pc, #528]	; (3f20 <usage_fault+0x268>)
    3d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d12:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    3d16:	d145      	bne.n	3da4 <usage_fault+0xec>
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3d18:	4b81      	ldr	r3, [pc, #516]	; (3f20 <usage_fault+0x268>)
    3d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d1c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    3d20:	d165      	bne.n	3dee <usage_fault+0x136>
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3d22:	4b7f      	ldr	r3, [pc, #508]	; (3f20 <usage_fault+0x268>)
    3d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d26:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    3d2a:	f040 8085 	bne.w	3e38 <usage_fault+0x180>
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3d2e:	4b7c      	ldr	r3, [pc, #496]	; (3f20 <usage_fault+0x268>)
    3d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d32:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    3d36:	f040 80a4 	bne.w	3e82 <usage_fault+0x1ca>
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3d3a:	4b79      	ldr	r3, [pc, #484]	; (3f20 <usage_fault+0x268>)
    3d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d3e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3d42:	f040 80c3 	bne.w	3ecc <usage_fault+0x214>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3d46:	4a76      	ldr	r2, [pc, #472]	; (3f20 <usage_fault+0x268>)
    3d48:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3d4a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    3d4e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    3d52:	6293      	str	r3, [r2, #40]	; 0x28
}
    3d54:	b02d      	add	sp, #180	; 0xb4
    3d56:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
    3d5a:	4b72      	ldr	r3, [pc, #456]	; (3f24 <usage_fault+0x26c>)
    3d5c:	930d      	str	r3, [sp, #52]	; 0x34
    3d5e:	2302      	movs	r3, #2
    3d60:	f88d 3004 	strb.w	r3, [sp, #4]
    3d64:	2300      	movs	r3, #0
    3d66:	f88d 3005 	strb.w	r3, [sp, #5]
    3d6a:	f88d 3006 	strb.w	r3, [sp, #6]
    3d6e:	f88d 3007 	strb.w	r3, [sp, #7]
    3d72:	9a01      	ldr	r2, [sp, #4]
    3d74:	920c      	str	r2, [sp, #48]	; 0x30
    3d76:	4619      	mov	r1, r3
    3d78:	f363 0100 	bfi	r1, r3, #0, #1
    3d7c:	f363 0141 	bfi	r1, r3, #1, #1
    3d80:	f363 0182 	bfi	r1, r3, #2, #1
    3d84:	f363 01c5 	bfi	r1, r3, #3, #3
    3d88:	2201      	movs	r2, #1
    3d8a:	f362 1188 	bfi	r1, r2, #6, #3
    3d8e:	2208      	movs	r2, #8
    3d90:	f362 2153 	bfi	r1, r2, #9, #11
    3d94:	f363 511f 	bfi	r1, r3, #20, #12
    3d98:	aa0c      	add	r2, sp, #48	; 0x30
    3d9a:	4860      	ldr	r0, [pc, #384]	; (3f1c <usage_fault+0x264>)
    3d9c:	f7fe fe62 	bl	2a64 <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_USAGE_DIV_0;
    3da0:	201e      	movs	r0, #30
    3da2:	e7b4      	b.n	3d0e <usage_fault+0x56>
		PR_FAULT_INFO("  Unaligned memory access");
    3da4:	4b60      	ldr	r3, [pc, #384]	; (3f28 <usage_fault+0x270>)
    3da6:	9313      	str	r3, [sp, #76]	; 0x4c
    3da8:	2302      	movs	r3, #2
    3daa:	f88d 3004 	strb.w	r3, [sp, #4]
    3dae:	2300      	movs	r3, #0
    3db0:	f88d 3005 	strb.w	r3, [sp, #5]
    3db4:	f88d 3006 	strb.w	r3, [sp, #6]
    3db8:	f88d 3007 	strb.w	r3, [sp, #7]
    3dbc:	9a01      	ldr	r2, [sp, #4]
    3dbe:	9212      	str	r2, [sp, #72]	; 0x48
    3dc0:	4619      	mov	r1, r3
    3dc2:	f363 0100 	bfi	r1, r3, #0, #1
    3dc6:	f363 0141 	bfi	r1, r3, #1, #1
    3dca:	f363 0182 	bfi	r1, r3, #2, #1
    3dce:	f363 01c5 	bfi	r1, r3, #3, #3
    3dd2:	2201      	movs	r2, #1
    3dd4:	f362 1188 	bfi	r1, r2, #6, #3
    3dd8:	2208      	movs	r2, #8
    3dda:	f362 2153 	bfi	r1, r2, #9, #11
    3dde:	f363 511f 	bfi	r1, r3, #20, #12
    3de2:	aa12      	add	r2, sp, #72	; 0x48
    3de4:	484d      	ldr	r0, [pc, #308]	; (3f1c <usage_fault+0x264>)
    3de6:	f7fe fe3d 	bl	2a64 <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    3dea:	201f      	movs	r0, #31
    3dec:	e794      	b.n	3d18 <usage_fault+0x60>
		PR_FAULT_INFO("  No coprocessor instructions");
    3dee:	4b4f      	ldr	r3, [pc, #316]	; (3f2c <usage_fault+0x274>)
    3df0:	9319      	str	r3, [sp, #100]	; 0x64
    3df2:	2302      	movs	r3, #2
    3df4:	f88d 3004 	strb.w	r3, [sp, #4]
    3df8:	2300      	movs	r3, #0
    3dfa:	f88d 3005 	strb.w	r3, [sp, #5]
    3dfe:	f88d 3006 	strb.w	r3, [sp, #6]
    3e02:	f88d 3007 	strb.w	r3, [sp, #7]
    3e06:	9a01      	ldr	r2, [sp, #4]
    3e08:	9218      	str	r2, [sp, #96]	; 0x60
    3e0a:	4619      	mov	r1, r3
    3e0c:	f363 0100 	bfi	r1, r3, #0, #1
    3e10:	f363 0141 	bfi	r1, r3, #1, #1
    3e14:	f363 0182 	bfi	r1, r3, #2, #1
    3e18:	f363 01c5 	bfi	r1, r3, #3, #3
    3e1c:	2201      	movs	r2, #1
    3e1e:	f362 1188 	bfi	r1, r2, #6, #3
    3e22:	2208      	movs	r2, #8
    3e24:	f362 2153 	bfi	r1, r2, #9, #11
    3e28:	f363 511f 	bfi	r1, r3, #20, #12
    3e2c:	aa18      	add	r2, sp, #96	; 0x60
    3e2e:	483b      	ldr	r0, [pc, #236]	; (3f1c <usage_fault+0x264>)
    3e30:	f7fe fe18 	bl	2a64 <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    3e34:	2021      	movs	r0, #33	; 0x21
    3e36:	e774      	b.n	3d22 <usage_fault+0x6a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    3e38:	4b3d      	ldr	r3, [pc, #244]	; (3f30 <usage_fault+0x278>)
    3e3a:	931f      	str	r3, [sp, #124]	; 0x7c
    3e3c:	2302      	movs	r3, #2
    3e3e:	f88d 3004 	strb.w	r3, [sp, #4]
    3e42:	2300      	movs	r3, #0
    3e44:	f88d 3005 	strb.w	r3, [sp, #5]
    3e48:	f88d 3006 	strb.w	r3, [sp, #6]
    3e4c:	f88d 3007 	strb.w	r3, [sp, #7]
    3e50:	9a01      	ldr	r2, [sp, #4]
    3e52:	921e      	str	r2, [sp, #120]	; 0x78
    3e54:	4619      	mov	r1, r3
    3e56:	f363 0100 	bfi	r1, r3, #0, #1
    3e5a:	f363 0141 	bfi	r1, r3, #1, #1
    3e5e:	f363 0182 	bfi	r1, r3, #2, #1
    3e62:	f363 01c5 	bfi	r1, r3, #3, #3
    3e66:	2201      	movs	r2, #1
    3e68:	f362 1188 	bfi	r1, r2, #6, #3
    3e6c:	2208      	movs	r2, #8
    3e6e:	f362 2153 	bfi	r1, r2, #9, #11
    3e72:	f363 511f 	bfi	r1, r3, #20, #12
    3e76:	aa1e      	add	r2, sp, #120	; 0x78
    3e78:	4828      	ldr	r0, [pc, #160]	; (3f1c <usage_fault+0x264>)
    3e7a:	f7fe fdf3 	bl	2a64 <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    3e7e:	2022      	movs	r0, #34	; 0x22
    3e80:	e755      	b.n	3d2e <usage_fault+0x76>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    3e82:	4b2c      	ldr	r3, [pc, #176]	; (3f34 <usage_fault+0x27c>)
    3e84:	9325      	str	r3, [sp, #148]	; 0x94
    3e86:	2302      	movs	r3, #2
    3e88:	f88d 3004 	strb.w	r3, [sp, #4]
    3e8c:	2300      	movs	r3, #0
    3e8e:	f88d 3005 	strb.w	r3, [sp, #5]
    3e92:	f88d 3006 	strb.w	r3, [sp, #6]
    3e96:	f88d 3007 	strb.w	r3, [sp, #7]
    3e9a:	9a01      	ldr	r2, [sp, #4]
    3e9c:	9224      	str	r2, [sp, #144]	; 0x90
    3e9e:	4619      	mov	r1, r3
    3ea0:	f363 0100 	bfi	r1, r3, #0, #1
    3ea4:	f363 0141 	bfi	r1, r3, #1, #1
    3ea8:	f363 0182 	bfi	r1, r3, #2, #1
    3eac:	f363 01c5 	bfi	r1, r3, #3, #3
    3eb0:	2201      	movs	r2, #1
    3eb2:	f362 1188 	bfi	r1, r2, #6, #3
    3eb6:	2208      	movs	r2, #8
    3eb8:	f362 2153 	bfi	r1, r2, #9, #11
    3ebc:	f363 511f 	bfi	r1, r3, #20, #12
    3ec0:	aa24      	add	r2, sp, #144	; 0x90
    3ec2:	4816      	ldr	r0, [pc, #88]	; (3f1c <usage_fault+0x264>)
    3ec4:	f7fe fdce 	bl	2a64 <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    3ec8:	2023      	movs	r0, #35	; 0x23
    3eca:	e736      	b.n	3d3a <usage_fault+0x82>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    3ecc:	4b1a      	ldr	r3, [pc, #104]	; (3f38 <usage_fault+0x280>)
    3ece:	932b      	str	r3, [sp, #172]	; 0xac
    3ed0:	2302      	movs	r3, #2
    3ed2:	f88d 3004 	strb.w	r3, [sp, #4]
    3ed6:	2300      	movs	r3, #0
    3ed8:	f88d 3005 	strb.w	r3, [sp, #5]
    3edc:	f88d 3006 	strb.w	r3, [sp, #6]
    3ee0:	f88d 3007 	strb.w	r3, [sp, #7]
    3ee4:	9a01      	ldr	r2, [sp, #4]
    3ee6:	922a      	str	r2, [sp, #168]	; 0xa8
    3ee8:	4619      	mov	r1, r3
    3eea:	f363 0100 	bfi	r1, r3, #0, #1
    3eee:	f363 0141 	bfi	r1, r3, #1, #1
    3ef2:	f363 0182 	bfi	r1, r3, #2, #1
    3ef6:	f363 01c5 	bfi	r1, r3, #3, #3
    3efa:	2201      	movs	r2, #1
    3efc:	f362 1188 	bfi	r1, r2, #6, #3
    3f00:	2208      	movs	r2, #8
    3f02:	f362 2153 	bfi	r1, r2, #9, #11
    3f06:	f363 511f 	bfi	r1, r3, #20, #12
    3f0a:	aa2a      	add	r2, sp, #168	; 0xa8
    3f0c:	4803      	ldr	r0, [pc, #12]	; (3f1c <usage_fault+0x264>)
    3f0e:	f7fe fda9 	bl	2a64 <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    3f12:	2024      	movs	r0, #36	; 0x24
    3f14:	e717      	b.n	3d46 <usage_fault+0x8e>
    3f16:	bf00      	nop
    3f18:	0000cad0 	.word	0x0000cad0
    3f1c:	0000c508 	.word	0x0000c508
    3f20:	e000ed00 	.word	0xe000ed00
    3f24:	0000cae8 	.word	0x0000cae8
    3f28:	0000cafc 	.word	0x0000cafc
    3f2c:	0000cb18 	.word	0x0000cb18
    3f30:	0000cb38 	.word	0x0000cb38
    3f34:	0000cb60 	.word	0x0000cb60
    3f38:	0000cb7c 	.word	0x0000cb7c

00003f3c <debug_monitor>:
{
    3f3c:	b500      	push	{lr}
    3f3e:	b089      	sub	sp, #36	; 0x24
	*recoverable = false;
    3f40:	2300      	movs	r3, #0
    3f42:	700b      	strb	r3, [r1, #0]
	PR_FAULT_INFO(
    3f44:	4a12      	ldr	r2, [pc, #72]	; (3f90 <debug_monitor+0x54>)
    3f46:	9207      	str	r2, [sp, #28]
    3f48:	2202      	movs	r2, #2
    3f4a:	f88d 2004 	strb.w	r2, [sp, #4]
    3f4e:	f88d 3005 	strb.w	r3, [sp, #5]
    3f52:	f88d 3006 	strb.w	r3, [sp, #6]
    3f56:	f88d 3007 	strb.w	r3, [sp, #7]
    3f5a:	9a01      	ldr	r2, [sp, #4]
    3f5c:	9206      	str	r2, [sp, #24]
    3f5e:	4619      	mov	r1, r3
    3f60:	f363 0100 	bfi	r1, r3, #0, #1
    3f64:	f363 0141 	bfi	r1, r3, #1, #1
    3f68:	f363 0182 	bfi	r1, r3, #2, #1
    3f6c:	f363 01c5 	bfi	r1, r3, #3, #3
    3f70:	2201      	movs	r2, #1
    3f72:	f362 1188 	bfi	r1, r2, #6, #3
    3f76:	2208      	movs	r2, #8
    3f78:	f362 2153 	bfi	r1, r2, #9, #11
    3f7c:	f363 511f 	bfi	r1, r3, #20, #12
    3f80:	aa06      	add	r2, sp, #24
    3f82:	4804      	ldr	r0, [pc, #16]	; (3f94 <debug_monitor+0x58>)
    3f84:	f7fe fd6e 	bl	2a64 <z_impl_z_log_msg_static_create>
}
    3f88:	b009      	add	sp, #36	; 0x24
    3f8a:	f85d fb04 	ldr.w	pc, [sp], #4
    3f8e:	bf00      	nop
    3f90:	0000cba8 	.word	0x0000cba8
    3f94:	0000c508 	.word	0x0000c508

00003f98 <reserved_exception>:
{
    3f98:	b590      	push	{r4, r7, lr}
    3f9a:	b083      	sub	sp, #12
    3f9c:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** %s %d) *****",
    3f9e:	290f      	cmp	r1, #15
    3fa0:	dc23      	bgt.n	3fea <reserved_exception+0x52>
    3fa2:	4c2f      	ldr	r4, [pc, #188]	; (4060 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x60>)
    3fa4:	3910      	subs	r1, #16
    3fa6:	2300      	movs	r3, #0
    3fa8:	713b      	strb	r3, [r7, #4]
    3faa:	2302      	movs	r3, #2
    3fac:	717b      	strb	r3, [r7, #5]
    3fae:	b08a      	sub	sp, #40	; 0x28
    3fb0:	46ec      	mov	ip, sp
    3fb2:	f11c 0210 	adds.w	r2, ip, #16
    3fb6:	d01a      	beq.n	3fee <reserved_exception+0x56>
    3fb8:	2012      	movs	r0, #18
    3fba:	b122      	cbz	r2, 3fc6 <reserved_exception+0x2e>
    3fbc:	2804      	cmp	r0, #4
    3fbe:	dd02      	ble.n	3fc6 <reserved_exception+0x2e>
    3fc0:	4b28      	ldr	r3, [pc, #160]	; (4064 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x64>)
    3fc2:	f8cc 3014 	str.w	r3, [ip, #20]
    3fc6:	2300      	movs	r3, #0
    3fc8:	703b      	strb	r3, [r7, #0]
    3fca:	2302      	movs	r3, #2
    3fcc:	707b      	strb	r3, [r7, #1]
    3fce:	b1e2      	cbz	r2, 400a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa>
    3fd0:	4603      	mov	r3, r0
    3fd2:	2808      	cmp	r0, #8
    3fd4:	dd01      	ble.n	3fda <reserved_exception+0x42>
    3fd6:	f8cc 4018 	str.w	r4, [ip, #24]
    3fda:	2b0c      	cmp	r3, #12
    3fdc:	dd01      	ble.n	3fe2 <reserved_exception+0x4a>
    3fde:	f8cc 101c 	str.w	r1, [ip, #28]
    3fe2:	f10c 0320 	add.w	r3, ip, #32
    3fe6:	2100      	movs	r1, #0
    3fe8:	e00d      	b.n	4006 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6>
    3fea:	4c1f      	ldr	r4, [pc, #124]	; (4068 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x68>)
    3fec:	e7da      	b.n	3fa4 <reserved_exception+0xc>
    3fee:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    3ff2:	e7e2      	b.n	3fba <reserved_exception+0x22>
    3ff4:	f101 0408 	add.w	r4, r1, #8
    3ff8:	eb04 0e07 	add.w	lr, r4, r7
    3ffc:	f81e ec08 	ldrb.w	lr, [lr, #-8]
    4000:	f803 eb01 	strb.w	lr, [r3], #1
    4004:	3101      	adds	r1, #1
    4006:	2901      	cmp	r1, #1
    4008:	d9f4      	bls.n	3ff4 <reserved_exception+0x5c>
    400a:	2811      	cmp	r0, #17
    400c:	dd24      	ble.n	4058 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x58>
    400e:	2312      	movs	r3, #18
    4010:	b14a      	cbz	r2, 4026 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x26>
    4012:	2104      	movs	r1, #4
    4014:	7139      	strb	r1, [r7, #4]
    4016:	2100      	movs	r1, #0
    4018:	7179      	strb	r1, [r7, #5]
    401a:	71b9      	strb	r1, [r7, #6]
    401c:	2101      	movs	r1, #1
    401e:	71f9      	strb	r1, [r7, #7]
    4020:	6878      	ldr	r0, [r7, #4]
    4022:	f8cc 0010 	str.w	r0, [ip, #16]
    4026:	2100      	movs	r1, #0
    4028:	f36f 0100 	bfc	r1, #0, #1
    402c:	f36f 0141 	bfc	r1, #1, #1
    4030:	f36f 0182 	bfc	r1, #2, #1
    4034:	f36f 01c5 	bfc	r1, #3, #3
    4038:	2001      	movs	r0, #1
    403a:	f360 1188 	bfi	r1, r0, #6, #3
    403e:	f3c3 030a 	ubfx	r3, r3, #0, #11
    4042:	f363 2153 	bfi	r1, r3, #9, #11
    4046:	f36f 511f 	bfc	r1, #20, #12
    404a:	2300      	movs	r3, #0
    404c:	4807      	ldr	r0, [pc, #28]	; (406c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6c>)
    404e:	f7fe fd09 	bl	2a64 <z_impl_z_log_msg_static_create>
}
    4052:	370c      	adds	r7, #12
    4054:	46bd      	mov	sp, r7
    4056:	bd90      	pop	{r4, r7, pc}
	PR_FAULT_INFO("***** %s %d) *****",
    4058:	f06f 031b 	mvn.w	r3, #27
    405c:	e7d8      	b.n	4010 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x10>
    405e:	bf00      	nop
    4060:	0000cbcc 	.word	0x0000cbcc
    4064:	0000cc00 	.word	0x0000cc00
    4068:	0000cbe4 	.word	0x0000cbe4
    406c:	0000c508 	.word	0x0000c508

00004070 <mem_manage_fault>:
{
    4070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4074:	b0a7      	sub	sp, #156	; 0x9c
    4076:	af00      	add	r7, sp, #0
    4078:	4604      	mov	r4, r0
    407a:	4688      	mov	r8, r1
    407c:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    407e:	4bb9      	ldr	r3, [pc, #740]	; (4364 <mem_manage_fault+0x2f4>)
    4080:	61fb      	str	r3, [r7, #28]
    4082:	2302      	movs	r3, #2
    4084:	713b      	strb	r3, [r7, #4]
    4086:	2300      	movs	r3, #0
    4088:	717b      	strb	r3, [r7, #5]
    408a:	71bb      	strb	r3, [r7, #6]
    408c:	71fb      	strb	r3, [r7, #7]
    408e:	687a      	ldr	r2, [r7, #4]
    4090:	61ba      	str	r2, [r7, #24]
    4092:	4619      	mov	r1, r3
    4094:	f363 0100 	bfi	r1, r3, #0, #1
    4098:	f363 0141 	bfi	r1, r3, #1, #1
    409c:	f363 0182 	bfi	r1, r3, #2, #1
    40a0:	f363 01c5 	bfi	r1, r3, #3, #3
    40a4:	2201      	movs	r2, #1
    40a6:	f362 1188 	bfi	r1, r2, #6, #3
    40aa:	2208      	movs	r2, #8
    40ac:	f362 2153 	bfi	r1, r2, #9, #11
    40b0:	f363 511f 	bfi	r1, r3, #20, #12
    40b4:	f107 0218 	add.w	r2, r7, #24
    40b8:	48ab      	ldr	r0, [pc, #684]	; (4368 <mem_manage_fault+0x2f8>)
    40ba:	f7fe fcd3 	bl	2a64 <z_impl_z_log_msg_static_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    40be:	4bab      	ldr	r3, [pc, #684]	; (436c <mem_manage_fault+0x2fc>)
    40c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    40c2:	f013 0f10 	tst.w	r3, #16
    40c6:	d141      	bne.n	414c <mem_manage_fault+0xdc>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    40c8:	2610      	movs	r6, #16
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    40ca:	4ba8      	ldr	r3, [pc, #672]	; (436c <mem_manage_fault+0x2fc>)
    40cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    40ce:	f013 0f08 	tst.w	r3, #8
    40d2:	d15d      	bne.n	4190 <mem_manage_fault+0x120>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    40d4:	4ba5      	ldr	r3, [pc, #660]	; (436c <mem_manage_fault+0x2fc>)
    40d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    40d8:	f013 0f02 	tst.w	r3, #2
    40dc:	d17a      	bne.n	41d4 <mem_manage_fault+0x164>
	uint32_t mmfar = -EINVAL;
    40de:	f06f 0915 	mvn.w	r9, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    40e2:	4ba2      	ldr	r3, [pc, #648]	; (436c <mem_manage_fault+0x2fc>)
    40e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    40e6:	f013 0f01 	tst.w	r3, #1
    40ea:	f040 80ea 	bne.w	42c2 <mem_manage_fault+0x252>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    40ee:	4b9f      	ldr	r3, [pc, #636]	; (436c <mem_manage_fault+0x2fc>)
    40f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    40f2:	f013 0f20 	tst.w	r3, #32
    40f6:	f040 8106 	bne.w	4306 <mem_manage_fault+0x296>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    40fa:	4b9c      	ldr	r3, [pc, #624]	; (436c <mem_manage_fault+0x2fc>)
    40fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    40fe:	f013 0f10 	tst.w	r3, #16
    4102:	d104      	bne.n	410e <mem_manage_fault+0x9e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    4104:	4b99      	ldr	r3, [pc, #612]	; (436c <mem_manage_fault+0x2fc>)
    4106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4108:	f013 0f02 	tst.w	r3, #2
    410c:	d005      	beq.n	411a <mem_manage_fault+0xaa>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    410e:	4b97      	ldr	r3, [pc, #604]	; (436c <mem_manage_fault+0x2fc>)
    4110:	685b      	ldr	r3, [r3, #4]
    4112:	f413 6f00 	tst.w	r3, #2048	; 0x800
    4116:	f040 811a 	bne.w	434e <mem_manage_fault+0x2de>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    411a:	4b94      	ldr	r3, [pc, #592]	; (436c <mem_manage_fault+0x2fc>)
    411c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    411e:	f013 0f20 	tst.w	r3, #32
    4122:	d004      	beq.n	412e <mem_manage_fault+0xbe>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    4124:	4a91      	ldr	r2, [pc, #580]	; (436c <mem_manage_fault+0x2fc>)
    4126:	6a53      	ldr	r3, [r2, #36]	; 0x24
    4128:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    412c:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    412e:	4a8f      	ldr	r2, [pc, #572]	; (436c <mem_manage_fault+0x2fc>)
    4130:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4132:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    4136:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    4138:	2101      	movs	r1, #1
    413a:	4620      	mov	r0, r4
    413c:	f006 f8fa 	bl	a334 <memory_fault_recoverable>
    4140:	7028      	strb	r0, [r5, #0]
}
    4142:	4630      	mov	r0, r6
    4144:	379c      	adds	r7, #156	; 0x9c
    4146:	46bd      	mov	sp, r7
    4148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
    414c:	4b88      	ldr	r3, [pc, #544]	; (4370 <mem_manage_fault+0x300>)
    414e:	637b      	str	r3, [r7, #52]	; 0x34
    4150:	2302      	movs	r3, #2
    4152:	713b      	strb	r3, [r7, #4]
    4154:	2300      	movs	r3, #0
    4156:	717b      	strb	r3, [r7, #5]
    4158:	71bb      	strb	r3, [r7, #6]
    415a:	71fb      	strb	r3, [r7, #7]
    415c:	687a      	ldr	r2, [r7, #4]
    415e:	633a      	str	r2, [r7, #48]	; 0x30
    4160:	4619      	mov	r1, r3
    4162:	f363 0100 	bfi	r1, r3, #0, #1
    4166:	f363 0141 	bfi	r1, r3, #1, #1
    416a:	f363 0182 	bfi	r1, r3, #2, #1
    416e:	f363 01c5 	bfi	r1, r3, #3, #3
    4172:	2201      	movs	r2, #1
    4174:	f362 1188 	bfi	r1, r2, #6, #3
    4178:	2208      	movs	r2, #8
    417a:	f362 2153 	bfi	r1, r2, #9, #11
    417e:	f363 511f 	bfi	r1, r3, #20, #12
    4182:	f107 0230 	add.w	r2, r7, #48	; 0x30
    4186:	4878      	ldr	r0, [pc, #480]	; (4368 <mem_manage_fault+0x2f8>)
    4188:	f7fe fc6c 	bl	2a64 <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_MEM_STACKING;
    418c:	2611      	movs	r6, #17
    418e:	e79c      	b.n	40ca <mem_manage_fault+0x5a>
		PR_FAULT_INFO("  Unstacking error");
    4190:	4b78      	ldr	r3, [pc, #480]	; (4374 <mem_manage_fault+0x304>)
    4192:	64fb      	str	r3, [r7, #76]	; 0x4c
    4194:	2302      	movs	r3, #2
    4196:	713b      	strb	r3, [r7, #4]
    4198:	2300      	movs	r3, #0
    419a:	717b      	strb	r3, [r7, #5]
    419c:	71bb      	strb	r3, [r7, #6]
    419e:	71fb      	strb	r3, [r7, #7]
    41a0:	687a      	ldr	r2, [r7, #4]
    41a2:	64ba      	str	r2, [r7, #72]	; 0x48
    41a4:	4619      	mov	r1, r3
    41a6:	f363 0100 	bfi	r1, r3, #0, #1
    41aa:	f363 0141 	bfi	r1, r3, #1, #1
    41ae:	f363 0182 	bfi	r1, r3, #2, #1
    41b2:	f363 01c5 	bfi	r1, r3, #3, #3
    41b6:	2201      	movs	r2, #1
    41b8:	f362 1188 	bfi	r1, r2, #6, #3
    41bc:	2208      	movs	r2, #8
    41be:	f362 2153 	bfi	r1, r2, #9, #11
    41c2:	f363 511f 	bfi	r1, r3, #20, #12
    41c6:	f107 0248 	add.w	r2, r7, #72	; 0x48
    41ca:	4867      	ldr	r0, [pc, #412]	; (4368 <mem_manage_fault+0x2f8>)
    41cc:	f7fe fc4a 	bl	2a64 <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_MEM_UNSTACKING;
    41d0:	2612      	movs	r6, #18
    41d2:	e77f      	b.n	40d4 <mem_manage_fault+0x64>
		PR_FAULT_INFO("  Data Access Violation");
    41d4:	4b68      	ldr	r3, [pc, #416]	; (4378 <mem_manage_fault+0x308>)
    41d6:	667b      	str	r3, [r7, #100]	; 0x64
    41d8:	2302      	movs	r3, #2
    41da:	713b      	strb	r3, [r7, #4]
    41dc:	2300      	movs	r3, #0
    41de:	717b      	strb	r3, [r7, #5]
    41e0:	71bb      	strb	r3, [r7, #6]
    41e2:	71fb      	strb	r3, [r7, #7]
    41e4:	687a      	ldr	r2, [r7, #4]
    41e6:	663a      	str	r2, [r7, #96]	; 0x60
    41e8:	4619      	mov	r1, r3
    41ea:	f363 0100 	bfi	r1, r3, #0, #1
    41ee:	f363 0141 	bfi	r1, r3, #1, #1
    41f2:	f363 0182 	bfi	r1, r3, #2, #1
    41f6:	f363 01c5 	bfi	r1, r3, #3, #3
    41fa:	2201      	movs	r2, #1
    41fc:	f362 1188 	bfi	r1, r2, #6, #3
    4200:	2208      	movs	r2, #8
    4202:	f362 2153 	bfi	r1, r2, #9, #11
    4206:	f363 511f 	bfi	r1, r3, #20, #12
    420a:	f107 0260 	add.w	r2, r7, #96	; 0x60
    420e:	4856      	ldr	r0, [pc, #344]	; (4368 <mem_manage_fault+0x2f8>)
    4210:	f7fe fc28 	bl	2a64 <z_impl_z_log_msg_static_create>
		uint32_t temp = SCB->MMFAR;
    4214:	4b55      	ldr	r3, [pc, #340]	; (436c <mem_manage_fault+0x2fc>)
    4216:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    421a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    421c:	f013 0f80 	tst.w	r3, #128	; 0x80
    4220:	d049      	beq.n	42b6 <mem_manage_fault+0x246>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    4222:	466e      	mov	r6, sp
    4224:	b088      	sub	sp, #32
    4226:	466b      	mov	r3, sp
    4228:	f113 0210 	adds.w	r2, r3, #16
    422c:	d011      	beq.n	4252 <mem_manage_fault+0x1e2>
    422e:	210c      	movs	r1, #12
    4230:	b152      	cbz	r2, 4248 <mem_manage_fault+0x1d8>
    4232:	4608      	mov	r0, r1
    4234:	2904      	cmp	r1, #4
    4236:	dd03      	ble.n	4240 <mem_manage_fault+0x1d0>
    4238:	f8df c140 	ldr.w	ip, [pc, #320]	; 437c <mem_manage_fault+0x30c>
    423c:	f8c3 c014 	str.w	ip, [r3, #20]
    4240:	2808      	cmp	r0, #8
    4242:	dd09      	ble.n	4258 <mem_manage_fault+0x1e8>
    4244:	f8c3 9018 	str.w	r9, [r3, #24]
    4248:	290b      	cmp	r1, #11
    424a:	dd31      	ble.n	42b0 <mem_manage_fault+0x240>
    424c:	f04f 0c0c 	mov.w	ip, #12
    4250:	e004      	b.n	425c <mem_manage_fault+0x1ec>
    4252:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    4256:	e7eb      	b.n	4230 <mem_manage_fault+0x1c0>
    4258:	f06f 0c1b 	mvn.w	ip, #27
    425c:	b13a      	cbz	r2, 426e <mem_manage_fault+0x1fe>
    425e:	2103      	movs	r1, #3
    4260:	7139      	strb	r1, [r7, #4]
    4262:	2100      	movs	r1, #0
    4264:	7179      	strb	r1, [r7, #5]
    4266:	71b9      	strb	r1, [r7, #6]
    4268:	71f9      	strb	r1, [r7, #7]
    426a:	6878      	ldr	r0, [r7, #4]
    426c:	6118      	str	r0, [r3, #16]
    426e:	2100      	movs	r1, #0
    4270:	f36f 0100 	bfc	r1, #0, #1
    4274:	f36f 0141 	bfc	r1, #1, #1
    4278:	f36f 0182 	bfc	r1, #2, #1
    427c:	f36f 01c5 	bfc	r1, #3, #3
    4280:	2301      	movs	r3, #1
    4282:	f363 1188 	bfi	r1, r3, #6, #3
    4286:	f3cc 030a 	ubfx	r3, ip, #0, #11
    428a:	f363 2153 	bfi	r1, r3, #9, #11
    428e:	f36f 511f 	bfc	r1, #20, #12
    4292:	2300      	movs	r3, #0
    4294:	4834      	ldr	r0, [pc, #208]	; (4368 <mem_manage_fault+0x2f8>)
    4296:	f7fe fbe5 	bl	2a64 <z_impl_z_log_msg_static_create>
    429a:	46b5      	mov	sp, r6
			if (from_hard_fault != 0) {
    429c:	f1b8 0f00 	cmp.w	r8, #0
    42a0:	d00d      	beq.n	42be <mem_manage_fault+0x24e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    42a2:	4a32      	ldr	r2, [pc, #200]	; (436c <mem_manage_fault+0x2fc>)
    42a4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    42a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    42aa:	6293      	str	r3, [r2, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    42ac:	2613      	movs	r6, #19
    42ae:	e718      	b.n	40e2 <mem_manage_fault+0x72>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    42b0:	f06f 0c1b 	mvn.w	ip, #27
    42b4:	e7d2      	b.n	425c <mem_manage_fault+0x1ec>
	uint32_t mmfar = -EINVAL;
    42b6:	f06f 0915 	mvn.w	r9, #21
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    42ba:	2613      	movs	r6, #19
    42bc:	e711      	b.n	40e2 <mem_manage_fault+0x72>
    42be:	2613      	movs	r6, #19
    42c0:	e70f      	b.n	40e2 <mem_manage_fault+0x72>
		PR_FAULT_INFO("  Instruction Access Violation");
    42c2:	4b2f      	ldr	r3, [pc, #188]	; (4380 <mem_manage_fault+0x310>)
    42c4:	67fb      	str	r3, [r7, #124]	; 0x7c
    42c6:	2302      	movs	r3, #2
    42c8:	713b      	strb	r3, [r7, #4]
    42ca:	2300      	movs	r3, #0
    42cc:	717b      	strb	r3, [r7, #5]
    42ce:	71bb      	strb	r3, [r7, #6]
    42d0:	71fb      	strb	r3, [r7, #7]
    42d2:	687a      	ldr	r2, [r7, #4]
    42d4:	67ba      	str	r2, [r7, #120]	; 0x78
    42d6:	4619      	mov	r1, r3
    42d8:	f363 0100 	bfi	r1, r3, #0, #1
    42dc:	f363 0141 	bfi	r1, r3, #1, #1
    42e0:	f363 0182 	bfi	r1, r3, #2, #1
    42e4:	f363 01c5 	bfi	r1, r3, #3, #3
    42e8:	2201      	movs	r2, #1
    42ea:	f362 1188 	bfi	r1, r2, #6, #3
    42ee:	2208      	movs	r2, #8
    42f0:	f362 2153 	bfi	r1, r2, #9, #11
    42f4:	f363 511f 	bfi	r1, r3, #20, #12
    42f8:	f107 0278 	add.w	r2, r7, #120	; 0x78
    42fc:	481a      	ldr	r0, [pc, #104]	; (4368 <mem_manage_fault+0x2f8>)
    42fe:	f7fe fbb1 	bl	2a64 <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    4302:	2614      	movs	r6, #20
    4304:	e6f3      	b.n	40ee <mem_manage_fault+0x7e>
		PR_FAULT_INFO(
    4306:	4b1f      	ldr	r3, [pc, #124]	; (4384 <mem_manage_fault+0x314>)
    4308:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    430c:	2302      	movs	r3, #2
    430e:	713b      	strb	r3, [r7, #4]
    4310:	2300      	movs	r3, #0
    4312:	717b      	strb	r3, [r7, #5]
    4314:	71bb      	strb	r3, [r7, #6]
    4316:	71fb      	strb	r3, [r7, #7]
    4318:	687a      	ldr	r2, [r7, #4]
    431a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    431e:	4619      	mov	r1, r3
    4320:	f363 0100 	bfi	r1, r3, #0, #1
    4324:	f363 0141 	bfi	r1, r3, #1, #1
    4328:	f363 0182 	bfi	r1, r3, #2, #1
    432c:	f363 01c5 	bfi	r1, r3, #3, #3
    4330:	2201      	movs	r2, #1
    4332:	f362 1188 	bfi	r1, r2, #6, #3
    4336:	2208      	movs	r2, #8
    4338:	f362 2153 	bfi	r1, r2, #9, #11
    433c:	f363 511f 	bfi	r1, r3, #20, #12
    4340:	f107 0290 	add.w	r2, r7, #144	; 0x90
    4344:	4808      	ldr	r0, [pc, #32]	; (4368 <mem_manage_fault+0x2f8>)
    4346:	f7fe fb8d 	bl	2a64 <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    434a:	2615      	movs	r6, #21
    434c:	e6d5      	b.n	40fa <mem_manage_fault+0x8a>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    434e:	4621      	mov	r1, r4
    4350:	4648      	mov	r0, r9
    4352:	f7ff fa5b 	bl	380c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    4356:	2800      	cmp	r0, #0
    4358:	f43f aedf 	beq.w	411a <mem_manage_fault+0xaa>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    435c:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    4360:	2602      	movs	r6, #2
    4362:	e6da      	b.n	411a <mem_manage_fault+0xaa>
    4364:	0000cc14 	.word	0x0000cc14
    4368:	0000c508 	.word	0x0000c508
    436c:	e000ed00 	.word	0xe000ed00
    4370:	0000cc2c 	.word	0x0000cc2c
    4374:	0000ca24 	.word	0x0000ca24
    4378:	0000cc60 	.word	0x0000cc60
    437c:	0000cc78 	.word	0x0000cc78
    4380:	0000cc90 	.word	0x0000cc90
    4384:	0000caa0 	.word	0x0000caa0

00004388 <hard_fault>:
{
    4388:	b5f0      	push	{r4, r5, r6, r7, lr}
    438a:	b09b      	sub	sp, #108	; 0x6c
    438c:	af00      	add	r7, sp, #0
    438e:	4606      	mov	r6, r0
    4390:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
    4392:	4b80      	ldr	r3, [pc, #512]	; (4594 <hard_fault+0x20c>)
    4394:	61fb      	str	r3, [r7, #28]
    4396:	2302      	movs	r3, #2
    4398:	713b      	strb	r3, [r7, #4]
    439a:	2400      	movs	r4, #0
    439c:	717c      	strb	r4, [r7, #5]
    439e:	71bc      	strb	r4, [r7, #6]
    43a0:	71fc      	strb	r4, [r7, #7]
    43a2:	687b      	ldr	r3, [r7, #4]
    43a4:	61bb      	str	r3, [r7, #24]
    43a6:	4621      	mov	r1, r4
    43a8:	f364 0100 	bfi	r1, r4, #0, #1
    43ac:	f364 0141 	bfi	r1, r4, #1, #1
    43b0:	f364 0182 	bfi	r1, r4, #2, #1
    43b4:	f364 01c5 	bfi	r1, r4, #3, #3
    43b8:	2301      	movs	r3, #1
    43ba:	f363 1188 	bfi	r1, r3, #6, #3
    43be:	2308      	movs	r3, #8
    43c0:	f363 2153 	bfi	r1, r3, #9, #11
    43c4:	f364 511f 	bfi	r1, r4, #20, #12
    43c8:	4623      	mov	r3, r4
    43ca:	f107 0218 	add.w	r2, r7, #24
    43ce:	4872      	ldr	r0, [pc, #456]	; (4598 <hard_fault+0x210>)
    43d0:	f7fe fb48 	bl	2a64 <z_impl_z_log_msg_static_create>
	*recoverable = false;
    43d4:	702c      	strb	r4, [r5, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    43d6:	4b71      	ldr	r3, [pc, #452]	; (459c <hard_fault+0x214>)
    43d8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    43da:	f014 0402 	ands.w	r4, r4, #2
    43de:	d10c      	bne.n	43fa <hard_fault+0x72>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    43e0:	4b6e      	ldr	r3, [pc, #440]	; (459c <hard_fault+0x214>)
    43e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    43e4:	2b00      	cmp	r3, #0
    43e6:	db2a      	blt.n	443e <hard_fault+0xb6>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    43e8:	4b6c      	ldr	r3, [pc, #432]	; (459c <hard_fault+0x214>)
    43ea:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    43ec:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    43f0:	d146      	bne.n	4480 <hard_fault+0xf8>
}
    43f2:	4620      	mov	r0, r4
    43f4:	376c      	adds	r7, #108	; 0x6c
    43f6:	46bd      	mov	sp, r7
    43f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Bus fault on vector table read");
    43fa:	4b69      	ldr	r3, [pc, #420]	; (45a0 <hard_fault+0x218>)
    43fc:	667b      	str	r3, [r7, #100]	; 0x64
    43fe:	2302      	movs	r3, #2
    4400:	713b      	strb	r3, [r7, #4]
    4402:	2400      	movs	r4, #0
    4404:	717c      	strb	r4, [r7, #5]
    4406:	71bc      	strb	r4, [r7, #6]
    4408:	71fc      	strb	r4, [r7, #7]
    440a:	687b      	ldr	r3, [r7, #4]
    440c:	663b      	str	r3, [r7, #96]	; 0x60
    440e:	4621      	mov	r1, r4
    4410:	f364 0100 	bfi	r1, r4, #0, #1
    4414:	f364 0141 	bfi	r1, r4, #1, #1
    4418:	f364 0182 	bfi	r1, r4, #2, #1
    441c:	f364 01c5 	bfi	r1, r4, #3, #3
    4420:	2301      	movs	r3, #1
    4422:	f363 1188 	bfi	r1, r3, #6, #3
    4426:	2308      	movs	r3, #8
    4428:	f363 2153 	bfi	r1, r3, #9, #11
    442c:	f364 511f 	bfi	r1, r4, #20, #12
    4430:	4623      	mov	r3, r4
    4432:	f107 0260 	add.w	r2, r7, #96	; 0x60
    4436:	4858      	ldr	r0, [pc, #352]	; (4598 <hard_fault+0x210>)
    4438:	f7fe fb14 	bl	2a64 <z_impl_z_log_msg_static_create>
    443c:	e7d9      	b.n	43f2 <hard_fault+0x6a>
		PR_EXC("  Debug event");
    443e:	4b59      	ldr	r3, [pc, #356]	; (45a4 <hard_fault+0x21c>)
    4440:	64fb      	str	r3, [r7, #76]	; 0x4c
    4442:	2302      	movs	r3, #2
    4444:	713b      	strb	r3, [r7, #4]
    4446:	2300      	movs	r3, #0
    4448:	717b      	strb	r3, [r7, #5]
    444a:	71bb      	strb	r3, [r7, #6]
    444c:	71fb      	strb	r3, [r7, #7]
    444e:	687a      	ldr	r2, [r7, #4]
    4450:	64ba      	str	r2, [r7, #72]	; 0x48
    4452:	4619      	mov	r1, r3
    4454:	f363 0100 	bfi	r1, r3, #0, #1
    4458:	f363 0141 	bfi	r1, r3, #1, #1
    445c:	f363 0182 	bfi	r1, r3, #2, #1
    4460:	f363 01c5 	bfi	r1, r3, #3, #3
    4464:	2201      	movs	r2, #1
    4466:	f362 1188 	bfi	r1, r2, #6, #3
    446a:	2208      	movs	r2, #8
    446c:	f362 2153 	bfi	r1, r2, #9, #11
    4470:	f363 511f 	bfi	r1, r3, #20, #12
    4474:	f107 0248 	add.w	r2, r7, #72	; 0x48
    4478:	4847      	ldr	r0, [pc, #284]	; (4598 <hard_fault+0x210>)
    447a:	f7fe faf3 	bl	2a64 <z_impl_z_log_msg_static_create>
    447e:	e7b8      	b.n	43f2 <hard_fault+0x6a>
		PR_EXC("  Fault escalation (see below)");
    4480:	4b49      	ldr	r3, [pc, #292]	; (45a8 <hard_fault+0x220>)
    4482:	637b      	str	r3, [r7, #52]	; 0x34
    4484:	2302      	movs	r3, #2
    4486:	713b      	strb	r3, [r7, #4]
    4488:	2300      	movs	r3, #0
    448a:	717b      	strb	r3, [r7, #5]
    448c:	71bb      	strb	r3, [r7, #6]
    448e:	71fb      	strb	r3, [r7, #7]
    4490:	687a      	ldr	r2, [r7, #4]
    4492:	633a      	str	r2, [r7, #48]	; 0x30
    4494:	4619      	mov	r1, r3
    4496:	f363 0100 	bfi	r1, r3, #0, #1
    449a:	f363 0141 	bfi	r1, r3, #1, #1
    449e:	f363 0182 	bfi	r1, r3, #2, #1
    44a2:	f363 01c5 	bfi	r1, r3, #3, #3
    44a6:	2201      	movs	r2, #1
    44a8:	f362 1188 	bfi	r1, r2, #6, #3
    44ac:	2208      	movs	r2, #8
    44ae:	f362 2153 	bfi	r1, r2, #9, #11
    44b2:	f363 511f 	bfi	r1, r3, #20, #12
    44b6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    44ba:	4837      	ldr	r0, [pc, #220]	; (4598 <hard_fault+0x210>)
    44bc:	f7fe fad2 	bl	2a64 <z_impl_z_log_msg_static_create>
		if (z_arm_is_synchronous_svc(esf)) {
    44c0:	4630      	mov	r0, r6
    44c2:	f7ff fa0b 	bl	38dc <z_arm_is_synchronous_svc>
    44c6:	2800      	cmp	r0, #0
    44c8:	d040      	beq.n	454c <hard_fault+0x1c4>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    44ca:	6834      	ldr	r4, [r6, #0]
    44cc:	466d      	mov	r5, sp
    44ce:	b088      	sub	sp, #32
    44d0:	466b      	mov	r3, sp
    44d2:	f113 0210 	adds.w	r2, r3, #16
    44d6:	d00f      	beq.n	44f8 <hard_fault+0x170>
    44d8:	210c      	movs	r1, #12
    44da:	b14a      	cbz	r2, 44f0 <hard_fault+0x168>
    44dc:	4608      	mov	r0, r1
    44de:	2904      	cmp	r1, #4
    44e0:	dd03      	ble.n	44ea <hard_fault+0x162>
    44e2:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 45ac <hard_fault+0x224>
    44e6:	f8c3 c014 	str.w	ip, [r3, #20]
    44ea:	2808      	cmp	r0, #8
    44ec:	dd07      	ble.n	44fe <hard_fault+0x176>
    44ee:	619c      	str	r4, [r3, #24]
    44f0:	290b      	cmp	r1, #11
    44f2:	dd28      	ble.n	4546 <hard_fault+0x1be>
    44f4:	240c      	movs	r4, #12
    44f6:	e004      	b.n	4502 <hard_fault+0x17a>
    44f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    44fc:	e7ed      	b.n	44da <hard_fault+0x152>
    44fe:	f06f 041b 	mvn.w	r4, #27
    4502:	b13a      	cbz	r2, 4514 <hard_fault+0x18c>
    4504:	2103      	movs	r1, #3
    4506:	7139      	strb	r1, [r7, #4]
    4508:	2100      	movs	r1, #0
    450a:	7179      	strb	r1, [r7, #5]
    450c:	71b9      	strb	r1, [r7, #6]
    450e:	71f9      	strb	r1, [r7, #7]
    4510:	6878      	ldr	r0, [r7, #4]
    4512:	6118      	str	r0, [r3, #16]
    4514:	2100      	movs	r1, #0
    4516:	f36f 0100 	bfc	r1, #0, #1
    451a:	f36f 0141 	bfc	r1, #1, #1
    451e:	f36f 0182 	bfc	r1, #2, #1
    4522:	f36f 01c5 	bfc	r1, #3, #3
    4526:	2301      	movs	r3, #1
    4528:	f363 1188 	bfi	r1, r3, #6, #3
    452c:	f3c4 030a 	ubfx	r3, r4, #0, #11
    4530:	f363 2153 	bfi	r1, r3, #9, #11
    4534:	f36f 511f 	bfc	r1, #20, #12
    4538:	2300      	movs	r3, #0
    453a:	4817      	ldr	r0, [pc, #92]	; (4598 <hard_fault+0x210>)
    453c:	f7fe fa92 	bl	2a64 <z_impl_z_log_msg_static_create>
    4540:	46ad      	mov	sp, r5
			reason = esf->basic.r0;
    4542:	6834      	ldr	r4, [r6, #0]
    4544:	e755      	b.n	43f2 <hard_fault+0x6a>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    4546:	f06f 041b 	mvn.w	r4, #27
    454a:	e7da      	b.n	4502 <hard_fault+0x17a>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    454c:	4b13      	ldr	r3, [pc, #76]	; (459c <hard_fault+0x214>)
    454e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4550:	f013 0fff 	tst.w	r3, #255	; 0xff
    4554:	d10f      	bne.n	4576 <hard_fault+0x1ee>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    4556:	4b11      	ldr	r3, [pc, #68]	; (459c <hard_fault+0x214>)
    4558:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    455a:	f414 447f 	ands.w	r4, r4, #65280	; 0xff00
    455e:	d111      	bne.n	4584 <hard_fault+0x1fc>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    4560:	4b0e      	ldr	r3, [pc, #56]	; (459c <hard_fault+0x214>)
    4562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    4568:	f4ff af43 	bcc.w	43f2 <hard_fault+0x6a>
			reason = usage_fault(esf);
    456c:	4630      	mov	r0, r6
    456e:	f7ff fba3 	bl	3cb8 <usage_fault>
    4572:	4604      	mov	r4, r0
	return reason;
    4574:	e73d      	b.n	43f2 <hard_fault+0x6a>
			reason = mem_manage_fault(esf, 1, recoverable);
    4576:	462a      	mov	r2, r5
    4578:	2101      	movs	r1, #1
    457a:	4630      	mov	r0, r6
    457c:	f7ff fd78 	bl	4070 <mem_manage_fault>
    4580:	4604      	mov	r4, r0
    4582:	e736      	b.n	43f2 <hard_fault+0x6a>
			reason = bus_fault(esf, 1, recoverable);
    4584:	462a      	mov	r2, r5
    4586:	2101      	movs	r1, #1
    4588:	4630      	mov	r0, r6
    458a:	f7ff fa07 	bl	399c <bus_fault>
    458e:	4604      	mov	r4, r0
    4590:	e72f      	b.n	43f2 <hard_fault+0x6a>
    4592:	bf00      	nop
    4594:	0000ccb0 	.word	0x0000ccb0
    4598:	0000c508 	.word	0x0000c508
    459c:	e000ed00 	.word	0xe000ed00
    45a0:	0000ccc8 	.word	0x0000ccc8
    45a4:	0000ccec 	.word	0x0000ccec
    45a8:	0000ccfc 	.word	0x0000ccfc
    45ac:	0000cd1c 	.word	0x0000cd1c

000045b0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    45b0:	b530      	push	{r4, r5, lr}
    45b2:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    45b4:	4b1a      	ldr	r3, [pc, #104]	; (4620 <z_arm_fault+0x70>)
    45b6:	685c      	ldr	r4, [r3, #4]
    45b8:	f3c4 0408 	ubfx	r4, r4, #0, #9
    45bc:	2300      	movs	r3, #0
    45be:	f383 8811 	msr	BASEPRI, r3
    45c2:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(0);

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
    45c6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    45ca:	f7ff f9a5 	bl	3918 <get_esf>
    45ce:	4605      	mov	r5, r0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    45d0:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    45d4:	4621      	mov	r1, r4
    45d6:	f005 feaf 	bl	a338 <fault_handle>
	if (recoverable) {
    45da:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    45de:	b10b      	cbz	r3, 45e4 <z_arm_fault+0x34>
	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    45e0:	b00b      	add	sp, #44	; 0x2c
    45e2:	bd30      	pop	{r4, r5, pc}
    45e4:	4604      	mov	r4, r0
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    45e6:	2220      	movs	r2, #32
    45e8:	4629      	mov	r1, r5
    45ea:	a801      	add	r0, sp, #4
    45ec:	f005 ff43 	bl	a476 <memcpy>
	if (nested_exc) {
    45f0:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    45f4:	b14b      	cbz	r3, 460a <z_arm_fault+0x5a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    45f6:	9b08      	ldr	r3, [sp, #32]
    45f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
    45fc:	b95a      	cbnz	r2, 4616 <z_arm_fault+0x66>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    45fe:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    4602:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    4606:	9308      	str	r3, [sp, #32]
    4608:	e005      	b.n	4616 <z_arm_fault+0x66>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    460a:	9b08      	ldr	r3, [sp, #32]
    460c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4610:	f023 0301 	bic.w	r3, r3, #1
    4614:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    4616:	a901      	add	r1, sp, #4
    4618:	4620      	mov	r0, r4
    461a:	f005 fe62 	bl	a2e2 <z_arm_fatal_error>
    461e:	e7df      	b.n	45e0 <z_arm_fault+0x30>
    4620:	e000ed00 	.word	0xe000ed00

00004624 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    4624:	4a02      	ldr	r2, [pc, #8]	; (4630 <z_arm_fault_init+0xc>)
    4626:	6953      	ldr	r3, [r2, #20]
    4628:	f043 0310 	orr.w	r3, r3, #16
    462c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    462e:	4770      	bx	lr
    4630:	e000ed00 	.word	0xe000ed00

00004634 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4634:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4638:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    463c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    463e:	4672      	mov	r2, lr
	bl z_arm_fault
    4640:	f7ff ffb6 	bl	45b0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4644:	bd01      	pop	{r0, pc}
    4646:	bf00      	nop

00004648 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4648:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    464a:	e006      	b.n	465a <z_arm_interrupt_init+0x12>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    464c:	f003 030f 	and.w	r3, r3, #15
    4650:	4909      	ldr	r1, [pc, #36]	; (4678 <z_arm_interrupt_init+0x30>)
    4652:	4419      	add	r1, r3
    4654:	2320      	movs	r3, #32
    4656:	760b      	strb	r3, [r1, #24]
    4658:	3201      	adds	r2, #1
    465a:	2a2f      	cmp	r2, #47	; 0x2f
    465c:	dc0a      	bgt.n	4674 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    465e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    4660:	2b00      	cmp	r3, #0
    4662:	dbf3      	blt.n	464c <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4664:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4668:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    466c:	2120      	movs	r1, #32
    466e:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    4672:	e7f1      	b.n	4658 <z_arm_interrupt_init+0x10>
	}
}
    4674:	4770      	bx	lr
    4676:	bf00      	nop
    4678:	e000ecfc 	.word	0xe000ecfc

0000467c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
    467c:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
    467e:	4913      	ldr	r1, [pc, #76]	; (46cc <__start+0x50>)
    strb r0, [r1]
    4680:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    4682:	2000      	movs	r0, #0
    msr CONTROL, r0
    4684:	f380 8814 	msr	CONTROL, r0
    isb
    4688:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    468c:	f7fd fecc 	bl	2428 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    4690:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    4692:	490f      	ldr	r1, [pc, #60]	; (46d0 <__start+0x54>)
    str r0, [r1]
    4694:	6008      	str	r0, [r1, #0]
    dsb
    4696:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    469a:	480e      	ldr	r0, [pc, #56]	; (46d4 <__start+0x58>)
    msr msp, r0
    469c:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    46a0:	f000 f830 	bl	4704 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    46a4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    46a6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    46aa:	480b      	ldr	r0, [pc, #44]	; (46d8 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    46ac:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    46b0:	1840      	adds	r0, r0, r1
    msr PSP, r0
    46b2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    46b6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    46ba:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    46bc:	4308      	orrs	r0, r1
    msr CONTROL, r0
    46be:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    46c2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    46c6:	f7ff f80b 	bl	36e0 <z_arm_prep_c>
    46ca:	0000      	.short	0x0000
    ldr r1, =z_sys_post_kernel
    46cc:	20000fd5 	.word	0x20000fd5
    ldr r1, =_SCS_MPU_CTRL
    46d0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    46d4:	20002100 	.word	0x20002100
    ldr r0, =z_interrupt_stacks
    46d8:	20001340 	.word	0x20001340

000046dc <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    46dc:	4b08      	ldr	r3, [pc, #32]	; (4700 <z_arm_clear_arm_mpu_config+0x24>)
    46de:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    46e2:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    46e6:	2300      	movs	r3, #0
    46e8:	e006      	b.n	46f8 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    46ea:	4a05      	ldr	r2, [pc, #20]	; (4700 <z_arm_clear_arm_mpu_config+0x24>)
    46ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    46f0:	2100      	movs	r1, #0
    46f2:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    46f6:	3301      	adds	r3, #1
    46f8:	4283      	cmp	r3, r0
    46fa:	dbf6      	blt.n	46ea <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    46fc:	4770      	bx	lr
    46fe:	bf00      	nop
    4700:	e000ed00 	.word	0xe000ed00

00004704 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    4704:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    4706:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    4708:	2400      	movs	r4, #0
    470a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    470e:	f7ff ffe5 	bl	46dc <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    4712:	4623      	mov	r3, r4
    4714:	e008      	b.n	4728 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    4716:	f103 0120 	add.w	r1, r3, #32
    471a:	4a0e      	ldr	r2, [pc, #56]	; (4754 <z_arm_init_arch_hw_at_boot+0x50>)
    471c:	f04f 30ff 	mov.w	r0, #4294967295
    4720:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    4724:	3301      	adds	r3, #1
    4726:	b2db      	uxtb	r3, r3
    4728:	2b07      	cmp	r3, #7
    472a:	d9f4      	bls.n	4716 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    472c:	2300      	movs	r3, #0
    472e:	e008      	b.n	4742 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    4730:	f103 0160 	add.w	r1, r3, #96	; 0x60
    4734:	4a07      	ldr	r2, [pc, #28]	; (4754 <z_arm_init_arch_hw_at_boot+0x50>)
    4736:	f04f 30ff 	mov.w	r0, #4294967295
    473a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    473e:	3301      	adds	r3, #1
    4740:	b2db      	uxtb	r3, r3
    4742:	2b07      	cmp	r3, #7
    4744:	d9f4      	bls.n	4730 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    4746:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    4748:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    474c:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    4750:	bd10      	pop	{r4, pc}
    4752:	bf00      	nop
    4754:	e000e100 	.word	0xe000e100

00004758 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    4758:	b508      	push	{r3, lr}
	if (_current == thread) {
    475a:	4b0a      	ldr	r3, [pc, #40]	; (4784 <z_impl_k_thread_abort+0x2c>)
    475c:	689b      	ldr	r3, [r3, #8]
    475e:	4283      	cmp	r3, r0
    4760:	d002      	beq.n	4768 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    4762:	f004 f95d 	bl	8a20 <z_thread_abort>
}
    4766:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4768:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    476c:	2b00      	cmp	r3, #0
    476e:	d0f8      	beq.n	4762 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4770:	4b05      	ldr	r3, [pc, #20]	; (4788 <z_impl_k_thread_abort+0x30>)
    4772:	685a      	ldr	r2, [r3, #4]
    4774:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    4778:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    477a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    477c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    4780:	625a      	str	r2, [r3, #36]	; 0x24
    4782:	e7ee      	b.n	4762 <z_impl_k_thread_abort+0xa>
    4784:	20000f88 	.word	0x20000f88
    4788:	e000ed00 	.word	0xe000ed00

0000478c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    478c:	b508      	push	{r3, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    478e:	4b03      	ldr	r3, [pc, #12]	; (479c <z_arm_configure_static_mpu_regions+0x10>)
    4790:	4a03      	ldr	r2, [pc, #12]	; (47a0 <z_arm_configure_static_mpu_regions+0x14>)
    4792:	2101      	movs	r1, #1
    4794:	4803      	ldr	r0, [pc, #12]	; (47a4 <z_arm_configure_static_mpu_regions+0x18>)
    4796:	f005 fe24 	bl	a3e2 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    479a:	bd08      	pop	{r3, pc}
    479c:	20020000 	.word	0x20020000
    47a0:	20000000 	.word	0x20000000
    47a4:	0000cd38 	.word	0x0000cd38

000047a8 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    47a8:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    47aa:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    47ae:	3b40      	subs	r3, #64	; 0x40
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    47b0:	4804      	ldr	r0, [pc, #16]	; (47c4 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    47b2:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    47b4:	2340      	movs	r3, #64	; 0x40
    47b6:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    47b8:	4b03      	ldr	r3, [pc, #12]	; (47c8 <z_arm_configure_dynamic_mpu_regions+0x20>)
    47ba:	6083      	str	r3, [r0, #8]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    47bc:	2101      	movs	r1, #1
    47be:	f005 fe14 	bl	a3ea <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
    47c2:	bd08      	pop	{r3, pc}
    47c4:	20000954 	.word	0x20000954
    47c8:	150b0000 	.word	0x150b0000

000047cc <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    47cc:	4a08      	ldr	r2, [pc, #32]	; (47f0 <region_init+0x24>)
    47ce:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    47d2:	680b      	ldr	r3, [r1, #0]
    47d4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    47d8:	4303      	orrs	r3, r0
    47da:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    47de:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    47e2:	688b      	ldr	r3, [r1, #8]
    47e4:	f043 0301 	orr.w	r3, r3, #1
    47e8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    47ec:	4770      	bx	lr
    47ee:	bf00      	nop
    47f0:	e000ed00 	.word	0xe000ed00

000047f4 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    47f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    47f6:	b083      	sub	sp, #12
    47f8:	af00      	add	r7, sp, #0
    47fa:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    47fc:	2807      	cmp	r0, #7
    47fe:	d805      	bhi.n	480c <region_allocate_and_init+0x18>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    4800:	f7ff ffe4 	bl	47cc <region_init>

	return index;
    4804:	4620      	mov	r0, r4
}
    4806:	370c      	adds	r7, #12
    4808:	46bd      	mov	sp, r7
    480a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    480c:	466d      	mov	r5, sp
    480e:	b088      	sub	sp, #32
    4810:	466b      	mov	r3, sp
    4812:	f113 0210 	adds.w	r2, r3, #16
    4816:	d02f      	beq.n	4878 <region_allocate_and_init+0x84>
    4818:	210c      	movs	r1, #12
    481a:	b13a      	cbz	r2, 482c <region_allocate_and_init+0x38>
    481c:	4608      	mov	r0, r1
    481e:	2904      	cmp	r1, #4
    4820:	dd01      	ble.n	4826 <region_allocate_and_init+0x32>
    4822:	4e18      	ldr	r6, [pc, #96]	; (4884 <region_allocate_and_init+0x90>)
    4824:	615e      	str	r6, [r3, #20]
    4826:	2808      	cmp	r0, #8
    4828:	dd00      	ble.n	482c <region_allocate_and_init+0x38>
    482a:	619c      	str	r4, [r3, #24]
    482c:	290b      	cmp	r1, #11
    482e:	dd26      	ble.n	487e <region_allocate_and_init+0x8a>
    4830:	240c      	movs	r4, #12
    4832:	b13a      	cbz	r2, 4844 <region_allocate_and_init+0x50>
    4834:	2103      	movs	r1, #3
    4836:	7139      	strb	r1, [r7, #4]
    4838:	2100      	movs	r1, #0
    483a:	7179      	strb	r1, [r7, #5]
    483c:	71b9      	strb	r1, [r7, #6]
    483e:	71f9      	strb	r1, [r7, #7]
    4840:	6878      	ldr	r0, [r7, #4]
    4842:	6118      	str	r0, [r3, #16]
    4844:	2100      	movs	r1, #0
    4846:	f36f 0100 	bfc	r1, #0, #1
    484a:	f36f 0141 	bfc	r1, #1, #1
    484e:	f36f 0182 	bfc	r1, #2, #1
    4852:	f36f 01c5 	bfc	r1, #3, #3
    4856:	2301      	movs	r3, #1
    4858:	f363 1188 	bfi	r1, r3, #6, #3
    485c:	f3c4 040a 	ubfx	r4, r4, #0, #11
    4860:	f364 2153 	bfi	r1, r4, #9, #11
    4864:	f36f 511f 	bfc	r1, #20, #12
    4868:	2300      	movs	r3, #0
    486a:	4807      	ldr	r0, [pc, #28]	; (4888 <region_allocate_and_init+0x94>)
    486c:	f7fe f8fa 	bl	2a64 <z_impl_z_log_msg_static_create>
    4870:	46ad      	mov	sp, r5
		return -EINVAL;
    4872:	f06f 0015 	mvn.w	r0, #21
    4876:	e7c6      	b.n	4806 <region_allocate_and_init+0x12>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4878:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    487c:	e7cd      	b.n	481a <region_allocate_and_init+0x26>
    487e:	f06f 041b 	mvn.w	r4, #27
    4882:	e7d6      	b.n	4832 <region_allocate_and_init+0x3e>
    4884:	0000cd48 	.word	0x0000cd48
    4888:	0000c500 	.word	0x0000c500

0000488c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    488c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4890:	b082      	sub	sp, #8
    4892:	af00      	add	r7, sp, #0
    4894:	4681      	mov	r9, r0
    4896:	4688      	mov	r8, r1
    4898:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
    489a:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    489c:	2500      	movs	r5, #0
    489e:	e00f      	b.n	48c0 <mpu_configure_regions+0x34>
		}
		/* Non-empty region. */

		if (do_sanity_check &&
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    48a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    48a4:	e024      	b.n	48f0 <mpu_configure_regions+0x64>
    48a6:	f06f 041b 	mvn.w	r4, #27
    48aa:	e02d      	b.n	4908 <mpu_configure_regions+0x7c>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    48ac:	4621      	mov	r1, r4
    48ae:	b2f0      	uxtb	r0, r6
    48b0:	f005 fd78 	bl	a3a4 <mpu_configure_region>
    48b4:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    48b6:	f110 0f16 	cmn.w	r0, #22
    48ba:	d047      	beq.n	494c <mpu_configure_regions+0xc0>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    48bc:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    48be:	3501      	adds	r5, #1
    48c0:	4545      	cmp	r5, r8
    48c2:	da43      	bge.n	494c <mpu_configure_regions+0xc0>
		if (regions[i].size == 0U) {
    48c4:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    48c8:	eb09 0484 	add.w	r4, r9, r4, lsl #2
    48cc:	6862      	ldr	r2, [r4, #4]
    48ce:	2a00      	cmp	r2, #0
    48d0:	d0f5      	beq.n	48be <mpu_configure_regions+0x32>
		if (do_sanity_check &&
    48d2:	f1ba 0f00 	cmp.w	sl, #0
    48d6:	d0e9      	beq.n	48ac <mpu_configure_regions+0x20>
				(!mpu_partition_is_valid(&regions[i]))) {
    48d8:	4620      	mov	r0, r4
    48da:	f005 fd52 	bl	a382 <mpu_partition_is_valid>
		if (do_sanity_check &&
    48de:	2800      	cmp	r0, #0
    48e0:	d1e4      	bne.n	48ac <mpu_configure_regions+0x20>
			LOG_ERR("Partition %u: sanity check failed.", i);
    48e2:	466e      	mov	r6, sp
    48e4:	b088      	sub	sp, #32
    48e6:	466b      	mov	r3, sp
    48e8:	f113 0210 	adds.w	r2, r3, #16
    48ec:	d0d8      	beq.n	48a0 <mpu_configure_regions+0x14>
    48ee:	210c      	movs	r1, #12
    48f0:	b13a      	cbz	r2, 4902 <mpu_configure_regions+0x76>
    48f2:	4608      	mov	r0, r1
    48f4:	2904      	cmp	r1, #4
    48f6:	dd01      	ble.n	48fc <mpu_configure_regions+0x70>
    48f8:	4c17      	ldr	r4, [pc, #92]	; (4958 <mpu_configure_regions+0xcc>)
    48fa:	615c      	str	r4, [r3, #20]
    48fc:	2808      	cmp	r0, #8
    48fe:	dd00      	ble.n	4902 <mpu_configure_regions+0x76>
    4900:	619d      	str	r5, [r3, #24]
    4902:	290b      	cmp	r1, #11
    4904:	ddcf      	ble.n	48a6 <mpu_configure_regions+0x1a>
    4906:	240c      	movs	r4, #12
    4908:	b13a      	cbz	r2, 491a <mpu_configure_regions+0x8e>
    490a:	2103      	movs	r1, #3
    490c:	7139      	strb	r1, [r7, #4]
    490e:	2100      	movs	r1, #0
    4910:	7179      	strb	r1, [r7, #5]
    4912:	71b9      	strb	r1, [r7, #6]
    4914:	71f9      	strb	r1, [r7, #7]
    4916:	6878      	ldr	r0, [r7, #4]
    4918:	6118      	str	r0, [r3, #16]
    491a:	2100      	movs	r1, #0
    491c:	f36f 0100 	bfc	r1, #0, #1
    4920:	f36f 0141 	bfc	r1, #1, #1
    4924:	f36f 0182 	bfc	r1, #2, #1
    4928:	f36f 01c5 	bfc	r1, #3, #3
    492c:	2301      	movs	r3, #1
    492e:	f363 1188 	bfi	r1, r3, #6, #3
    4932:	f3c4 030a 	ubfx	r3, r4, #0, #11
    4936:	f363 2153 	bfi	r1, r3, #9, #11
    493a:	f36f 511f 	bfc	r1, #20, #12
    493e:	2300      	movs	r3, #0
    4940:	4806      	ldr	r0, [pc, #24]	; (495c <mpu_configure_regions+0xd0>)
    4942:	f7fe f88f 	bl	2a64 <z_impl_z_log_msg_static_create>
    4946:	46b5      	mov	sp, r6
			return -EINVAL;
    4948:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    494c:	4630      	mov	r0, r6
    494e:	3708      	adds	r7, #8
    4950:	46bd      	mov	sp, r7
    4952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4956:	bf00      	nop
    4958:	0000cd70 	.word	0x0000cd70
    495c:	0000c500 	.word	0x0000c500

00004960 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    4960:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    4962:	4c03      	ldr	r4, [pc, #12]	; (4970 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    4964:	2301      	movs	r3, #1
    4966:	7822      	ldrb	r2, [r4, #0]
    4968:	f7ff ff90 	bl	488c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    496c:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    496e:	bd10      	pop	{r4, pc}
    4970:	20000fd1 	.word	0x20000fd1

00004974 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    4974:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    4976:	2300      	movs	r3, #0
    4978:	4a09      	ldr	r2, [pc, #36]	; (49a0 <mpu_configure_dynamic_mpu_regions+0x2c>)
    497a:	7812      	ldrb	r2, [r2, #0]
    497c:	f7ff ff86 	bl	488c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    4980:	f110 0f16 	cmn.w	r0, #22
    4984:	d00a      	beq.n	499c <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    4986:	4603      	mov	r3, r0
    4988:	e006      	b.n	4998 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    498a:	4a06      	ldr	r2, [pc, #24]	; (49a4 <mpu_configure_dynamic_mpu_regions+0x30>)
    498c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    4990:	2100      	movs	r1, #0
    4992:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    4996:	3301      	adds	r3, #1
    4998:	2b07      	cmp	r3, #7
    499a:	ddf6      	ble.n	498a <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    499c:	bd08      	pop	{r3, pc}
    499e:	bf00      	nop
    49a0:	20000fd1 	.word	0x20000fd1
    49a4:	e000ed00 	.word	0xe000ed00

000049a8 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    49a8:	4b04      	ldr	r3, [pc, #16]	; (49bc <arm_core_mpu_enable+0x14>)
    49aa:	2205      	movs	r2, #5
    49ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    49b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    49b4:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    49b8:	4770      	bx	lr
    49ba:	bf00      	nop
    49bc:	e000ed00 	.word	0xe000ed00

000049c0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    49c0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    49c4:	4b02      	ldr	r3, [pc, #8]	; (49d0 <arm_core_mpu_disable+0x10>)
    49c6:	2200      	movs	r2, #0
    49c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    49cc:	4770      	bx	lr
    49ce:	bf00      	nop
    49d0:	e000ed00 	.word	0xe000ed00

000049d4 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    49d4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    49d6:	4b0e      	ldr	r3, [pc, #56]	; (4a10 <z_arm_mpu_init+0x3c>)
    49d8:	681d      	ldr	r5, [r3, #0]
    49da:	2d08      	cmp	r5, #8
    49dc:	d815      	bhi.n	4a0a <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    49de:	f7ff ffef 	bl	49c0 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    49e2:	2400      	movs	r4, #0
    49e4:	e009      	b.n	49fa <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    49e6:	4b0a      	ldr	r3, [pc, #40]	; (4a10 <z_arm_mpu_init+0x3c>)
    49e8:	6859      	ldr	r1, [r3, #4]
    49ea:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    49ee:	0093      	lsls	r3, r2, #2
    49f0:	4419      	add	r1, r3
    49f2:	4620      	mov	r0, r4
    49f4:	f7ff feea 	bl	47cc <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    49f8:	3401      	adds	r4, #1
    49fa:	42a5      	cmp	r5, r4
    49fc:	d8f3      	bhi.n	49e6 <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    49fe:	4b05      	ldr	r3, [pc, #20]	; (4a14 <z_arm_mpu_init+0x40>)
    4a00:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    4a02:	f7ff ffd1 	bl	49a8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    4a06:	2000      	movs	r0, #0
}
    4a08:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    4a0a:	f04f 30ff 	mov.w	r0, #4294967295
    4a0e:	e7fb      	b.n	4a08 <z_arm_mpu_init+0x34>
    4a10:	0000cd94 	.word	0x0000cd94
    4a14:	20000fd1 	.word	0x20000fd1

00004a18 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    4a18:	4b01      	ldr	r3, [pc, #4]	; (4a20 <__stdout_hook_install+0x8>)
    4a1a:	6018      	str	r0, [r3, #0]
}
    4a1c:	4770      	bx	lr
    4a1e:	bf00      	nop
    4a20:	2000000c 	.word	0x2000000c

00004a24 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    4a24:	3902      	subs	r1, #2
    4a26:	2901      	cmp	r1, #1
    4a28:	d804      	bhi.n	4a34 <z_impl_zephyr_fputc+0x10>
{
    4a2a:	b508      	push	{r3, lr}
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    4a2c:	4b03      	ldr	r3, [pc, #12]	; (4a3c <z_impl_zephyr_fputc+0x18>)
    4a2e:	681b      	ldr	r3, [r3, #0]
    4a30:	4798      	blx	r3
}
    4a32:	bd08      	pop	{r3, pc}
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    4a34:	f04f 30ff 	mov.w	r0, #4294967295
}
    4a38:	4770      	bx	lr
    4a3a:	bf00      	nop
    4a3c:	2000000c 	.word	0x2000000c

00004a40 <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
    4a40:	b40f      	push	{r0, r1, r2, r3}
    4a42:	b500      	push	{lr}
    4a44:	b085      	sub	sp, #20
    4a46:	ab06      	add	r3, sp, #24
    4a48:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list vargs;
	int     r;

	va_start(vargs, format);
    4a4c:	9303      	str	r3, [sp, #12]
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    4a4e:	2100      	movs	r1, #0
    4a50:	9100      	str	r1, [sp, #0]
    4a52:	2102      	movs	r1, #2
    4a54:	4803      	ldr	r0, [pc, #12]	; (4a64 <printf+0x24>)
    4a56:	f7fd f98f 	bl	1d78 <z_cbvprintf_impl>
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
	va_end(vargs);

	return r;
}
    4a5a:	b005      	add	sp, #20
    4a5c:	f85d eb04 	ldr.w	lr, [sp], #4
    4a60:	b004      	add	sp, #16
    4a62:	4770      	bx	lr
    4a64:	0000a517 	.word	0x0000a517

00004a68 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    4a68:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4a6c:	4905      	ldr	r1, [pc, #20]	; (4a84 <__NVIC_SystemReset+0x1c>)
    4a6e:	68ca      	ldr	r2, [r1, #12]
    4a70:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4a74:	4b04      	ldr	r3, [pc, #16]	; (4a88 <__NVIC_SystemReset+0x20>)
    4a76:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4a78:	60cb      	str	r3, [r1, #12]
    4a7a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    4a7e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4a80:	e7fd      	b.n	4a7e <__NVIC_SystemReset+0x16>
    4a82:	bf00      	nop
    4a84:	e000ed00 	.word	0xe000ed00
    4a88:	05fa0004 	.word	0x05fa0004

00004a8c <nordicsemi_nrf52_init>:
	__asm__ volatile(
    4a8c:	f04f 0220 	mov.w	r2, #32
    4a90:	f3ef 8311 	mrs	r3, BASEPRI
    4a94:	f382 8812 	msr	BASEPRI_MAX, r2
    4a98:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    4a9c:	4a04      	ldr	r2, [pc, #16]	; (4ab0 <nordicsemi_nrf52_init+0x24>)
    4a9e:	2101      	movs	r1, #1
    4aa0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    4aa4:	f383 8811 	msr	BASEPRI, r3
    4aa8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    4aac:	2000      	movs	r0, #0
    4aae:	4770      	bx	lr
    4ab0:	4001e000 	.word	0x4001e000

00004ab4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    4ab4:	b130      	cbz	r0, 4ac4 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    4ab6:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    4ab8:	4b03      	ldr	r3, [pc, #12]	; (4ac8 <arch_busy_wait+0x14>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    4aba:	0180      	lsls	r0, r0, #6
    4abc:	f043 0301 	orr.w	r3, r3, #1
    4ac0:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    4ac2:	bd08      	pop	{r3, pc}
    4ac4:	4770      	bx	lr
    4ac6:	bf00      	nop
    4ac8:	0000c5a0 	.word	0x0000c5a0

00004acc <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    4acc:	4800      	ldr	r0, [pc, #0]	; (4ad0 <get_hf_flags+0x4>)
    4ace:	4770      	bx	lr
    4ad0:	200009b4 	.word	0x200009b4

00004ad4 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    4ad4:	4b03      	ldr	r3, [pc, #12]	; (4ae4 <get_subsys+0x10>)
    4ad6:	1ac0      	subs	r0, r0, r3
    4ad8:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    4ada:	4b03      	ldr	r3, [pc, #12]	; (4ae8 <get_subsys+0x14>)
    4adc:	fb03 f000 	mul.w	r0, r3, r0
    4ae0:	4770      	bx	lr
    4ae2:	bf00      	nop
    4ae4:	20000974 	.word	0x20000974
    4ae8:	b6db6db7 	.word	0xb6db6db7

00004aec <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4aec:	b538      	push	{r3, r4, r5, lr}
    4aee:	4605      	mov	r5, r0
    4af0:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4af2:	f7ff ffef 	bl	4ad4 <get_subsys>
    4af6:	4601      	mov	r1, r0
    4af8:	2240      	movs	r2, #64	; 0x40
    4afa:	4803      	ldr	r0, [pc, #12]	; (4b08 <onoff_stop+0x1c>)
    4afc:	f005 fdc6 	bl	a68c <stop>
    4b00:	4601      	mov	r1, r0
	notify(mgr, res);
    4b02:	4628      	mov	r0, r5
    4b04:	47a0      	blx	r4
}
    4b06:	bd38      	pop	{r3, r4, r5, pc}
    4b08:	0000c218 	.word	0x0000c218

00004b0c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4b0c:	b530      	push	{r4, r5, lr}
    4b0e:	b083      	sub	sp, #12
    4b10:	4605      	mov	r5, r0
    4b12:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4b14:	f7ff ffde 	bl	4ad4 <get_subsys>
    4b18:	4601      	mov	r1, r0
    4b1a:	2340      	movs	r3, #64	; 0x40
    4b1c:	9300      	str	r3, [sp, #0]
    4b1e:	4623      	mov	r3, r4
    4b20:	4a05      	ldr	r2, [pc, #20]	; (4b38 <onoff_start+0x2c>)
    4b22:	4806      	ldr	r0, [pc, #24]	; (4b3c <onoff_start+0x30>)
    4b24:	f005 fdcc 	bl	a6c0 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    4b28:	1e01      	subs	r1, r0, #0
    4b2a:	db01      	blt.n	4b30 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    4b2c:	b003      	add	sp, #12
    4b2e:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    4b30:	4628      	mov	r0, r5
    4b32:	47a0      	blx	r4
}
    4b34:	e7fa      	b.n	4b2c <onoff_start+0x20>
    4b36:	bf00      	nop
    4b38:	0000a709 	.word	0x0000a709
    4b3c:	0000c218 	.word	0x0000c218

00004b40 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    4b40:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    4b42:	b110      	cbz	r0, 4b4a <clock_event_handler+0xa>
    4b44:	2801      	cmp	r0, #1
    4b46:	d00d      	beq.n	4b64 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    4b48:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    4b4a:	2100      	movs	r1, #0
    4b4c:	4808      	ldr	r0, [pc, #32]	; (4b70 <clock_event_handler+0x30>)
    4b4e:	f005 fd26 	bl	a59e <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    4b52:	6883      	ldr	r3, [r0, #8]
    4b54:	f013 0f07 	tst.w	r3, #7
    4b58:	d1f6      	bne.n	4b48 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    4b5a:	2100      	movs	r1, #0
    4b5c:	4804      	ldr	r0, [pc, #16]	; (4b70 <clock_event_handler+0x30>)
    4b5e:	f005 fd83 	bl	a668 <clkstarted_handle>
    4b62:	e7f1      	b.n	4b48 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    4b64:	2101      	movs	r1, #1
    4b66:	4802      	ldr	r0, [pc, #8]	; (4b70 <clock_event_handler+0x30>)
    4b68:	f005 fd7e 	bl	a668 <clkstarted_handle>
}
    4b6c:	e7ec      	b.n	4b48 <clock_event_handler+0x8>
    4b6e:	bf00      	nop
    4b70:	0000c218 	.word	0x0000c218

00004b74 <generic_hfclk_start>:
{
    4b74:	b510      	push	{r4, lr}
    4b76:	b082      	sub	sp, #8
	__asm__ volatile(
    4b78:	f04f 0320 	mov.w	r3, #32
    4b7c:	f3ef 8411 	mrs	r4, BASEPRI
    4b80:	f383 8812 	msr	BASEPRI_MAX, r3
    4b84:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    4b88:	4a14      	ldr	r2, [pc, #80]	; (4bdc <generic_hfclk_start+0x68>)
    4b8a:	6813      	ldr	r3, [r2, #0]
    4b8c:	f043 0102 	orr.w	r1, r3, #2
    4b90:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4b92:	f013 0f01 	tst.w	r3, #1
    4b96:	d109      	bne.n	4bac <generic_hfclk_start+0x38>
	bool already_started = false;
    4b98:	2300      	movs	r3, #0
	__asm__ volatile(
    4b9a:	f384 8811 	msr	BASEPRI, r4
    4b9e:	f3bf 8f6f 	isb	sy
	if (already_started) {
    4ba2:	b9b3      	cbnz	r3, 4bd2 <generic_hfclk_start+0x5e>
	hfclk_start();
    4ba4:	f005 fdb8 	bl	a718 <hfclk_start>
}
    4ba8:	b002      	add	sp, #8
    4baa:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    4bac:	f10d 0207 	add.w	r2, sp, #7
    4bb0:	2101      	movs	r1, #1
    4bb2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4bb6:	f005 fccf 	bl	a558 <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4bba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4bbe:	2b01      	cmp	r3, #1
    4bc0:	d001      	beq.n	4bc6 <generic_hfclk_start+0x52>
	bool already_started = false;
    4bc2:	2300      	movs	r3, #0
    4bc4:	e7e9      	b.n	4b9a <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
    4bc6:	f7ff ff81 	bl	4acc <get_hf_flags>
    4bca:	f005 fd3a 	bl	a642 <set_on_state>
			already_started = true;
    4bce:	2301      	movs	r3, #1
    4bd0:	e7e3      	b.n	4b9a <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
    4bd2:	2100      	movs	r1, #0
    4bd4:	4802      	ldr	r0, [pc, #8]	; (4be0 <generic_hfclk_start+0x6c>)
    4bd6:	f005 fd47 	bl	a668 <clkstarted_handle>
		return;
    4bda:	e7e5      	b.n	4ba8 <generic_hfclk_start+0x34>
    4bdc:	200009c4 	.word	0x200009c4
    4be0:	0000c218 	.word	0x0000c218

00004be4 <generic_hfclk_stop>:
{
    4be4:	b510      	push	{r4, lr}
	__asm__ volatile(
    4be6:	f04f 0320 	mov.w	r3, #32
    4bea:	f3ef 8411 	mrs	r4, BASEPRI
    4bee:	f383 8812 	msr	BASEPRI_MAX, r3
    4bf2:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    4bf6:	4a08      	ldr	r2, [pc, #32]	; (4c18 <generic_hfclk_stop+0x34>)
    4bf8:	6813      	ldr	r3, [r2, #0]
    4bfa:	f023 0102 	bic.w	r1, r3, #2
    4bfe:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    4c00:	f013 0f01 	tst.w	r3, #1
    4c04:	d004      	beq.n	4c10 <generic_hfclk_stop+0x2c>
	__asm__ volatile(
    4c06:	f384 8811 	msr	BASEPRI, r4
    4c0a:	f3bf 8f6f 	isb	sy
}
    4c0e:	bd10      	pop	{r4, pc}
		hfclk_stop();
    4c10:	f005 fd8c 	bl	a72c <hfclk_stop>
    4c14:	e7f7      	b.n	4c06 <generic_hfclk_stop+0x22>
    4c16:	bf00      	nop
    4c18:	200009c4 	.word	0x200009c4

00004c1c <lfclk_spinwait>:
{
    4c1c:	b570      	push	{r4, r5, r6, lr}
    4c1e:	b082      	sub	sp, #8
    4c20:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    4c22:	2801      	cmp	r0, #1
    4c24:	d107      	bne.n	4c36 <lfclk_spinwait+0x1a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4c26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4c2a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    4c2e:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    4c32:	2b01      	cmp	r3, #1
    4c34:	d04c      	beq.n	4cd0 <lfclk_spinwait+0xb4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4c36:	f006 ffc3 	bl	bbc0 <k_is_in_isr>
    4c3a:	4604      	mov	r4, r0
    4c3c:	b918      	cbnz	r0, 4c46 <lfclk_spinwait+0x2a>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    4c3e:	4b28      	ldr	r3, [pc, #160]	; (4ce0 <lfclk_spinwait+0xc4>)
    4c40:	781b      	ldrb	r3, [r3, #0]
    4c42:	2b00      	cmp	r3, #0
    4c44:	d139      	bne.n	4cba <lfclk_spinwait+0x9e>
	__asm__ volatile(
    4c46:	f04f 0320 	mov.w	r3, #32
    4c4a:	f3ef 8611 	mrs	r6, BASEPRI
    4c4e:	f383 8812 	msr	BASEPRI_MAX, r3
    4c52:	f3bf 8f6f 	isb	sy
    4c56:	2401      	movs	r4, #1
	if (!isr_mode) {
    4c58:	b924      	cbnz	r4, 4c64 <lfclk_spinwait+0x48>
    p_reg->INTENCLR = mask;
    4c5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4c5e:	2202      	movs	r2, #2
    4c60:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    4c64:	aa01      	add	r2, sp, #4
    4c66:	2100      	movs	r1, #0
    4c68:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4c6c:	f005 fc74 	bl	a558 <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4c70:	b120      	cbz	r0, 4c7c <lfclk_spinwait+0x60>
		 && ((type == target_type)
    4c72:	9b01      	ldr	r3, [sp, #4]
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4c74:	2b01      	cmp	r3, #1
    4c76:	d026      	beq.n	4cc6 <lfclk_spinwait+0xaa>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    4c78:	2d01      	cmp	r5, #1
    4c7a:	d024      	beq.n	4cc6 <lfclk_spinwait+0xaa>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4c7c:	b1fc      	cbz	r4, 4cbe <lfclk_spinwait+0xa2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4c7e:	4630      	mov	r0, r6
    4c80:	f7fe fbd0 	bl	3424 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4c84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4c88:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4c8c:	2b00      	cmp	r3, #0
    4c8e:	d1e9      	bne.n	4c64 <lfclk_spinwait+0x48>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4c90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4c94:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    4c98:	2b00      	cmp	r3, #0
    4c9a:	d0e3      	beq.n	4c64 <lfclk_spinwait+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4c9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4ca0:	2200      	movs	r2, #0
    4ca2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4ca6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    4caa:	2201      	movs	r2, #1
    4cac:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4cb0:	490c      	ldr	r1, [pc, #48]	; (4ce4 <lfclk_spinwait+0xc8>)
    4cb2:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4cb6:	609a      	str	r2, [r3, #8]
}
    4cb8:	e7d4      	b.n	4c64 <lfclk_spinwait+0x48>
	int key = isr_mode ? irq_lock() : 0;
    4cba:	2600      	movs	r6, #0
    4cbc:	e7cc      	b.n	4c58 <lfclk_spinwait+0x3c>
				k_msleep(1);
    4cbe:	2001      	movs	r0, #1
    4cc0:	f005 fd3e 	bl	a740 <k_msleep>
    4cc4:	e7de      	b.n	4c84 <lfclk_spinwait+0x68>
	if (isr_mode) {
    4cc6:	b12c      	cbz	r4, 4cd4 <lfclk_spinwait+0xb8>
	__asm__ volatile(
    4cc8:	f386 8811 	msr	BASEPRI, r6
    4ccc:	f3bf 8f6f 	isb	sy
}
    4cd0:	b002      	add	sp, #8
    4cd2:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    4cd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4cd8:	2202      	movs	r2, #2
    4cda:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4cde:	e7f7      	b.n	4cd0 <lfclk_spinwait+0xb4>
    4ce0:	20000fd5 	.word	0x20000fd5
    4ce4:	e000e100 	.word	0xe000e100

00004ce8 <api_blocking_start>:
{
    4ce8:	b500      	push	{lr}
    4cea:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4cec:	f8cd d000 	str.w	sp, [sp]
    4cf0:	f8cd d004 	str.w	sp, [sp, #4]
    4cf4:	2300      	movs	r3, #0
    4cf6:	9302      	str	r3, [sp, #8]
    4cf8:	2301      	movs	r3, #1
    4cfa:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4cfc:	466b      	mov	r3, sp
    4cfe:	4a07      	ldr	r2, [pc, #28]	; (4d1c <api_blocking_start+0x34>)
    4d00:	f005 fcfa 	bl	a6f8 <api_start>
	if (err < 0) {
    4d04:	2800      	cmp	r0, #0
    4d06:	db05      	blt.n	4d14 <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    4d08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4d0c:	2300      	movs	r3, #0
    4d0e:	4668      	mov	r0, sp
    4d10:	f003 f9a6 	bl	8060 <z_impl_k_sem_take>
}
    4d14:	b005      	add	sp, #20
    4d16:	f85d fb04 	ldr.w	pc, [sp], #4
    4d1a:	bf00      	nop
    4d1c:	0000a76d 	.word	0x0000a76d

00004d20 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    4d20:	b570      	push	{r4, r5, r6, lr}
    4d22:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4d24:	2200      	movs	r2, #0
    4d26:	2101      	movs	r1, #1
    4d28:	4610      	mov	r0, r2
    4d2a:	f005 faf1 	bl	a310 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    4d2e:	4811      	ldr	r0, [pc, #68]	; (4d74 <clk_init+0x54>)
    4d30:	f001 fd7a 	bl	6828 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    4d34:	4b10      	ldr	r3, [pc, #64]	; (4d78 <clk_init+0x58>)
    4d36:	4298      	cmp	r0, r3
    4d38:	d119      	bne.n	4d6e <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    4d3a:	f006 fcf5 	bl	b728 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    4d3e:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    4d40:	2c01      	cmp	r4, #1
    4d42:	d812      	bhi.n	4d6a <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    4d44:	4621      	mov	r1, r4
    4d46:	4630      	mov	r0, r6
    4d48:	f005 fc29 	bl	a59e <get_sub_data>
    4d4c:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    4d4e:	4621      	mov	r1, r4
    4d50:	4630      	mov	r0, r6
    4d52:	f005 fc31 	bl	a5b8 <get_onoff_manager>
    4d56:	4909      	ldr	r1, [pc, #36]	; (4d7c <clk_init+0x5c>)
    4d58:	f004 facf 	bl	92fa <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    4d5c:	2800      	cmp	r0, #0
    4d5e:	db05      	blt.n	4d6c <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4d60:	2301      	movs	r3, #1
    4d62:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    4d64:	441c      	add	r4, r3
    4d66:	b2e4      	uxtb	r4, r4
    4d68:	e7ea      	b.n	4d40 <clk_init+0x20>
	}

	return 0;
    4d6a:	2000      	movs	r0, #0
}
    4d6c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    4d6e:	f06f 0004 	mvn.w	r0, #4
    4d72:	e7fb      	b.n	4d6c <clk_init+0x4c>
    4d74:	00004b41 	.word	0x00004b41
    4d78:	0bad0000 	.word	0x0bad0000
    4d7c:	0000cdc8 	.word	0x0000cdc8

00004d80 <z_nrf_clock_control_get_onoff>:
{
    4d80:	b508      	push	{r3, lr}
	return get_onoff_manager(CLOCK_DEVICE,
    4d82:	b2c1      	uxtb	r1, r0
    4d84:	4801      	ldr	r0, [pc, #4]	; (4d8c <z_nrf_clock_control_get_onoff+0xc>)
    4d86:	f005 fc17 	bl	a5b8 <get_onoff_manager>
}
    4d8a:	bd08      	pop	{r3, pc}
    4d8c:	0000c218 	.word	0x0000c218

00004d90 <z_nrf_clock_control_lf_on>:
{
    4d90:	b510      	push	{r4, lr}
    4d92:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4d94:	4b10      	ldr	r3, [pc, #64]	; (4dd8 <z_nrf_clock_control_lf_on+0x48>)
    4d96:	2101      	movs	r1, #1
    4d98:	f3bf 8f5b 	dmb	ish
    4d9c:	e853 2f00 	ldrex	r2, [r3]
    4da0:	e843 1000 	strex	r0, r1, [r3]
    4da4:	2800      	cmp	r0, #0
    4da6:	d1f9      	bne.n	4d9c <z_nrf_clock_control_lf_on+0xc>
    4da8:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    4dac:	b11a      	cbz	r2, 4db6 <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    4dae:	1e63      	subs	r3, r4, #1
    4db0:	2b01      	cmp	r3, #1
    4db2:	d90d      	bls.n	4dd0 <z_nrf_clock_control_lf_on+0x40>
}
    4db4:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    4db6:	4809      	ldr	r0, [pc, #36]	; (4ddc <z_nrf_clock_control_lf_on+0x4c>)
    4db8:	f005 fbfe 	bl	a5b8 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4dbc:	4908      	ldr	r1, [pc, #32]	; (4de0 <z_nrf_clock_control_lf_on+0x50>)
    4dbe:	2300      	movs	r3, #0
    4dc0:	604b      	str	r3, [r1, #4]
    4dc2:	608b      	str	r3, [r1, #8]
    4dc4:	60cb      	str	r3, [r1, #12]
    4dc6:	2301      	movs	r3, #1
    4dc8:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    4dca:	f004 fab3 	bl	9334 <onoff_request>
    4dce:	e7ee      	b.n	4dae <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    4dd0:	4620      	mov	r0, r4
    4dd2:	f7ff ff23 	bl	4c1c <lfclk_spinwait>
		break;
    4dd6:	e7ed      	b.n	4db4 <z_nrf_clock_control_lf_on+0x24>
    4dd8:	20000970 	.word	0x20000970
    4ddc:	0000c218 	.word	0x0000c218
    4de0:	20000960 	.word	0x20000960

00004de4 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    4de4:	b510      	push	{r4, lr}
    4de6:	4604      	mov	r4, r0
			 */
			return c;
		}
	}

	if ('\n' == c) {
    4de8:	280a      	cmp	r0, #10
    4dea:	d006      	beq.n	4dfa <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    4dec:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    4dee:	4806      	ldr	r0, [pc, #24]	; (4e08 <console_out+0x24>)
    4df0:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    4df2:	685b      	ldr	r3, [r3, #4]
    4df4:	4798      	blx	r3
		/* As errors cannot be returned, ignore the return value */
		(void)pm_device_runtime_put(uart_console_dev);
	}

	return c;
}
    4df6:	4620      	mov	r0, r4
    4df8:	bd10      	pop	{r4, pc}
	const struct uart_driver_api *api =
    4dfa:	4803      	ldr	r0, [pc, #12]	; (4e08 <console_out+0x24>)
    4dfc:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    4dfe:	685b      	ldr	r3, [r3, #4]
    4e00:	210d      	movs	r1, #13
    4e02:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    4e04:	e7f2      	b.n	4dec <console_out+0x8>
    4e06:	bf00      	nop
    4e08:	0000c260 	.word	0x0000c260

00004e0c <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    4e0c:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    4e0e:	4c04      	ldr	r4, [pc, #16]	; (4e20 <uart_console_hook_install+0x14>)
    4e10:	4620      	mov	r0, r4
    4e12:	f7ff fe01 	bl	4a18 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    4e16:	4620      	mov	r0, r4
    4e18:	f7fc fc88 	bl	172c <__printk_hook_install>
#endif
}
    4e1c:	bd10      	pop	{r4, pc}
    4e1e:	bf00      	nop
    4e20:	00004de5 	.word	0x00004de5

00004e24 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    4e24:	b508      	push	{r3, lr}
    4e26:	4805      	ldr	r0, [pc, #20]	; (4e3c <uart_console_init+0x18>)
    4e28:	f006 fe9f 	bl	bb6a <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    4e2c:	b118      	cbz	r0, 4e36 <uart_console_init+0x12>
		return -ENODEV;
	}

	uart_console_hook_install();
    4e2e:	f7ff ffed 	bl	4e0c <uart_console_hook_install>

	return 0;
    4e32:	2000      	movs	r0, #0
}
    4e34:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4e36:	f06f 0012 	mvn.w	r0, #18
    4e3a:	e7fb      	b.n	4e34 <uart_console_init+0x10>
    4e3c:	0000c260 	.word	0x0000c260

00004e40 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4e40:	b128      	cbz	r0, 4e4e <get_dev+0xe>
    4e42:	2801      	cmp	r0, #1
    4e44:	d101      	bne.n	4e4a <get_dev+0xa>
    4e46:	4803      	ldr	r0, [pc, #12]	; (4e54 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    4e48:	4770      	bx	lr
	const struct device *dev = NULL;
    4e4a:	2000      	movs	r0, #0
    4e4c:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4e4e:	4802      	ldr	r0, [pc, #8]	; (4e58 <get_dev+0x18>)
    4e50:	4770      	bx	lr
    4e52:	bf00      	nop
    4e54:	0000c230 	.word	0x0000c230
    4e58:	0000c248 	.word	0x0000c248

00004e5c <gpio_nrfx_pin_interrupt_configure>:
{
    4e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e5e:	b085      	sub	sp, #20
    4e60:	460e      	mov	r6, r1
    4e62:	4619      	mov	r1, r3
	return port->config;
    4e64:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4e66:	7b1b      	ldrb	r3, [r3, #12]
    4e68:	f006 051f 	and.w	r5, r6, #31
    4e6c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    4e70:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    4e74:	d022      	beq.n	4ebc <gpio_nrfx_pin_interrupt_configure+0x60>
    4e76:	4607      	mov	r7, r0
    4e78:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    4e7a:	2300      	movs	r3, #0
    4e7c:	9301      	str	r3, [sp, #4]
    4e7e:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
    4e80:	4610      	mov	r0, r2
    4e82:	f005 fd55 	bl	a930 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    4e86:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
    4e8a:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    4e8c:	6899      	ldr	r1, [r3, #8]
    4e8e:	40f1      	lsrs	r1, r6
    4e90:	f011 0f01 	tst.w	r1, #1
    4e94:	d102      	bne.n	4e9c <gpio_nrfx_pin_interrupt_configure+0x40>
    4e96:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
    4e9a:	d014      	beq.n	4ec6 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4e9c:	2300      	movs	r3, #0
    4e9e:	aa01      	add	r2, sp, #4
    4ea0:	4619      	mov	r1, r3
    4ea2:	4628      	mov	r0, r5
    4ea4:	f001 ff64 	bl	6d70 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4ea8:	4b1b      	ldr	r3, [pc, #108]	; (4f18 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    4eaa:	4298      	cmp	r0, r3
    4eac:	d131      	bne.n	4f12 <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    4eae:	2101      	movs	r1, #1
    4eb0:	4628      	mov	r0, r5
    4eb2:	f002 f8bd 	bl	7030 <nrfx_gpiote_trigger_enable>
	return 0;
    4eb6:	2000      	movs	r0, #0
}
    4eb8:	b005      	add	sp, #20
    4eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    4ebc:	4628      	mov	r0, r5
    4ebe:	f002 f8e9 	bl	7094 <nrfx_gpiote_trigger_disable>
		return 0;
    4ec2:	2000      	movs	r0, #0
    4ec4:	e7f8      	b.n	4eb8 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    4ec6:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
    4eca:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4ecc:	2a01      	cmp	r2, #1
    4ece:	d014      	beq.n	4efa <gpio_nrfx_pin_interrupt_configure+0x9e>
        case 0: return NRF_P0;
    4ed0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4ed4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    4edc:	f013 0f01 	tst.w	r3, #1
    4ee0:	d1dc      	bne.n	4e9c <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4ee2:	f10d 010f 	add.w	r1, sp, #15
    4ee6:	4628      	mov	r0, r5
    4ee8:	f002 f846 	bl	6f78 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    4eec:	4b0b      	ldr	r3, [pc, #44]	; (4f1c <gpio_nrfx_pin_interrupt_configure+0xc0>)
    4eee:	4298      	cmp	r0, r3
    4ef0:	d005      	beq.n	4efe <gpio_nrfx_pin_interrupt_configure+0xa2>
		trigger_config.p_in_channel = &ch;
    4ef2:	f10d 030f 	add.w	r3, sp, #15
    4ef6:	9302      	str	r3, [sp, #8]
    4ef8:	e7d0      	b.n	4e9c <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
    4efa:	4a09      	ldr	r2, [pc, #36]	; (4f20 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    4efc:	e7ea      	b.n	4ed4 <gpio_nrfx_pin_interrupt_configure+0x78>
			err = nrfx_gpiote_channel_alloc(&ch);
    4efe:	f10d 000f 	add.w	r0, sp, #15
    4f02:	f002 f88d 	bl	7020 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    4f06:	4b04      	ldr	r3, [pc, #16]	; (4f18 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    4f08:	4298      	cmp	r0, r3
    4f0a:	d0f2      	beq.n	4ef2 <gpio_nrfx_pin_interrupt_configure+0x96>
				return -ENOMEM;
    4f0c:	f06f 000b 	mvn.w	r0, #11
    4f10:	e7d2      	b.n	4eb8 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
    4f12:	f06f 0015 	mvn.w	r0, #21
    4f16:	e7cf      	b.n	4eb8 <gpio_nrfx_pin_interrupt_configure+0x5c>
    4f18:	0bad0000 	.word	0x0bad0000
    4f1c:	0bad0004 	.word	0x0bad0004
    4f20:	50000300 	.word	0x50000300

00004f24 <gpio_nrfx_pin_configure>:
{
    4f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f28:	b086      	sub	sp, #24
    4f2a:	460e      	mov	r6, r1
    4f2c:	4614      	mov	r4, r2
	return port->config;
    4f2e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4f32:	f898 300c 	ldrb.w	r3, [r8, #12]
    4f36:	f001 051f 	and.w	r5, r1, #31
    4f3a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4f3e:	f10d 0117 	add.w	r1, sp, #23
    4f42:	4628      	mov	r0, r5
    4f44:	f002 f818 	bl	6f78 <nrfx_gpiote_channel_get>
    4f48:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    4f4a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
    4f4e:	d03a      	beq.n	4fc6 <gpio_nrfx_pin_configure+0xa2>
	nrfx_gpiote_trigger_config_t trigger_config = {
    4f50:	2100      	movs	r1, #0
    4f52:	9103      	str	r1, [sp, #12]
    4f54:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4f56:	460b      	mov	r3, r1
    4f58:	aa03      	add	r2, sp, #12
    4f5a:	4628      	mov	r0, r5
    4f5c:	f001 ff08 	bl	6d70 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4f60:	4b33      	ldr	r3, [pc, #204]	; (5030 <gpio_nrfx_pin_configure+0x10c>)
    4f62:	4298      	cmp	r0, r3
    4f64:	d161      	bne.n	502a <gpio_nrfx_pin_configure+0x106>
	if (free_ch) {
    4f66:	429f      	cmp	r7, r3
    4f68:	d03d      	beq.n	4fe6 <gpio_nrfx_pin_configure+0xc2>
	if (flags & GPIO_OUTPUT) {
    4f6a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
    4f6e:	d049      	beq.n	5004 <gpio_nrfx_pin_configure+0xe0>
		int rv = get_drive(flags, &drive);
    4f70:	f10d 0103 	add.w	r1, sp, #3
    4f74:	4620      	mov	r0, r4
    4f76:	f005 fc60 	bl	a83a <get_drive>
		if (rv != 0) {
    4f7a:	4607      	mov	r7, r0
    4f7c:	bb50      	cbnz	r0, 4fd4 <gpio_nrfx_pin_configure+0xb0>
		nrfx_gpiote_output_config_t output_config = {
    4f7e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4f82:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    4f86:	f414 3f80 	tst.w	r4, #65536	; 0x10000
    4f8a:	bf0c      	ite	eq
    4f8c:	2301      	moveq	r3, #1
    4f8e:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    4f90:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    4f94:	4620      	mov	r0, r4
    4f96:	f005 fc93 	bl	a8c0 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    4f9a:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4f9e:	f414 2f00 	tst.w	r4, #524288	; 0x80000
    4fa2:	d025      	beq.n	4ff0 <gpio_nrfx_pin_configure+0xcc>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    4fa4:	f8d8 2004 	ldr.w	r2, [r8, #4]
    4fa8:	2301      	movs	r3, #1
    4faa:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    4fac:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    4fb0:	2200      	movs	r2, #0
    4fb2:	a901      	add	r1, sp, #4
    4fb4:	4628      	mov	r0, r5
    4fb6:	f001 ff6f 	bl	6e98 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4fba:	4b1d      	ldr	r3, [pc, #116]	; (5030 <gpio_nrfx_pin_configure+0x10c>)
    4fbc:	4298      	cmp	r0, r3
    4fbe:	d009      	beq.n	4fd4 <gpio_nrfx_pin_configure+0xb0>
    4fc0:	f06f 0715 	mvn.w	r7, #21
    4fc4:	e006      	b.n	4fd4 <gpio_nrfx_pin_configure+0xb0>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    4fc6:	4628      	mov	r0, r5
    4fc8:	f002 f886 	bl	70d8 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    4fcc:	4b18      	ldr	r3, [pc, #96]	; (5030 <gpio_nrfx_pin_configure+0x10c>)
    4fce:	429f      	cmp	r7, r3
    4fd0:	d004      	beq.n	4fdc <gpio_nrfx_pin_configure+0xb8>
		return 0;
    4fd2:	2700      	movs	r7, #0
}
    4fd4:	4638      	mov	r0, r7
    4fd6:	b006      	add	sp, #24
    4fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
    4fdc:	f89d 0017 	ldrb.w	r0, [sp, #23]
    4fe0:	f002 f816 	bl	7010 <nrfx_gpiote_channel_free>
    4fe4:	e7f5      	b.n	4fd2 <gpio_nrfx_pin_configure+0xae>
		err = nrfx_gpiote_channel_free(ch);
    4fe6:	f89d 0017 	ldrb.w	r0, [sp, #23]
    4fea:	f002 f811 	bl	7010 <nrfx_gpiote_channel_free>
    4fee:	e7bc      	b.n	4f6a <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    4ff0:	f414 2f80 	tst.w	r4, #262144	; 0x40000
    4ff4:	d0dc      	beq.n	4fb0 <gpio_nrfx_pin_configure+0x8c>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    4ff6:	f8d8 2004 	ldr.w	r2, [r8, #4]
    4ffa:	2301      	movs	r3, #1
    4ffc:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
    4ffe:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    5002:	e7d5      	b.n	4fb0 <gpio_nrfx_pin_configure+0x8c>
		.pull = get_pull(flags)
    5004:	4620      	mov	r0, r4
    5006:	f005 fc5b 	bl	a8c0 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    500a:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    500e:	2300      	movs	r3, #0
    5010:	461a      	mov	r2, r3
    5012:	a902      	add	r1, sp, #8
    5014:	4628      	mov	r0, r5
    5016:	f001 feab 	bl	6d70 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    501a:	4b05      	ldr	r3, [pc, #20]	; (5030 <gpio_nrfx_pin_configure+0x10c>)
    501c:	4298      	cmp	r0, r3
    501e:	d101      	bne.n	5024 <gpio_nrfx_pin_configure+0x100>
    5020:	2700      	movs	r7, #0
    5022:	e7d7      	b.n	4fd4 <gpio_nrfx_pin_configure+0xb0>
    5024:	f06f 0715 	mvn.w	r7, #21
    5028:	e7d4      	b.n	4fd4 <gpio_nrfx_pin_configure+0xb0>
		return -EINVAL;
    502a:	f06f 0715 	mvn.w	r7, #21
    502e:	e7d1      	b.n	4fd4 <gpio_nrfx_pin_configure+0xb0>
    5030:	0bad0000 	.word	0x0bad0000

00005034 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    5034:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    5036:	f001 ffe1 	bl	6ffc <nrfx_gpiote_is_init>
    503a:	b108      	cbz	r0, 5040 <gpio_nrfx_init+0xc>
		return 0;
    503c:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    503e:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    5040:	f001 ffb2 	bl	6fa8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    5044:	4b08      	ldr	r3, [pc, #32]	; (5068 <gpio_nrfx_init+0x34>)
    5046:	4298      	cmp	r0, r3
    5048:	d10a      	bne.n	5060 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    504a:	2100      	movs	r1, #0
    504c:	4807      	ldr	r0, [pc, #28]	; (506c <gpio_nrfx_init+0x38>)
    504e:	f001 ff8d 	bl	6f6c <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    5052:	2200      	movs	r2, #0
    5054:	2105      	movs	r1, #5
    5056:	2006      	movs	r0, #6
    5058:	f005 f95a 	bl	a310 <z_arm_irq_priority_set>
	return 0;
    505c:	2000      	movs	r0, #0
    505e:	e7ee      	b.n	503e <gpio_nrfx_init+0xa>
		return -EIO;
    5060:	f06f 0004 	mvn.w	r0, #4
    5064:	e7eb      	b.n	503e <gpio_nrfx_init+0xa>
    5066:	bf00      	nop
    5068:	0bad0000 	.word	0x0bad0000
    506c:	0000a969 	.word	0x0000a969

00005070 <i2c_nrfx_twi_recover_bus>:

	return 0;
}

static int i2c_nrfx_twi_recover_bus(const struct device *dev)
{
    5070:	b508      	push	{r3, lr}
	const struct i2c_nrfx_twi_config *config = dev->config;
    5072:	6843      	ldr	r3, [r0, #4]
	uint32_t scl_pin;
	uint32_t sda_pin;
	nrfx_err_t err;

	scl_pin = nrf_twi_scl_pin_get(config->twi.p_twi);
    5074:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE uint32_t nrf_twi_scl_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SCL_CONNECT_Pos)
    return p_reg->PSEL.SCL;
    5076:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twi_sda_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SDA_CONNECT_Pos)
    return p_reg->PSEL.SDA;
    507a:	f8d3 150c 	ldr.w	r1, [r3, #1292]	; 0x50c
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    507e:	f002 fa75 	bl	756c <nrfx_twi_twim_bus_recover>
	sda_pin = nrf_twi_sda_pin_get(config->twi.p_twi);

	err = nrfx_twi_bus_recover(scl_pin, sda_pin);
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    5082:	4b04      	ldr	r3, [pc, #16]	; (5094 <i2c_nrfx_twi_recover_bus+0x24>)
    5084:	4298      	cmp	r0, r3
    5086:	d101      	bne.n	508c <i2c_nrfx_twi_recover_bus+0x1c>
    5088:	2000      	movs	r0, #0
}
    508a:	bd08      	pop	{r3, pc}
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    508c:	f06f 000f 	mvn.w	r0, #15
    5090:	e7fb      	b.n	508a <i2c_nrfx_twi_recover_bus+0x1a>
    5092:	bf00      	nop
    5094:	0bad0000 	.word	0x0bad0000

00005098 <i2c_nrfx_twi_configure>:
{
    5098:	b510      	push	{r4, lr}
    509a:	b088      	sub	sp, #32
	const struct i2c_nrfx_twi_config *config = dev->config;
    509c:	6844      	ldr	r4, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
    509e:	6902      	ldr	r2, [r0, #16]
	if (I2C_ADDR_10_BITS & dev_config) {
    50a0:	f011 0f01 	tst.w	r1, #1
    50a4:	d13a      	bne.n	511c <i2c_nrfx_twi_configure+0x84>
	switch (I2C_SPEED_GET(dev_config)) {
    50a6:	f3c1 0342 	ubfx	r3, r1, #1, #3
    50aa:	2b01      	cmp	r3, #1
    50ac:	d027      	beq.n	50fe <i2c_nrfx_twi_configure+0x66>
    50ae:	2b02      	cmp	r3, #2
    50b0:	d02e      	beq.n	5110 <i2c_nrfx_twi_configure+0x78>
		LOG_ERR("unsupported speed");
    50b2:	4b1c      	ldr	r3, [pc, #112]	; (5124 <i2c_nrfx_twi_configure+0x8c>)
    50b4:	9307      	str	r3, [sp, #28]
    50b6:	2302      	movs	r3, #2
    50b8:	f88d 3004 	strb.w	r3, [sp, #4]
    50bc:	2300      	movs	r3, #0
    50be:	f88d 3005 	strb.w	r3, [sp, #5]
    50c2:	f88d 3006 	strb.w	r3, [sp, #6]
    50c6:	f88d 3007 	strb.w	r3, [sp, #7]
    50ca:	9a01      	ldr	r2, [sp, #4]
    50cc:	9206      	str	r2, [sp, #24]
    50ce:	4619      	mov	r1, r3
    50d0:	f363 0100 	bfi	r1, r3, #0, #1
    50d4:	f363 0141 	bfi	r1, r3, #1, #1
    50d8:	f363 0182 	bfi	r1, r3, #2, #1
    50dc:	f363 01c5 	bfi	r1, r3, #3, #3
    50e0:	2201      	movs	r2, #1
    50e2:	f362 1188 	bfi	r1, r2, #6, #3
    50e6:	2208      	movs	r2, #8
    50e8:	f362 2153 	bfi	r1, r2, #9, #11
    50ec:	f363 511f 	bfi	r1, r3, #20, #12
    50f0:	aa06      	add	r2, sp, #24
    50f2:	480d      	ldr	r0, [pc, #52]	; (5128 <i2c_nrfx_twi_configure+0x90>)
    50f4:	f7fd fcb6 	bl	2a64 <z_impl_z_log_msg_static_create>
		return -EINVAL;
    50f8:	f06f 0015 	mvn.w	r0, #21
    50fc:	e006      	b.n	510c <i2c_nrfx_twi_configure+0x74>
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
    50fe:	6823      	ldr	r3, [r4, #0]
}

NRF_STATIC_INLINE void nrf_twi_frequency_set(NRF_TWI_Type *      p_reg,
                                             nrf_twi_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    5100:	f04f 70cc 	mov.w	r0, #26738688	; 0x1980000
    5104:	f8c3 0524 	str.w	r0, [r3, #1316]	; 0x524
	data->dev_config = dev_config;
    5108:	6251      	str	r1, [r2, #36]	; 0x24
	return 0;
    510a:	2000      	movs	r0, #0
}
    510c:	b008      	add	sp, #32
    510e:	bd10      	pop	{r4, pc}
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
    5110:	6823      	ldr	r3, [r4, #0]
    5112:	f04f 60cd 	mov.w	r0, #107479040	; 0x6680000
    5116:	f8c3 0524 	str.w	r0, [r3, #1316]	; 0x524
}
    511a:	e7f5      	b.n	5108 <i2c_nrfx_twi_configure+0x70>
		return -EINVAL;
    511c:	f06f 0015 	mvn.w	r0, #21
    5120:	e7f4      	b.n	510c <i2c_nrfx_twi_configure+0x74>
    5122:	bf00      	nop
    5124:	0000cea0 	.word	0x0000cea0
    5128:	0000c4e0 	.word	0x0000c4e0

0000512c <i2c_nrfx_twi_transfer>:
{
    512c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5130:	b089      	sub	sp, #36	; 0x24
    5132:	af00      	add	r7, sp, #0
    5134:	6038      	str	r0, [r7, #0]
    5136:	460d      	mov	r5, r1
    5138:	4616      	mov	r6, r2
    513a:	469a      	mov	sl, r3
	const struct i2c_nrfx_twi_config *config = dev->config;
    513c:	f8d0 9004 	ldr.w	r9, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
    5140:	f8d0 8010 	ldr.w	r8, [r0, #16]
    5144:	f04f 32ff 	mov.w	r2, #4294967295
    5148:	f04f 33ff 	mov.w	r3, #4294967295
    514c:	4640      	mov	r0, r8
    514e:	f002 ff87 	bl	8060 <z_impl_k_sem_take>
	k_sem_take(&data->completion_sync, K_NO_WAIT);
    5152:	f108 0b10 	add.w	fp, r8, #16
    5156:	2200      	movs	r2, #0
    5158:	2300      	movs	r3, #0
    515a:	4658      	mov	r0, fp
    515c:	f002 ff80 	bl	8060 <z_impl_k_sem_take>
	nrfx_twi_enable(&config->twi);
    5160:	4648      	mov	r0, r9
    5162:	f002 f9bb 	bl	74dc <nrfx_twi_enable>
	for (size_t i = 0; i < num_msgs; i++) {
    5166:	2400      	movs	r4, #0
	int ret = 0;
    5168:	607c      	str	r4, [r7, #4]
	for (size_t i = 0; i < num_msgs; i++) {
    516a:	e01b      	b.n	51a4 <i2c_nrfx_twi_transfer+0x78>
			} else if (msgs[i].flags & I2C_MSG_READ) {
    516c:	f012 0f01 	tst.w	r2, #1
    5170:	f040 80e6 	bne.w	5340 <i2c_nrfx_twi_transfer+0x214>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
    5174:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&config->twi, &cur_xfer, xfer_flags);
    5176:	f107 010c 	add.w	r1, r7, #12
    517a:	4648      	mov	r0, r9
    517c:	f002 f9dc 	bl	7538 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
    5180:	4b71      	ldr	r3, [pc, #452]	; (5348 <i2c_nrfx_twi_transfer+0x21c>)
    5182:	4298      	cmp	r0, r3
    5184:	d13e      	bne.n	5204 <i2c_nrfx_twi_transfer+0xd8>
    5186:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    518a:	2300      	movs	r3, #0
    518c:	4658      	mov	r0, fp
    518e:	f002 ff67 	bl	8060 <z_impl_k_sem_take>
		if (ret != 0) {
    5192:	6078      	str	r0, [r7, #4]
    5194:	2800      	cmp	r0, #0
    5196:	d140      	bne.n	521a <i2c_nrfx_twi_transfer+0xee>
		res = data->res;
    5198:	f8d8 3020 	ldr.w	r3, [r8, #32]
		if (res != NRFX_SUCCESS) {
    519c:	4a6a      	ldr	r2, [pc, #424]	; (5348 <i2c_nrfx_twi_transfer+0x21c>)
    519e:	4293      	cmp	r3, r2
    51a0:	d17e      	bne.n	52a0 <i2c_nrfx_twi_transfer+0x174>
	for (size_t i = 0; i < num_msgs; i++) {
    51a2:	3401      	adds	r4, #1
    51a4:	42b4      	cmp	r4, r6
    51a6:	f080 80c0 	bcs.w	532a <i2c_nrfx_twi_transfer+0x1fe>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    51aa:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    51ae:	0099      	lsls	r1, r3, #2
    51b0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    51b4:	7a1a      	ldrb	r2, [r3, #8]
    51b6:	f012 0f08 	tst.w	r2, #8
    51ba:	f040 80b3 	bne.w	5324 <i2c_nrfx_twi_transfer+0x1f8>
		nrfx_twi_xfer_desc_t cur_xfer = {
    51be:	2200      	movs	r2, #0
    51c0:	60fa      	str	r2, [r7, #12]
    51c2:	613a      	str	r2, [r7, #16]
    51c4:	617a      	str	r2, [r7, #20]
    51c6:	61ba      	str	r2, [r7, #24]
    51c8:	61fa      	str	r2, [r7, #28]
			.type		= (msgs[i].flags & I2C_MSG_READ) ?
    51ca:	7a1a      	ldrb	r2, [r3, #8]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    51cc:	f002 0001 	and.w	r0, r2, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
    51d0:	7338      	strb	r0, [r7, #12]
    51d2:	f887 a00d 	strb.w	sl, [r7, #13]
			.primary_length = msgs[i].len,
    51d6:	685b      	ldr	r3, [r3, #4]
		nrfx_twi_xfer_desc_t cur_xfer = {
    51d8:	613b      	str	r3, [r7, #16]
			.p_primary_buf  = msgs[i].buf,
    51da:	586b      	ldr	r3, [r5, r1]
		nrfx_twi_xfer_desc_t cur_xfer = {
    51dc:	61bb      	str	r3, [r7, #24]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    51de:	f012 0f02 	tst.w	r2, #2
    51e2:	d10d      	bne.n	5200 <i2c_nrfx_twi_transfer+0xd4>
			if ((i < (num_msgs - 1)) &&
    51e4:	1e73      	subs	r3, r6, #1
    51e6:	42a3      	cmp	r3, r4
    51e8:	d9c0      	bls.n	516c <i2c_nrfx_twi_transfer+0x40>
			    !(msgs[i + 1].flags & I2C_MSG_RESTART)) {
    51ea:	1c63      	adds	r3, r4, #1
    51ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    51f0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    51f4:	7a1b      	ldrb	r3, [r3, #8]
			if ((i < (num_msgs - 1)) &&
    51f6:	f013 0f04 	tst.w	r3, #4
    51fa:	d1b7      	bne.n	516c <i2c_nrfx_twi_transfer+0x40>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
    51fc:	2240      	movs	r2, #64	; 0x40
    51fe:	e7ba      	b.n	5176 <i2c_nrfx_twi_transfer+0x4a>
		uint32_t xfer_flags = 0;
    5200:	2200      	movs	r2, #0
    5202:	e7b8      	b.n	5176 <i2c_nrfx_twi_transfer+0x4a>
			if (res == NRFX_ERROR_BUSY) {
    5204:	330b      	adds	r3, #11
    5206:	4298      	cmp	r0, r3
    5208:	d003      	beq.n	5212 <i2c_nrfx_twi_transfer+0xe6>
				ret = -EIO;
    520a:	f06f 0304 	mvn.w	r3, #4
    520e:	607b      	str	r3, [r7, #4]
    5210:	e08b      	b.n	532a <i2c_nrfx_twi_transfer+0x1fe>
				ret = -EBUSY;
    5212:	f06f 030f 	mvn.w	r3, #15
    5216:	607b      	str	r3, [r7, #4]
    5218:	e087      	b.n	532a <i2c_nrfx_twi_transfer+0x1fe>
			LOG_ERR("Error on I2C line occurred for message %d", i);
    521a:	466d      	mov	r5, sp
    521c:	b088      	sub	sp, #32
    521e:	466b      	mov	r3, sp
    5220:	f113 0210 	adds.w	r2, r3, #16
    5224:	d036      	beq.n	5294 <i2c_nrfx_twi_transfer+0x168>
    5226:	210c      	movs	r1, #12
    5228:	b13a      	cbz	r2, 523a <i2c_nrfx_twi_transfer+0x10e>
    522a:	4608      	mov	r0, r1
    522c:	2904      	cmp	r1, #4
    522e:	dd01      	ble.n	5234 <i2c_nrfx_twi_transfer+0x108>
    5230:	4e46      	ldr	r6, [pc, #280]	; (534c <i2c_nrfx_twi_transfer+0x220>)
    5232:	615e      	str	r6, [r3, #20]
    5234:	2808      	cmp	r0, #8
    5236:	dd00      	ble.n	523a <i2c_nrfx_twi_transfer+0x10e>
    5238:	619c      	str	r4, [r3, #24]
    523a:	290b      	cmp	r1, #11
    523c:	dd2d      	ble.n	529a <i2c_nrfx_twi_transfer+0x16e>
    523e:	240c      	movs	r4, #12
    5240:	b13a      	cbz	r2, 5252 <i2c_nrfx_twi_transfer+0x126>
    5242:	2103      	movs	r1, #3
    5244:	7239      	strb	r1, [r7, #8]
    5246:	2100      	movs	r1, #0
    5248:	7279      	strb	r1, [r7, #9]
    524a:	72b9      	strb	r1, [r7, #10]
    524c:	72f9      	strb	r1, [r7, #11]
    524e:	68b8      	ldr	r0, [r7, #8]
    5250:	6118      	str	r0, [r3, #16]
    5252:	2100      	movs	r1, #0
    5254:	f36f 0100 	bfc	r1, #0, #1
    5258:	f36f 0141 	bfc	r1, #1, #1
    525c:	f36f 0182 	bfc	r1, #2, #1
    5260:	f36f 01c5 	bfc	r1, #3, #3
    5264:	2301      	movs	r3, #1
    5266:	f363 1188 	bfi	r1, r3, #6, #3
    526a:	f3c4 040a 	ubfx	r4, r4, #0, #11
    526e:	f364 2153 	bfi	r1, r4, #9, #11
    5272:	f36f 511f 	bfc	r1, #20, #12
    5276:	2300      	movs	r3, #0
    5278:	4835      	ldr	r0, [pc, #212]	; (5350 <i2c_nrfx_twi_transfer+0x224>)
    527a:	f7fd fbf3 	bl	2a64 <z_impl_z_log_msg_static_create>
    527e:	46ad      	mov	sp, r5
			nrfx_twi_disable(&config->twi);
    5280:	4648      	mov	r0, r9
    5282:	f002 f93b 	bl	74fc <nrfx_twi_disable>
			(void)i2c_nrfx_twi_recover_bus(dev);
    5286:	6838      	ldr	r0, [r7, #0]
    5288:	f7ff fef2 	bl	5070 <i2c_nrfx_twi_recover_bus>
			ret = -EIO;
    528c:	f06f 0304 	mvn.w	r3, #4
    5290:	607b      	str	r3, [r7, #4]
			break;
    5292:	e04a      	b.n	532a <i2c_nrfx_twi_transfer+0x1fe>
			LOG_ERR("Error on I2C line occurred for message %d", i);
    5294:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    5298:	e7c6      	b.n	5228 <i2c_nrfx_twi_transfer+0xfc>
    529a:	f06f 041b 	mvn.w	r4, #27
    529e:	e7cf      	b.n	5240 <i2c_nrfx_twi_transfer+0x114>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
    52a0:	466d      	mov	r5, sp
    52a2:	b088      	sub	sp, #32
    52a4:	4669      	mov	r1, sp
    52a6:	f111 0210 	adds.w	r2, r1, #16
    52aa:	d035      	beq.n	5318 <i2c_nrfx_twi_transfer+0x1ec>
    52ac:	2010      	movs	r0, #16
    52ae:	b162      	cbz	r2, 52ca <i2c_nrfx_twi_transfer+0x19e>
    52b0:	4606      	mov	r6, r0
    52b2:	2804      	cmp	r0, #4
    52b4:	dd03      	ble.n	52be <i2c_nrfx_twi_transfer+0x192>
    52b6:	f8df c09c 	ldr.w	ip, [pc, #156]	; 5354 <i2c_nrfx_twi_transfer+0x228>
    52ba:	f8c1 c014 	str.w	ip, [r1, #20]
    52be:	2e08      	cmp	r6, #8
    52c0:	dd00      	ble.n	52c4 <i2c_nrfx_twi_transfer+0x198>
    52c2:	618b      	str	r3, [r1, #24]
    52c4:	2e0c      	cmp	r6, #12
    52c6:	dd00      	ble.n	52ca <i2c_nrfx_twi_transfer+0x19e>
    52c8:	61cc      	str	r4, [r1, #28]
    52ca:	280f      	cmp	r0, #15
    52cc:	dd27      	ble.n	531e <i2c_nrfx_twi_transfer+0x1f2>
    52ce:	2310      	movs	r3, #16
    52d0:	b13a      	cbz	r2, 52e2 <i2c_nrfx_twi_transfer+0x1b6>
    52d2:	2004      	movs	r0, #4
    52d4:	7238      	strb	r0, [r7, #8]
    52d6:	2000      	movs	r0, #0
    52d8:	7278      	strb	r0, [r7, #9]
    52da:	72b8      	strb	r0, [r7, #10]
    52dc:	72f8      	strb	r0, [r7, #11]
    52de:	68b8      	ldr	r0, [r7, #8]
    52e0:	6108      	str	r0, [r1, #16]
    52e2:	2100      	movs	r1, #0
    52e4:	f36f 0100 	bfc	r1, #0, #1
    52e8:	f36f 0141 	bfc	r1, #1, #1
    52ec:	f36f 0182 	bfc	r1, #2, #1
    52f0:	f36f 01c5 	bfc	r1, #3, #3
    52f4:	2001      	movs	r0, #1
    52f6:	f360 1188 	bfi	r1, r0, #6, #3
    52fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
    52fe:	f363 2153 	bfi	r1, r3, #9, #11
    5302:	f36f 511f 	bfc	r1, #20, #12
    5306:	2300      	movs	r3, #0
    5308:	4811      	ldr	r0, [pc, #68]	; (5350 <i2c_nrfx_twi_transfer+0x224>)
    530a:	f7fd fbab 	bl	2a64 <z_impl_z_log_msg_static_create>
    530e:	46ad      	mov	sp, r5
			ret = -EIO;
    5310:	f06f 0304 	mvn.w	r3, #4
    5314:	607b      	str	r3, [r7, #4]
			break;
    5316:	e008      	b.n	532a <i2c_nrfx_twi_transfer+0x1fe>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
    5318:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    531c:	e7c7      	b.n	52ae <i2c_nrfx_twi_transfer+0x182>
    531e:	f06f 031b 	mvn.w	r3, #27
    5322:	e7d5      	b.n	52d0 <i2c_nrfx_twi_transfer+0x1a4>
			ret = -ENOTSUP;
    5324:	f06f 0385 	mvn.w	r3, #133	; 0x85
    5328:	607b      	str	r3, [r7, #4]
	nrfx_twi_disable(&config->twi);
    532a:	4648      	mov	r0, r9
    532c:	f002 f8e6 	bl	74fc <nrfx_twi_disable>
	z_impl_k_sem_give(sem);
    5330:	4640      	mov	r0, r8
    5332:	f002 fe71 	bl	8018 <z_impl_k_sem_give>
}
    5336:	6878      	ldr	r0, [r7, #4]
    5338:	3724      	adds	r7, #36	; 0x24
    533a:	46bd      	mov	sp, r7
    533c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ret = -ENOTSUP;
    5340:	f06f 0385 	mvn.w	r3, #133	; 0x85
    5344:	607b      	str	r3, [r7, #4]
    5346:	e7f0      	b.n	532a <i2c_nrfx_twi_transfer+0x1fe>
    5348:	0bad0000 	.word	0x0bad0000
    534c:	0000ceb4 	.word	0x0000ceb4
    5350:	0000c4e0 	.word	0x0000c4e0
    5354:	0000cee0 	.word	0x0000cee0

00005358 <event_handler>:
{
    5358:	b508      	push	{r3, lr}
	switch (p_event->type) {
    535a:	7803      	ldrb	r3, [r0, #0]
    535c:	2b01      	cmp	r3, #1
    535e:	d00c      	beq.n	537a <event_handler+0x22>
    5360:	2b02      	cmp	r3, #2
    5362:	d00d      	beq.n	5380 <event_handler+0x28>
    5364:	b113      	cbz	r3, 536c <event_handler+0x14>
		dev_data->res = NRFX_ERROR_INTERNAL;
    5366:	4b08      	ldr	r3, [pc, #32]	; (5388 <event_handler+0x30>)
    5368:	620b      	str	r3, [r1, #32]
		break;
    536a:	e001      	b.n	5370 <event_handler+0x18>
		dev_data->res = NRFX_SUCCESS;
    536c:	4b07      	ldr	r3, [pc, #28]	; (538c <event_handler+0x34>)
    536e:	620b      	str	r3, [r1, #32]
	k_sem_give(&dev_data->completion_sync);
    5370:	f101 0010 	add.w	r0, r1, #16
    5374:	f002 fe50 	bl	8018 <z_impl_k_sem_give>
}
    5378:	bd08      	pop	{r3, pc}
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    537a:	4b05      	ldr	r3, [pc, #20]	; (5390 <event_handler+0x38>)
    537c:	620b      	str	r3, [r1, #32]
		break;
    537e:	e7f7      	b.n	5370 <event_handler+0x18>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    5380:	4b04      	ldr	r3, [pc, #16]	; (5394 <event_handler+0x3c>)
    5382:	620b      	str	r3, [r1, #32]
		break;
    5384:	e7f4      	b.n	5370 <event_handler+0x18>
    5386:	bf00      	nop
    5388:	0bad0001 	.word	0x0bad0001
    538c:	0bad0000 	.word	0x0bad0000
    5390:	0bae0001 	.word	0x0bae0001
    5394:	0bae0002 	.word	0x0bae0002

00005398 <init_twi>:
	.transfer    = i2c_nrfx_twi_transfer,
	.recover_bus = i2c_nrfx_twi_recover_bus,
};

static int init_twi(const struct device *dev)
{
    5398:	b5b0      	push	{r4, r5, r7, lr}
    539a:	b082      	sub	sp, #8
    539c:	af00      	add	r7, sp, #0
    539e:	4604      	mov	r4, r0
	const struct i2c_nrfx_twi_config *config = dev->config;
    53a0:	6840      	ldr	r0, [r0, #4]
	struct i2c_nrfx_twi_data *dev_data = dev->data;
	nrfx_err_t result = nrfx_twi_init(&config->twi, &config->config,
    53a2:	6923      	ldr	r3, [r4, #16]
    53a4:	4a2f      	ldr	r2, [pc, #188]	; (5464 <init_twi+0xcc>)
    53a6:	f100 0108 	add.w	r1, r0, #8
    53aa:	f002 f82f 	bl	740c <nrfx_twi_init>
					  event_handler, dev_data);
	if (result != NRFX_SUCCESS) {
    53ae:	4b2e      	ldr	r3, [pc, #184]	; (5468 <init_twi+0xd0>)
    53b0:	4298      	cmp	r0, r3
    53b2:	d103      	bne.n	53bc <init_twi+0x24>
		LOG_ERR("Failed to initialize device: %s",
			    dev->name);
		return -EBUSY;
	}

	return 0;
    53b4:	2000      	movs	r0, #0
}
    53b6:	3708      	adds	r7, #8
    53b8:	46bd      	mov	sp, r7
    53ba:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Failed to initialize device: %s",
    53bc:	6821      	ldr	r1, [r4, #0]
    53be:	466d      	mov	r5, sp
    53c0:	2300      	movs	r3, #0
    53c2:	713b      	strb	r3, [r7, #4]
    53c4:	2302      	movs	r3, #2
    53c6:	717b      	strb	r3, [r7, #5]
    53c8:	b088      	sub	sp, #32
    53ca:	466c      	mov	r4, sp
    53cc:	f114 0210 	adds.w	r2, r4, #16
    53d0:	d011      	beq.n	53f6 <init_twi+0x5e>
    53d2:	200e      	movs	r0, #14
    53d4:	b11a      	cbz	r2, 53de <init_twi+0x46>
    53d6:	2804      	cmp	r0, #4
    53d8:	dd01      	ble.n	53de <init_twi+0x46>
    53da:	4b24      	ldr	r3, [pc, #144]	; (546c <init_twi+0xd4>)
    53dc:	6163      	str	r3, [r4, #20]
    53de:	2300      	movs	r3, #0
    53e0:	703b      	strb	r3, [r7, #0]
    53e2:	2302      	movs	r3, #2
    53e4:	707b      	strb	r3, [r7, #1]
    53e6:	b19a      	cbz	r2, 5410 <init_twi+0x78>
    53e8:	2808      	cmp	r0, #8
    53ea:	dd00      	ble.n	53ee <init_twi+0x56>
    53ec:	61a1      	str	r1, [r4, #24]
    53ee:	f104 031c 	add.w	r3, r4, #28
    53f2:	2100      	movs	r1, #0
    53f4:	e00a      	b.n	540c <init_twi+0x74>
    53f6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    53fa:	e7eb      	b.n	53d4 <init_twi+0x3c>
    53fc:	f101 0c08 	add.w	ip, r1, #8
    5400:	44bc      	add	ip, r7
    5402:	f81c cc08 	ldrb.w	ip, [ip, #-8]
    5406:	f803 cb01 	strb.w	ip, [r3], #1
    540a:	3101      	adds	r1, #1
    540c:	2901      	cmp	r1, #1
    540e:	d9f5      	bls.n	53fc <init_twi+0x64>
    5410:	280d      	cmp	r0, #13
    5412:	dd24      	ble.n	545e <init_twi+0xc6>
    5414:	230e      	movs	r3, #14
    5416:	b142      	cbz	r2, 542a <init_twi+0x92>
    5418:	2103      	movs	r1, #3
    541a:	7139      	strb	r1, [r7, #4]
    541c:	2100      	movs	r1, #0
    541e:	7179      	strb	r1, [r7, #5]
    5420:	71b9      	strb	r1, [r7, #6]
    5422:	2101      	movs	r1, #1
    5424:	71f9      	strb	r1, [r7, #7]
    5426:	6878      	ldr	r0, [r7, #4]
    5428:	6120      	str	r0, [r4, #16]
    542a:	2100      	movs	r1, #0
    542c:	f36f 0100 	bfc	r1, #0, #1
    5430:	f36f 0141 	bfc	r1, #1, #1
    5434:	f36f 0182 	bfc	r1, #2, #1
    5438:	f36f 01c5 	bfc	r1, #3, #3
    543c:	2001      	movs	r0, #1
    543e:	f360 1188 	bfi	r1, r0, #6, #3
    5442:	f3c3 030a 	ubfx	r3, r3, #0, #11
    5446:	f363 2153 	bfi	r1, r3, #9, #11
    544a:	f36f 511f 	bfc	r1, #20, #12
    544e:	2300      	movs	r3, #0
    5450:	4807      	ldr	r0, [pc, #28]	; (5470 <init_twi+0xd8>)
    5452:	f7fd fb07 	bl	2a64 <z_impl_z_log_msg_static_create>
    5456:	46ad      	mov	sp, r5
		return -EBUSY;
    5458:	f06f 000f 	mvn.w	r0, #15
    545c:	e7ab      	b.n	53b6 <init_twi+0x1e>
		LOG_ERR("Failed to initialize device: %s",
    545e:	f06f 031b 	mvn.w	r3, #27
    5462:	e7d8      	b.n	5416 <init_twi+0x7e>
    5464:	00005359 	.word	0x00005359
    5468:	0bad0000 	.word	0x0bad0000
    546c:	0000cf08 	.word	0x0000cf08
    5470:	0000c4e0 	.word	0x0000c4e0

00005474 <nrf_gpio_pin_write>:
    if (value == 0)
    5474:	b969      	cbnz	r1, 5492 <nrf_gpio_pin_write+0x1e>
    *p_pin = pin_number & 0x1F;
    5476:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    547a:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    547c:	2801      	cmp	r0, #1
    547e:	d006      	beq.n	548e <nrf_gpio_pin_write+0x1a>
        case 0: return NRF_P0;
    5480:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5484:	2301      	movs	r3, #1
    5486:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
    5488:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    548c:	4770      	bx	lr
        case 1: return NRF_P1;
    548e:	4a08      	ldr	r2, [pc, #32]	; (54b0 <nrf_gpio_pin_write+0x3c>)
    5490:	e7f8      	b.n	5484 <nrf_gpio_pin_write+0x10>
    *p_pin = pin_number & 0x1F;
    5492:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    5496:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5498:	2801      	cmp	r0, #1
    549a:	d006      	beq.n	54aa <nrf_gpio_pin_write+0x36>
        case 0: return NRF_P0;
    549c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    54a0:	2301      	movs	r3, #1
    54a2:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    54a4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
    54a8:	4770      	bx	lr
        case 1: return NRF_P1;
    54aa:	4a01      	ldr	r2, [pc, #4]	; (54b0 <nrf_gpio_pin_write+0x3c>)
    54ac:	e7f8      	b.n	54a0 <nrf_gpio_pin_write+0x2c>
    54ae:	bf00      	nop
    54b0:	50000300 	.word	0x50000300

000054b4 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    54b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    54b8:	b083      	sub	sp, #12
    54ba:	4680      	mov	r8, r0
    54bc:	468a      	mov	sl, r1
    54be:	4693      	mov	fp, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    54c0:	2400      	movs	r4, #0
    54c2:	e02c      	b.n	551e <pinctrl_configure_pins+0x6a>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
    54c4:	f04f 35ff 	mov.w	r5, #4294967295
    54c8:	e035      	b.n	5536 <pinctrl_configure_pins+0x82>
		}

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = pin;
    54ca:	f8cb 550c 	str.w	r5, [fp, #1292]	; 0x50c
			write = 1U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    54ce:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    54d0:	9601      	str	r6, [sp, #4]
			write = 1U;
    54d2:	4631      	mov	r1, r6
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
    54d4:	2d7f      	cmp	r5, #127	; 0x7f
    54d6:	d020      	beq.n	551a <pinctrl_configure_pins+0x66>
			if (write != NO_WRITE) {
    54d8:	f1b1 3fff 	cmp.w	r1, #4294967295
    54dc:	f040 8090 	bne.w	5600 <pinctrl_configure_pins+0x14c>
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    54e0:	f858 2009 	ldr.w	r2, [r8, r9]
    54e4:	f412 5f00 	tst.w	r2, #8192	; 0x2000
    54e8:	d002      	beq.n	54f0 <pinctrl_configure_pins+0x3c>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    54ea:	2601      	movs	r6, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
    54ec:	2300      	movs	r3, #0
    54ee:	9301      	str	r3, [sp, #4]
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    54f0:	f3c2 12c1 	ubfx	r2, r2, #7, #2
    *p_pin = pin_number & 0x1F;
    54f4:	f005 011f 	and.w	r1, r5, #31
    return pin_number >> 5;
    54f8:	096d      	lsrs	r5, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    54fa:	2d01      	cmp	r5, #1
    54fc:	f000 8084 	beq.w	5608 <pinctrl_configure_pins+0x154>
        case 0: return NRF_P0;
    5500:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    5504:	9b01      	ldr	r3, [sp, #4]
    5506:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    550a:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    550e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    5512:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    5516:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    551a:	3401      	adds	r4, #1
    551c:	b2e4      	uxtb	r4, r4
    551e:	4554      	cmp	r4, sl
    5520:	d274      	bcs.n	560c <pinctrl_configure_pins+0x158>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    5522:	ea4f 0984 	mov.w	r9, r4, lsl #2
    5526:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
    552a:	f3c3 2743 	ubfx	r7, r3, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
    552e:	f003 057f 	and.w	r5, r3, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
    5532:	2d7f      	cmp	r5, #127	; 0x7f
    5534:	d0c6      	beq.n	54c4 <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
    5536:	0c1b      	lsrs	r3, r3, #16
    5538:	2b0c      	cmp	r3, #12
    553a:	d869      	bhi.n	5610 <pinctrl_configure_pins+0x15c>
    553c:	a201      	add	r2, pc, #4	; (adr r2, 5544 <pinctrl_configure_pins+0x90>)
    553e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5542:	bf00      	nop
    5544:	000054cb 	.word	0x000054cb
    5548:	00005579 	.word	0x00005579
    554c:	00005587 	.word	0x00005587
    5550:	00005593 	.word	0x00005593
    5554:	000055a1 	.word	0x000055a1
    5558:	000055af 	.word	0x000055af
    555c:	000055bb 	.word	0x000055bb
    5560:	00005611 	.word	0x00005611
    5564:	00005611 	.word	0x00005611
    5568:	00005611 	.word	0x00005611
    556c:	00005611 	.word	0x00005611
    5570:	000055c9 	.word	0x000055c9
    5574:	000055d9 	.word	0x000055d9
			NRF_PSEL_UART(reg, RXD) = pin;
    5578:	f8cb 5514 	str.w	r5, [fp, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    557c:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    557e:	9601      	str	r6, [sp, #4]
		uint32_t write = NO_WRITE;
    5580:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    5584:	e7a6      	b.n	54d4 <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, RTS) = pin;
    5586:	f8cb 5508 	str.w	r5, [fp, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    558a:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    558c:	9601      	str	r6, [sp, #4]
			write = 1U;
    558e:	4631      	mov	r1, r6
			break;
    5590:	e7a0      	b.n	54d4 <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, CTS) = pin;
    5592:	f8cb 5510 	str.w	r5, [fp, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    5596:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    5598:	9601      	str	r6, [sp, #4]
		uint32_t write = NO_WRITE;
    559a:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    559e:	e799      	b.n	54d4 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    55a0:	f8cb 5508 	str.w	r5, [fp, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    55a4:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    55a6:	2301      	movs	r3, #1
    55a8:	9301      	str	r3, [sp, #4]
			write = 0U;
    55aa:	4631      	mov	r1, r6
			break;
    55ac:	e792      	b.n	54d4 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    55ae:	f8cb 550c 	str.w	r5, [fp, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    55b2:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    55b4:	9601      	str	r6, [sp, #4]
			write = 0U;
    55b6:	2100      	movs	r1, #0
			break;
    55b8:	e78c      	b.n	54d4 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    55ba:	f8cb 5510 	str.w	r5, [fp, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    55be:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    55c0:	9601      	str	r6, [sp, #4]
		uint32_t write = NO_WRITE;
    55c2:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    55c6:	e785      	b.n	54d4 <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    55c8:	f8cb 5508 	str.w	r5, [fp, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    55cc:	b167      	cbz	r7, 55e8 <pinctrl_configure_pins+0x134>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    55ce:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    55d0:	9601      	str	r6, [sp, #4]
		uint32_t write = NO_WRITE;
    55d2:	f04f 31ff 	mov.w	r1, #4294967295
    55d6:	e77d      	b.n	54d4 <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    55d8:	f8cb 550c 	str.w	r5, [fp, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    55dc:	b157      	cbz	r7, 55f4 <pinctrl_configure_pins+0x140>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    55de:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    55e0:	9601      	str	r6, [sp, #4]
		uint32_t write = NO_WRITE;
    55e2:	f04f 31ff 	mov.w	r1, #4294967295
    55e6:	e775      	b.n	54d4 <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    55e8:	463e      	mov	r6, r7
			dir = NRF_GPIO_PIN_DIR_INPUT;
    55ea:	9701      	str	r7, [sp, #4]
		uint32_t write = NO_WRITE;
    55ec:	f04f 31ff 	mov.w	r1, #4294967295
				drive = NRF_DRIVE_S0D1;
    55f0:	2706      	movs	r7, #6
    55f2:	e76f      	b.n	54d4 <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    55f4:	463e      	mov	r6, r7
			dir = NRF_GPIO_PIN_DIR_INPUT;
    55f6:	9701      	str	r7, [sp, #4]
		uint32_t write = NO_WRITE;
    55f8:	f04f 31ff 	mov.w	r1, #4294967295
				drive = NRF_DRIVE_S0D1;
    55fc:	2706      	movs	r7, #6
    55fe:	e769      	b.n	54d4 <pinctrl_configure_pins+0x20>
				nrf_gpio_pin_write(pin, write);
    5600:	4628      	mov	r0, r5
    5602:	f7ff ff37 	bl	5474 <nrf_gpio_pin_write>
    5606:	e76b      	b.n	54e0 <pinctrl_configure_pins+0x2c>
        case 1: return NRF_P1;
    5608:	4804      	ldr	r0, [pc, #16]	; (561c <pinctrl_configure_pins+0x168>)
    560a:	e77b      	b.n	5504 <pinctrl_configure_pins+0x50>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    560c:	2000      	movs	r0, #0
    560e:	e001      	b.n	5614 <pinctrl_configure_pins+0x160>
		switch (NRF_GET_FUN(pins[i])) {
    5610:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    5614:	b003      	add	sp, #12
    5616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    561a:	bf00      	nop
    561c:	50000300 	.word	0x50000300

00005620 <bme680_calc_humidity>:
			   + ((var1 + var2 + var3
			       + ((int32_t)data->par_p7 << 7)) >> 4);
}

static void bme680_calc_humidity(struct bme680_data *data, uint16_t adc_humidity)
{
    5620:	b570      	push	{r4, r5, r6, lr}
	int32_t var1, var2_1, var2_2, var2, var3, var4, var5, var6;
	int32_t temp_scaled, calc_hum;

	temp_scaled = (((int32_t)data->t_fine * 5) + 128) >> 8;
    5622:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    5624:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    5628:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
    562c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
	var1 = (int32_t)(adc_humidity - ((int32_t)((int32_t)data->par_h1 * 16))) -
    5630:	8803      	ldrh	r3, [r0, #0]
    5632:	eba1 1203 	sub.w	r2, r1, r3, lsl #4
	       (((temp_scaled * (int32_t)data->par_h3)
    5636:	f990 e004 	ldrsb.w	lr, [r0, #4]
    563a:	fb0c fe0e 	mul.w	lr, ip, lr
		 / ((int32_t)100)) >> 1);
    563e:	4c2a      	ldr	r4, [pc, #168]	; (56e8 <bme680_calc_humidity+0xc8>)
    5640:	fb84 130e 	smull	r1, r3, r4, lr
    5644:	ea4f 7eee 	mov.w	lr, lr, asr #31
    5648:	ebce 1e63 	rsb	lr, lr, r3, asr #5
	var1 = (int32_t)(adc_humidity - ((int32_t)((int32_t)data->par_h1 * 16))) -
    564c:	eba2 026e 	sub.w	r2, r2, lr, asr #1
	var2_1 = (int32_t)data->par_h2;
    5650:	f8b0 e002 	ldrh.w	lr, [r0, #2]
	var2_2 = ((temp_scaled * (int32_t)data->par_h4) / (int32_t)100)
    5654:	f990 1005 	ldrsb.w	r1, [r0, #5]
    5658:	fb0c f101 	mul.w	r1, ip, r1
    565c:	fb84 5301 	smull	r5, r3, r4, r1
    5660:	17c9      	asrs	r1, r1, #31
    5662:	ebc1 1163 	rsb	r1, r1, r3, asr #5
		 + (((temp_scaled * ((temp_scaled * (int32_t)data->par_h5)
    5666:	f990 3006 	ldrsb.w	r3, [r0, #6]
    566a:	fb0c f303 	mul.w	r3, ip, r3
				     / ((int32_t)100))) >> 6) / ((int32_t)100))
    566e:	fb84 6503 	smull	r6, r5, r4, r3
    5672:	17db      	asrs	r3, r3, #31
    5674:	ebc3 1365 	rsb	r3, r3, r5, asr #5
		 + (((temp_scaled * ((temp_scaled * (int32_t)data->par_h5)
    5678:	fb0c f303 	mul.w	r3, ip, r3
				     / ((int32_t)100))) >> 6) / ((int32_t)100))
    567c:	119d      	asrs	r5, r3, #6
    567e:	fb84 6505 	smull	r6, r5, r4, r5
    5682:	17db      	asrs	r3, r3, #31
    5684:	ebc3 1365 	rsb	r3, r3, r5, asr #5
		 + (((temp_scaled * ((temp_scaled * (int32_t)data->par_h5)
    5688:	4419      	add	r1, r3
	var2_2 = ((temp_scaled * (int32_t)data->par_h4) / (int32_t)100)
    568a:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
		 +  (int32_t)(1 << 14);
	var2 = (var2_1 * var2_2) >> 10;
    568e:	fb01 fe0e 	mul.w	lr, r1, lr
    5692:	ea4f 2eae 	mov.w	lr, lr, asr #10
	var3 = var1 * var2;
    5696:	fb0e f202 	mul.w	r2, lr, r2
	var4 = (int32_t)data->par_h6 << 7;
    569a:	79c1      	ldrb	r1, [r0, #7]
	var4 = ((var4) + ((temp_scaled * (int32_t)data->par_h7) /
    569c:	f990 3008 	ldrsb.w	r3, [r0, #8]
    56a0:	fb0c f303 	mul.w	r3, ip, r3
    56a4:	fb84 5403 	smull	r5, r4, r4, r3
    56a8:	17db      	asrs	r3, r3, #31
    56aa:	ebc3 1364 	rsb	r3, r3, r4, asr #5
    56ae:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    56b2:	111b      	asrs	r3, r3, #4
			  ((int32_t)100))) >> 4;
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
    56b4:	1391      	asrs	r1, r2, #14
    56b6:	fb01 f101 	mul.w	r1, r1, r1
    56ba:	1289      	asrs	r1, r1, #10
	var6 = (var4 * var5) >> 1;
    56bc:	fb01 f303 	mul.w	r3, r1, r3
	calc_hum = (((var3 + var6) >> 10) * ((int32_t)1000)) >> 12;
    56c0:	eb02 0363 	add.w	r3, r2, r3, asr #1
    56c4:	129b      	asrs	r3, r3, #10
    56c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    56ca:	fb02 f303 	mul.w	r3, r2, r3

	if (calc_hum > 100000) { /* Cap at 100%rH */
    56ce:	4907      	ldr	r1, [pc, #28]	; (56ec <bme680_calc_humidity+0xcc>)
    56d0:	ebb1 3f23 	cmp.w	r1, r3, asr #12
    56d4:	db04      	blt.n	56e0 <bme680_calc_humidity+0xc0>
    56d6:	131a      	asrs	r2, r3, #12
		calc_hum = 100000;
	} else if (calc_hum < 0) {
    56d8:	2a00      	cmp	r2, #0
    56da:	da02      	bge.n	56e2 <bme680_calc_humidity+0xc2>
		calc_hum = 0;
    56dc:	2200      	movs	r2, #0
    56de:	e000      	b.n	56e2 <bme680_calc_humidity+0xc2>
		calc_hum = 100000;
    56e0:	4a02      	ldr	r2, [pc, #8]	; (56ec <bme680_calc_humidity+0xcc>)
	}

	data->calc_humidity = calc_hum;
    56e2:	6302      	str	r2, [r0, #48]	; 0x30
}
    56e4:	bd70      	pop	{r4, r5, r6, pc}
    56e6:	bf00      	nop
    56e8:	51eb851f 	.word	0x51eb851f
    56ec:	000186a0 	.word	0x000186a0

000056f0 <bme680_calc_gas_resistance>:

static void bme680_calc_gas_resistance(struct bme680_data *data, uint8_t gas_range,
				       uint16_t adc_gas_res)
{
    56f0:	b538      	push	{r3, r4, r5, lr}
    56f2:	4604      	mov	r4, r0
	static const uint32_t look_up2[16] = { 4096000000, 2048000000, 1024000000,
			       512000000, 255744255, 127110228, 64000000,
			       32258064, 16016016, 8000000, 4000000, 2000000,
			       1000000, 500000, 250000, 125000 };

	var1 = (int64_t)((1340 + (5 * (int64_t)data->range_sw_err)) *
    56f4:	f990 0027 	ldrsb.w	r0, [r0, #39]	; 0x27
    56f8:	17c3      	asrs	r3, r0, #31
    56fa:	009d      	lsls	r5, r3, #2
    56fc:	ea45 7590 	orr.w	r5, r5, r0, lsr #30
    5700:	ea4f 0c80 	mov.w	ip, r0, lsl #2
    5704:	eb1c 0c00 	adds.w	ip, ip, r0
    5708:	eb43 0305 	adc.w	r3, r3, r5
    570c:	f240 503c 	movw	r0, #1340	; 0x53c
    5710:	eb1c 0c00 	adds.w	ip, ip, r0
    5714:	f143 0300 	adc.w	r3, r3, #0
		       ((int64_t)look_up1[gas_range])) >> 16;
    5718:	4815      	ldr	r0, [pc, #84]	; (5770 <bme680_calc_gas_resistance+0x80>)
    571a:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
	var1 = (int64_t)((1340 + (5 * (int64_t)data->range_sw_err)) *
    571e:	fbac c005 	umull	ip, r0, ip, r5
    5722:	fb05 0003 	mla	r0, r5, r3, r0
    5726:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    572a:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
    572e:	1405      	asrs	r5, r0, #16
	var2 = (((int64_t)((int64_t)adc_gas_res << 15) - (int64_t)(16777216)) + var1);
    5730:	03d2      	lsls	r2, r2, #15
    5732:	f112 427f 	adds.w	r2, r2, #4278190080	; 0xff000000
    5736:	eb63 0303 	sbc.w	r3, r3, r3
    573a:	eb12 020c 	adds.w	r2, r2, ip
    573e:	eb43 4320 	adc.w	r3, r3, r0, asr #16
	var3 = (((int64_t)look_up2[gas_range] * (int64_t)var1) >> 9);
    5742:	480c      	ldr	r0, [pc, #48]	; (5774 <bme680_calc_gas_resistance+0x84>)
    5744:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    5748:	fba0 c10c 	umull	ip, r1, r0, ip
    574c:	fb00 1105 	mla	r1, r0, r5, r1
    5750:	ea4f 2c5c 	mov.w	ip, ip, lsr #9
    5754:	ea4c 5cc1 	orr.w	ip, ip, r1, lsl #23
	data->calc_gas_resistance = (uint32_t)((var3 + ((int64_t)var2 >> 1))
    5758:	0850      	lsrs	r0, r2, #1
    575a:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
    575e:	105d      	asrs	r5, r3, #1
    5760:	eb10 000c 	adds.w	r0, r0, ip
					    / (int64_t)var2);
    5764:	eb45 2161 	adc.w	r1, r5, r1, asr #9
    5768:	f7fb f898 	bl	89c <__aeabi_ldivmod>
	data->calc_gas_resistance = (uint32_t)((var3 + ((int64_t)var2 >> 1))
    576c:	6360      	str	r0, [r4, #52]	; 0x34
}
    576e:	bd38      	pop	{r3, r4, r5, pc}
    5770:	0000d00c 	.word	0x0000d00c
    5774:	0000cfcc 	.word	0x0000cfcc

00005778 <bme680_calc_res_heat>:

static uint8_t bme680_calc_res_heat(struct bme680_data *data, uint16_t heatr_temp)
{
    5778:	b510      	push	{r4, lr}
    577a:	4602      	mov	r2, r0
	uint8_t heatr_res;
	int32_t var1, var2, var3, var4, var5;
	int32_t heatr_res_x100;
	int32_t amb_temp = 25;    /* Assume ambient temperature to be 25 deg C */

	if (heatr_temp > 400) { /* Cap temperature */
    577c:	f5b1 7fc8 	cmp.w	r1, #400	; 0x190
    5780:	d901      	bls.n	5786 <bme680_calc_res_heat+0xe>
		heatr_temp = 400;
    5782:	f44f 71c8 	mov.w	r1, #400	; 0x190
	}

	var1 = ((amb_temp * data->par_gh3) / 1000) * 256;
    5786:	f992 300c 	ldrsb.w	r3, [r2, #12]
    578a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    578e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5792:	4821      	ldr	r0, [pc, #132]	; (5818 <bme680_calc_res_heat+0xa0>)
    5794:	fb80 4003 	smull	r4, r0, r0, r3
    5798:	17db      	asrs	r3, r3, #31
    579a:	ebc3 1ca0 	rsb	ip, r3, r0, asr #6
	var2 = (data->par_gh1 + 784) * (((((data->par_gh2 + 154009)
    579e:	f992 3009 	ldrsb.w	r3, [r2, #9]
    57a2:	f503 7344 	add.w	r3, r3, #784	; 0x310
    57a6:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
    57aa:	f500 3016 	add.w	r0, r0, #153600	; 0x25800
    57ae:	f200 1099 	addw	r0, r0, #409	; 0x199
					   * heatr_temp * 5) / 100)
    57b2:	fb00 f101 	mul.w	r1, r0, r1
    57b6:	4819      	ldr	r0, [pc, #100]	; (581c <bme680_calc_res_heat+0xa4>)
    57b8:	fb80 4e01 	smull	r4, lr, r0, r1
    57bc:	17c9      	asrs	r1, r1, #31
    57be:	ebc1 01ee 	rsb	r1, r1, lr, asr #3
					 + 3276800) / 10);
    57c2:	f501 1148 	add.w	r1, r1, #3276800	; 0x320000
    57c6:	fb80 e001 	smull	lr, r0, r0, r1
    57ca:	17c9      	asrs	r1, r1, #31
    57cc:	ebc1 01a0 	rsb	r1, r1, r0, asr #2
	var2 = (data->par_gh1 + 784) * (((((data->par_gh2 + 154009)
    57d0:	fb01 f303 	mul.w	r3, r1, r3
	var3 = var1 + (var2 / 2);
    57d4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    57d8:	1058      	asrs	r0, r3, #1
    57da:	eb00 200c 	add.w	r0, r0, ip, lsl #8
	var4 = (var3 / (data->res_heat_range + 4));
    57de:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
    57e2:	3304      	adds	r3, #4
    57e4:	fb90 f0f3 	sdiv	r0, r0, r3
	var5 = (131 * data->res_heat_val) + 65536;
    57e8:	f992 3026 	ldrsb.w	r3, [r2, #38]	; 0x26
    57ec:	eb03 1283 	add.w	r2, r3, r3, lsl #6
    57f0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    57f4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	heatr_res_x100 = ((var4 / var5) - 250) * 34;
    57f8:	fb90 f0f3 	sdiv	r0, r0, r3
    57fc:	38fa      	subs	r0, #250	; 0xfa
    57fe:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    5802:	0040      	lsls	r0, r0, #1
	heatr_res = (heatr_res_x100 + 50) / 100;
    5804:	3032      	adds	r0, #50	; 0x32
    5806:	4b06      	ldr	r3, [pc, #24]	; (5820 <bme680_calc_res_heat+0xa8>)
    5808:	fb83 2300 	smull	r2, r3, r3, r0
    580c:	17c0      	asrs	r0, r0, #31
    580e:	ebc0 1063 	rsb	r0, r0, r3, asr #5

	return heatr_res;
}
    5812:	b2c0      	uxtb	r0, r0
    5814:	bd10      	pop	{r4, pc}
    5816:	bf00      	nop
    5818:	10624dd3 	.word	0x10624dd3
    581c:	66666667 	.word	0x66666667
    5820:	51eb851f 	.word	0x51eb851f

00005824 <bme680_channel_get>:

static int bme680_channel_get(const struct device *dev,
			      enum sensor_channel chan,
			      struct sensor_value *val)
{
	struct bme680_data *data = dev->data;
    5824:	6903      	ldr	r3, [r0, #16]

	switch (chan) {
    5826:	390d      	subs	r1, #13
    5828:	2910      	cmp	r1, #16
    582a:	d84f      	bhi.n	58cc <bme680_channel_get+0xa8>
    582c:	e8df f001 	tbb	[pc, r1]
    5830:	364e2309 	.word	0x364e2309
    5834:	4e4e4e4e 	.word	0x4e4e4e4e
    5838:	4e4e4e4e 	.word	0x4e4e4e4e
    583c:	4e4e4e4e 	.word	0x4e4e4e4e
    5840:	49          	.byte	0x49
    5841:	00          	.byte	0x00
{
    5842:	b500      	push	{lr}
	case SENSOR_CHAN_AMBIENT_TEMP:
		/*
		 * data->calc_temp has a resolution of 0.01 degC.
		 * So 5123 equals 51.23 degC.
		 */
		val->val1 = data->calc_temp / 100;
    5844:	6a99      	ldr	r1, [r3, #40]	; 0x28
    5846:	4823      	ldr	r0, [pc, #140]	; (58d4 <bme680_channel_get+0xb0>)
    5848:	fb80 ec01 	smull	lr, ip, r0, r1
    584c:	17c9      	asrs	r1, r1, #31
    584e:	ebc1 116c 	rsb	r1, r1, ip, asr #5
    5852:	6011      	str	r1, [r2, #0]
		val->val2 = data->calc_temp % 100 * 10000;
    5854:	6a99      	ldr	r1, [r3, #40]	; 0x28
    5856:	fb80 3001 	smull	r3, r0, r0, r1
    585a:	17cb      	asrs	r3, r1, #31
    585c:	ebc3 1360 	rsb	r3, r3, r0, asr #5
    5860:	2064      	movs	r0, #100	; 0x64
    5862:	fb00 1313 	mls	r3, r0, r3, r1
    5866:	f242 7110 	movw	r1, #10000	; 0x2710
    586a:	fb01 f303 	mul.w	r3, r1, r3
    586e:	6053      	str	r3, [r2, #4]
		break;
	default:
		return -EINVAL;
	}

	return 0;
    5870:	2000      	movs	r0, #0
}
    5872:	f85d fb04 	ldr.w	pc, [sp], #4
		val->val1 = data->calc_press / 1000;
    5876:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    5878:	4917      	ldr	r1, [pc, #92]	; (58d8 <bme680_channel_get+0xb4>)
    587a:	fba1 c000 	umull	ip, r0, r1, r0
    587e:	0980      	lsrs	r0, r0, #6
    5880:	6010      	str	r0, [r2, #0]
		val->val2 = (data->calc_press % 1000) * 1000;
    5882:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    5884:	fba1 1300 	umull	r1, r3, r1, r0
    5888:	099b      	lsrs	r3, r3, #6
    588a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    588e:	fb01 0313 	mls	r3, r1, r3, r0
    5892:	fb01 f303 	mul.w	r3, r1, r3
    5896:	6053      	str	r3, [r2, #4]
	return 0;
    5898:	2000      	movs	r0, #0
		break;
    589a:	4770      	bx	lr
		val->val1 = data->calc_humidity / 1000;
    589c:	6b18      	ldr	r0, [r3, #48]	; 0x30
    589e:	490e      	ldr	r1, [pc, #56]	; (58d8 <bme680_channel_get+0xb4>)
    58a0:	fba1 c000 	umull	ip, r0, r1, r0
    58a4:	0980      	lsrs	r0, r0, #6
    58a6:	6010      	str	r0, [r2, #0]
		val->val2 = (data->calc_humidity % 1000) * 1000;
    58a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
    58aa:	fba1 1300 	umull	r1, r3, r1, r0
    58ae:	099b      	lsrs	r3, r3, #6
    58b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    58b4:	fb01 0313 	mls	r3, r1, r3, r0
    58b8:	fb01 f303 	mul.w	r3, r1, r3
    58bc:	6053      	str	r3, [r2, #4]
	return 0;
    58be:	2000      	movs	r0, #0
		break;
    58c0:	4770      	bx	lr
		val->val1 = data->calc_gas_resistance;
    58c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    58c4:	6013      	str	r3, [r2, #0]
		val->val2 = 0;
    58c6:	2000      	movs	r0, #0
    58c8:	6050      	str	r0, [r2, #4]
		break;
    58ca:	4770      	bx	lr
	switch (chan) {
    58cc:	f06f 0015 	mvn.w	r0, #21
}
    58d0:	4770      	bx	lr
    58d2:	bf00      	nop
    58d4:	51eb851f 	.word	0x51eb851f
    58d8:	10624dd3 	.word	0x10624dd3

000058dc <bme680_init>:

	return 0;
}

static int bme680_init(const struct device *dev)
{
    58dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    58de:	b083      	sub	sp, #12
    58e0:	af00      	add	r7, sp, #0
    58e2:	4605      	mov	r5, r0
	struct bme680_data *data = dev->data;
    58e4:	6906      	ldr	r6, [r0, #16]
	const struct bme680_config *config = dev->config;
    58e6:	6840      	ldr	r0, [r0, #4]
	return config->bus_io->check(&config->bus);
    58e8:	6883      	ldr	r3, [r0, #8]
    58ea:	681b      	ldr	r3, [r3, #0]
    58ec:	4798      	blx	r3
	int err;

	err = bme680_bus_check(dev);
	if (err < 0) {
    58ee:	1e04      	subs	r4, r0, #0
    58f0:	db55      	blt.n	599e <bme680_init+0xc2>
	const struct bme680_config *config = dev->config;
    58f2:	686b      	ldr	r3, [r5, #4]
	return config->bus_io->read(dev, start, buf, size);
    58f4:	689b      	ldr	r3, [r3, #8]
    58f6:	685c      	ldr	r4, [r3, #4]
    58f8:	2301      	movs	r3, #1
    58fa:	f106 0240 	add.w	r2, r6, #64	; 0x40
    58fe:	21d0      	movs	r1, #208	; 0xd0
    5900:	4628      	mov	r0, r5
    5902:	47a0      	blx	r4
		data->mem_page = (mem_page & BME680_SPI_MEM_PAGE_MSK) >> BME680_SPI_MEM_PAGE_POS;
	}
#endif

	err = bme680_reg_read(dev, BME680_REG_CHIP_ID, &data->chip_id, 1);
	if (err < 0) {
    5904:	1e04      	subs	r4, r0, #0
    5906:	f2c0 8098 	blt.w	5a3a <bme680_init+0x15e>
		return err;
	}

	if (data->chip_id == BME680_CHIP_ID) {
    590a:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
    590e:	2b61      	cmp	r3, #97	; 0x61
    5910:	f040 809a 	bne.w	5a48 <bme680_init+0x16c>
	} else {
		LOG_ERR("Bad BME680 chip id: 0x%x", data->chip_id);
		return -ENOTSUP;
	}

	err = bme680_read_compensation(dev);
    5914:	4628      	mov	r0, r5
    5916:	f005 f988 	bl	ac2a <bme680_read_compensation>
	if (err < 0) {
    591a:	1e04      	subs	r4, r0, #0
    591c:	f2c0 808d 	blt.w	5a3a <bme680_init+0x15e>
	const struct bme680_config *config = dev->config;
    5920:	686b      	ldr	r3, [r5, #4]
	return config->bus_io->write(dev, reg, val);
    5922:	689b      	ldr	r3, [r3, #8]
    5924:	689b      	ldr	r3, [r3, #8]
    5926:	2201      	movs	r2, #1
    5928:	2172      	movs	r1, #114	; 0x72
    592a:	4628      	mov	r0, r5
    592c:	4798      	blx	r3
		return err;
	}

	err = bme680_reg_write(dev, BME680_REG_CTRL_HUM, BME680_HUMIDITY_OVER);
	if (err < 0) {
    592e:	1e04      	subs	r4, r0, #0
    5930:	f2c0 8083 	blt.w	5a3a <bme680_init+0x15e>
	const struct bme680_config *config = dev->config;
    5934:	686b      	ldr	r3, [r5, #4]
	return config->bus_io->write(dev, reg, val);
    5936:	689b      	ldr	r3, [r3, #8]
    5938:	689b      	ldr	r3, [r3, #8]
    593a:	2200      	movs	r2, #0
    593c:	2175      	movs	r1, #117	; 0x75
    593e:	4628      	mov	r0, r5
    5940:	4798      	blx	r3
		return err;
	}

	err = bme680_reg_write(dev, BME680_REG_CONFIG, BME680_CONFIG_VAL);
	if (err < 0) {
    5942:	1e04      	subs	r4, r0, #0
    5944:	db79      	blt.n	5a3a <bme680_init+0x15e>
	const struct bme680_config *config = dev->config;
    5946:	686b      	ldr	r3, [r5, #4]
	return config->bus_io->write(dev, reg, val);
    5948:	689b      	ldr	r3, [r3, #8]
    594a:	689b      	ldr	r3, [r3, #8]
    594c:	2210      	movs	r2, #16
    594e:	2171      	movs	r1, #113	; 0x71
    5950:	4628      	mov	r0, r5
    5952:	4798      	blx	r3
		return err;
	}

	err = bme680_reg_write(dev, BME680_REG_CTRL_GAS_1,
			       BME680_CTRL_GAS_1_VAL);
	if (err < 0) {
    5954:	1e04      	subs	r4, r0, #0
    5956:	db70      	blt.n	5a3a <bme680_init+0x15e>
		return err;
	}

	err = bme680_reg_write(dev, BME680_REG_RES_HEAT0,
    5958:	f44f 71a0 	mov.w	r1, #320	; 0x140
    595c:	4630      	mov	r0, r6
    595e:	f7ff ff0b 	bl	5778 <bme680_calc_res_heat>
    5962:	4602      	mov	r2, r0
	const struct bme680_config *config = dev->config;
    5964:	686b      	ldr	r3, [r5, #4]
	return config->bus_io->write(dev, reg, val);
    5966:	689b      	ldr	r3, [r3, #8]
    5968:	689b      	ldr	r3, [r3, #8]
    596a:	215a      	movs	r1, #90	; 0x5a
    596c:	4628      	mov	r0, r5
    596e:	4798      	blx	r3
			       bme680_calc_res_heat(data, BME680_HEATR_TEMP));
	if (err < 0) {
    5970:	1e04      	subs	r4, r0, #0
    5972:	db62      	blt.n	5a3a <bme680_init+0x15e>
		return err;
	}

	err = bme680_reg_write(dev, BME680_REG_GAS_WAIT0,
    5974:	20c5      	movs	r0, #197	; 0xc5
    5976:	f005 f8e2 	bl	ab3e <bme680_calc_gas_wait>
    597a:	4602      	mov	r2, r0
	const struct bme680_config *config = dev->config;
    597c:	686b      	ldr	r3, [r5, #4]
	return config->bus_io->write(dev, reg, val);
    597e:	689b      	ldr	r3, [r3, #8]
    5980:	689b      	ldr	r3, [r3, #8]
    5982:	2164      	movs	r1, #100	; 0x64
    5984:	4628      	mov	r0, r5
    5986:	4798      	blx	r3
			       bme680_calc_gas_wait(BME680_HEATR_DUR_MS));
	if (err < 0) {
    5988:	1e04      	subs	r4, r0, #0
    598a:	db56      	blt.n	5a3a <bme680_init+0x15e>
	const struct bme680_config *config = dev->config;
    598c:	686b      	ldr	r3, [r5, #4]
	return config->bus_io->write(dev, reg, val);
    598e:	689b      	ldr	r3, [r3, #8]
    5990:	689b      	ldr	r3, [r3, #8]
    5992:	2255      	movs	r2, #85	; 0x55
    5994:	2174      	movs	r1, #116	; 0x74
    5996:	4628      	mov	r0, r5
    5998:	4798      	blx	r3
    599a:	4604      	mov	r4, r0
	}

	err = bme680_reg_write(dev, BME680_REG_CTRL_MEAS,
			       BME680_CTRL_MEAS_VAL);

	return err;
    599c:	e04d      	b.n	5a3a <bme680_init+0x15e>
		LOG_ERR("Bus not ready for '%s'", dev->name);
    599e:	6829      	ldr	r1, [r5, #0]
    59a0:	466e      	mov	r6, sp
    59a2:	2300      	movs	r3, #0
    59a4:	713b      	strb	r3, [r7, #4]
    59a6:	2302      	movs	r3, #2
    59a8:	717b      	strb	r3, [r7, #5]
    59aa:	b088      	sub	sp, #32
    59ac:	466d      	mov	r5, sp
    59ae:	f115 0210 	adds.w	r2, r5, #16
    59b2:	d01b      	beq.n	59ec <bme680_init+0x110>
    59b4:	200e      	movs	r0, #14
    59b6:	b11a      	cbz	r2, 59c0 <bme680_init+0xe4>
    59b8:	2804      	cmp	r0, #4
    59ba:	dd01      	ble.n	59c0 <bme680_init+0xe4>
    59bc:	4b40      	ldr	r3, [pc, #256]	; (5ac0 <bme680_init+0x1e4>)
    59be:	616b      	str	r3, [r5, #20]
    59c0:	2300      	movs	r3, #0
    59c2:	703b      	strb	r3, [r7, #0]
    59c4:	2302      	movs	r3, #2
    59c6:	707b      	strb	r3, [r7, #1]
    59c8:	b19a      	cbz	r2, 59f2 <bme680_init+0x116>
    59ca:	2808      	cmp	r0, #8
    59cc:	dd00      	ble.n	59d0 <bme680_init+0xf4>
    59ce:	61a9      	str	r1, [r5, #24]
    59d0:	f105 031c 	add.w	r3, r5, #28
    59d4:	2100      	movs	r1, #0
    59d6:	2901      	cmp	r1, #1
    59d8:	d80b      	bhi.n	59f2 <bme680_init+0x116>
    59da:	f101 0c08 	add.w	ip, r1, #8
    59de:	44bc      	add	ip, r7
    59e0:	f81c cc08 	ldrb.w	ip, [ip, #-8]
    59e4:	f803 cb01 	strb.w	ip, [r3], #1
    59e8:	3101      	adds	r1, #1
    59ea:	e7f4      	b.n	59d6 <bme680_init+0xfa>
    59ec:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    59f0:	e7e1      	b.n	59b6 <bme680_init+0xda>
    59f2:	280d      	cmp	r0, #13
    59f4:	dd25      	ble.n	5a42 <bme680_init+0x166>
    59f6:	230e      	movs	r3, #14
    59f8:	b142      	cbz	r2, 5a0c <bme680_init+0x130>
    59fa:	2103      	movs	r1, #3
    59fc:	7139      	strb	r1, [r7, #4]
    59fe:	2100      	movs	r1, #0
    5a00:	7179      	strb	r1, [r7, #5]
    5a02:	71b9      	strb	r1, [r7, #6]
    5a04:	2101      	movs	r1, #1
    5a06:	71f9      	strb	r1, [r7, #7]
    5a08:	6878      	ldr	r0, [r7, #4]
    5a0a:	6128      	str	r0, [r5, #16]
    5a0c:	2100      	movs	r1, #0
    5a0e:	f36f 0100 	bfc	r1, #0, #1
    5a12:	f36f 0141 	bfc	r1, #1, #1
    5a16:	f36f 0182 	bfc	r1, #2, #1
    5a1a:	f36f 01c5 	bfc	r1, #3, #3
    5a1e:	2001      	movs	r0, #1
    5a20:	f360 1188 	bfi	r1, r0, #6, #3
    5a24:	f3c3 030a 	ubfx	r3, r3, #0, #11
    5a28:	f363 2153 	bfi	r1, r3, #9, #11
    5a2c:	f36f 511f 	bfc	r1, #20, #12
    5a30:	2300      	movs	r3, #0
    5a32:	4824      	ldr	r0, [pc, #144]	; (5ac4 <bme680_init+0x1e8>)
    5a34:	f7fd f816 	bl	2a64 <z_impl_z_log_msg_static_create>
    5a38:	46b5      	mov	sp, r6
}
    5a3a:	4620      	mov	r0, r4
    5a3c:	370c      	adds	r7, #12
    5a3e:	46bd      	mov	sp, r7
    5a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Bus not ready for '%s'", dev->name);
    5a42:	f06f 031b 	mvn.w	r3, #27
    5a46:	e7d7      	b.n	59f8 <bme680_init+0x11c>
		LOG_ERR("Bad BME680 chip id: 0x%x", data->chip_id);
    5a48:	466c      	mov	r4, sp
    5a4a:	b088      	sub	sp, #32
    5a4c:	4669      	mov	r1, sp
    5a4e:	f111 0210 	adds.w	r2, r1, #16
    5a52:	d02f      	beq.n	5ab4 <bme680_init+0x1d8>
    5a54:	200c      	movs	r0, #12
    5a56:	b13a      	cbz	r2, 5a68 <bme680_init+0x18c>
    5a58:	4605      	mov	r5, r0
    5a5a:	2804      	cmp	r0, #4
    5a5c:	dd01      	ble.n	5a62 <bme680_init+0x186>
    5a5e:	4e1a      	ldr	r6, [pc, #104]	; (5ac8 <bme680_init+0x1ec>)
    5a60:	614e      	str	r6, [r1, #20]
    5a62:	2d08      	cmp	r5, #8
    5a64:	dd00      	ble.n	5a68 <bme680_init+0x18c>
    5a66:	618b      	str	r3, [r1, #24]
    5a68:	280b      	cmp	r0, #11
    5a6a:	dd26      	ble.n	5aba <bme680_init+0x1de>
    5a6c:	230c      	movs	r3, #12
    5a6e:	b13a      	cbz	r2, 5a80 <bme680_init+0x1a4>
    5a70:	2003      	movs	r0, #3
    5a72:	7138      	strb	r0, [r7, #4]
    5a74:	2000      	movs	r0, #0
    5a76:	7178      	strb	r0, [r7, #5]
    5a78:	71b8      	strb	r0, [r7, #6]
    5a7a:	71f8      	strb	r0, [r7, #7]
    5a7c:	6878      	ldr	r0, [r7, #4]
    5a7e:	6108      	str	r0, [r1, #16]
    5a80:	2100      	movs	r1, #0
    5a82:	f36f 0100 	bfc	r1, #0, #1
    5a86:	f36f 0141 	bfc	r1, #1, #1
    5a8a:	f36f 0182 	bfc	r1, #2, #1
    5a8e:	f36f 01c5 	bfc	r1, #3, #3
    5a92:	2001      	movs	r0, #1
    5a94:	f360 1188 	bfi	r1, r0, #6, #3
    5a98:	f3c3 030a 	ubfx	r3, r3, #0, #11
    5a9c:	f363 2153 	bfi	r1, r3, #9, #11
    5aa0:	f36f 511f 	bfc	r1, #20, #12
    5aa4:	2300      	movs	r3, #0
    5aa6:	4807      	ldr	r0, [pc, #28]	; (5ac4 <bme680_init+0x1e8>)
    5aa8:	f7fc ffdc 	bl	2a64 <z_impl_z_log_msg_static_create>
    5aac:	46a5      	mov	sp, r4
		return -ENOTSUP;
    5aae:	f06f 0485 	mvn.w	r4, #133	; 0x85
    5ab2:	e7c2      	b.n	5a3a <bme680_init+0x15e>
		LOG_ERR("Bad BME680 chip id: 0x%x", data->chip_id);
    5ab4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    5ab8:	e7cd      	b.n	5a56 <bme680_init+0x17a>
    5aba:	f06f 031b 	mvn.w	r3, #27
    5abe:	e7d6      	b.n	5a6e <bme680_init+0x192>
    5ac0:	0000cf98 	.word	0x0000cf98
    5ac4:	0000c4b8 	.word	0x0000c4b8
    5ac8:	0000cfb0 	.word	0x0000cfb0

00005acc <lis3mdl_init>:
	.sample_fetch = lis3mdl_sample_fetch,
	.channel_get = lis3mdl_channel_get,
};

int lis3mdl_init(const struct device *dev)
{
    5acc:	b570      	push	{r4, r5, r6, lr}
    5ace:	b09c      	sub	sp, #112	; 0x70
    5ad0:	4606      	mov	r6, r0
	const struct lis3mdl_config *config = dev->config;
    5ad2:	6845      	ldr	r5, [r0, #4]
	uint8_t chip_cfg[6];
	uint8_t id, idx;

	if (!device_is_ready(config->i2c.bus)) {
    5ad4:	6828      	ldr	r0, [r5, #0]
    5ad6:	f006 f848 	bl	bb6a <z_device_is_ready>
    5ada:	b1c8      	cbz	r0, 5b10 <lis3mdl_init+0x44>
		LOG_ERR("I2C bus device not ready");
		return -ENODEV;
	}

	/* check chip ID */
	if (i2c_reg_read_byte_dt(&config->i2c, LIS3MDL_REG_WHO_AM_I, &id) < 0) {
    5adc:	f10d 0207 	add.w	r2, sp, #7
    5ae0:	210f      	movs	r1, #15
    5ae2:	4628      	mov	r0, r5
    5ae4:	f005 f9d9 	bl	ae9a <i2c_reg_read_byte_dt>
    5ae8:	2800      	cmp	r0, #0
    5aea:	db37      	blt.n	5b5c <lis3mdl_init+0x90>
		LOG_ERR("Failed to read chip ID.");
		return -EIO;
	}

	if (id != LIS3MDL_CHIP_ID) {
    5aec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5af0:	2b3d      	cmp	r3, #61	; 0x3d
    5af2:	d159      	bne.n	5ba8 <lis3mdl_init+0xdc>
		LOG_ERR("Invalid chip ID.");
		return -EINVAL;
	}

	/* check if CONFIG_LIS3MDL_ODR is valid */
	for (idx = 0U; idx < ARRAY_SIZE(lis3mdl_odr_strings); idx++) {
    5af4:	2400      	movs	r4, #0
    5af6:	2c0b      	cmp	r4, #11
    5af8:	d87c      	bhi.n	5bf4 <lis3mdl_init+0x128>
		if (!strcmp(lis3mdl_odr_strings[idx], CONFIG_LIS3MDL_ODR)) {
    5afa:	496c      	ldr	r1, [pc, #432]	; (5cac <lis3mdl_init+0x1e0>)
    5afc:	4b6c      	ldr	r3, [pc, #432]	; (5cb0 <lis3mdl_init+0x1e4>)
    5afe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    5b02:	f004 fcad 	bl	a460 <strcmp>
    5b06:	2800      	cmp	r0, #0
    5b08:	d074      	beq.n	5bf4 <lis3mdl_init+0x128>
	for (idx = 0U; idx < ARRAY_SIZE(lis3mdl_odr_strings); idx++) {
    5b0a:	3401      	adds	r4, #1
    5b0c:	b2e4      	uxtb	r4, r4
    5b0e:	e7f2      	b.n	5af6 <lis3mdl_init+0x2a>
		LOG_ERR("I2C bus device not ready");
    5b10:	4b68      	ldr	r3, [pc, #416]	; (5cb4 <lis3mdl_init+0x1e8>)
    5b12:	931b      	str	r3, [sp, #108]	; 0x6c
    5b14:	2302      	movs	r3, #2
    5b16:	f88d 3000 	strb.w	r3, [sp]
    5b1a:	2300      	movs	r3, #0
    5b1c:	f88d 3001 	strb.w	r3, [sp, #1]
    5b20:	f88d 3002 	strb.w	r3, [sp, #2]
    5b24:	f88d 3003 	strb.w	r3, [sp, #3]
    5b28:	9a00      	ldr	r2, [sp, #0]
    5b2a:	921a      	str	r2, [sp, #104]	; 0x68
    5b2c:	4619      	mov	r1, r3
    5b2e:	f363 0100 	bfi	r1, r3, #0, #1
    5b32:	f363 0141 	bfi	r1, r3, #1, #1
    5b36:	f363 0182 	bfi	r1, r3, #2, #1
    5b3a:	f363 01c5 	bfi	r1, r3, #3, #3
    5b3e:	2201      	movs	r2, #1
    5b40:	f362 1188 	bfi	r1, r2, #6, #3
    5b44:	2208      	movs	r2, #8
    5b46:	f362 2153 	bfi	r1, r2, #9, #11
    5b4a:	f363 511f 	bfi	r1, r3, #20, #12
    5b4e:	aa1a      	add	r2, sp, #104	; 0x68
    5b50:	4859      	ldr	r0, [pc, #356]	; (5cb8 <lis3mdl_init+0x1ec>)
    5b52:	f7fc ff87 	bl	2a64 <z_impl_z_log_msg_static_create>
		return -ENODEV;
    5b56:	f06f 0012 	mvn.w	r0, #18
    5b5a:	e076      	b.n	5c4a <lis3mdl_init+0x17e>
		LOG_ERR("Failed to read chip ID.");
    5b5c:	4b57      	ldr	r3, [pc, #348]	; (5cbc <lis3mdl_init+0x1f0>)
    5b5e:	9315      	str	r3, [sp, #84]	; 0x54
    5b60:	2302      	movs	r3, #2
    5b62:	f88d 3000 	strb.w	r3, [sp]
    5b66:	2300      	movs	r3, #0
    5b68:	f88d 3001 	strb.w	r3, [sp, #1]
    5b6c:	f88d 3002 	strb.w	r3, [sp, #2]
    5b70:	f88d 3003 	strb.w	r3, [sp, #3]
    5b74:	9a00      	ldr	r2, [sp, #0]
    5b76:	9214      	str	r2, [sp, #80]	; 0x50
    5b78:	4619      	mov	r1, r3
    5b7a:	f363 0100 	bfi	r1, r3, #0, #1
    5b7e:	f363 0141 	bfi	r1, r3, #1, #1
    5b82:	f363 0182 	bfi	r1, r3, #2, #1
    5b86:	f363 01c5 	bfi	r1, r3, #3, #3
    5b8a:	2201      	movs	r2, #1
    5b8c:	f362 1188 	bfi	r1, r2, #6, #3
    5b90:	2208      	movs	r2, #8
    5b92:	f362 2153 	bfi	r1, r2, #9, #11
    5b96:	f363 511f 	bfi	r1, r3, #20, #12
    5b9a:	aa14      	add	r2, sp, #80	; 0x50
    5b9c:	4846      	ldr	r0, [pc, #280]	; (5cb8 <lis3mdl_init+0x1ec>)
    5b9e:	f7fc ff61 	bl	2a64 <z_impl_z_log_msg_static_create>
		return -EIO;
    5ba2:	f06f 0004 	mvn.w	r0, #4
    5ba6:	e050      	b.n	5c4a <lis3mdl_init+0x17e>
		LOG_ERR("Invalid chip ID.");
    5ba8:	4b45      	ldr	r3, [pc, #276]	; (5cc0 <lis3mdl_init+0x1f4>)
    5baa:	930f      	str	r3, [sp, #60]	; 0x3c
    5bac:	2302      	movs	r3, #2
    5bae:	f88d 3000 	strb.w	r3, [sp]
    5bb2:	2300      	movs	r3, #0
    5bb4:	f88d 3001 	strb.w	r3, [sp, #1]
    5bb8:	f88d 3002 	strb.w	r3, [sp, #2]
    5bbc:	f88d 3003 	strb.w	r3, [sp, #3]
    5bc0:	9a00      	ldr	r2, [sp, #0]
    5bc2:	920e      	str	r2, [sp, #56]	; 0x38
    5bc4:	4619      	mov	r1, r3
    5bc6:	f363 0100 	bfi	r1, r3, #0, #1
    5bca:	f363 0141 	bfi	r1, r3, #1, #1
    5bce:	f363 0182 	bfi	r1, r3, #2, #1
    5bd2:	f363 01c5 	bfi	r1, r3, #3, #3
    5bd6:	2201      	movs	r2, #1
    5bd8:	f362 1188 	bfi	r1, r2, #6, #3
    5bdc:	2208      	movs	r2, #8
    5bde:	f362 2153 	bfi	r1, r2, #9, #11
    5be2:	f363 511f 	bfi	r1, r3, #20, #12
    5be6:	aa0e      	add	r2, sp, #56	; 0x38
    5be8:	4833      	ldr	r0, [pc, #204]	; (5cb8 <lis3mdl_init+0x1ec>)
    5bea:	f7fc ff3b 	bl	2a64 <z_impl_z_log_msg_static_create>
		return -EINVAL;
    5bee:	f06f 0015 	mvn.w	r0, #21
    5bf2:	e02a      	b.n	5c4a <lis3mdl_init+0x17e>
			break;
		}
	}

	if (idx == ARRAY_SIZE(lis3mdl_odr_strings)) {
    5bf4:	2c0c      	cmp	r4, #12
    5bf6:	d02a      	beq.n	5c4e <lis3mdl_init+0x182>
		LOG_ERR("Invalid ODR value.");
		return -EINVAL;
	}

	/* Configure sensor */
	chip_cfg[0] = LIS3MDL_REG_CTRL1;
    5bf8:	2320      	movs	r3, #32
    5bfa:	f88d 3008 	strb.w	r3, [sp, #8]
	chip_cfg[1] = LIS3MDL_TEMP_EN_MASK | lis3mdl_odr_bits[idx];
    5bfe:	4b31      	ldr	r3, [pc, #196]	; (5cc4 <lis3mdl_init+0x1f8>)
    5c00:	5d1b      	ldrb	r3, [r3, r4]
    5c02:	f063 027f 	orn	r2, r3, #127	; 0x7f
    5c06:	f88d 2009 	strb.w	r2, [sp, #9]
	chip_cfg[2] = LIS3MDL_FS_IDX << LIS3MDL_FS_SHIFT;
    5c0a:	2200      	movs	r2, #0
    5c0c:	f88d 200a 	strb.w	r2, [sp, #10]
	chip_cfg[3] = lis3mdl_odr_bits[idx] & LIS3MDL_FAST_ODR_MASK ?
		      LIS3MDL_MD_SINGLE : LIS3MDL_MD_CONTINUOUS;
    5c10:	f3c3 0240 	ubfx	r2, r3, #1, #1
	chip_cfg[3] = lis3mdl_odr_bits[idx] & LIS3MDL_FAST_ODR_MASK ?
    5c14:	f88d 200b 	strb.w	r2, [sp, #11]
	chip_cfg[4] = ((lis3mdl_odr_bits[idx] & LIS3MDL_OM_MASK) >>
    5c18:	095b      	lsrs	r3, r3, #5
		       LIS3MDL_OM_SHIFT) << LIS3MDL_OMZ_SHIFT;
    5c1a:	009b      	lsls	r3, r3, #2
    5c1c:	f003 030c 	and.w	r3, r3, #12
	chip_cfg[4] = ((lis3mdl_odr_bits[idx] & LIS3MDL_OM_MASK) >>
    5c20:	f88d 300c 	strb.w	r3, [sp, #12]
	chip_cfg[5] = LIS3MDL_BDU_EN;
    5c24:	2340      	movs	r3, #64	; 0x40
    5c26:	f88d 300d 	strb.w	r3, [sp, #13]
 * @return a value from i2c_write()
 */
static inline int i2c_write_dt(const struct i2c_dt_spec *spec,
			       const uint8_t *buf, uint32_t num_bytes)
{
	return i2c_write(spec->bus, buf, num_bytes, spec->addr);
    5c2a:	88ab      	ldrh	r3, [r5, #4]
    5c2c:	2206      	movs	r2, #6
    5c2e:	a902      	add	r1, sp, #8
    5c30:	6828      	ldr	r0, [r5, #0]
    5c32:	f005 f8fe 	bl	ae32 <i2c_write>

	if (i2c_write_dt(&config->i2c, chip_cfg, 6) < 0) {
    5c36:	2800      	cmp	r0, #0
    5c38:	db2f      	blt.n	5c9a <lis3mdl_init+0x1ce>
		LOG_DBG("Failed to configure chip.");
		return -EIO;
	}

#ifdef CONFIG_LIS3MDL_TRIGGER
	if (config->irq_gpio.port) {
    5c3a:	68ab      	ldr	r3, [r5, #8]
    5c3c:	b383      	cbz	r3, 5ca0 <lis3mdl_init+0x1d4>
		if (lis3mdl_init_interrupt(dev) < 0) {
    5c3e:	4630      	mov	r0, r6
    5c40:	f000 f844 	bl	5ccc <lis3mdl_init_interrupt>
    5c44:	2800      	cmp	r0, #0
    5c46:	db2d      	blt.n	5ca4 <lis3mdl_init+0x1d8>
			return -EIO;
		}
	}
#endif

	return 0;
    5c48:	2000      	movs	r0, #0
}
    5c4a:	b01c      	add	sp, #112	; 0x70
    5c4c:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("Invalid ODR value.");
    5c4e:	4b1e      	ldr	r3, [pc, #120]	; (5cc8 <lis3mdl_init+0x1fc>)
    5c50:	9309      	str	r3, [sp, #36]	; 0x24
    5c52:	2302      	movs	r3, #2
    5c54:	f88d 3000 	strb.w	r3, [sp]
    5c58:	2300      	movs	r3, #0
    5c5a:	f88d 3001 	strb.w	r3, [sp, #1]
    5c5e:	f88d 3002 	strb.w	r3, [sp, #2]
    5c62:	f88d 3003 	strb.w	r3, [sp, #3]
    5c66:	9a00      	ldr	r2, [sp, #0]
    5c68:	9208      	str	r2, [sp, #32]
    5c6a:	4619      	mov	r1, r3
    5c6c:	f363 0100 	bfi	r1, r3, #0, #1
    5c70:	f363 0141 	bfi	r1, r3, #1, #1
    5c74:	f363 0182 	bfi	r1, r3, #2, #1
    5c78:	f363 01c5 	bfi	r1, r3, #3, #3
    5c7c:	2201      	movs	r2, #1
    5c7e:	f362 1188 	bfi	r1, r2, #6, #3
    5c82:	2208      	movs	r2, #8
    5c84:	f362 2153 	bfi	r1, r2, #9, #11
    5c88:	f363 511f 	bfi	r1, r3, #20, #12
    5c8c:	aa08      	add	r2, sp, #32
    5c8e:	480a      	ldr	r0, [pc, #40]	; (5cb8 <lis3mdl_init+0x1ec>)
    5c90:	f7fc fee8 	bl	2a64 <z_impl_z_log_msg_static_create>
		return -EINVAL;
    5c94:	f06f 0015 	mvn.w	r0, #21
    5c98:	e7d7      	b.n	5c4a <lis3mdl_init+0x17e>
		return -EIO;
    5c9a:	f06f 0004 	mvn.w	r0, #4
    5c9e:	e7d4      	b.n	5c4a <lis3mdl_init+0x17e>
	return 0;
    5ca0:	2000      	movs	r0, #0
    5ca2:	e7d2      	b.n	5c4a <lis3mdl_init+0x17e>
			return -EIO;
    5ca4:	f06f 0004 	mvn.w	r0, #4
    5ca8:	e7cf      	b.n	5c4a <lis3mdl_init+0x17e>
    5caa:	bf00      	nop
    5cac:	0000d0d4 	.word	0x0000d0d4
    5cb0:	0000d150 	.word	0x0000d150
    5cb4:	0000d08c 	.word	0x0000d08c
    5cb8:	0000c490 	.word	0x0000c490
    5cbc:	0000d0a8 	.word	0x0000d0a8
    5cc0:	0000d0c0 	.word	0x0000d0c0
    5cc4:	0000d144 	.word	0x0000d144
    5cc8:	0000d0dc 	.word	0x0000d0dc

00005ccc <lis3mdl_init_interrupt>:
	lis3mdl_thread_cb(drv_data->dev);
}
#endif

int lis3mdl_init_interrupt(const struct device *dev)
{
    5ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5cce:	b089      	sub	sp, #36	; 0x24
    5cd0:	4604      	mov	r4, r0
	struct lis3mdl_data *drv_data = dev->data;
    5cd2:	6905      	ldr	r5, [r0, #16]
	const struct lis3mdl_config *config = dev->config;
    5cd4:	6846      	ldr	r6, [r0, #4]

	if (!device_is_ready(config->irq_gpio.port)) {
    5cd6:	68b0      	ldr	r0, [r6, #8]
    5cd8:	f005 ff47 	bl	bb6a <z_device_is_ready>
    5cdc:	b320      	cbz	r0, 5d28 <lis3mdl_init_interrupt+0x5c>
		LOG_ERR("GPIO device not ready");
		return -ENODEV;
	}

	gpio_pin_configure_dt(&config->irq_gpio, GPIO_INPUT);
    5cde:	f106 0708 	add.w	r7, r6, #8
    5ce2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    5ce6:	4638      	mov	r0, r7
    5ce8:	f005 f9fd 	bl	b0e6 <gpio_pin_configure_dt>

	gpio_init_callback(&drv_data->gpio_cb,
			   lis3mdl_gpio_callback,
			   BIT(config->irq_gpio.pin));
    5cec:	7b32      	ldrb	r2, [r6, #12]
    5cee:	2301      	movs	r3, #1
    5cf0:	4093      	lsls	r3, r2
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    5cf2:	4a23      	ldr	r2, [pc, #140]	; (5d80 <lis3mdl_init_interrupt+0xb4>)
    5cf4:	612a      	str	r2, [r5, #16]
	callback->pin_mask = pin_mask;
    5cf6:	616b      	str	r3, [r5, #20]

	if (gpio_add_callback(config->irq_gpio.port, &drv_data->gpio_cb) < 0) {
    5cf8:	f105 010c 	add.w	r1, r5, #12
    5cfc:	68b0      	ldr	r0, [r6, #8]
    5cfe:	f005 f9fd 	bl	b0fc <gpio_add_callback>
    5d02:	2800      	cmp	r0, #0
    5d04:	db36      	blt.n	5d74 <lis3mdl_init_interrupt+0xa8>
		LOG_DBG("Could not set gpio callback.");
		return -EIO;
	}

	/* clear data ready interrupt line by reading sample data */
	if (lis3mdl_sample_fetch(dev, SENSOR_CHAN_ALL) < 0) {
    5d06:	2139      	movs	r1, #57	; 0x39
    5d08:	4620      	mov	r0, r4
    5d0a:	f005 f958 	bl	afbe <lis3mdl_sample_fetch>
    5d0e:	2800      	cmp	r0, #0
    5d10:	db33      	blt.n	5d7a <lis3mdl_init_interrupt+0xae>
		LOG_DBG("Could not clear data ready interrupt line.");
		return -EIO;
	}

	drv_data->dev = dev;
    5d12:	60ac      	str	r4, [r5, #8]
			CONFIG_LIS3MDL_THREAD_STACK_SIZE,
			(k_thread_entry_t)lis3mdl_thread, drv_data,
			NULL, NULL, K_PRIO_COOP(CONFIG_LIS3MDL_THREAD_PRIORITY),
			0, K_NO_WAIT);
#elif defined(CONFIG_LIS3MDL_TRIGGER_GLOBAL_THREAD)
	drv_data->work.handler = lis3mdl_work_cb;
    5d14:	4b1b      	ldr	r3, [pc, #108]	; (5d84 <lis3mdl_init_interrupt+0xb8>)
    5d16:	626b      	str	r3, [r5, #36]	; 0x24
#endif

	gpio_pin_interrupt_configure_dt(&config->irq_gpio,
    5d18:	f04f 61b8 	mov.w	r1, #96468992	; 0x5c00000
    5d1c:	4638      	mov	r0, r7
    5d1e:	f005 f9b2 	bl	b086 <gpio_pin_interrupt_configure_dt>
					GPIO_INT_EDGE_TO_ACTIVE);

	return 0;
    5d22:	2000      	movs	r0, #0
}
    5d24:	b009      	add	sp, #36	; 0x24
    5d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("GPIO device not ready");
    5d28:	4b17      	ldr	r3, [pc, #92]	; (5d88 <lis3mdl_init_interrupt+0xbc>)
    5d2a:	9307      	str	r3, [sp, #28]
    5d2c:	2302      	movs	r3, #2
    5d2e:	f88d 3004 	strb.w	r3, [sp, #4]
    5d32:	2300      	movs	r3, #0
    5d34:	f88d 3005 	strb.w	r3, [sp, #5]
    5d38:	f88d 3006 	strb.w	r3, [sp, #6]
    5d3c:	f88d 3007 	strb.w	r3, [sp, #7]
    5d40:	9a01      	ldr	r2, [sp, #4]
    5d42:	9206      	str	r2, [sp, #24]
    5d44:	4619      	mov	r1, r3
    5d46:	f363 0100 	bfi	r1, r3, #0, #1
    5d4a:	f363 0141 	bfi	r1, r3, #1, #1
    5d4e:	f363 0182 	bfi	r1, r3, #2, #1
    5d52:	f363 01c5 	bfi	r1, r3, #3, #3
    5d56:	2201      	movs	r2, #1
    5d58:	f362 1188 	bfi	r1, r2, #6, #3
    5d5c:	2208      	movs	r2, #8
    5d5e:	f362 2153 	bfi	r1, r2, #9, #11
    5d62:	f363 511f 	bfi	r1, r3, #20, #12
    5d66:	aa06      	add	r2, sp, #24
    5d68:	4808      	ldr	r0, [pc, #32]	; (5d8c <lis3mdl_init_interrupt+0xc0>)
    5d6a:	f7fc fe7b 	bl	2a64 <z_impl_z_log_msg_static_create>
		return -ENODEV;
    5d6e:	f06f 0012 	mvn.w	r0, #18
    5d72:	e7d7      	b.n	5d24 <lis3mdl_init_interrupt+0x58>
		return -EIO;
    5d74:	f06f 0004 	mvn.w	r0, #4
    5d78:	e7d4      	b.n	5d24 <lis3mdl_init_interrupt+0x58>
		return -EIO;
    5d7a:	f06f 0004 	mvn.w	r0, #4
    5d7e:	e7d1      	b.n	5d24 <lis3mdl_init_interrupt+0x58>
    5d80:	0000b139 	.word	0x0000b139
    5d84:	0000b12d 	.word	0x0000b12d
    5d88:	0000d180 	.word	0x0000d180
    5d8c:	0000c490 	.word	0x0000c490

00005d90 <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    5d90:	4b01      	ldr	r3, [pc, #4]	; (5d98 <hfclk_on_callback+0x8>)
    5d92:	2201      	movs	r2, #1
    5d94:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
    5d96:	4770      	bx	lr
    5d98:	4000c000 	.word	0x4000c000

00005d9c <temp_nrf5_channel_get>:

static int temp_nrf5_channel_get(const struct device *dev,
				 enum sensor_channel chan,
				 struct sensor_value *val)
{
	struct temp_nrf5_data *data = dev->data;
    5d9c:	6903      	ldr	r3, [r0, #16]
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
    5d9e:	290c      	cmp	r1, #12
    5da0:	d110      	bne.n	5dc4 <temp_nrf5_channel_get+0x28>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    5da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5da4:	4909      	ldr	r1, [pc, #36]	; (5dcc <temp_nrf5_channel_get+0x30>)
    5da6:	fb01 f303 	mul.w	r3, r1, r3
	val->val1 = uval / 1000000;
    5daa:	4809      	ldr	r0, [pc, #36]	; (5dd0 <temp_nrf5_channel_get+0x34>)
    5dac:	fb80 1003 	smull	r1, r0, r0, r3
    5db0:	17d9      	asrs	r1, r3, #31
    5db2:	ebc1 41a0 	rsb	r1, r1, r0, asr #18
    5db6:	6011      	str	r1, [r2, #0]
	val->val2 = uval % 1000000;
    5db8:	4806      	ldr	r0, [pc, #24]	; (5dd4 <temp_nrf5_channel_get+0x38>)
    5dba:	fb00 3311 	mls	r3, r0, r1, r3
    5dbe:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
    5dc0:	2000      	movs	r0, #0
    5dc2:	4770      	bx	lr
		return -ENOTSUP;
    5dc4:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    5dc8:	4770      	bx	lr
    5dca:	bf00      	nop
    5dcc:	0003d090 	.word	0x0003d090
    5dd0:	431bde83 	.word	0x431bde83
    5dd4:	000f4240 	.word	0x000f4240

00005dd8 <temp_nrf5_sample_fetch>:
{
    5dd8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    5ddc:	b084      	sub	sp, #16
	struct temp_nrf5_data *data = dev->data;
    5dde:	6904      	ldr	r4, [r0, #16]
	if (data->clk_mgr == NULL) {
    5de0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5de2:	b37b      	cbz	r3, 5e44 <temp_nrf5_sample_fetch+0x6c>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
    5de4:	2939      	cmp	r1, #57	; 0x39
    5de6:	d001      	beq.n	5dec <temp_nrf5_sample_fetch+0x14>
    5de8:	290c      	cmp	r1, #12
    5dea:	d12e      	bne.n	5e4a <temp_nrf5_sample_fetch+0x72>
	k_mutex_lock(&data->mutex, K_FOREVER);
    5dec:	f104 0610 	add.w	r6, r4, #16
    5df0:	f04f 38ff 	mov.w	r8, #4294967295
    5df4:	f04f 39ff 	mov.w	r9, #4294967295
	return z_impl_k_mutex_lock(mutex, timeout);
    5df8:	4642      	mov	r2, r8
    5dfa:	464b      	mov	r3, r9
    5dfc:	4630      	mov	r0, r6
    5dfe:	f002 f849 	bl	7e94 <z_impl_k_mutex_lock>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
    5e02:	2500      	movs	r5, #0
    5e04:	9501      	str	r5, [sp, #4]
    5e06:	9502      	str	r5, [sp, #8]
    5e08:	9503      	str	r5, [sp, #12]
    5e0a:	4b11      	ldr	r3, [pc, #68]	; (5e50 <temp_nrf5_sample_fetch+0x78>)
    5e0c:	9301      	str	r3, [sp, #4]
    5e0e:	2303      	movs	r3, #3
    5e10:	9302      	str	r3, [sp, #8]
	r = onoff_request(data->clk_mgr, &cli);
    5e12:	4669      	mov	r1, sp
    5e14:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5e16:	f003 fa8d 	bl	9334 <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
    5e1a:	4642      	mov	r2, r8
    5e1c:	464b      	mov	r3, r9
    5e1e:	4620      	mov	r0, r4
    5e20:	f002 f91e 	bl	8060 <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
    5e24:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5e26:	f003 fae6 	bl	93f6 <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
    5e2a:	4b0a      	ldr	r3, [pc, #40]	; (5e54 <temp_nrf5_sample_fetch+0x7c>)
    5e2c:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
    5e30:	6262      	str	r2, [r4, #36]	; 0x24
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    5e32:	2201      	movs	r2, #1
    5e34:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
    5e36:	4630      	mov	r0, r6
    5e38:	f002 f8b0 	bl	7f9c <z_impl_k_mutex_unlock>
	return 0;
    5e3c:	4628      	mov	r0, r5
}
    5e3e:	b004      	add	sp, #16
    5e40:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
		return -EAGAIN;
    5e44:	f06f 000a 	mvn.w	r0, #10
    5e48:	e7f9      	b.n	5e3e <temp_nrf5_sample_fetch+0x66>
		return -ENOTSUP;
    5e4a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5e4e:	e7f6      	b.n	5e3e <temp_nrf5_sample_fetch+0x66>
    5e50:	00005d91 	.word	0x00005d91
    5e54:	4000c000 	.word	0x4000c000

00005e58 <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
    5e58:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
    5e5a:	6904      	ldr	r4, [r0, #16]

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    5e5c:	2000      	movs	r0, #0
    5e5e:	f7fe ff8f 	bl	4d80 <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
    5e62:	62a0      	str	r0, [r4, #40]	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
    5e64:	f04f 32ff 	mov.w	r2, #4294967295
    5e68:	2100      	movs	r1, #0
    5e6a:	4620      	mov	r0, r4
    5e6c:	f005 ff04 	bl	bc78 <z_impl_k_sem_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);
    5e70:	f104 0010 	add.w	r0, r4, #16
	return z_impl_k_mutex_init(mutex);
    5e74:	f005 fef9 	bl	bc6a <z_impl_k_mutex_init>

	IRQ_CONNECT(
    5e78:	2200      	movs	r2, #0
    5e7a:	2101      	movs	r1, #1
    5e7c:	200c      	movs	r0, #12
    5e7e:	f004 fa47 	bl	a310 <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
    5e82:	200c      	movs	r0, #12
    5e84:	f004 fa3f 	bl	a306 <arch_irq_enable>
    p_reg->INTENSET = mask;
    5e88:	4b02      	ldr	r3, [pc, #8]	; (5e94 <temp_nrf5_init+0x3c>)
    5e8a:	2201      	movs	r2, #1
    5e8c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
    5e90:	2000      	movs	r0, #0
    5e92:	bd10      	pop	{r4, pc}
    5e94:	4000c000 	.word	0x4000c000

00005e98 <temp_nrf5_isr>:
{
    5e98:	b508      	push	{r3, lr}
	struct temp_nrf5_data *data = dev->data;
    5e9a:	6900      	ldr	r0, [r0, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5e9c:	4b04      	ldr	r3, [pc, #16]	; (5eb0 <temp_nrf5_isr+0x18>)
    5e9e:	2200      	movs	r2, #0
    5ea0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5ea4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	z_impl_k_sem_give(sem);
    5ea8:	f002 f8b6 	bl	8018 <z_impl_k_sem_give>
}
    5eac:	bd08      	pop	{r3, pc}
    5eae:	bf00      	nop
    5eb0:	4000c000 	.word	0x4000c000

00005eb4 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    5eb4:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    5eb6:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    5eb8:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    5ebc:	d06f      	beq.n	5f9e <baudrate_set+0xea>
    5ebe:	d83a      	bhi.n	5f36 <baudrate_set+0x82>
    5ec0:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    5ec4:	d06e      	beq.n	5fa4 <baudrate_set+0xf0>
    5ec6:	d90a      	bls.n	5ede <baudrate_set+0x2a>
    5ec8:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    5ecc:	d075      	beq.n	5fba <baudrate_set+0x106>
    5ece:	d924      	bls.n	5f1a <baudrate_set+0x66>
    5ed0:	f647 2312 	movw	r3, #31250	; 0x7a12
    5ed4:	4299      	cmp	r1, r3
    5ed6:	d12b      	bne.n	5f30 <baudrate_set+0x7c>
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
#if defined(UARTE_BAUDRATE_BAUDRATE_Baud31250)
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    5ed8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    5edc:	e013      	b.n	5f06 <baudrate_set+0x52>
	switch (baudrate) {
    5ede:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    5ee2:	d061      	beq.n	5fa8 <baudrate_set+0xf4>
    5ee4:	d907      	bls.n	5ef6 <baudrate_set+0x42>
    5ee6:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    5eea:	d063      	beq.n	5fb4 <baudrate_set+0x100>
    5eec:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    5ef0:	d110      	bne.n	5f14 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    5ef2:	4b3c      	ldr	r3, [pc, #240]	; (5fe4 <baudrate_set+0x130>)
    5ef4:	e007      	b.n	5f06 <baudrate_set+0x52>
	switch (baudrate) {
    5ef6:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    5efa:	d058      	beq.n	5fae <baudrate_set+0xfa>
    5efc:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    5f00:	d105      	bne.n	5f0e <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    5f02:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    5f06:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    5f0a:	2000      	movs	r0, #0
    5f0c:	4770      	bx	lr
	switch (baudrate) {
    5f0e:	f06f 0015 	mvn.w	r0, #21
    5f12:	4770      	bx	lr
    5f14:	f06f 0015 	mvn.w	r0, #21
    5f18:	4770      	bx	lr
    5f1a:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    5f1e:	d04e      	beq.n	5fbe <baudrate_set+0x10a>
    5f20:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    5f24:	d101      	bne.n	5f2a <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    5f26:	4b30      	ldr	r3, [pc, #192]	; (5fe8 <baudrate_set+0x134>)
    5f28:	e7ed      	b.n	5f06 <baudrate_set+0x52>
	switch (baudrate) {
    5f2a:	f06f 0015 	mvn.w	r0, #21
    5f2e:	4770      	bx	lr
    5f30:	f06f 0015 	mvn.w	r0, #21
    5f34:	4770      	bx	lr
    5f36:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    5f3a:	d042      	beq.n	5fc2 <baudrate_set+0x10e>
    5f3c:	d909      	bls.n	5f52 <baudrate_set+0x9e>
    5f3e:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    5f42:	d046      	beq.n	5fd2 <baudrate_set+0x11e>
    5f44:	d91f      	bls.n	5f86 <baudrate_set+0xd2>
    5f46:	4b29      	ldr	r3, [pc, #164]	; (5fec <baudrate_set+0x138>)
    5f48:	4299      	cmp	r1, r3
    5f4a:	d148      	bne.n	5fde <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    5f4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5f50:	e7d9      	b.n	5f06 <baudrate_set+0x52>
	switch (baudrate) {
    5f52:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    5f56:	d037      	beq.n	5fc8 <baudrate_set+0x114>
    5f58:	d905      	bls.n	5f66 <baudrate_set+0xb2>
    5f5a:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    5f5e:	d10f      	bne.n	5f80 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    5f60:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    5f64:	e7cf      	b.n	5f06 <baudrate_set+0x52>
	switch (baudrate) {
    5f66:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    5f6a:	4299      	cmp	r1, r3
    5f6c:	d02e      	beq.n	5fcc <baudrate_set+0x118>
    5f6e:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    5f72:	d102      	bne.n	5f7a <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    5f74:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    5f78:	e7c5      	b.n	5f06 <baudrate_set+0x52>
	switch (baudrate) {
    5f7a:	f06f 0015 	mvn.w	r0, #21
    5f7e:	4770      	bx	lr
    5f80:	f06f 0015 	mvn.w	r0, #21
    5f84:	4770      	bx	lr
    5f86:	4b1a      	ldr	r3, [pc, #104]	; (5ff0 <baudrate_set+0x13c>)
    5f88:	4299      	cmp	r1, r3
    5f8a:	d025      	beq.n	5fd8 <baudrate_set+0x124>
    5f8c:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    5f90:	d102      	bne.n	5f98 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    5f92:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    5f96:	e7b6      	b.n	5f06 <baudrate_set+0x52>
	switch (baudrate) {
    5f98:	f06f 0015 	mvn.w	r0, #21
    5f9c:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    5f9e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    5fa2:	e7b0      	b.n	5f06 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    5fa4:	4b13      	ldr	r3, [pc, #76]	; (5ff4 <baudrate_set+0x140>)
    5fa6:	e7ae      	b.n	5f06 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    5fa8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    5fac:	e7ab      	b.n	5f06 <baudrate_set+0x52>
	switch (baudrate) {
    5fae:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    5fb2:	e7a8      	b.n	5f06 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    5fb4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    5fb8:	e7a5      	b.n	5f06 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    5fba:	4b0f      	ldr	r3, [pc, #60]	; (5ff8 <baudrate_set+0x144>)
    5fbc:	e7a3      	b.n	5f06 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    5fbe:	4b0f      	ldr	r3, [pc, #60]	; (5ffc <baudrate_set+0x148>)
    5fc0:	e7a1      	b.n	5f06 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    5fc2:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    5fc6:	e79e      	b.n	5f06 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    5fc8:	4b0d      	ldr	r3, [pc, #52]	; (6000 <baudrate_set+0x14c>)
    5fca:	e79c      	b.n	5f06 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    5fcc:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    5fd0:	e799      	b.n	5f06 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    5fd2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    5fd6:	e796      	b.n	5f06 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    5fd8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5fdc:	e793      	b.n	5f06 <baudrate_set+0x52>
	switch (baudrate) {
    5fde:	f06f 0015 	mvn.w	r0, #21
}
    5fe2:	4770      	bx	lr
    5fe4:	0013b000 	.word	0x0013b000
    5fe8:	004ea000 	.word	0x004ea000
    5fec:	000f4240 	.word	0x000f4240
    5ff0:	0003d090 	.word	0x0003d090
    5ff4:	00275000 	.word	0x00275000
    5ff8:	0075c000 	.word	0x0075c000
    5ffc:	003af000 	.word	0x003af000
    6000:	013a9000 	.word	0x013a9000

00006004 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    6004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6006:	4605      	mov	r5, r0
    6008:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
    600a:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    600c:	f005 fdd8 	bl	bbc0 <k_is_in_isr>
    6010:	b910      	cbnz	r0, 6018 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    6012:	4b12      	ldr	r3, [pc, #72]	; (605c <uarte_nrfx_poll_out+0x58>)
    6014:	781b      	ldrb	r3, [r3, #0]
    6016:	b983      	cbnz	r3, 603a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    6018:	f04f 0320 	mov.w	r3, #32
    601c:	f3ef 8411 	mrs	r4, BASEPRI
    6020:	f383 8812 	msr	BASEPRI_MAX, r3
    6024:	f3bf 8f6f 	isb	sy
	unsigned int key;

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    6028:	4628      	mov	r0, r5
    602a:	f005 f970 	bl	b30e <is_tx_ready>
    602e:	b940      	cbnz	r0, 6042 <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    6030:	f384 8811 	msr	BASEPRI, r4
    6034:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    6038:	e7ee      	b.n	6018 <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    603a:	4628      	mov	r0, r5
    603c:	f005 f9cc 	bl	b3d8 <wait_tx_ready>
    6040:	4604      	mov	r4, r0
	}

	*data->char_out = c;
    6042:	693b      	ldr	r3, [r7, #16]
    6044:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
    6046:	2201      	movs	r2, #1
    6048:	6939      	ldr	r1, [r7, #16]
    604a:	4628      	mov	r0, r5
    604c:	f005 f979 	bl	b342 <tx_start>
	__asm__ volatile(
    6050:	f384 8811 	msr	BASEPRI, r4
    6054:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    6058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    605a:	bf00      	nop
    605c:	20000fd5 	.word	0x20000fd5

00006060 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    6060:	b530      	push	{r4, r5, lr}
    6062:	b089      	sub	sp, #36	; 0x24
    6064:	4604      	mov	r4, r0
    6066:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    6068:	f101 0018 	add.w	r0, r1, #24
    606c:	f001 f888 	bl	7180 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    6070:	4b1d      	ldr	r3, [pc, #116]	; (60e8 <endtx_stoptx_ppi_init+0x88>)
    6072:	4298      	cmp	r0, r3
    6074:	d112      	bne.n	609c <endtx_stoptx_ppi_init+0x3c>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    6076:	7e2b      	ldrb	r3, [r5, #24]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    6078:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    607c:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    607e:	4a1b      	ldr	r2, [pc, #108]	; (60ec <endtx_stoptx_ppi_init+0x8c>)
    6080:	33a2      	adds	r3, #162	; 0xa2
    6082:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    6086:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    608a:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    608c:	7e29      	ldrb	r1, [r5, #24]
    608e:	2301      	movs	r3, #1
    6090:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    6092:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    6096:	2000      	movs	r0, #0
}
    6098:	b009      	add	sp, #36	; 0x24
    609a:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
    609c:	4b14      	ldr	r3, [pc, #80]	; (60f0 <endtx_stoptx_ppi_init+0x90>)
    609e:	9307      	str	r3, [sp, #28]
    60a0:	2302      	movs	r3, #2
    60a2:	f88d 3004 	strb.w	r3, [sp, #4]
    60a6:	2300      	movs	r3, #0
    60a8:	f88d 3005 	strb.w	r3, [sp, #5]
    60ac:	f88d 3006 	strb.w	r3, [sp, #6]
    60b0:	f88d 3007 	strb.w	r3, [sp, #7]
    60b4:	9a01      	ldr	r2, [sp, #4]
    60b6:	9206      	str	r2, [sp, #24]
    60b8:	4619      	mov	r1, r3
    60ba:	f363 0100 	bfi	r1, r3, #0, #1
    60be:	f363 0141 	bfi	r1, r3, #1, #1
    60c2:	f363 0182 	bfi	r1, r3, #2, #1
    60c6:	f363 01c5 	bfi	r1, r3, #3, #3
    60ca:	2201      	movs	r2, #1
    60cc:	f362 1188 	bfi	r1, r2, #6, #3
    60d0:	2208      	movs	r2, #8
    60d2:	f362 2153 	bfi	r1, r2, #9, #11
    60d6:	f363 511f 	bfi	r1, r3, #20, #12
    60da:	aa06      	add	r2, sp, #24
    60dc:	4805      	ldr	r0, [pc, #20]	; (60f4 <endtx_stoptx_ppi_init+0x94>)
    60de:	f7fc fcc1 	bl	2a64 <z_impl_z_log_msg_static_create>
		return -EIO;
    60e2:	f06f 0004 	mvn.w	r0, #4
    60e6:	e7d7      	b.n	6098 <endtx_stoptx_ppi_init+0x38>
    60e8:	0bad0000 	.word	0x0bad0000
    60ec:	4001f000 	.word	0x4001f000
    60f0:	0000d1c8 	.word	0x0000d1c8
    60f4:	0000c528 	.word	0x0000c528

000060f8 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    60f8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    60fc:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    6100:	4b01      	ldr	r3, [pc, #4]	; (6108 <set_comparator+0x10>)
    6102:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    6106:	4770      	bx	lr
    6108:	40011000 	.word	0x40011000

0000610c <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    610c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6110:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    6112:	4a02      	ldr	r2, [pc, #8]	; (611c <event_enable+0x10>)
    6114:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    6118:	4770      	bx	lr
    611a:	bf00      	nop
    611c:	40011000 	.word	0x40011000

00006120 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6120:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6124:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    6126:	4a02      	ldr	r2, [pc, #8]	; (6130 <event_disable+0x10>)
    6128:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    612c:	4770      	bx	lr
    612e:	bf00      	nop
    6130:	40011000 	.word	0x40011000

00006134 <counter>:
     return p_reg->COUNTER;
    6134:	4b01      	ldr	r3, [pc, #4]	; (613c <counter+0x8>)
    6136:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    613a:	4770      	bx	lr
    613c:	40011000 	.word	0x40011000

00006140 <set_alarm>:
 * @param[in] chan A channel for which a new CC value is to be set.
 *
 * @param[in] req_cc Requested CC register value to be set.
 */
static void set_alarm(int32_t chan, uint32_t req_cc)
{
    6140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6144:	4606      	mov	r6, r0
    6146:	4688      	mov	r8, r1
	 * (however, even if such spurious event was generated, it would be
	 * properly filtered out in process_channel(), where the target time
	 * is checked).
	 * Clear also the event as it may already be generated at this point.
	 */
	event_disable(chan);
    6148:	f7ff ffea 	bl	6120 <event_disable>
	event_clear(chan);
    614c:	4630      	mov	r0, r6
    614e:	f005 f9ec 	bl	b52a <event_clear>
	uint32_t cc_val = req_cc;
    6152:	4645      	mov	r5, r8
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    6154:	2703      	movs	r7, #3
    6156:	e001      	b.n	615c <set_alarm+0x1c>
				} else {
					break;
				}
			}

			cc_val = now + cc_inc;
    6158:	193d      	adds	r5, r7, r4
			cc_inc++;
    615a:	3701      	adds	r7, #1
		set_comparator(chan, cc_val);
    615c:	4629      	mov	r1, r5
    615e:	4630      	mov	r0, r6
    6160:	f7ff ffca 	bl	60f8 <set_comparator>
		event_enable(chan);
    6164:	4630      	mov	r0, r6
    6166:	f7ff ffd1 	bl	610c <event_enable>
		now = counter();
    616a:	f7ff ffe3 	bl	6134 <counter>
    616e:	4604      	mov	r4, r0
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    6170:	1cc1      	adds	r1, r0, #3
    6172:	4628      	mov	r0, r5
    6174:	f005 f9c8 	bl	b508 <counter_sub>
    6178:	4b0b      	ldr	r3, [pc, #44]	; (61a8 <set_alarm+0x68>)
    617a:	4298      	cmp	r0, r3
    617c:	d911      	bls.n	61a2 <set_alarm+0x62>
			if (event_check(chan)) {
    617e:	4630      	mov	r0, r6
    6180:	f005 f9c6 	bl	b510 <event_check>
    6184:	2800      	cmp	r0, #0
    6186:	d0e7      	beq.n	6158 <set_alarm+0x18>
				now = counter();
    6188:	f7ff ffd4 	bl	6134 <counter>
    618c:	4604      	mov	r4, r0
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    618e:	4641      	mov	r1, r8
    6190:	f005 f9ba 	bl	b508 <counter_sub>
    6194:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6198:	d903      	bls.n	61a2 <set_alarm+0x62>
					event_clear(chan);
    619a:	4630      	mov	r0, r6
    619c:	f005 f9c5 	bl	b52a <event_clear>
    61a0:	e7da      	b.n	6158 <set_alarm+0x18>
		} else {
			break;
		}
	}
}
    61a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    61a6:	bf00      	nop
    61a8:	007ffffd 	.word	0x007ffffd

000061ac <int_event_disable_rtc>:
    p_reg->INTENCLR = mask;
    61ac:	4b03      	ldr	r3, [pc, #12]	; (61bc <int_event_disable_rtc+0x10>)
    61ae:	4a04      	ldr	r2, [pc, #16]	; (61c0 <int_event_disable_rtc+0x14>)
    61b0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    61b4:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	/* Reset interrupt enabling to expected reset values */
	nrf_rtc_int_disable(RTC, mask);

	/* Reset event routing enabling to expected reset values */
	nrf_rtc_event_disable(RTC, mask);
}
    61b8:	4770      	bx	lr
    61ba:	bf00      	nop
    61bc:	40011000 	.word	0x40011000
    61c0:	000f0003 	.word	0x000f0003

000061c4 <compare_int_lock>:
{
    61c4:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    61c6:	2301      	movs	r3, #1
    61c8:	4083      	lsls	r3, r0
    61ca:	ea6f 0c03 	mvn.w	ip, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    61ce:	4a0e      	ldr	r2, [pc, #56]	; (6208 <compare_int_lock+0x44>)
    61d0:	f3bf 8f5b 	dmb	ish
    61d4:	e852 1f00 	ldrex	r1, [r2]
    61d8:	ea01 0e0c 	and.w	lr, r1, ip
    61dc:	e842 e400 	strex	r4, lr, [r2]
    61e0:	2c00      	cmp	r4, #0
    61e2:	d1f7      	bne.n	61d4 <compare_int_lock+0x10>
    61e4:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    61e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    61ec:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    61ee:	4807      	ldr	r0, [pc, #28]	; (620c <compare_int_lock+0x48>)
    61f0:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    61f4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    61f8:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    61fc:	420b      	tst	r3, r1
}
    61fe:	bf14      	ite	ne
    6200:	2001      	movne	r0, #1
    6202:	2000      	moveq	r0, #0
    6204:	bd10      	pop	{r4, pc}
    6206:	bf00      	nop
    6208:	20000a84 	.word	0x20000a84
    620c:	40011000 	.word	0x40011000

00006210 <channel_processing_check_and_clear>:
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    6210:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6214:	4083      	lsls	r3, r0
    return p_reg->INTENSET & mask;
    6216:	4a14      	ldr	r2, [pc, #80]	; (6268 <channel_processing_check_and_clear+0x58>)
    6218:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    621c:	4213      	tst	r3, r2
    621e:	d101      	bne.n	6224 <channel_processing_check_and_clear+0x14>
	return false;
    6220:	2000      	movs	r0, #0
}
    6222:	4770      	bx	lr
{
    6224:	b510      	push	{r4, lr}
    6226:	4604      	mov	r4, r0
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    6228:	2301      	movs	r3, #1
    622a:	4083      	lsls	r3, r0
    622c:	43db      	mvns	r3, r3
    622e:	490f      	ldr	r1, [pc, #60]	; (626c <channel_processing_check_and_clear+0x5c>)
    6230:	f3bf 8f5b 	dmb	ish
    6234:	e851 2f00 	ldrex	r2, [r1]
    6238:	ea02 0003 	and.w	r0, r2, r3
    623c:	e841 0c00 	strex	ip, r0, [r1]
    6240:	f1bc 0f00 	cmp.w	ip, #0
    6244:	d1f6      	bne.n	6234 <channel_processing_check_and_clear+0x24>
    6246:	f3bf 8f5b 	dmb	ish
    624a:	fa22 f304 	lsr.w	r3, r2, r4
    624e:	f013 0f01 	tst.w	r3, #1
    6252:	d103      	bne.n	625c <channel_processing_check_and_clear+0x4c>
		    event_check(chan)) {
    6254:	4620      	mov	r0, r4
    6256:	f005 f95b 	bl	b510 <event_check>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    625a:	b118      	cbz	r0, 6264 <channel_processing_check_and_clear+0x54>
			event_clear(chan);
    625c:	4620      	mov	r0, r4
    625e:	f005 f964 	bl	b52a <event_clear>
			return true;
    6262:	2001      	movs	r0, #1
}
    6264:	bd10      	pop	{r4, pc}
    6266:	bf00      	nop
    6268:	40011000 	.word	0x40011000
    626c:	20000a80 	.word	0x20000a80

00006270 <compare_int_unlock>:
	if (key) {
    6270:	b901      	cbnz	r1, 6274 <compare_int_unlock+0x4>
}
    6272:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    6274:	2301      	movs	r3, #1
    6276:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6278:	4a11      	ldr	r2, [pc, #68]	; (62c0 <compare_int_unlock+0x50>)
    627a:	f3bf 8f5b 	dmb	ish
    627e:	e852 cf00 	ldrex	ip, [r2]
    6282:	ea4c 0c03 	orr.w	ip, ip, r3
    6286:	e842 c100 	strex	r1, ip, [r2]
    628a:	2900      	cmp	r1, #0
    628c:	d1f7      	bne.n	627e <compare_int_unlock+0xe>
    628e:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6292:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6296:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    6298:	4a0a      	ldr	r2, [pc, #40]	; (62c4 <compare_int_unlock+0x54>)
    629a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    629e:	f3bf 8f5b 	dmb	ish
    62a2:	4b09      	ldr	r3, [pc, #36]	; (62c8 <compare_int_unlock+0x58>)
    62a4:	681b      	ldr	r3, [r3, #0]
    62a6:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    62aa:	40c3      	lsrs	r3, r0
    62ac:	f013 0f01 	tst.w	r3, #1
    62b0:	d0df      	beq.n	6272 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    62b2:	4b06      	ldr	r3, [pc, #24]	; (62cc <compare_int_unlock+0x5c>)
    62b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    62b8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    62bc:	e7d9      	b.n	6272 <compare_int_unlock+0x2>
    62be:	bf00      	nop
    62c0:	20000a84 	.word	0x20000a84
    62c4:	40011000 	.word	0x40011000
    62c8:	20000a80 	.word	0x20000a80
    62cc:	e000e100 	.word	0xe000e100

000062d0 <sys_clock_timeout_handler>:
{
    62d0:	b538      	push	{r3, r4, r5, lr}
    62d2:	4614      	mov	r4, r2
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    62d4:	4610      	mov	r0, r2
    62d6:	4619      	mov	r1, r3
    62d8:	f005 f933 	bl	b542 <absolute_time_to_cc>
    62dc:	4602      	mov	r2, r0
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    62de:	490d      	ldr	r1, [pc, #52]	; (6314 <sys_clock_timeout_handler+0x44>)
    62e0:	680b      	ldr	r3, [r1, #0]
    62e2:	1ae0      	subs	r0, r4, r3
	last_count += dticks * CYC_PER_TICK;
    62e4:	181b      	adds	r3, r3, r0
    62e6:	684c      	ldr	r4, [r1, #4]
    62e8:	f144 0400 	adc.w	r4, r4, #0
    62ec:	600b      	str	r3, [r1, #0]
    62ee:	604c      	str	r4, [r1, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    62f0:	f5a2 1300 	sub.w	r3, r2, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    62f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    62f8:	d209      	bcs.n	630e <sys_clock_timeout_handler+0x3e>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    62fa:	4b07      	ldr	r3, [pc, #28]	; (6318 <sys_clock_timeout_handler+0x48>)
    62fc:	681b      	ldr	r3, [r3, #0]
    62fe:	0a19      	lsrs	r1, r3, #8
    6300:	061b      	lsls	r3, r3, #24
    6302:	18d4      	adds	r4, r2, r3
    6304:	f141 0500 	adc.w	r5, r1, #0
    6308:	4b04      	ldr	r3, [pc, #16]	; (631c <sys_clock_timeout_handler+0x4c>)
    630a:	e9c3 4500 	strd	r4, r5, [r3]
	sys_clock_announce(dticks);
    630e:	f002 fc8f 	bl	8c30 <sys_clock_announce>
}
    6312:	bd38      	pop	{r3, r4, r5, pc}
    6314:	20000650 	.word	0x20000650
    6318:	20000a88 	.word	0x20000a88
    631c:	20000658 	.word	0x20000658

00006320 <z_nrf_rtc_timer_read>:
{
    6320:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    6322:	4b0d      	ldr	r3, [pc, #52]	; (6358 <z_nrf_rtc_timer_read+0x38>)
    6324:	681c      	ldr	r4, [r3, #0]
    6326:	0a25      	lsrs	r5, r4, #8
    6328:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    632a:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    632e:	f7ff ff01 	bl	6134 <counter>
    6332:	4603      	mov	r3, r0
	val += cntr;
    6334:	1900      	adds	r0, r0, r4
    6336:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    633a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    633e:	d20a      	bcs.n	6356 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    6340:	4b06      	ldr	r3, [pc, #24]	; (635c <z_nrf_rtc_timer_read+0x3c>)
    6342:	e9d3 2300 	ldrd	r2, r3, [r3]
    6346:	4290      	cmp	r0, r2
    6348:	eb71 0303 	sbcs.w	r3, r1, r3
    634c:	d203      	bcs.n	6356 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    634e:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    6352:	f141 0100 	adc.w	r1, r1, #0
}
    6356:	bd38      	pop	{r3, r4, r5, pc}
    6358:	20000a88 	.word	0x20000a88
    635c:	20000658 	.word	0x20000658

00006360 <compare_set_nolocks>:
{
    6360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6362:	4606      	mov	r6, r0
    6364:	4614      	mov	r4, r2
    6366:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    6368:	4610      	mov	r0, r2
    636a:	4619      	mov	r1, r3
    636c:	f005 f8e9 	bl	b542 <absolute_time_to_cc>
    6370:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    6372:	f7ff ffd5 	bl	6320 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    6376:	42a0      	cmp	r0, r4
    6378:	eb71 0305 	sbcs.w	r3, r1, r5
    637c:	d215      	bcs.n	63aa <compare_set_nolocks+0x4a>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    637e:	1a20      	subs	r0, r4, r0
    6380:	eb65 0101 	sbc.w	r1, r5, r1
    6384:	4b17      	ldr	r3, [pc, #92]	; (63e4 <compare_set_nolocks+0x84>)
    6386:	4298      	cmp	r0, r3
    6388:	f171 0100 	sbcs.w	r1, r1, #0
    638c:	d227      	bcs.n	63de <compare_set_nolocks+0x7e>
		if (target_time != cc_data[chan].target_time) {
    638e:	4b16      	ldr	r3, [pc, #88]	; (63e8 <compare_set_nolocks+0x88>)
    6390:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    6394:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    6398:	42ab      	cmp	r3, r5
    639a:	bf08      	it	eq
    639c:	42a2      	cmpeq	r2, r4
    639e:	d012      	beq.n	63c6 <compare_set_nolocks+0x66>
			set_alarm(chan, cc_value);
    63a0:	4639      	mov	r1, r7
    63a2:	4630      	mov	r0, r6
    63a4:	f7ff fecc 	bl	6140 <set_alarm>
    63a8:	e00d      	b.n	63c6 <compare_set_nolocks+0x66>
		atomic_or(&force_isr_mask, BIT(chan));
    63aa:	2301      	movs	r3, #1
    63ac:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    63ae:	4a0f      	ldr	r2, [pc, #60]	; (63ec <compare_set_nolocks+0x8c>)
    63b0:	f3bf 8f5b 	dmb	ish
    63b4:	e852 0f00 	ldrex	r0, [r2]
    63b8:	4318      	orrs	r0, r3
    63ba:	e842 0100 	strex	r1, r0, [r2]
    63be:	2900      	cmp	r1, #0
    63c0:	d1f8      	bne.n	63b4 <compare_set_nolocks+0x54>
    63c2:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    63c6:	4b08      	ldr	r3, [pc, #32]	; (63e8 <compare_set_nolocks+0x88>)
    63c8:	0132      	lsls	r2, r6, #4
    63ca:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    63ce:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    63d2:	9906      	ldr	r1, [sp, #24]
    63d4:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    63d6:	9b07      	ldr	r3, [sp, #28]
    63d8:	6073      	str	r3, [r6, #4]
	return ret;
    63da:	2000      	movs	r0, #0
}
    63dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    63de:	f06f 0015 	mvn.w	r0, #21
    63e2:	e7fb      	b.n	63dc <compare_set_nolocks+0x7c>
    63e4:	00800001 	.word	0x00800001
    63e8:	20000640 	.word	0x20000640
    63ec:	20000a80 	.word	0x20000a80

000063f0 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    63f0:	b530      	push	{r4, r5, lr}
    63f2:	b083      	sub	sp, #12
			CLOCK_CONTROL_NRF_LF_START_NOWAIT :
			(IS_ENABLED(CONFIG_SYSTEM_CLOCK_WAIT_FOR_AVAILABILITY) ?
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	int_event_disable_rtc();
    63f4:	f7ff feda 	bl	61ac <int_event_disable_rtc>
    p_reg->PRESCALER = val;
    63f8:	2300      	movs	r3, #0
    63fa:	4a1d      	ldr	r2, [pc, #116]	; (6470 <sys_clock_driver_init+0x80>)
    63fc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    6400:	2b00      	cmp	r3, #0
    6402:	dd24      	ble.n	644e <sys_clock_driver_init+0x5e>
    p_reg->INTENSET = mask;
    6404:	4c1a      	ldr	r4, [pc, #104]	; (6470 <sys_clock_driver_init+0x80>)
    6406:	2502      	movs	r5, #2
    6408:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    640c:	4b19      	ldr	r3, [pc, #100]	; (6474 <sys_clock_driver_init+0x84>)
    640e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    6412:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    6416:	2200      	movs	r2, #0
    6418:	2101      	movs	r1, #1
    641a:	2011      	movs	r0, #17
    641c:	f003 ff78 	bl	a310 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    6420:	2011      	movs	r0, #17
    6422:	f003 ff70 	bl	a306 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    6426:	2301      	movs	r3, #1
    6428:	60a3      	str	r3, [r4, #8]
    642a:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    642c:	4a12      	ldr	r2, [pc, #72]	; (6478 <sys_clock_driver_init+0x88>)
    642e:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    6430:	2400      	movs	r4, #0
    6432:	9401      	str	r4, [sp, #4]
    6434:	4b11      	ldr	r3, [pc, #68]	; (647c <sys_clock_driver_init+0x8c>)
    6436:	9300      	str	r3, [sp, #0]
    6438:	4a11      	ldr	r2, [pc, #68]	; (6480 <sys_clock_driver_init+0x90>)
    643a:	2300      	movs	r3, #0
    643c:	4620      	mov	r0, r4
    643e:	f005 f891 	bl	b564 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    6442:	4628      	mov	r0, r5
    6444:	f7fe fca4 	bl	4d90 <z_nrf_clock_control_lf_on>

	return 0;
}
    6448:	4620      	mov	r0, r4
    644a:	b003      	add	sp, #12
    644c:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    644e:	4a0d      	ldr	r2, [pc, #52]	; (6484 <sys_clock_driver_init+0x94>)
    6450:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    6454:	f04f 30ff 	mov.w	r0, #4294967295
    6458:	f04f 31ff 	mov.w	r1, #4294967295
    645c:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6460:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6464:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    6466:	4902      	ldr	r1, [pc, #8]	; (6470 <sys_clock_driver_init+0x80>)
    6468:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    646c:	3301      	adds	r3, #1
    646e:	e7c7      	b.n	6400 <sys_clock_driver_init+0x10>
    6470:	40011000 	.word	0x40011000
    6474:	e000e100 	.word	0xe000e100
    6478:	20000a84 	.word	0x20000a84
    647c:	000062d1 	.word	0x000062d1
    6480:	007fffff 	.word	0x007fffff
    6484:	20000640 	.word	0x20000640

00006488 <process_channel>:
{
    6488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    648c:	b082      	sub	sp, #8
    648e:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    6490:	f7ff febe 	bl	6210 <channel_processing_check_and_clear>
    6494:	b910      	cbnz	r0, 649c <process_channel+0x14>
}
    6496:	b002      	add	sp, #8
    6498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    649c:	f7ff ff40 	bl	6320 <z_nrf_rtc_timer_read>
    64a0:	4682      	mov	sl, r0
    64a2:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
    64a4:	f005 f850 	bl	b548 <full_int_lock>
    64a8:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
    64aa:	4b15      	ldr	r3, [pc, #84]	; (6500 <process_channel+0x78>)
    64ac:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    64b0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    64b4:	45c2      	cmp	sl, r8
    64b6:	eb75 0509 	sbcs.w	r5, r5, r9
    64ba:	d20b      	bcs.n	64d4 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    64bc:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
    64be:	4630      	mov	r0, r6
    64c0:	f005 f84b 	bl	b55a <full_int_unlock>
		if (handler) {
    64c4:	2d00      	cmp	r5, #0
    64c6:	d0e6      	beq.n	6496 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    64c8:	9700      	str	r7, [sp, #0]
    64ca:	4642      	mov	r2, r8
    64cc:	464b      	mov	r3, r9
    64ce:	4620      	mov	r0, r4
    64d0:	47a8      	blx	r5
}
    64d2:	e7e0      	b.n	6496 <process_channel+0xe>
			handler = cc_data[chan].callback;
    64d4:	4a0a      	ldr	r2, [pc, #40]	; (6500 <process_channel+0x78>)
    64d6:	0123      	lsls	r3, r4, #4
    64d8:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    64dc:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
    64de:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    64e0:	2000      	movs	r0, #0
    64e2:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    64e4:	f04f 32ff 	mov.w	r2, #4294967295
    64e8:	f04f 33ff 	mov.w	r3, #4294967295
    64ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    64f0:	4620      	mov	r0, r4
    64f2:	f7ff fe15 	bl	6120 <event_disable>
			event_clear(chan);
    64f6:	4620      	mov	r0, r4
    64f8:	f005 f817 	bl	b52a <event_clear>
    64fc:	e7df      	b.n	64be <process_channel+0x36>
    64fe:	bf00      	nop
    6500:	20000640 	.word	0x20000640

00006504 <rtc_nrf_isr>:
{
    6504:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    6506:	4b0e      	ldr	r3, [pc, #56]	; (6540 <rtc_nrf_isr+0x3c>)
    6508:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    650c:	f013 0f02 	tst.w	r3, #2
    6510:	d00d      	beq.n	652e <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6512:	4b0b      	ldr	r3, [pc, #44]	; (6540 <rtc_nrf_isr+0x3c>)
    6514:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    6518:	b14b      	cbz	r3, 652e <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    651a:	4b09      	ldr	r3, [pc, #36]	; (6540 <rtc_nrf_isr+0x3c>)
    651c:	2200      	movs	r2, #0
    651e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    6522:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    6526:	4a07      	ldr	r2, [pc, #28]	; (6544 <rtc_nrf_isr+0x40>)
    6528:	6813      	ldr	r3, [r2, #0]
    652a:	3301      	adds	r3, #1
    652c:	6013      	str	r3, [r2, #0]
{
    652e:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    6530:	2c00      	cmp	r4, #0
    6532:	dd00      	ble.n	6536 <rtc_nrf_isr+0x32>
}
    6534:	bd10      	pop	{r4, pc}
		process_channel(chan);
    6536:	4620      	mov	r0, r4
    6538:	f7ff ffa6 	bl	6488 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    653c:	3401      	adds	r4, #1
    653e:	e7f7      	b.n	6530 <rtc_nrf_isr+0x2c>
    6540:	40011000 	.word	0x40011000
    6544:	20000a88 	.word	0x20000a88

00006548 <sys_clock_set_timeout>:
{
    6548:	b510      	push	{r4, lr}
    654a:	b082      	sub	sp, #8
	if (ticks == K_TICKS_FOREVER) {
    654c:	f1b0 3fff 	cmp.w	r0, #4294967295
    6550:	d006      	beq.n	6560 <sys_clock_set_timeout+0x18>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    6552:	2801      	cmp	r0, #1
    6554:	dd09      	ble.n	656a <sys_clock_set_timeout+0x22>
    6556:	4b15      	ldr	r3, [pc, #84]	; (65ac <sys_clock_set_timeout+0x64>)
    6558:	4298      	cmp	r0, r3
    655a:	dc24      	bgt.n	65a6 <sys_clock_set_timeout+0x5e>
    655c:	4604      	mov	r4, r0
    655e:	e005      	b.n	656c <sys_clock_set_timeout+0x24>
		sys_busy = false;
    6560:	4b13      	ldr	r3, [pc, #76]	; (65b0 <sys_clock_set_timeout+0x68>)
    6562:	2200      	movs	r2, #0
    6564:	701a      	strb	r2, [r3, #0]
		cyc = MAX_TICKS * CYC_PER_TICK;
    6566:	4c13      	ldr	r4, [pc, #76]	; (65b4 <sys_clock_set_timeout+0x6c>)
    6568:	e003      	b.n	6572 <sys_clock_set_timeout+0x2a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    656a:	2401      	movs	r4, #1
		sys_busy = true;
    656c:	4b10      	ldr	r3, [pc, #64]	; (65b0 <sys_clock_set_timeout+0x68>)
    656e:	2201      	movs	r2, #1
    6570:	701a      	strb	r2, [r3, #0]
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    6572:	f7ff fed5 	bl	6320 <z_nrf_rtc_timer_read>
    6576:	4b10      	ldr	r3, [pc, #64]	; (65b8 <sys_clock_set_timeout+0x70>)
    6578:	681a      	ldr	r2, [r3, #0]
    657a:	685b      	ldr	r3, [r3, #4]
    657c:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    657e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6582:	d300      	bcc.n	6586 <sys_clock_set_timeout+0x3e>
		cyc = 0;
    6584:	2400      	movs	r4, #0
	cyc += unannounced;
    6586:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    6588:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    658c:	d300      	bcc.n	6590 <sys_clock_set_timeout+0x48>
		cyc = MAX_CYCLES;
    658e:	4c09      	ldr	r4, [pc, #36]	; (65b4 <sys_clock_set_timeout+0x6c>)
	uint64_t target_time = cyc + last_count;
    6590:	2000      	movs	r0, #0
    6592:	1912      	adds	r2, r2, r4
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    6594:	9001      	str	r0, [sp, #4]
    6596:	4909      	ldr	r1, [pc, #36]	; (65bc <sys_clock_set_timeout+0x74>)
    6598:	9100      	str	r1, [sp, #0]
    659a:	f143 0300 	adc.w	r3, r3, #0
    659e:	f004 ffe1 	bl	b564 <compare_set>
}
    65a2:	b002      	add	sp, #8
    65a4:	bd10      	pop	{r4, pc}
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    65a6:	4c03      	ldr	r4, [pc, #12]	; (65b4 <sys_clock_set_timeout+0x6c>)
    65a8:	e7e0      	b.n	656c <sys_clock_set_timeout+0x24>
    65aa:	bf00      	nop
    65ac:	007ffffe 	.word	0x007ffffe
    65b0:	20000fd4 	.word	0x20000fd4
    65b4:	007fffff 	.word	0x007fffff
    65b8:	20000650 	.word	0x20000650
    65bc:	000062d1 	.word	0x000062d1

000065c0 <sys_clock_elapsed>:
{
    65c0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    65c2:	f7ff fead 	bl	6320 <z_nrf_rtc_timer_read>
    65c6:	4b02      	ldr	r3, [pc, #8]	; (65d0 <sys_clock_elapsed+0x10>)
    65c8:	681b      	ldr	r3, [r3, #0]
}
    65ca:	1ac0      	subs	r0, r0, r3
    65cc:	bd08      	pop	{r3, pc}
    65ce:	bf00      	nop
    65d0:	20000650 	.word	0x20000650

000065d4 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    65d4:	b510      	push	{r4, lr}
    65d6:	b088      	sub	sp, #32
	z_impl_log_panic();
    65d8:	f7fc f94c 	bl	2874 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    65dc:	4b13      	ldr	r3, [pc, #76]	; (662c <k_sys_fatal_error_handler+0x58>)
    65de:	9307      	str	r3, [sp, #28]
    65e0:	2302      	movs	r3, #2
    65e2:	f88d 3004 	strb.w	r3, [sp, #4]
    65e6:	2400      	movs	r4, #0
    65e8:	f88d 4005 	strb.w	r4, [sp, #5]
    65ec:	f88d 4006 	strb.w	r4, [sp, #6]
    65f0:	f88d 4007 	strb.w	r4, [sp, #7]
    65f4:	9b01      	ldr	r3, [sp, #4]
    65f6:	9306      	str	r3, [sp, #24]
    65f8:	4621      	mov	r1, r4
    65fa:	f364 0100 	bfi	r1, r4, #0, #1
    65fe:	f364 0141 	bfi	r1, r4, #1, #1
    6602:	f364 0182 	bfi	r1, r4, #2, #1
    6606:	f364 01c5 	bfi	r1, r4, #3, #3
    660a:	2301      	movs	r3, #1
    660c:	f363 1188 	bfi	r1, r3, #6, #3
    6610:	2308      	movs	r3, #8
    6612:	f363 2153 	bfi	r1, r3, #9, #11
    6616:	f364 511f 	bfi	r1, r4, #20, #12
    661a:	4623      	mov	r3, r4
    661c:	aa06      	add	r2, sp, #24
    661e:	4804      	ldr	r0, [pc, #16]	; (6630 <k_sys_fatal_error_handler+0x5c>)
    6620:	f7fc fa20 	bl	2a64 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
    6624:	4620      	mov	r0, r4
    6626:	f003 ff7a 	bl	a51e <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    662a:	bf00      	nop
    662c:	0000d250 	.word	0x0000d250
    6630:	0000c4d0 	.word	0x0000c4d0

00006634 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    6634:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    6638:	4905      	ldr	r1, [pc, #20]	; (6650 <__NVIC_SystemReset+0x1c>)
    663a:	68ca      	ldr	r2, [r1, #12]
    663c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    6640:	4b04      	ldr	r3, [pc, #16]	; (6654 <__NVIC_SystemReset+0x20>)
    6642:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    6644:	60cb      	str	r3, [r1, #12]
    6646:	f3bf 8f4f 	dsb	sy
    __NOP();
    664a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    664c:	e7fd      	b.n	664a <__NVIC_SystemReset+0x16>
    664e:	bf00      	nop
    6650:	e000ed00 	.word	0xe000ed00
    6654:	05fa0004 	.word	0x05fa0004

00006658 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    6658:	4b02      	ldr	r3, [pc, #8]	; (6664 <nvmc_wait+0xc>)
    665a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    665e:	2b00      	cmp	r3, #0
    6660:	d0fa      	beq.n	6658 <nvmc_wait>
}
    6662:	4770      	bx	lr
    6664:	4001e000 	.word	0x4001e000

00006668 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    6668:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    666a:	4b03      	ldr	r3, [pc, #12]	; (6678 <nvmc_config+0x10>)
    666c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    6670:	f7ff fff2 	bl	6658 <nvmc_wait>
}
    6674:	bd08      	pop	{r3, pc}
    6676:	bf00      	nop
    6678:	4001e000 	.word	0x4001e000

0000667c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    667c:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    667e:	f004 ff8e 	bl	b59e <nrf52_errata_36>
    6682:	b140      	cbz	r0, 6696 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    6684:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6688:	2200      	movs	r2, #0
    668a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    668e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    6692:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    6696:	f004 ff8c 	bl	b5b2 <nrf52_errata_66>
    669a:	2800      	cmp	r0, #0
    669c:	d046      	beq.n	672c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    669e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    66a2:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    66a6:	4b3a      	ldr	r3, [pc, #232]	; (6790 <SystemInit+0x114>)
    66a8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    66ac:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    66b0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    66b4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    66b8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    66bc:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    66c0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    66c4:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    66c8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    66cc:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    66d0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    66d4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    66d8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    66dc:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    66e0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    66e4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    66e8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    66ec:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    66f0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    66f4:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    66f8:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    66fc:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    6700:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    6704:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    6708:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    670c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    6710:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    6714:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    6718:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    671c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    6720:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    6724:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    6728:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    672c:	f004 ff4b 	bl	b5c6 <nrf52_errata_136>
    6730:	b160      	cbz	r0, 674c <SystemInit+0xd0>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    6732:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6736:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    673a:	f013 0f01 	tst.w	r3, #1
    673e:	d005      	beq.n	674c <SystemInit+0xd0>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    6740:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6744:	f06f 0201 	mvn.w	r2, #1
    6748:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    nrf52_handle_approtect();
    674c:	f004 ff54 	bl	b5f8 <nrf52_handle_approtect>

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    6750:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    6754:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    6758:	2b00      	cmp	r3, #0
    675a:	db06      	blt.n	676a <SystemInit+0xee>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    675c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    6760:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    6764:	2b00      	cmp	r3, #0
    6766:	db00      	blt.n	676a <SystemInit+0xee>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    6768:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    676a:	2001      	movs	r0, #1
    676c:	f7ff ff7c 	bl	6668 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    6770:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    6774:	2512      	movs	r5, #18
    6776:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    677a:	f7ff ff6d 	bl	6658 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    677e:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    6782:	f7ff ff69 	bl	6658 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    6786:	2000      	movs	r0, #0
    6788:	f7ff ff6e 	bl	6668 <nvmc_config>
            NVIC_SystemReset();
    678c:	f7ff ff52 	bl	6634 <__NVIC_SystemReset>
    6790:	4000c000 	.word	0x4000c000

00006794 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    6794:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    6796:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    6798:	fab4 f384 	clz	r3, r4
    679c:	f1c3 031f 	rsb	r3, r3, #31
    67a0:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    67a4:	2b00      	cmp	r3, #0
    67a6:	db16      	blt.n	67d6 <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    67a8:	2201      	movs	r2, #1
    67aa:	fa02 f303 	lsl.w	r3, r2, r3
    67ae:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    67b2:	f3bf 8f5b 	dmb	ish
    67b6:	e850 2f00 	ldrex	r2, [r0]
    67ba:	42a2      	cmp	r2, r4
    67bc:	d104      	bne.n	67c8 <nrfx_flag32_alloc+0x34>
    67be:	e840 3e00 	strex	lr, r3, [r0]
    67c2:	f1be 0f00 	cmp.w	lr, #0
    67c6:	d1f6      	bne.n	67b6 <nrfx_flag32_alloc+0x22>
    67c8:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    67cc:	d1e3      	bne.n	6796 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    67ce:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    67d2:	4802      	ldr	r0, [pc, #8]	; (67dc <nrfx_flag32_alloc+0x48>)
}
    67d4:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    67d6:	4802      	ldr	r0, [pc, #8]	; (67e0 <nrfx_flag32_alloc+0x4c>)
    67d8:	e7fc      	b.n	67d4 <nrfx_flag32_alloc+0x40>
    67da:	bf00      	nop
    67dc:	0bad0000 	.word	0x0bad0000
    67e0:	0bad0002 	.word	0x0bad0002

000067e4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    67e4:	6803      	ldr	r3, [r0, #0]
    67e6:	40cb      	lsrs	r3, r1
    67e8:	f013 0f01 	tst.w	r3, #1
    67ec:	d115      	bne.n	681a <nrfx_flag32_free+0x36>
{
    67ee:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    67f0:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    67f2:	2301      	movs	r3, #1
    67f4:	408b      	lsls	r3, r1
    67f6:	4313      	orrs	r3, r2
    67f8:	f3bf 8f5b 	dmb	ish
    67fc:	e850 cf00 	ldrex	ip, [r0]
    6800:	4594      	cmp	ip, r2
    6802:	d104      	bne.n	680e <nrfx_flag32_free+0x2a>
    6804:	e840 3e00 	strex	lr, r3, [r0]
    6808:	f1be 0f00 	cmp.w	lr, #0
    680c:	d1f6      	bne.n	67fc <nrfx_flag32_free+0x18>
    680e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    6812:	d1ed      	bne.n	67f0 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    6814:	4802      	ldr	r0, [pc, #8]	; (6820 <nrfx_flag32_free+0x3c>)
}
    6816:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    681a:	4802      	ldr	r0, [pc, #8]	; (6824 <nrfx_flag32_free+0x40>)
}
    681c:	4770      	bx	lr
    681e:	bf00      	nop
    6820:	0bad0000 	.word	0x0bad0000
    6824:	0bad0004 	.word	0x0bad0004

00006828 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    6828:	4b05      	ldr	r3, [pc, #20]	; (6840 <nrfx_clock_init+0x18>)
    682a:	791b      	ldrb	r3, [r3, #4]
    682c:	b92b      	cbnz	r3, 683a <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    682e:	4b04      	ldr	r3, [pc, #16]	; (6840 <nrfx_clock_init+0x18>)
    6830:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    6832:	2201      	movs	r2, #1
    6834:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    6836:	4803      	ldr	r0, [pc, #12]	; (6844 <nrfx_clock_init+0x1c>)
    6838:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    683a:	4803      	ldr	r0, [pc, #12]	; (6848 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    683c:	4770      	bx	lr
    683e:	bf00      	nop
    6840:	20000a8c 	.word	0x20000a8c
    6844:	0bad0000 	.word	0x0bad0000
    6848:	0bad000c 	.word	0x0bad000c

0000684c <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    684c:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    684e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6852:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    6856:	b163      	cbz	r3, 6872 <nrfx_power_clock_irq_handler+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6858:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    685c:	2000      	movs	r0, #0
    685e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    6862:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    6866:	2201      	movs	r2, #1
    6868:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    686c:	4b13      	ldr	r3, [pc, #76]	; (68bc <nrfx_power_clock_irq_handler+0x70>)
    686e:	681b      	ldr	r3, [r3, #0]
    6870:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6872:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6876:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    687a:	b19b      	cbz	r3, 68a4 <nrfx_power_clock_irq_handler+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    687c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6880:	2200      	movs	r2, #0
    6882:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    6886:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    688a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    688e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    6892:	f012 0f03 	tst.w	r2, #3
    6896:	d106      	bne.n	68a6 <nrfx_power_clock_irq_handler+0x5a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6898:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    689c:	2201      	movs	r2, #1
    689e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    68a2:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    68a4:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    68a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    68aa:	2202      	movs	r2, #2
    68ac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    68b0:	4b02      	ldr	r3, [pc, #8]	; (68bc <nrfx_power_clock_irq_handler+0x70>)
    68b2:	681b      	ldr	r3, [r3, #0]
    68b4:	2001      	movs	r0, #1
    68b6:	4798      	blx	r3
}
    68b8:	e7f4      	b.n	68a4 <nrfx_power_clock_irq_handler+0x58>
    68ba:	bf00      	nop
    68bc:	20000a8c 	.word	0x20000a8c

000068c0 <nrf_gpio_reconfigure>:
{
    68c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    68c2:	461c      	mov	r4, r3
    68c4:	9f05      	ldr	r7, [sp, #20]
    68c6:	9e06      	ldr	r6, [sp, #24]
    *p_pin = pin_number & 0x1F;
    68c8:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
    68cc:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    68ce:	2801      	cmp	r0, #1
    68d0:	d035      	beq.n	693e <nrf_gpio_reconfigure+0x7e>
        case 0: return NRF_P0;
    68d2:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    68d6:	f50c 73e0 	add.w	r3, ip, #448	; 0x1c0
    68da:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    68de:	b381      	cbz	r1, 6942 <nrf_gpio_reconfigure+0x82>
    68e0:	2001      	movs	r0, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    68e2:	b382      	cbz	r2, 6946 <nrf_gpio_reconfigure+0x86>
    68e4:	f04f 0e02 	mov.w	lr, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    68e8:	ea40 000e 	orr.w	r0, r0, lr
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    68ec:	b374      	cbz	r4, 694c <nrf_gpio_reconfigure+0x8c>
    68ee:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    68f2:	ea40 000e 	orr.w	r0, r0, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    68f6:	b367      	cbz	r7, 6952 <nrf_gpio_reconfigure+0x92>
    68f8:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    68fc:	ea40 000e 	orr.w	r0, r0, lr
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    6900:	b356      	cbz	r6, 6958 <nrf_gpio_reconfigure+0x98>
    6902:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    6906:	ea40 000e 	orr.w	r0, r0, lr
    cnf &= ~to_update;
    690a:	ea23 0000 	bic.w	r0, r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    690e:	b331      	cbz	r1, 695e <nrf_gpio_reconfigure+0x9e>
    6910:	780b      	ldrb	r3, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    6912:	b332      	cbz	r2, 6962 <nrf_gpio_reconfigure+0xa2>
    6914:	7812      	ldrb	r2, [r2, #0]
    6916:	0052      	lsls	r2, r2, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6918:	4313      	orrs	r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    691a:	b324      	cbz	r4, 6966 <nrf_gpio_reconfigure+0xa6>
    691c:	7822      	ldrb	r2, [r4, #0]
    691e:	0092      	lsls	r2, r2, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    6920:	4313      	orrs	r3, r2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    6922:	b317      	cbz	r7, 696a <nrf_gpio_reconfigure+0xaa>
    6924:	783a      	ldrb	r2, [r7, #0]
    6926:	0212      	lsls	r2, r2, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6928:	4313      	orrs	r3, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    692a:	b306      	cbz	r6, 696e <nrf_gpio_reconfigure+0xae>
    692c:	7832      	ldrb	r2, [r6, #0]
    692e:	0412      	lsls	r2, r2, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    6930:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6932:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    6934:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
    6938:	f845 302c 	str.w	r3, [r5, ip, lsl #2]
}
    693c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    693e:	4d0d      	ldr	r5, [pc, #52]	; (6974 <nrf_gpio_reconfigure+0xb4>)
    6940:	e7c9      	b.n	68d6 <nrf_gpio_reconfigure+0x16>
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    6942:	2000      	movs	r0, #0
    6944:	e7cd      	b.n	68e2 <nrf_gpio_reconfigure+0x22>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6946:	f04f 0e00 	mov.w	lr, #0
    694a:	e7cd      	b.n	68e8 <nrf_gpio_reconfigure+0x28>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    694c:	f04f 0e00 	mov.w	lr, #0
    6950:	e7cf      	b.n	68f2 <nrf_gpio_reconfigure+0x32>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    6952:	f04f 0e00 	mov.w	lr, #0
    6956:	e7d1      	b.n	68fc <nrf_gpio_reconfigure+0x3c>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    6958:	f04f 0e00 	mov.w	lr, #0
    695c:	e7d3      	b.n	6906 <nrf_gpio_reconfigure+0x46>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    695e:	2300      	movs	r3, #0
    6960:	e7d7      	b.n	6912 <nrf_gpio_reconfigure+0x52>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    6962:	2200      	movs	r2, #0
    6964:	e7d8      	b.n	6918 <nrf_gpio_reconfigure+0x58>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6966:	2200      	movs	r2, #0
    6968:	e7da      	b.n	6920 <nrf_gpio_reconfigure+0x60>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    696a:	2200      	movs	r2, #0
    696c:	e7dc      	b.n	6928 <nrf_gpio_reconfigure+0x68>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    696e:	2200      	movs	r2, #0
    6970:	e7de      	b.n	6930 <nrf_gpio_reconfigure+0x70>
    6972:	bf00      	nop
    6974:	50000300 	.word	0x50000300

00006978 <nrf_gpio_latches_read_and_clear>:
{
    6978:	b500      	push	{lr}
    697a:	b083      	sub	sp, #12
    697c:	4684      	mov	ip, r0
    697e:	468e      	mov	lr, r1
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    6980:	4b0d      	ldr	r3, [pc, #52]	; (69b8 <nrf_gpio_latches_read_and_clear+0x40>)
    6982:	e893 0003 	ldmia.w	r3, {r0, r1}
    6986:	ab02      	add	r3, sp, #8
    6988:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    698c:	4663      	mov	r3, ip
    698e:	e00b      	b.n	69a8 <nrf_gpio_latches_read_and_clear+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    6990:	a902      	add	r1, sp, #8
    6992:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    6996:	f851 1c08 	ldr.w	r1, [r1, #-8]
    699a:	f8d1 0520 	ldr.w	r0, [r1, #1312]	; 0x520
    699e:	f842 0b04 	str.w	r0, [r2], #4
        gpio_regs[i]->LATCH = *p_masks;
    69a2:	f8c1 0520 	str.w	r0, [r1, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    69a6:	3301      	adds	r3, #1
    69a8:	eb0c 000e 	add.w	r0, ip, lr
    69ac:	4298      	cmp	r0, r3
    69ae:	d8ef      	bhi.n	6990 <nrf_gpio_latches_read_and_clear+0x18>
}
    69b0:	b003      	add	sp, #12
    69b2:	f85d fb04 	ldr.w	pc, [sp], #4
    69b6:	bf00      	nop
    69b8:	0000c590 	.word	0x0000c590

000069bc <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    69bc:	3008      	adds	r0, #8
    69be:	4b03      	ldr	r3, [pc, #12]	; (69cc <pin_in_use+0x10>)
    69c0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    69c4:	f000 0001 	and.w	r0, r0, #1
    69c8:	4770      	bx	lr
    69ca:	bf00      	nop
    69cc:	20000064 	.word	0x20000064

000069d0 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    69d0:	3008      	adds	r0, #8
    69d2:	4b03      	ldr	r3, [pc, #12]	; (69e0 <pin_in_use_by_te+0x10>)
    69d4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    69d8:	f3c0 1040 	ubfx	r0, r0, #5, #1
    69dc:	4770      	bx	lr
    69de:	bf00      	nop
    69e0:	20000064 	.word	0x20000064

000069e4 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    69e4:	3008      	adds	r0, #8
    69e6:	4b04      	ldr	r3, [pc, #16]	; (69f8 <pin_has_trigger+0x14>)
    69e8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    69ec:	f010 001c 	ands.w	r0, r0, #28
    69f0:	bf18      	it	ne
    69f2:	2001      	movne	r0, #1
    69f4:	4770      	bx	lr
    69f6:	bf00      	nop
    69f8:	20000064 	.word	0x20000064

000069fc <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    69fc:	3008      	adds	r0, #8
    69fe:	4b03      	ldr	r3, [pc, #12]	; (6a0c <pin_is_output+0x10>)
    6a00:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    6a04:	f3c0 0040 	ubfx	r0, r0, #1, #1
    6a08:	4770      	bx	lr
    6a0a:	bf00      	nop
    6a0c:	20000064 	.word	0x20000064

00006a10 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6a10:	3008      	adds	r0, #8
    6a12:	4b02      	ldr	r3, [pc, #8]	; (6a1c <pin_te_get+0xc>)
    6a14:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    6a18:	0b40      	lsrs	r0, r0, #13
    6a1a:	4770      	bx	lr
    6a1c:	20000064 	.word	0x20000064

00006a20 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    6a20:	2200      	movs	r2, #0
    6a22:	e004      	b.n	6a2e <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    6a24:	f04f 33ff 	mov.w	r3, #4294967295
    6a28:	4283      	cmp	r3, r0
    6a2a:	d00f      	beq.n	6a4c <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    6a2c:	3201      	adds	r2, #1
    6a2e:	2a29      	cmp	r2, #41	; 0x29
    6a30:	d80a      	bhi.n	6a48 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    6a32:	f102 0308 	add.w	r3, r2, #8
    6a36:	4906      	ldr	r1, [pc, #24]	; (6a50 <handler_in_use+0x30>)
    6a38:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    6a3c:	f413 7f80 	tst.w	r3, #256	; 0x100
    6a40:	d0f0      	beq.n	6a24 <handler_in_use+0x4>
    6a42:	f3c3 2343 	ubfx	r3, r3, #9, #4
    6a46:	e7ef      	b.n	6a28 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    6a48:	2000      	movs	r0, #0
    6a4a:	4770      	bx	lr
            return true;
    6a4c:	2001      	movs	r0, #1
}
    6a4e:	4770      	bx	lr
    6a50:	20000064 	.word	0x20000064

00006a54 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    6a54:	2300      	movs	r3, #0
    6a56:	b113      	cbz	r3, 6a5e <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    6a58:	f04f 30ff 	mov.w	r0, #4294967295
}
    6a5c:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    6a5e:	4a07      	ldr	r2, [pc, #28]	; (6a7c <find_handler+0x28>)
    6a60:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    6a64:	4282      	cmp	r2, r0
    6a66:	d001      	beq.n	6a6c <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    6a68:	3301      	adds	r3, #1
    6a6a:	e7f4      	b.n	6a56 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    6a6c:	4a03      	ldr	r2, [pc, #12]	; (6a7c <find_handler+0x28>)
    6a6e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    6a72:	6852      	ldr	r2, [r2, #4]
    6a74:	428a      	cmp	r2, r1
    6a76:	d1f7      	bne.n	6a68 <find_handler+0x14>
            return i;
    6a78:	4618      	mov	r0, r3
    6a7a:	4770      	bx	lr
    6a7c:	20000064 	.word	0x20000064

00006a80 <get_initial_sense>:
    return NRFX_SUCCESS;
}

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6a80:	f100 0208 	add.w	r2, r0, #8
    6a84:	4b0f      	ldr	r3, [pc, #60]	; (6ac4 <get_initial_sense+0x44>)
    6a86:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    6a8a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    6a8e:	2b04      	cmp	r3, #4
    6a90:	d012      	beq.n	6ab8 <get_initial_sense+0x38>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    6a92:	2b05      	cmp	r3, #5
    6a94:	d012      	beq.n	6abc <get_initial_sense+0x3c>
    *p_pin = pin_number & 0x1F;
    6a96:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    6a9a:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6a9c:	2801      	cmp	r0, #1
    6a9e:	d009      	beq.n	6ab4 <get_initial_sense+0x34>
        case 0: return NRF_P0;
    6aa0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
    6aa4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6aa8:	40d3      	lsrs	r3, r2
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6aaa:	f013 0f01 	tst.w	r3, #1
    6aae:	d007      	beq.n	6ac0 <get_initial_sense+0x40>
    6ab0:	2003      	movs	r0, #3
    6ab2:	4770      	bx	lr
        case 1: return NRF_P1;
    6ab4:	4b04      	ldr	r3, [pc, #16]	; (6ac8 <get_initial_sense+0x48>)
    6ab6:	e7f5      	b.n	6aa4 <get_initial_sense+0x24>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    6ab8:	2003      	movs	r0, #3
    6aba:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    6abc:	2002      	movs	r0, #2
    6abe:	4770      	bx	lr
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6ac0:	2002      	movs	r0, #2
    }

    return sense;
}
    6ac2:	4770      	bx	lr
    6ac4:	20000064 	.word	0x20000064
    6ac8:	50000300 	.word	0x50000300

00006acc <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6acc:	3008      	adds	r0, #8
    6ace:	4b06      	ldr	r3, [pc, #24]	; (6ae8 <channel_handler_get+0x1c>)
    6ad0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    6ad4:	f410 7f80 	tst.w	r0, #256	; 0x100
    6ad8:	d004      	beq.n	6ae4 <channel_handler_get+0x18>
    6ada:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    6ade:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6ae2:	4770      	bx	lr
        return NULL;
    6ae4:	2000      	movs	r0, #0
}
    6ae6:	4770      	bx	lr
    6ae8:	20000064 	.word	0x20000064

00006aec <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    6aec:	b570      	push	{r4, r5, r6, lr}
    6aee:	4604      	mov	r4, r0
    6af0:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    6af2:	f7ff ffeb 	bl	6acc <channel_handler_get>

    if (handler)
    6af6:	b120      	cbz	r0, 6b02 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    6af8:	6806      	ldr	r6, [r0, #0]
    6afa:	6842      	ldr	r2, [r0, #4]
    6afc:	4629      	mov	r1, r5
    6afe:	4620      	mov	r0, r4
    6b00:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    6b02:	4b04      	ldr	r3, [pc, #16]	; (6b14 <call_handler+0x28>)
    6b04:	689b      	ldr	r3, [r3, #8]
    6b06:	b123      	cbz	r3, 6b12 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    6b08:	4a02      	ldr	r2, [pc, #8]	; (6b14 <call_handler+0x28>)
    6b0a:	68d2      	ldr	r2, [r2, #12]
    6b0c:	4629      	mov	r1, r5
    6b0e:	4620      	mov	r0, r4
    6b10:	4798      	blx	r3
    }
}
    6b12:	bd70      	pop	{r4, r5, r6, pc}
    6b14:	20000064 	.word	0x20000064

00006b18 <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
    6b18:	b570      	push	{r4, r5, r6, lr}
    6b1a:	4606      	mov	r6, r0
    6b1c:	460c      	mov	r4, r1
    6b1e:	4615      	mov	r5, r2
    if (is_level(trigger))
    6b20:	4608      	mov	r0, r1
    6b22:	f004 febf 	bl	b8a4 <is_level>
    6b26:	b960      	cbnz	r0, 6b42 <next_sense_cond_call_handler+0x2a>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6b28:	2d02      	cmp	r5, #2
    6b2a:	d028      	beq.n	6b7e <next_sense_cond_call_handler+0x66>
    6b2c:	2102      	movs	r1, #2

        nrf_gpio_cfg_sense_set(pin, next_sense);
    6b2e:	4630      	mov	r0, r6
    6b30:	f004 fe90 	bl	b854 <nrf_gpio_cfg_sense_set>

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    6b34:	2c03      	cmp	r4, #3
    6b36:	d026      	beq.n	6b86 <next_sense_cond_call_handler+0x6e>
    6b38:	2d02      	cmp	r5, #2
    6b3a:	d022      	beq.n	6b82 <next_sense_cond_call_handler+0x6a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    6b3c:	2d03      	cmp	r5, #3
    6b3e:	d027      	beq.n	6b90 <next_sense_cond_call_handler+0x78>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
    6b40:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    6b42:	4621      	mov	r1, r4
    6b44:	4630      	mov	r0, r6
    6b46:	f7ff ffd1 	bl	6aec <call_handler>
    *p_pin = pin_number & 0x1F;
    6b4a:	f006 031f 	and.w	r3, r6, #31
    return pin_number >> 5;
    6b4e:	0972      	lsrs	r2, r6, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6b50:	2a01      	cmp	r2, #1
    6b52:	d012      	beq.n	6b7a <next_sense_cond_call_handler+0x62>
        case 0: return NRF_P0;
    6b54:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6b58:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b60:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    6b64:	429d      	cmp	r5, r3
    6b66:	d1eb      	bne.n	6b40 <next_sense_cond_call_handler+0x28>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    6b68:	2100      	movs	r1, #0
    6b6a:	4630      	mov	r0, r6
    6b6c:	f004 fe72 	bl	b854 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    6b70:	4629      	mov	r1, r5
    6b72:	4630      	mov	r0, r6
    6b74:	f004 fe6e 	bl	b854 <nrf_gpio_cfg_sense_set>
    6b78:	e7e2      	b.n	6b40 <next_sense_cond_call_handler+0x28>
        case 1: return NRF_P1;
    6b7a:	4a07      	ldr	r2, [pc, #28]	; (6b98 <next_sense_cond_call_handler+0x80>)
    6b7c:	e7ec      	b.n	6b58 <next_sense_cond_call_handler+0x40>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6b7e:	2103      	movs	r1, #3
    6b80:	e7d5      	b.n	6b2e <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    6b82:	2c01      	cmp	r4, #1
    6b84:	d1da      	bne.n	6b3c <next_sense_cond_call_handler+0x24>
            call_handler(pin, trigger);
    6b86:	4621      	mov	r1, r4
    6b88:	4630      	mov	r0, r6
    6b8a:	f7ff ffaf 	bl	6aec <call_handler>
}
    6b8e:	e7d7      	b.n	6b40 <next_sense_cond_call_handler+0x28>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    6b90:	2c02      	cmp	r4, #2
    6b92:	d1d5      	bne.n	6b40 <next_sense_cond_call_handler+0x28>
    6b94:	e7f7      	b.n	6b86 <next_sense_cond_call_handler+0x6e>
    6b96:	bf00      	nop
    6b98:	50000300 	.word	0x50000300

00006b9c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6b9c:	f100 0208 	add.w	r2, r0, #8
    6ba0:	4b0e      	ldr	r3, [pc, #56]	; (6bdc <release_handler+0x40>)
    6ba2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    6ba6:	f413 7f80 	tst.w	r3, #256	; 0x100
    6baa:	d016      	beq.n	6bda <release_handler+0x3e>
{
    6bac:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6bae:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    6bb2:	4610      	mov	r0, r2
    6bb4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    6bb8:	4a08      	ldr	r2, [pc, #32]	; (6bdc <release_handler+0x40>)
    6bba:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    6bbe:	4620      	mov	r0, r4
    6bc0:	f7ff ff2e 	bl	6a20 <handler_in_use>
    6bc4:	b100      	cbz	r0, 6bc8 <release_handler+0x2c>
}
    6bc6:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    6bc8:	4804      	ldr	r0, [pc, #16]	; (6bdc <release_handler+0x40>)
    6bca:	2300      	movs	r3, #0
    6bcc:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    6bd0:	4621      	mov	r1, r4
    6bd2:	3068      	adds	r0, #104	; 0x68
    6bd4:	f7ff fe06 	bl	67e4 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    6bd8:	e7f5      	b.n	6bc6 <release_handler+0x2a>
    6bda:	4770      	bx	lr
    6bdc:	20000064 	.word	0x20000064

00006be0 <pin_handler_trigger_uninit>:
{
    6be0:	b510      	push	{r4, lr}
    6be2:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    6be4:	f7ff fef4 	bl	69d0 <pin_in_use_by_te>
    6be8:	b140      	cbz	r0, 6bfc <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    6bea:	4620      	mov	r0, r4
    6bec:	f7ff ff10 	bl	6a10 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    6bf0:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    6bf4:	4b06      	ldr	r3, [pc, #24]	; (6c10 <pin_handler_trigger_uninit+0x30>)
    6bf6:	2200      	movs	r2, #0
    6bf8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    6bfc:	4620      	mov	r0, r4
    6bfe:	f7ff ffcd 	bl	6b9c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    6c02:	3408      	adds	r4, #8
    6c04:	4b03      	ldr	r3, [pc, #12]	; (6c14 <pin_handler_trigger_uninit+0x34>)
    6c06:	2200      	movs	r2, #0
    6c08:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    6c0c:	bd10      	pop	{r4, pc}
    6c0e:	bf00      	nop
    6c10:	40006000 	.word	0x40006000
    6c14:	20000064 	.word	0x20000064

00006c18 <pin_handler_set>:
{
    6c18:	b570      	push	{r4, r5, r6, lr}
    6c1a:	b082      	sub	sp, #8
    6c1c:	4605      	mov	r5, r0
    6c1e:	460e      	mov	r6, r1
    6c20:	4614      	mov	r4, r2
    release_handler(pin);
    6c22:	f7ff ffbb 	bl	6b9c <release_handler>
    if (!handler)
    6c26:	b326      	cbz	r6, 6c72 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    6c28:	4621      	mov	r1, r4
    6c2a:	4630      	mov	r0, r6
    6c2c:	f7ff ff12 	bl	6a54 <find_handler>
    if (handler_id < 0)
    6c30:	1e03      	subs	r3, r0, #0
    6c32:	db13      	blt.n	6c5c <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    6c34:	4910      	ldr	r1, [pc, #64]	; (6c78 <pin_handler_set+0x60>)
    6c36:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    6c3a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    6c3e:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    6c40:	f105 0008 	add.w	r0, r5, #8
    6c44:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    6c48:	025b      	lsls	r3, r3, #9
    6c4a:	b29b      	uxth	r3, r3
    6c4c:	4313      	orrs	r3, r2
    6c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6c52:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
    6c56:	4809      	ldr	r0, [pc, #36]	; (6c7c <pin_handler_set+0x64>)
}
    6c58:	b002      	add	sp, #8
    6c5a:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    6c5c:	f10d 0107 	add.w	r1, sp, #7
    6c60:	4807      	ldr	r0, [pc, #28]	; (6c80 <pin_handler_set+0x68>)
    6c62:	f7ff fd97 	bl	6794 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    6c66:	4b05      	ldr	r3, [pc, #20]	; (6c7c <pin_handler_set+0x64>)
    6c68:	4298      	cmp	r0, r3
    6c6a:	d1f5      	bne.n	6c58 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    6c6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c70:	e7e0      	b.n	6c34 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    6c72:	4802      	ldr	r0, [pc, #8]	; (6c7c <pin_handler_set+0x64>)
    6c74:	e7f0      	b.n	6c58 <pin_handler_set+0x40>
    6c76:	bf00      	nop
    6c78:	20000064 	.word	0x20000064
    6c7c:	0bad0000 	.word	0x0bad0000
    6c80:	200000cc 	.word	0x200000cc

00006c84 <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
    6c84:	b570      	push	{r4, r5, r6, lr}
    6c86:	b082      	sub	sp, #8
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
    6c88:	466a      	mov	r2, sp
    6c8a:	2102      	movs	r1, #2
    6c8c:	2000      	movs	r0, #0
    6c8e:	f7ff fe73 	bl	6978 <nrf_gpio_latches_read_and_clear>
    6c92:	e040      	b.n	6d16 <port_event_handle+0x92>
    6c94:	4e22      	ldr	r6, [pc, #136]	; (6d20 <port_event_handle+0x9c>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6c96:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    6c9a:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
    6c9e:	f3c2 4201 	ubfx	r2, r2, #16, #2
    6ca2:	f7ff ff39 	bl	6b18 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    6ca6:	2301      	movs	r3, #1
    6ca8:	40ab      	lsls	r3, r5
    6caa:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
            while (latch[i])
    6cae:	ab02      	add	r3, sp, #8
    6cb0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    6cb4:	f853 0c08 	ldr.w	r0, [r3, #-8]
    6cb8:	b300      	cbz	r0, 6cfc <port_event_handle+0x78>
                uint32_t pin = NRF_CTZ(latch[i]);
    6cba:	fa90 f0a0 	rbit	r0, r0
    6cbe:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    6cc2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6cc6:	f100 0208 	add.w	r2, r0, #8
    6cca:	4b16      	ldr	r3, [pc, #88]	; (6d24 <port_event_handle+0xa0>)
    6ccc:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    6cd0:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    6cd4:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    6cd6:	f000 0607 	and.w	r6, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    6cda:	f81d 2005 	ldrb.w	r2, [sp, r5]
    6cde:	2301      	movs	r3, #1
    6ce0:	40b3      	lsls	r3, r6
    6ce2:	43db      	mvns	r3, r3
    6ce4:	b25b      	sxtb	r3, r3
    6ce6:	4013      	ands	r3, r2
    6ce8:	f80d 3005 	strb.w	r3, [sp, r5]
    *p_pin = pin_number & 0x1F;
    6cec:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
    6cf0:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6cf2:	2b01      	cmp	r3, #1
    6cf4:	d0ce      	beq.n	6c94 <port_event_handle+0x10>
        case 0: return NRF_P0;
    6cf6:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    6cfa:	e7cc      	b.n	6c96 <port_event_handle+0x12>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    6cfc:	3401      	adds	r4, #1
    6cfe:	2c01      	cmp	r4, #1
    6d00:	d9d5      	bls.n	6cae <port_event_handle+0x2a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6d02:	4b09      	ldr	r3, [pc, #36]	; (6d28 <port_event_handle+0xa4>)
    6d04:	2200      	movs	r2, #0
    6d06:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    6d0a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
    6d0e:	4668      	mov	r0, sp
    6d10:	f004 fdcd 	bl	b8ae <latch_pending_read_and_check>
    6d14:	b108      	cbz	r0, 6d1a <port_event_handle+0x96>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    6d16:	2400      	movs	r4, #0
    6d18:	e7f1      	b.n	6cfe <port_event_handle+0x7a>
}
    6d1a:	b002      	add	sp, #8
    6d1c:	bd70      	pop	{r4, r5, r6, pc}
    6d1e:	bf00      	nop
    6d20:	50000300 	.word	0x50000300
    6d24:	20000064 	.word	0x20000064
    6d28:	40006000 	.word	0x40006000

00006d2c <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    6d2c:	b538      	push	{r3, r4, r5, lr}
    6d2e:	4604      	mov	r4, r0
    while (mask)
    6d30:	e018      	b.n	6d64 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    6d32:	fa94 f3a4 	rbit	r3, r4
    6d36:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    6d3a:	2201      	movs	r2, #1
    6d3c:	409a      	lsls	r2, r3
    6d3e:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    6d42:	4a0a      	ldr	r2, [pc, #40]	; (6d6c <gpiote_evt_handle+0x40>)
    6d44:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    6d48:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    6d4c:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    6d50:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    6d54:	f3c0 4001 	ubfx	r0, r0, #16, #2
    6d58:	f004 fda2 	bl	b8a0 <gpiote_polarity_to_trigger>
    6d5c:	4601      	mov	r1, r0
    6d5e:	4628      	mov	r0, r5
    6d60:	f7ff fec4 	bl	6aec <call_handler>
    while (mask)
    6d64:	2c00      	cmp	r4, #0
    6d66:	d1e4      	bne.n	6d32 <gpiote_evt_handle+0x6>
    }
}
    6d68:	bd38      	pop	{r3, r4, r5, pc}
    6d6a:	bf00      	nop
    6d6c:	40006000 	.word	0x40006000

00006d70 <nrfx_gpiote_input_configure>:
{
    6d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d74:	b084      	sub	sp, #16
    6d76:	4604      	mov	r4, r0
    6d78:	4615      	mov	r5, r2
    6d7a:	461e      	mov	r6, r3
    if (p_input_config)
    6d7c:	b309      	cbz	r1, 6dc2 <nrfx_gpiote_input_configure+0x52>
    6d7e:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    6d80:	f004 fd78 	bl	b874 <pin_is_task_output>
    6d84:	2800      	cmp	r0, #0
    6d86:	d13f      	bne.n	6e08 <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    6d88:	2300      	movs	r3, #0
    6d8a:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    6d8e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    6d92:	9301      	str	r3, [sp, #4]
    6d94:	9300      	str	r3, [sp, #0]
    6d96:	463b      	mov	r3, r7
    6d98:	f10d 020f 	add.w	r2, sp, #15
    6d9c:	f10d 010e 	add.w	r1, sp, #14
    6da0:	4620      	mov	r0, r4
    6da2:	f7ff fd8d 	bl	68c0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    6da6:	4a38      	ldr	r2, [pc, #224]	; (6e88 <nrfx_gpiote_input_configure+0x118>)
    6da8:	f104 0108 	add.w	r1, r4, #8
    6dac:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    6db0:	f023 0302 	bic.w	r3, r3, #2
    6db4:	b29b      	uxth	r3, r3
    6db6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    6dba:	f043 0301 	orr.w	r3, r3, #1
    6dbe:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    6dc2:	b1bd      	cbz	r5, 6df4 <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    6dc4:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    6dc6:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    6dca:	4620      	mov	r0, r4
    6dcc:	f7ff fe16 	bl	69fc <pin_is_output>
    6dd0:	b1e0      	cbz	r0, 6e0c <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
    6dd2:	f1b8 0f00 	cmp.w	r8, #0
    6dd6:	d151      	bne.n	6e7c <nrfx_gpiote_input_configure+0x10c>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    6dd8:	4a2b      	ldr	r2, [pc, #172]	; (6e88 <nrfx_gpiote_input_configure+0x118>)
    6dda:	f104 0108 	add.w	r1, r4, #8
    6dde:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    6de2:	f023 031c 	bic.w	r3, r3, #28
    6de6:	b29b      	uxth	r3, r3
    6de8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    6dec:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    6df0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    6df4:	2e00      	cmp	r6, #0
    6df6:	d045      	beq.n	6e84 <nrfx_gpiote_input_configure+0x114>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    6df8:	6872      	ldr	r2, [r6, #4]
    6dfa:	6831      	ldr	r1, [r6, #0]
    6dfc:	4620      	mov	r0, r4
    6dfe:	f7ff ff0b 	bl	6c18 <pin_handler_set>
}
    6e02:	b004      	add	sp, #16
    6e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
    6e08:	4820      	ldr	r0, [pc, #128]	; (6e8c <nrfx_gpiote_input_configure+0x11c>)
    6e0a:	e7fa      	b.n	6e02 <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    6e0c:	4a1e      	ldr	r2, [pc, #120]	; (6e88 <nrfx_gpiote_input_configure+0x118>)
    6e0e:	f104 0108 	add.w	r1, r4, #8
    6e12:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    6e16:	f023 0320 	bic.w	r3, r3, #32
    6e1a:	04db      	lsls	r3, r3, #19
    6e1c:	0cdb      	lsrs	r3, r3, #19
    6e1e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    6e22:	f1b8 0f00 	cmp.w	r8, #0
    6e26:	d0d7      	beq.n	6dd8 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    6e28:	2f03      	cmp	r7, #3
    6e2a:	d829      	bhi.n	6e80 <nrfx_gpiote_input_configure+0x110>
                uint8_t ch = *p_trigger_config->p_in_channel;
    6e2c:	686b      	ldr	r3, [r5, #4]
    6e2e:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    6e30:	b937      	cbnz	r7, 6e40 <nrfx_gpiote_input_configure+0xd0>
    p_reg->CONFIG[idx] = 0;
    6e32:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    6e36:	4b16      	ldr	r3, [pc, #88]	; (6e90 <nrfx_gpiote_input_configure+0x120>)
    6e38:	2200      	movs	r2, #0
    6e3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
#endif
}
    6e3e:	e7cb      	b.n	6dd8 <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    6e40:	4638      	mov	r0, r7
    6e42:	f004 fd2e 	bl	b8a2 <gpiote_trigger_to_polarity>
    6e46:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6e48:	4811      	ldr	r0, [pc, #68]	; (6e90 <nrfx_gpiote_input_configure+0x120>)
    6e4a:	f505 71a2 	add.w	r1, r5, #324	; 0x144
    6e4e:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    6e52:	f022 0203 	bic.w	r2, r2, #3
    6e56:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
    6e5a:	4622      	mov	r2, r4
    6e5c:	4629      	mov	r1, r5
    6e5e:	f004 fcc1 	bl	b7e4 <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6e62:	4a09      	ldr	r2, [pc, #36]	; (6e88 <nrfx_gpiote_input_configure+0x118>)
    6e64:	f104 0108 	add.w	r1, r4, #8
    6e68:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    6e6c:	036d      	lsls	r5, r5, #13
    6e6e:	b2ad      	uxth	r5, r5
    6e70:	432b      	orrs	r3, r5
    6e72:	f043 0320 	orr.w	r3, r3, #32
    6e76:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    6e7a:	e7ad      	b.n	6dd8 <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
    6e7c:	4803      	ldr	r0, [pc, #12]	; (6e8c <nrfx_gpiote_input_configure+0x11c>)
    6e7e:	e7c0      	b.n	6e02 <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
    6e80:	4802      	ldr	r0, [pc, #8]	; (6e8c <nrfx_gpiote_input_configure+0x11c>)
    6e82:	e7be      	b.n	6e02 <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
    6e84:	4803      	ldr	r0, [pc, #12]	; (6e94 <nrfx_gpiote_input_configure+0x124>)
    6e86:	e7bc      	b.n	6e02 <nrfx_gpiote_input_configure+0x92>
    6e88:	20000064 	.word	0x20000064
    6e8c:	0bad0004 	.word	0x0bad0004
    6e90:	40006000 	.word	0x40006000
    6e94:	0bad0000 	.word	0x0bad0000

00006e98 <nrfx_gpiote_output_configure>:
{
    6e98:	b570      	push	{r4, r5, r6, lr}
    6e9a:	b084      	sub	sp, #16
    6e9c:	4604      	mov	r4, r0
    6e9e:	4615      	mov	r5, r2
    if (p_config)
    6ea0:	b329      	cbz	r1, 6eee <nrfx_gpiote_output_configure+0x56>
    6ea2:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    6ea4:	f004 fcf5 	bl	b892 <pin_is_input>
    6ea8:	b120      	cbz	r0, 6eb4 <nrfx_gpiote_output_configure+0x1c>
    6eaa:	4620      	mov	r0, r4
    6eac:	f7ff fd90 	bl	69d0 <pin_in_use_by_te>
    6eb0:	2800      	cmp	r0, #0
    6eb2:	d138      	bne.n	6f26 <nrfx_gpiote_output_configure+0x8e>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    6eb4:	4620      	mov	r0, r4
    6eb6:	f7ff fd95 	bl	69e4 <pin_has_trigger>
    6eba:	b110      	cbz	r0, 6ec2 <nrfx_gpiote_output_configure+0x2a>
    6ebc:	7873      	ldrb	r3, [r6, #1]
    6ebe:	2b01      	cmp	r3, #1
    6ec0:	d031      	beq.n	6f26 <nrfx_gpiote_output_configure+0x8e>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    6ec2:	2301      	movs	r3, #1
    6ec4:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    6ec8:	2300      	movs	r3, #0
    6eca:	9301      	str	r3, [sp, #4]
    6ecc:	9600      	str	r6, [sp, #0]
    6ece:	1cb3      	adds	r3, r6, #2
    6ed0:	1c72      	adds	r2, r6, #1
    6ed2:	f10d 010f 	add.w	r1, sp, #15
    6ed6:	4620      	mov	r0, r4
    6ed8:	f7ff fcf2 	bl	68c0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    6edc:	4a1f      	ldr	r2, [pc, #124]	; (6f5c <nrfx_gpiote_output_configure+0xc4>)
    6ede:	f104 0108 	add.w	r1, r4, #8
    6ee2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    6ee6:	f043 0303 	orr.w	r3, r3, #3
    6eea:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    6eee:	b385      	cbz	r5, 6f52 <nrfx_gpiote_output_configure+0xba>
        if (pin_is_input(pin))
    6ef0:	4620      	mov	r0, r4
    6ef2:	f004 fcce 	bl	b892 <pin_is_input>
    6ef6:	bb70      	cbnz	r0, 6f56 <nrfx_gpiote_output_configure+0xbe>
        uint32_t ch = p_task_config->task_ch;
    6ef8:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    6efa:	f506 72a2 	add.w	r2, r6, #324	; 0x144
    6efe:	4b18      	ldr	r3, [pc, #96]	; (6f60 <nrfx_gpiote_output_configure+0xc8>)
    6f00:	2100      	movs	r1, #0
    6f02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    6f06:	4a15      	ldr	r2, [pc, #84]	; (6f5c <nrfx_gpiote_output_configure+0xc4>)
    6f08:	f104 0108 	add.w	r1, r4, #8
    6f0c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    6f10:	f023 0320 	bic.w	r3, r3, #32
    6f14:	04db      	lsls	r3, r3, #19
    6f16:	0cdb      	lsrs	r3, r3, #19
    6f18:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    6f1c:	786b      	ldrb	r3, [r5, #1]
    6f1e:	b923      	cbnz	r3, 6f2a <nrfx_gpiote_output_configure+0x92>
    return NRFX_SUCCESS;
    6f20:	4810      	ldr	r0, [pc, #64]	; (6f64 <nrfx_gpiote_output_configure+0xcc>)
}
    6f22:	b004      	add	sp, #16
    6f24:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
    6f26:	4810      	ldr	r0, [pc, #64]	; (6f68 <nrfx_gpiote_output_configure+0xd0>)
    6f28:	e7fb      	b.n	6f22 <nrfx_gpiote_output_configure+0x8a>
                                      p_task_config->init_val);
    6f2a:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    6f2c:	9200      	str	r2, [sp, #0]
    6f2e:	4622      	mov	r2, r4
    6f30:	4631      	mov	r1, r6
    6f32:	480b      	ldr	r0, [pc, #44]	; (6f60 <nrfx_gpiote_output_configure+0xc8>)
    6f34:	f004 fc6f 	bl	b816 <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6f38:	4a08      	ldr	r2, [pc, #32]	; (6f5c <nrfx_gpiote_output_configure+0xc4>)
    6f3a:	3408      	adds	r4, #8
    6f3c:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    6f40:	0376      	lsls	r6, r6, #13
    6f42:	b2b6      	uxth	r6, r6
    6f44:	4333      	orrs	r3, r6
    6f46:	f043 0320 	orr.w	r3, r3, #32
    6f4a:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    6f4e:	4805      	ldr	r0, [pc, #20]	; (6f64 <nrfx_gpiote_output_configure+0xcc>)
    6f50:	e7e7      	b.n	6f22 <nrfx_gpiote_output_configure+0x8a>
    6f52:	4804      	ldr	r0, [pc, #16]	; (6f64 <nrfx_gpiote_output_configure+0xcc>)
    6f54:	e7e5      	b.n	6f22 <nrfx_gpiote_output_configure+0x8a>
            return NRFX_ERROR_INVALID_PARAM;
    6f56:	4804      	ldr	r0, [pc, #16]	; (6f68 <nrfx_gpiote_output_configure+0xd0>)
    6f58:	e7e3      	b.n	6f22 <nrfx_gpiote_output_configure+0x8a>
    6f5a:	bf00      	nop
    6f5c:	20000064 	.word	0x20000064
    6f60:	40006000 	.word	0x40006000
    6f64:	0bad0000 	.word	0x0bad0000
    6f68:	0bad0004 	.word	0x0bad0004

00006f6c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    6f6c:	4b01      	ldr	r3, [pc, #4]	; (6f74 <nrfx_gpiote_global_callback_set+0x8>)
    6f6e:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    6f70:	60d9      	str	r1, [r3, #12]
}
    6f72:	4770      	bx	lr
    6f74:	20000064 	.word	0x20000064

00006f78 <nrfx_gpiote_channel_get>:
{
    6f78:	b538      	push	{r3, r4, r5, lr}
    6f7a:	4604      	mov	r4, r0
    6f7c:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    6f7e:	f7ff fd27 	bl	69d0 <pin_in_use_by_te>
    6f82:	b140      	cbz	r0, 6f96 <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6f84:	f104 0008 	add.w	r0, r4, #8
    6f88:	4b04      	ldr	r3, [pc, #16]	; (6f9c <nrfx_gpiote_channel_get+0x24>)
    6f8a:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    6f8e:	0b5b      	lsrs	r3, r3, #13
    6f90:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    6f92:	4803      	ldr	r0, [pc, #12]	; (6fa0 <nrfx_gpiote_channel_get+0x28>)
}
    6f94:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    6f96:	4803      	ldr	r0, [pc, #12]	; (6fa4 <nrfx_gpiote_channel_get+0x2c>)
    6f98:	e7fc      	b.n	6f94 <nrfx_gpiote_channel_get+0x1c>
    6f9a:	bf00      	nop
    6f9c:	20000064 	.word	0x20000064
    6fa0:	0bad0000 	.word	0x0bad0000
    6fa4:	0bad0004 	.word	0x0bad0004

00006fa8 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    6fa8:	4b0f      	ldr	r3, [pc, #60]	; (6fe8 <nrfx_gpiote_init+0x40>)
    6faa:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
    6fae:	b10b      	cbz	r3, 6fb4 <nrfx_gpiote_init+0xc>
        return err_code;
    6fb0:	480e      	ldr	r0, [pc, #56]	; (6fec <nrfx_gpiote_init+0x44>)
}
    6fb2:	4770      	bx	lr
{
    6fb4:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    6fb6:	4c0e      	ldr	r4, [pc, #56]	; (6ff0 <nrfx_gpiote_init+0x48>)
    6fb8:	2254      	movs	r2, #84	; 0x54
    6fba:	2100      	movs	r1, #0
    6fbc:	4620      	mov	r0, r4
    6fbe:	f003 fa89 	bl	a4d4 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    6fc2:	2006      	movs	r0, #6
    6fc4:	f003 f99f 	bl	a306 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6fc8:	4b0a      	ldr	r3, [pc, #40]	; (6ff4 <nrfx_gpiote_init+0x4c>)
    6fca:	2200      	movs	r2, #0
    6fcc:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    6fd0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    6fd4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6fd8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    6fdc:	2301      	movs	r3, #1
    6fde:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    6fe2:	65a3      	str	r3, [r4, #88]	; 0x58
    return err_code;
    6fe4:	4804      	ldr	r0, [pc, #16]	; (6ff8 <nrfx_gpiote_init+0x50>)
}
    6fe6:	bd10      	pop	{r4, pc}
    6fe8:	20000064 	.word	0x20000064
    6fec:	0bad0005 	.word	0x0bad0005
    6ff0:	20000074 	.word	0x20000074
    6ff4:	40006000 	.word	0x40006000
    6ff8:	0bad0000 	.word	0x0bad0000

00006ffc <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    6ffc:	4b03      	ldr	r3, [pc, #12]	; (700c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    6ffe:	f893 006c 	ldrb.w	r0, [r3, #108]	; 0x6c
}
    7002:	3800      	subs	r0, #0
    7004:	bf18      	it	ne
    7006:	2001      	movne	r0, #1
    7008:	4770      	bx	lr
    700a:	bf00      	nop
    700c:	20000064 	.word	0x20000064

00007010 <nrfx_gpiote_channel_free>:
{
    7010:	b508      	push	{r3, lr}
    7012:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    7014:	4801      	ldr	r0, [pc, #4]	; (701c <nrfx_gpiote_channel_free+0xc>)
    7016:	f7ff fbe5 	bl	67e4 <nrfx_flag32_free>
}
    701a:	bd08      	pop	{r3, pc}
    701c:	200000c8 	.word	0x200000c8

00007020 <nrfx_gpiote_channel_alloc>:
{
    7020:	b508      	push	{r3, lr}
    7022:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    7024:	4801      	ldr	r0, [pc, #4]	; (702c <nrfx_gpiote_channel_alloc+0xc>)
    7026:	f7ff fbb5 	bl	6794 <nrfx_flag32_alloc>
}
    702a:	bd08      	pop	{r3, pc}
    702c:	200000c8 	.word	0x200000c8

00007030 <nrfx_gpiote_trigger_enable>:
{
    7030:	b538      	push	{r3, r4, r5, lr}
    7032:	4604      	mov	r4, r0
    7034:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    7036:	f7ff fccb 	bl	69d0 <pin_in_use_by_te>
    703a:	b300      	cbz	r0, 707e <nrfx_gpiote_trigger_enable+0x4e>
    703c:	4620      	mov	r0, r4
    703e:	f004 fc28 	bl	b892 <pin_is_input>
    7042:	b1e0      	cbz	r0, 707e <nrfx_gpiote_trigger_enable+0x4e>
        uint8_t ch = pin_te_get(pin);
    7044:	4620      	mov	r0, r4
    7046:	f7ff fce3 	bl	6a10 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    704a:	0083      	lsls	r3, r0, #2
    704c:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    7050:	b29b      	uxth	r3, r3
    7052:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7056:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    705a:	2200      	movs	r2, #0
    705c:	601a      	str	r2, [r3, #0]
    705e:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    7060:	4a0b      	ldr	r2, [pc, #44]	; (7090 <nrfx_gpiote_trigger_enable+0x60>)
    7062:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    7066:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    706a:	f043 0301 	orr.w	r3, r3, #1
    706e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    7072:	b15d      	cbz	r5, 708c <nrfx_gpiote_trigger_enable+0x5c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    7074:	2301      	movs	r3, #1
    7076:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    7078:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    707c:	e006      	b.n	708c <nrfx_gpiote_trigger_enable+0x5c>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    707e:	4620      	mov	r0, r4
    7080:	f7ff fcfe 	bl	6a80 <get_initial_sense>
    7084:	4601      	mov	r1, r0
    7086:	4620      	mov	r0, r4
    7088:	f004 fbe4 	bl	b854 <nrf_gpio_cfg_sense_set>
}
    708c:	bd38      	pop	{r3, r4, r5, pc}
    708e:	bf00      	nop
    7090:	40006000 	.word	0x40006000

00007094 <nrfx_gpiote_trigger_disable>:
{
    7094:	b510      	push	{r4, lr}
    7096:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    7098:	f7ff fc9a 	bl	69d0 <pin_in_use_by_te>
    709c:	b1a0      	cbz	r0, 70c8 <nrfx_gpiote_trigger_disable+0x34>
    709e:	4620      	mov	r0, r4
    70a0:	f004 fbf7 	bl	b892 <pin_is_input>
    70a4:	b180      	cbz	r0, 70c8 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    70a6:	4620      	mov	r0, r4
    70a8:	f7ff fcb2 	bl	6a10 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    70ac:	2201      	movs	r2, #1
    70ae:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    70b0:	4b08      	ldr	r3, [pc, #32]	; (70d4 <nrfx_gpiote_trigger_disable+0x40>)
    70b2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    70b6:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    70ba:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    70be:	f022 0203 	bic.w	r2, r2, #3
    70c2:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    70c6:	e003      	b.n	70d0 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    70c8:	2100      	movs	r1, #0
    70ca:	4620      	mov	r0, r4
    70cc:	f004 fbc2 	bl	b854 <nrf_gpio_cfg_sense_set>
}
    70d0:	bd10      	pop	{r4, pc}
    70d2:	bf00      	nop
    70d4:	40006000 	.word	0x40006000

000070d8 <nrfx_gpiote_pin_uninit>:
{
    70d8:	b510      	push	{r4, lr}
    70da:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    70dc:	f7ff fc6e 	bl	69bc <pin_in_use>
    70e0:	b908      	cbnz	r0, 70e6 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    70e2:	480c      	ldr	r0, [pc, #48]	; (7114 <nrfx_gpiote_pin_uninit+0x3c>)
}
    70e4:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    70e6:	4620      	mov	r0, r4
    70e8:	f7ff ffd4 	bl	7094 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    70ec:	4620      	mov	r0, r4
    70ee:	f7ff fd77 	bl	6be0 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
    70f2:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    70f6:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    70f8:	2c01      	cmp	r4, #1
    70fa:	d008      	beq.n	710e <nrfx_gpiote_pin_uninit+0x36>
        case 0: return NRF_P0;
    70fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    7100:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7104:	2102      	movs	r1, #2
    7106:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return NRFX_SUCCESS;
    710a:	4803      	ldr	r0, [pc, #12]	; (7118 <nrfx_gpiote_pin_uninit+0x40>)
    710c:	e7ea      	b.n	70e4 <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
    710e:	4a03      	ldr	r2, [pc, #12]	; (711c <nrfx_gpiote_pin_uninit+0x44>)
    7110:	e7f6      	b.n	7100 <nrfx_gpiote_pin_uninit+0x28>
    7112:	bf00      	nop
    7114:	0bad0004 	.word	0x0bad0004
    7118:	0bad0000 	.word	0x0bad0000
    711c:	50000300 	.word	0x50000300

00007120 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    7120:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    7122:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    7124:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7128:	2100      	movs	r1, #0
    uint32_t status = 0;
    712a:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    712c:	e003      	b.n	7136 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    712e:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    7130:	3304      	adds	r3, #4
    7132:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7134:	3101      	adds	r1, #1
    7136:	2907      	cmp	r1, #7
    7138:	d814      	bhi.n	7164 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    713a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    713e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    7142:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    7144:	2a00      	cmp	r2, #0
    7146:	d0f2      	beq.n	712e <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    7148:	4a0c      	ldr	r2, [pc, #48]	; (717c <nrfx_gpiote_irq_handler+0x5c>)
    714a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    714e:	4210      	tst	r0, r2
    7150:	d0ed      	beq.n	712e <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    7152:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    7156:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    715a:	2500      	movs	r5, #0
    715c:	6015      	str	r5, [r2, #0]
    715e:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    7160:	4304      	orrs	r4, r0
    7162:	e7e4      	b.n	712e <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7164:	4b05      	ldr	r3, [pc, #20]	; (717c <nrfx_gpiote_irq_handler+0x5c>)
    7166:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    716a:	b91b      	cbnz	r3, 7174 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    716c:	4620      	mov	r0, r4
    716e:	f7ff fddd 	bl	6d2c <gpiote_evt_handle>
}
    7172:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    7174:	f7ff fd86 	bl	6c84 <port_event_handle>
    7178:	e7f8      	b.n	716c <nrfx_gpiote_irq_handler+0x4c>
    717a:	bf00      	nop
    717c:	40006000 	.word	0x40006000

00007180 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    7180:	b508      	push	{r3, lr}
    7182:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    7184:	4801      	ldr	r0, [pc, #4]	; (718c <nrfx_ppi_channel_alloc+0xc>)
    7186:	f7ff fb05 	bl	6794 <nrfx_flag32_alloc>
}
    718a:	bd08      	pop	{r3, pc}
    718c:	200000d4 	.word	0x200000d4

00007190 <twi_process_error>:
} twi_control_block_t;

static twi_control_block_t m_cb[NRFX_TWI_ENABLED_COUNT];

static nrfx_err_t twi_process_error(uint32_t errorsrc)
{
    7190:	4603      	mov	r3, r0
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;

    if (errorsrc & NRF_TWI_ERROR_OVERRUN)
    7192:	f010 0f01 	tst.w	r0, #1
    7196:	d108      	bne.n	71aa <twi_process_error+0x1a>
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;
    7198:	4806      	ldr	r0, [pc, #24]	; (71b4 <twi_process_error+0x24>)
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    }

    if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
    719a:	f013 0f02 	tst.w	r3, #2
    719e:	d000      	beq.n	71a2 <twi_process_error+0x12>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    71a0:	4805      	ldr	r0, [pc, #20]	; (71b8 <twi_process_error+0x28>)
    }

    if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
    71a2:	f013 0f04 	tst.w	r3, #4
    71a6:	d102      	bne.n	71ae <twi_process_error+0x1e>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    }

    return ret;
}
    71a8:	4770      	bx	lr
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    71aa:	4804      	ldr	r0, [pc, #16]	; (71bc <twi_process_error+0x2c>)
    71ac:	e7f5      	b.n	719a <twi_process_error+0xa>
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    71ae:	4804      	ldr	r0, [pc, #16]	; (71c0 <twi_process_error+0x30>)
    return ret;
    71b0:	e7fa      	b.n	71a8 <twi_process_error+0x18>
    71b2:	bf00      	nop
    71b4:	0bad0001 	.word	0x0bad0001
    71b8:	0bae0001 	.word	0x0bae0001
    71bc:	0bae0000 	.word	0x0bae0000
    71c0:	0bae0002 	.word	0x0bae0002

000071c4 <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    71c4:	b530      	push	{r4, r5, lr}
    71c6:	b083      	sub	sp, #12
    71c8:	4604      	mov	r4, r0
    71ca:	460d      	mov	r5, r1
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    71cc:	4b29      	ldr	r3, [pc, #164]	; (7274 <twi_tx_start_transfer+0xb0>)
    71ce:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    71d0:	2300      	movs	r3, #0
    71d2:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    71d6:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    71da:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    71de:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    71e2:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    71e6:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    71ea:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    71ee:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
    71f2:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
    71f6:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    71f8:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    71fc:	2301      	movs	r3, #1
    71fe:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    7200:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
    7204:	2b01      	cmp	r3, #1
    7206:	d001      	beq.n	720c <twi_tx_start_transfer+0x48>
    7208:	2301      	movs	r3, #1
    720a:	6083      	str	r3, [r0, #8]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);
    720c:	4629      	mov	r1, r5
    720e:	4620      	mov	r0, r4
    7210:	f004 fb6e 	bl	b8f0 <twi_send_byte>

    if (p_cb->handler)
    7214:	682b      	ldr	r3, [r5, #0]
    7216:	b15b      	cbz	r3, 7230 <twi_tx_start_transfer+0x6c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    7218:	f240 2386 	movw	r3, #646	; 0x286
    721c:	60ab      	str	r3, [r5, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    721e:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    7220:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrfx_err_t ret_code = NRFX_SUCCESS;
    7224:	4814      	ldr	r0, [pc, #80]	; (7278 <twi_tx_start_transfer+0xb4>)
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
    7226:	b003      	add	sp, #12
    7228:	bd30      	pop	{r4, r5, pc}
            hw_timeout--;
    722a:	9b01      	ldr	r3, [sp, #4]
    722c:	3b01      	subs	r3, #1
    722e:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    7230:	9b01      	ldr	r3, [sp, #4]
    7232:	2b00      	cmp	r3, #0
    7234:	dd05      	ble.n	7242 <twi_tx_start_transfer+0x7e>
               twi_transfer(p_twi, p_cb))
    7236:	4629      	mov	r1, r5
    7238:	4620      	mov	r0, r4
    723a:	f004 fba8 	bl	b98e <twi_transfer>
        while ((hw_timeout > 0) &&
    723e:	2800      	cmp	r0, #0
    7240:	d1f3      	bne.n	722a <twi_tx_start_transfer+0x66>
        if (p_cb->error)
    7242:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    7246:	b13b      	cbz	r3, 7258 <twi_tx_start_transfer+0x94>
    uint32_t error_source = p_reg->ERRORSRC;
    7248:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    724c:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
            if (errorsrc)
    7250:	b170      	cbz	r0, 7270 <twi_tx_start_transfer+0xac>
                ret_code = twi_process_error(errorsrc);
    7252:	f7ff ff9d 	bl	7190 <twi_process_error>
    7256:	e000      	b.n	725a <twi_tx_start_transfer+0x96>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    7258:	4807      	ldr	r0, [pc, #28]	; (7278 <twi_tx_start_transfer+0xb4>)
        if (hw_timeout <= 0)
    725a:	9b01      	ldr	r3, [sp, #4]
    725c:	2b00      	cmp	r3, #0
    725e:	dce2      	bgt.n	7226 <twi_tx_start_transfer+0x62>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    7260:	2300      	movs	r3, #0
    7262:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    7266:	2305      	movs	r3, #5
    7268:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            ret_code = NRFX_ERROR_INTERNAL;
    726c:	4803      	ldr	r0, [pc, #12]	; (727c <twi_tx_start_transfer+0xb8>)
    return ret_code;
    726e:	e7da      	b.n	7226 <twi_tx_start_transfer+0x62>
                ret_code = NRFX_ERROR_INTERNAL;
    7270:	4802      	ldr	r0, [pc, #8]	; (727c <twi_tx_start_transfer+0xb8>)
    7272:	e7f2      	b.n	725a <twi_tx_start_transfer+0x96>
    7274:	000186a0 	.word	0x000186a0
    7278:	0bad0000 	.word	0x0bad0000
    727c:	0bad0001 	.word	0x0bad0001

00007280 <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    7280:	b530      	push	{r4, r5, lr}
    7282:	b083      	sub	sp, #12
    7284:	4604      	mov	r4, r0
    7286:	460d      	mov	r5, r1
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    7288:	4b2d      	ldr	r3, [pc, #180]	; (7340 <twi_rx_start_transfer+0xc0>)
    728a:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    728c:	2300      	movs	r3, #0
    728e:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    7292:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    7296:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    729a:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    729e:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    72a2:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    72a6:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    72aa:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
    72ae:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    72b0:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    72b4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    72b6:	2b01      	cmp	r3, #1
    72b8:	d015      	beq.n	72e6 <twi_rx_start_transfer+0x66>
    p_reg->SHORTS = mask;
    72ba:	2301      	movs	r3, #1
    72bc:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    72c0:	2301      	movs	r3, #1
    72c2:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
    72c4:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
    72c8:	2b02      	cmp	r3, #2
    72ca:	d001      	beq.n	72d0 <twi_rx_start_transfer+0x50>
    72cc:	2301      	movs	r3, #1
    72ce:	6023      	str	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
    72d0:	682b      	ldr	r3, [r5, #0]
    72d2:	b19b      	cbz	r3, 72fc <twi_rx_start_transfer+0x7c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    72d4:	f240 2386 	movw	r3, #646	; 0x286
    72d8:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    72da:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    72dc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrfx_err_t ret_code = NRFX_SUCCESS;
    72e0:	4818      	ldr	r0, [pc, #96]	; (7344 <twi_rx_start_transfer+0xc4>)
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
    72e2:	b003      	add	sp, #12
    72e4:	bd30      	pop	{r4, r5, pc}
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    72e6:	6a0b      	ldr	r3, [r1, #32]
    72e8:	f013 0f40 	tst.w	r3, #64	; 0x40
    72ec:	d1e5      	bne.n	72ba <twi_rx_start_transfer+0x3a>
    p_reg->SHORTS = mask;
    72ee:	2302      	movs	r3, #2
    72f0:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
    72f4:	e7e4      	b.n	72c0 <twi_rx_start_transfer+0x40>
               hw_timeout--;
    72f6:	9b01      	ldr	r3, [sp, #4]
    72f8:	3b01      	subs	r3, #1
    72fa:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    72fc:	9b01      	ldr	r3, [sp, #4]
    72fe:	2b00      	cmp	r3, #0
    7300:	dd05      	ble.n	730e <twi_rx_start_transfer+0x8e>
               twi_transfer(p_twi, p_cb))
    7302:	4629      	mov	r1, r5
    7304:	4620      	mov	r0, r4
    7306:	f004 fb42 	bl	b98e <twi_transfer>
        while ((hw_timeout > 0) &&
    730a:	2800      	cmp	r0, #0
    730c:	d1f3      	bne.n	72f6 <twi_rx_start_transfer+0x76>
        if (p_cb->error)
    730e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    7312:	b13b      	cbz	r3, 7324 <twi_rx_start_transfer+0xa4>
    uint32_t error_source = p_reg->ERRORSRC;
    7314:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    7318:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
            if (errorsrc)
    731c:	b170      	cbz	r0, 733c <twi_rx_start_transfer+0xbc>
                ret_code = twi_process_error(errorsrc);
    731e:	f7ff ff37 	bl	7190 <twi_process_error>
    7322:	e000      	b.n	7326 <twi_rx_start_transfer+0xa6>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    7324:	4807      	ldr	r0, [pc, #28]	; (7344 <twi_rx_start_transfer+0xc4>)
        if (hw_timeout <= 0)
    7326:	9b01      	ldr	r3, [sp, #4]
    7328:	2b00      	cmp	r3, #0
    732a:	dcda      	bgt.n	72e2 <twi_rx_start_transfer+0x62>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    732c:	2300      	movs	r3, #0
    732e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    7332:	2305      	movs	r3, #5
    7334:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            ret_code = NRFX_ERROR_INTERNAL;
    7338:	4803      	ldr	r0, [pc, #12]	; (7348 <twi_rx_start_transfer+0xc8>)
    return ret_code;
    733a:	e7d2      	b.n	72e2 <twi_rx_start_transfer+0x62>
                ret_code = NRFX_ERROR_INTERNAL;
    733c:	4802      	ldr	r0, [pc, #8]	; (7348 <twi_rx_start_transfer+0xc8>)
    733e:	e7f2      	b.n	7326 <twi_rx_start_transfer+0xa6>
    7340:	000186a0 	.word	0x000186a0
    7344:	0bad0000 	.word	0x0bad0000
    7348:	0bad0001 	.word	0x0bad0001

0000734c <twi_xfer>:

static nrfx_err_t twi_xfer(NRF_TWI_Type               * p_twi,
                           twi_control_block_t        * p_cb,
                           nrfx_twi_xfer_desc_t const * p_xfer_desc,
                           uint32_t                     flags)
{
    734c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    734e:	4607      	mov	r7, r0
    7350:	460c      	mov	r4, r1
    7352:	4694      	mov	ip, r2
    7354:	461e      	mov	r6, r3

    nrfx_err_t err_code = NRFX_SUCCESS;

    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    7356:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
    735a:	2b01      	cmp	r3, #1
    735c:	d02c      	beq.n	73b8 <twi_xfer+0x6c>
    {
        /* RX is invalid after TX suspend */
        return NRFX_ERROR_INVALID_STATE;
    }
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
    735e:	2b02      	cmp	r3, #2
    7360:	d02f      	beq.n	73c2 <twi_xfer+0x76>
    p_reg->INTENCLR = mask;
    7362:	4b27      	ldr	r3, [pc, #156]	; (7400 <twi_xfer+0xb4>)
    7364:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
    }

    /* Block TWI interrupts to ensure that function is not interrupted by TWI interrupt. */
    nrf_twi_int_disable(p_twi, NRF_TWI_ALL_INTS_MASK);

    if (p_cb->busy)
    7368:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    736c:	bb7b      	cbnz	r3, 73ce <twi_xfer+0x82>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
    736e:	f016 0f04 	tst.w	r6, #4
    7372:	bf0c      	ite	eq
    7374:	2301      	moveq	r3, #1
    7376:	2300      	movne	r3, #0
    7378:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    }

    p_cb->flags       = flags;
    737c:	6226      	str	r6, [r4, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
    737e:	f104 0e0c 	add.w	lr, r4, #12
    7382:	4665      	mov	r5, ip
    7384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7386:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    738a:	682b      	ldr	r3, [r5, #0]
    738c:	f8ce 3000 	str.w	r3, [lr]
    p_cb->curr_length = p_xfer_desc->primary_length;
    7390:	f8dc 3004 	ldr.w	r3, [ip, #4]
    7394:	62a3      	str	r3, [r4, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
    7396:	f8dc 300c 	ldr.w	r3, [ip, #12]
    739a:	6263      	str	r3, [r4, #36]	; 0x24
    nrf_twi_address_set(p_twi, p_xfer_desc->address);
    739c:	f89c 3001 	ldrb.w	r3, [ip, #1]
    p_reg->ADDRESS = address;
    73a0:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588

    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    73a4:	f89c 3000 	ldrb.w	r3, [ip]
    73a8:	2b01      	cmp	r3, #1
    73aa:	d021      	beq.n	73f0 <twi_xfer+0xa4>
    {
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    73ac:	b9a3      	cbnz	r3, 73d8 <twi_xfer+0x8c>
    73ae:	f016 0f20 	tst.w	r6, #32
    73b2:	d01b      	beq.n	73ec <twi_xfer+0xa0>
    73b4:	2301      	movs	r3, #1
    73b6:	e010      	b.n	73da <twi_xfer+0x8e>
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    73b8:	7812      	ldrb	r2, [r2, #0]
    73ba:	2a01      	cmp	r2, #1
    73bc:	d1cf      	bne.n	735e <twi_xfer+0x12>
        return NRFX_ERROR_INVALID_STATE;
    73be:	4811      	ldr	r0, [pc, #68]	; (7404 <twi_xfer+0xb8>)
    73c0:	e013      	b.n	73ea <twi_xfer+0x9e>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
    73c2:	f89c 3000 	ldrb.w	r3, [ip]
    73c6:	2b01      	cmp	r3, #1
    73c8:	d0cb      	beq.n	7362 <twi_xfer+0x16>
        return NRFX_ERROR_INVALID_STATE;
    73ca:	480e      	ldr	r0, [pc, #56]	; (7404 <twi_xfer+0xb8>)
    73cc:	e00d      	b.n	73ea <twi_xfer+0x9e>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    73ce:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    73d0:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
        return err_code;
    73d4:	480c      	ldr	r0, [pc, #48]	; (7408 <twi_xfer+0xbc>)
    73d6:	e008      	b.n	73ea <twi_xfer+0x9e>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    73d8:	2301      	movs	r3, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
    73da:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

        err_code = twi_tx_start_transfer(p_twi, p_cb);
    73de:	4621      	mov	r1, r4
    73e0:	4638      	mov	r0, r7
    73e2:	f7ff feef 	bl	71c4 <twi_tx_start_transfer>
    }
    else
    {
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    }
    if (p_cb->handler == NULL)
    73e6:	6823      	ldr	r3, [r4, #0]
    73e8:	b13b      	cbz	r3, 73fa <twi_xfer+0xae>
    {
        p_cb->busy = false;
    }
    return err_code;
}
    73ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    73ec:	2300      	movs	r3, #0
    73ee:	e7f4      	b.n	73da <twi_xfer+0x8e>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    73f0:	4621      	mov	r1, r4
    73f2:	4638      	mov	r0, r7
    73f4:	f7ff ff44 	bl	7280 <twi_rx_start_transfer>
    73f8:	e7f5      	b.n	73e6 <twi_xfer+0x9a>
        p_cb->busy = false;
    73fa:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    73fe:	e7f4      	b.n	73ea <twi_xfer+0x9e>
    7400:	00044286 	.word	0x00044286
    7404:	0bad0005 	.word	0x0bad0005
    7408:	0bad000b 	.word	0x0bad000b

0000740c <nrfx_twi_init>:
{
    740c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    740e:	7904      	ldrb	r4, [r0, #4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    7410:	6806      	ldr	r6, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    7412:	ebc4 1c04 	rsb	ip, r4, r4, lsl #4
    7416:	4d2d      	ldr	r5, [pc, #180]	; (74cc <nrfx_twi_init+0xc0>)
    7418:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
    741c:	f89c 502e 	ldrb.w	r5, [ip, #46]	; 0x2e
    7420:	2d00      	cmp	r5, #0
    7422:	d151      	bne.n	74c8 <nrfx_twi_init+0xbc>
    p_cb->handler         = event_handler;
    7424:	4d29      	ldr	r5, [pc, #164]	; (74cc <nrfx_twi_init+0xc0>)
    7426:	ebc4 1e04 	rsb	lr, r4, r4, lsl #4
    742a:	f845 202e 	str.w	r2, [r5, lr, lsl #2]
    p_cb->p_context       = p_context;
    742e:	f8cc 3004 	str.w	r3, [ip, #4]
    p_cb->int_mask        = 0;
    7432:	2300      	movs	r3, #0
    7434:	f8cc 3008 	str.w	r3, [ip, #8]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
    7438:	f88c 302d 	strb.w	r3, [ip, #45]	; 0x2d
    p_cb->repeated        = false;
    743c:	f88c 3031 	strb.w	r3, [ip, #49]	; 0x31
    p_cb->busy            = false;
    7440:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    7444:	7b4b      	ldrb	r3, [r1, #13]
    7446:	f88c 3038 	strb.w	r3, [ip, #56]	; 0x38
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    744a:	7b8b      	ldrb	r3, [r1, #14]
    744c:	f88c 3039 	strb.w	r3, [ip, #57]	; 0x39
    if (!p_config->skip_gpio_cfg)
    7450:	b9db      	cbnz	r3, 748a <nrfx_twi_init+0x7e>
        TWI_PIN_INIT(p_config->scl);
    7452:	680b      	ldr	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
    7454:	f003 051f 	and.w	r5, r3, #31
    return pin_number >> 5;
    7458:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    745a:	2b01      	cmp	r3, #1
    745c:	d030      	beq.n	74c0 <nrfx_twi_init+0xb4>
        case 0: return NRF_P0;
    745e:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    7462:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    7466:	f240 650c 	movw	r5, #1548	; 0x60c
    746a:	f847 5023 	str.w	r5, [r7, r3, lsl #2]
        TWI_PIN_INIT(p_config->sda);
    746e:	684b      	ldr	r3, [r1, #4]
    *p_pin = pin_number & 0x1F;
    7470:	f003 051f 	and.w	r5, r3, #31
    return pin_number >> 5;
    7474:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7476:	2b01      	cmp	r3, #1
    7478:	d024      	beq.n	74c4 <nrfx_twi_init+0xb8>
        case 0: return NRF_P0;
    747a:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    747e:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    7482:	f240 650c 	movw	r5, #1548	; 0x60c
    7486:	f847 5023 	str.w	r5, [r7, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    748a:	7bcb      	ldrb	r3, [r1, #15]
    748c:	b92b      	cbnz	r3, 749a <nrfx_twi_init+0x8e>
        nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
    748e:	680d      	ldr	r5, [r1, #0]
    7490:	684b      	ldr	r3, [r1, #4]
    p_reg->PSEL.SCL = scl_pin;
    7492:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    7496:	f8c6 350c 	str.w	r3, [r6, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
    749a:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
    749c:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
    if (p_cb->handler)
    74a0:	b122      	cbz	r2, 74ac <nrfx_twi_init+0xa0>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
    74a2:	6800      	ldr	r0, [r0, #0]
    74a4:	f340 3007 	sbfx	r0, r0, #12, #8
    74a8:	f002 ff2d 	bl	a306 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    74ac:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
    74b0:	4b06      	ldr	r3, [pc, #24]	; (74cc <nrfx_twi_init+0xc0>)
    74b2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    74b6:	2201      	movs	r2, #1
    74b8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    return err_code;
    74bc:	4804      	ldr	r0, [pc, #16]	; (74d0 <nrfx_twi_init+0xc4>)
}
    74be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    74c0:	4f04      	ldr	r7, [pc, #16]	; (74d4 <nrfx_twi_init+0xc8>)
    74c2:	e7ce      	b.n	7462 <nrfx_twi_init+0x56>
    74c4:	4f03      	ldr	r7, [pc, #12]	; (74d4 <nrfx_twi_init+0xc8>)
    74c6:	e7da      	b.n	747e <nrfx_twi_init+0x72>
        return err_code;
    74c8:	4803      	ldr	r0, [pc, #12]	; (74d8 <nrfx_twi_init+0xcc>)
    74ca:	e7f8      	b.n	74be <nrfx_twi_init+0xb2>
    74cc:	20000a94 	.word	0x20000a94
    74d0:	0bad0000 	.word	0x0bad0000
    74d4:	50000300 	.word	0x50000300
    74d8:	0bad0005 	.word	0x0bad0005

000074dc <nrfx_twi_enable>:
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    74dc:	7903      	ldrb	r3, [r0, #4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    74de:	6802      	ldr	r2, [r0, #0]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    74e0:	2105      	movs	r1, #5
    74e2:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    74e6:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    74ea:	4a03      	ldr	r2, [pc, #12]	; (74f8 <nrfx_twi_enable+0x1c>)
    74ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    74f0:	2202      	movs	r2, #2
    74f2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    74f6:	4770      	bx	lr
    74f8:	20000a94 	.word	0x20000a94

000074fc <nrfx_twi_disable>:
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    74fc:	7903      	ldrb	r3, [r0, #4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    74fe:	6802      	ldr	r2, [r0, #0]
    p_reg->INTENCLR = mask;
    7500:	490b      	ldr	r1, [pc, #44]	; (7530 <nrfx_twi_disable+0x34>)
    7502:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    7506:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
    750a:	f021 0103 	bic.w	r1, r1, #3
    750e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    7512:	2000      	movs	r0, #0
    7514:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    7518:	4a06      	ldr	r2, [pc, #24]	; (7534 <nrfx_twi_disable+0x38>)
    751a:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    751e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    7522:	f04f 0c01 	mov.w	ip, #1
    7526:	f881 c02e 	strb.w	ip, [r1, #46]	; 0x2e
    p_cb->busy = false;
    752a:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
}
    752e:	4770      	bx	lr
    7530:	00044286 	.word	0x00044286
    7534:	20000a94 	.word	0x20000a94

00007538 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    7538:	b508      	push	{r3, lr}
    753a:	4613      	mov	r3, r2

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    753c:	f890 c004 	ldrb.w	ip, [r0, #4]
    7540:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
    7544:	460a      	mov	r2, r1
    7546:	4903      	ldr	r1, [pc, #12]	; (7554 <nrfx_twi_xfer+0x1c>)
    7548:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    754c:	6800      	ldr	r0, [r0, #0]
    754e:	f7ff fefd 	bl	734c <twi_xfer>
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    7552:	bd08      	pop	{r3, pc}
    7554:	20000a94 	.word	0x20000a94

00007558 <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
    7558:	b508      	push	{r3, lr}
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
    755a:	4902      	ldr	r1, [pc, #8]	; (7564 <nrfx_twi_0_irq_handler+0xc>)
    755c:	4802      	ldr	r0, [pc, #8]	; (7568 <nrfx_twi_0_irq_handler+0x10>)
    755e:	f004 fa92 	bl	ba86 <twi_irq_handler>
}
    7562:	bd08      	pop	{r3, pc}
    7564:	20000a94 	.word	0x20000a94
    7568:	40003000 	.word	0x40003000

0000756c <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    756c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    *p_pin = pin_number & 0x1F;
    7570:	f000 031f 	and.w	r3, r0, #31
    return pin_number >> 5;
    7574:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7576:	2801      	cmp	r0, #1
    7578:	d036      	beq.n	75e8 <nrfx_twi_twim_bus_recover+0x7c>
        case 0: return NRF_P0;
    757a:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    757e:	2501      	movs	r5, #1
    7580:	409d      	lsls	r5, r3
    p_reg->OUTSET = set_mask;
    7582:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    7586:	f001 081f 	and.w	r8, r1, #31
    return pin_number >> 5;
    758a:	0949      	lsrs	r1, r1, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    758c:	2901      	cmp	r1, #1
    758e:	d02d      	beq.n	75ec <nrfx_twi_twim_bus_recover+0x80>
        case 0: return NRF_P0;
    7590:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7594:	f04f 0901 	mov.w	r9, #1
    7598:	fa09 f908 	lsl.w	r9, r9, r8
    p_reg->OUTSET = set_mask;
    759c:	f8c7 9508 	str.w	r9, [r7, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    75a0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    75a4:	f240 620d 	movw	r2, #1549	; 0x60d
    75a8:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    75ac:	f508 73e0 	add.w	r3, r8, #448	; 0x1c0
    75b0:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    75b4:	2004      	movs	r0, #4
    75b6:	f004 f82f 	bl	b618 <nrfx_busy_wait>

    for (uint8_t i = 0; i < 9; i++)
    75ba:	2400      	movs	r4, #0
    75bc:	2c08      	cmp	r4, #8
    75be:	d817      	bhi.n	75f0 <nrfx_twi_twim_bus_recover+0x84>
    return p_reg->IN;
    75c0:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    75c4:	fa23 f308 	lsr.w	r3, r3, r8
    {
        if (nrf_gpio_pin_read(sda_pin))
    75c8:	f013 0f01 	tst.w	r3, #1
    75cc:	d110      	bne.n	75f0 <nrfx_twi_twim_bus_recover+0x84>
    p_reg->OUTCLR = clr_mask;
    75ce:	f8c6 550c 	str.w	r5, [r6, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    75d2:	2004      	movs	r0, #4
    75d4:	f004 f820 	bl	b618 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
    75d8:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
    75dc:	2004      	movs	r0, #4
    75de:	f004 f81b 	bl	b618 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    75e2:	3401      	adds	r4, #1
    75e4:	b2e4      	uxtb	r4, r4
    75e6:	e7e9      	b.n	75bc <nrfx_twi_twim_bus_recover+0x50>
        case 1: return NRF_P1;
    75e8:	4e0c      	ldr	r6, [pc, #48]	; (761c <nrfx_twi_twim_bus_recover+0xb0>)
    75ea:	e7c8      	b.n	757e <nrfx_twi_twim_bus_recover+0x12>
    75ec:	4f0b      	ldr	r7, [pc, #44]	; (761c <nrfx_twi_twim_bus_recover+0xb0>)
    75ee:	e7d1      	b.n	7594 <nrfx_twi_twim_bus_recover+0x28>
    p_reg->OUTCLR = clr_mask;
    75f0:	f8c7 950c 	str.w	r9, [r7, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    75f4:	2004      	movs	r0, #4
    75f6:	f004 f80f 	bl	b618 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
    75fa:	f8c7 9508 	str.w	r9, [r7, #1288]	; 0x508
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
    75fe:	2004      	movs	r0, #4
    7600:	f004 f80a 	bl	b618 <nrfx_busy_wait>
    return p_reg->IN;
    7604:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    7608:	fa23 f308 	lsr.w	r3, r3, r8

    if (nrf_gpio_pin_read(sda_pin))
    760c:	f013 0f01 	tst.w	r3, #1
    7610:	d002      	beq.n	7618 <nrfx_twi_twim_bus_recover+0xac>
    {
        return NRFX_SUCCESS;
    7612:	4803      	ldr	r0, [pc, #12]	; (7620 <nrfx_twi_twim_bus_recover+0xb4>)
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    7614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NRFX_ERROR_INTERNAL;
    7618:	4802      	ldr	r0, [pc, #8]	; (7624 <nrfx_twi_twim_bus_recover+0xb8>)
    761a:	e7fb      	b.n	7614 <nrfx_twi_twim_bus_recover+0xa8>
    761c:	50000300 	.word	0x50000300
    7620:	0bad0000 	.word	0x0bad0000
    7624:	0bad0001 	.word	0x0bad0001

00007628 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    7628:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    762a:	4c11      	ldr	r4, [pc, #68]	; (7670 <_DoInit+0x48>)
    762c:	2303      	movs	r3, #3
    762e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    7630:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    7632:	4a10      	ldr	r2, [pc, #64]	; (7674 <_DoInit+0x4c>)
    7634:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    7636:	4b10      	ldr	r3, [pc, #64]	; (7678 <_DoInit+0x50>)
    7638:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    763a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    763e:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    7640:	2300      	movs	r3, #0
    7642:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    7644:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    7646:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    7648:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    764a:	4a0c      	ldr	r2, [pc, #48]	; (767c <_DoInit+0x54>)
    764c:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    764e:	2210      	movs	r2, #16
    7650:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    7652:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    7654:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    7656:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    7658:	4909      	ldr	r1, [pc, #36]	; (7680 <_DoInit+0x58>)
    765a:	1de0      	adds	r0, r4, #7
    765c:	f002 fec9 	bl	a3f2 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    7660:	4908      	ldr	r1, [pc, #32]	; (7684 <_DoInit+0x5c>)
    7662:	4620      	mov	r0, r4
    7664:	f002 fec5 	bl	a3f2 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    7668:	2320      	movs	r3, #32
    766a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    766c:	bd10      	pop	{r4, pc}
    766e:	bf00      	nop
    7670:	20000ee0 	.word	0x20000ee0
    7674:	0000d2a0 	.word	0x0000d2a0
    7678:	20000ae0 	.word	0x20000ae0
    767c:	20000ad0 	.word	0x20000ad0
    7680:	0000d2ac 	.word	0x0000d2ac
    7684:	0000d2b0 	.word	0x0000d2b0

00007688 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    768c:	4604      	mov	r4, r0
    768e:	460e      	mov	r6, r1
    7690:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    7692:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    7696:	4a2d      	ldr	r2, [pc, #180]	; (774c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    7698:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    769c:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    769e:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    76a0:	42bb      	cmp	r3, r7
    76a2:	d84c      	bhi.n	773e <SEGGER_RTT_WriteSkipNoLock+0xb6>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    76a4:	eb00 0140 	add.w	r1, r0, r0, lsl #1
    76a8:	4a28      	ldr	r2, [pc, #160]	; (774c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    76aa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    76ae:	f8d2 8020 	ldr.w	r8, [r2, #32]
    76b2:	eba8 0907 	sub.w	r9, r8, r7
    76b6:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    76ba:	4295      	cmp	r5, r2
    76bc:	d904      	bls.n	76c8 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    76be:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    76c0:	429d      	cmp	r5, r3
    76c2:	d916      	bls.n	76f2 <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    76c4:	2000      	movs	r0, #0
    76c6:	e03f      	b.n	7748 <SEGGER_RTT_WriteSkipNoLock+0xc0>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    76c8:	f8df 8080 	ldr.w	r8, [pc, #128]	; 774c <SEGGER_RTT_WriteSkipNoLock+0xc4>
    76cc:	1c63      	adds	r3, r4, #1
    76ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    76d2:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    76d6:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    76d8:	462a      	mov	r2, r5
    76da:	4631      	mov	r1, r6
    76dc:	4438      	add	r0, r7
    76de:	f002 feca 	bl	a476 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    76e2:	442f      	add	r7, r5
    76e4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    76e8:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
    76ec:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    76ee:	2001      	movs	r0, #1
    76f0:	e02a      	b.n	7748 <SEGGER_RTT_WriteSkipNoLock+0xc0>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    76f2:	1c43      	adds	r3, r0, #1
    76f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    76f8:	4a14      	ldr	r2, [pc, #80]	; (774c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    76fa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    76fe:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    7700:	464a      	mov	r2, r9
    7702:	4631      	mov	r1, r6
    7704:	4438      	add	r0, r7
    7706:	f002 feb6 	bl	a476 <memcpy>
      NumBytes -= Rem;
    770a:	eba7 0808 	sub.w	r8, r7, r8
      if (NumBytes) {
    770e:	eb18 0505 	adds.w	r5, r8, r5
    7712:	d107      	bne.n	7724 <SEGGER_RTT_WriteSkipNoLock+0x9c>
      pRing->WrOff = NumBytes;
    7714:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7718:	4b0c      	ldr	r3, [pc, #48]	; (774c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    771a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    771e:	625d      	str	r5, [r3, #36]	; 0x24
      return 1;
    7720:	2001      	movs	r0, #1
    7722:	e011      	b.n	7748 <SEGGER_RTT_WriteSkipNoLock+0xc0>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    7724:	1c63      	adds	r3, r4, #1
    7726:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    772a:	4a08      	ldr	r2, [pc, #32]	; (774c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    772c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
    7730:	462a      	mov	r2, r5
    7732:	eb06 0109 	add.w	r1, r6, r9
    7736:	6858      	ldr	r0, [r3, #4]
    7738:	f002 fe9d 	bl	a476 <memcpy>
    773c:	e7ea      	b.n	7714 <SEGGER_RTT_WriteSkipNoLock+0x8c>
    Avail = RdOff - WrOff - 1u;
    773e:	1bdb      	subs	r3, r3, r7
    7740:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    7742:	42ab      	cmp	r3, r5
    7744:	d2c0      	bcs.n	76c8 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    7746:	2000      	movs	r0, #0
}
    7748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    774c:	20000ee0 	.word	0x20000ee0

00007750 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    7750:	4b06      	ldr	r3, [pc, #24]	; (776c <SEGGER_RTT_HasDataUp+0x1c>)
    7752:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    7756:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    775a:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    775c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    7760:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    7764:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    7766:	1a80      	subs	r0, r0, r2
    7768:	4770      	bx	lr
    776a:	bf00      	nop
    776c:	20000ee0 	.word	0x20000ee0

00007770 <zephyr_rtt_mutex_lock>:
}

#ifdef CONFIG_MULTITHREADING

void zephyr_rtt_mutex_lock(void)
{
    7770:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    7772:	f04f 32ff 	mov.w	r2, #4294967295
    7776:	f04f 33ff 	mov.w	r3, #4294967295
    777a:	4802      	ldr	r0, [pc, #8]	; (7784 <zephyr_rtt_mutex_lock+0x14>)
    777c:	f000 fb8a 	bl	7e94 <z_impl_k_mutex_lock>
	k_mutex_lock(&rtt_term_mutex, K_FOREVER);
}
    7780:	bd08      	pop	{r3, pc}
    7782:	bf00      	nop
    7784:	2000012c 	.word	0x2000012c

00007788 <zephyr_rtt_mutex_unlock>:

void zephyr_rtt_mutex_unlock(void)
{
    7788:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
    778a:	4802      	ldr	r0, [pc, #8]	; (7794 <zephyr_rtt_mutex_unlock+0xc>)
    778c:	f000 fc06 	bl	7f9c <z_impl_k_mutex_unlock>
	k_mutex_unlock(&rtt_term_mutex);
}
    7790:	bd08      	pop	{r3, pc}
    7792:	bf00      	nop
    7794:	2000012c 	.word	0x2000012c

00007798 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    7798:	4b03      	ldr	r3, [pc, #12]	; (77a8 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    779a:	e000      	b.n	779e <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    779c:	3318      	adds	r3, #24
	while (dev < __device_end) {
    779e:	4a03      	ldr	r2, [pc, #12]	; (77ac <z_device_state_init+0x14>)
    77a0:	4293      	cmp	r3, r2
    77a2:	d3fb      	bcc.n	779c <z_device_state_init+0x4>
	}
}
    77a4:	4770      	bx	lr
    77a6:	bf00      	nop
    77a8:	0000c218 	.word	0x0000c218
    77ac:	0000c2d8 	.word	0x0000c2d8

000077b0 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    77b0:	2804      	cmp	r0, #4
    77b2:	d80c      	bhi.n	77ce <reason_to_str+0x1e>
    77b4:	e8df f000 	tbb	[pc, r0]
    77b8:	07050d03 	.word	0x07050d03
    77bc:	09          	.byte	0x09
    77bd:	00          	.byte	0x00
    77be:	4806      	ldr	r0, [pc, #24]	; (77d8 <reason_to_str+0x28>)
    77c0:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
    77c2:	4806      	ldr	r0, [pc, #24]	; (77dc <reason_to_str+0x2c>)
    77c4:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
    77c6:	4806      	ldr	r0, [pc, #24]	; (77e0 <reason_to_str+0x30>)
    77c8:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    77ca:	4806      	ldr	r0, [pc, #24]	; (77e4 <reason_to_str+0x34>)
    77cc:	4770      	bx	lr
	default:
		return "Unknown error";
    77ce:	4806      	ldr	r0, [pc, #24]	; (77e8 <reason_to_str+0x38>)
    77d0:	4770      	bx	lr
		return "Unhandled interrupt";
    77d2:	4806      	ldr	r0, [pc, #24]	; (77ec <reason_to_str+0x3c>)
	}
}
    77d4:	4770      	bx	lr
    77d6:	bf00      	nop
    77d8:	0000d2bc 	.word	0x0000d2bc
    77dc:	0000d2e0 	.word	0x0000d2e0
    77e0:	0000d2f0 	.word	0x0000d2f0
    77e4:	0000d2fc 	.word	0x0000d2fc
    77e8:	0000d30c 	.word	0x0000d30c
    77ec:	0000d2cc 	.word	0x0000d2cc

000077f0 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    77f0:	b130      	cbz	r0, 7800 <thread_name_get+0x10>
{
    77f2:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    77f4:	f004 f9ea 	bl	bbcc <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    77f8:	b120      	cbz	r0, 7804 <thread_name_get+0x14>
    77fa:	7803      	ldrb	r3, [r0, #0]
    77fc:	b123      	cbz	r3, 7808 <thread_name_get+0x18>
}
    77fe:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    7800:	4802      	ldr	r0, [pc, #8]	; (780c <thread_name_get+0x1c>)
}
    7802:	4770      	bx	lr
		thread_name = "unknown";
    7804:	4801      	ldr	r0, [pc, #4]	; (780c <thread_name_get+0x1c>)
    7806:	e7fa      	b.n	77fe <thread_name_get+0xe>
    7808:	4800      	ldr	r0, [pc, #0]	; (780c <thread_name_get+0x1c>)
	return thread_name;
    780a:	e7f8      	b.n	77fe <thread_name_get+0xe>
    780c:	0000d31c 	.word	0x0000d31c

00007810 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    7810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7814:	b089      	sub	sp, #36	; 0x24
    7816:	af00      	add	r7, sp, #0
    7818:	4606      	mov	r6, r0
    781a:	460c      	mov	r4, r1
	__asm__ volatile(
    781c:	f04f 0320 	mov.w	r3, #32
    7820:	f3ef 8811 	mrs	r8, BASEPRI
    7824:	f383 8812 	msr	BASEPRI_MAX, r3
    7828:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    782c:	f001 f8f2 	bl	8a14 <z_impl_z_current_get>
    7830:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    7832:	4630      	mov	r0, r6
    7834:	f7ff ffbc 	bl	77b0 <reason_to_str>
    7838:	46e9      	mov	r9, sp
    783a:	2301      	movs	r3, #1
    783c:	713b      	strb	r3, [r7, #4]
    783e:	2303      	movs	r3, #3
    7840:	717b      	strb	r3, [r7, #5]
    7842:	b08a      	sub	sp, #40	; 0x28
    7844:	46ec      	mov	ip, sp
    7846:	f11c 0210 	adds.w	r2, ip, #16
    784a:	d021      	beq.n	7890 <z_fatal_error+0x80>
    784c:	f04f 0e16 	mov.w	lr, #22
    7850:	b152      	cbz	r2, 7868 <z_fatal_error+0x58>
    7852:	4673      	mov	r3, lr
    7854:	f1be 0f04 	cmp.w	lr, #4
    7858:	dd02      	ble.n	7860 <z_fatal_error+0x50>
    785a:	4972      	ldr	r1, [pc, #456]	; (7a24 <z_fatal_error+0x214>)
    785c:	f8cc 1014 	str.w	r1, [ip, #20]
    7860:	2b08      	cmp	r3, #8
    7862:	dd01      	ble.n	7868 <z_fatal_error+0x58>
    7864:	f8cc 6018 	str.w	r6, [ip, #24]
    7868:	2301      	movs	r3, #1
    786a:	703b      	strb	r3, [r7, #0]
    786c:	2303      	movs	r3, #3
    786e:	707b      	strb	r3, [r7, #1]
    7870:	b1da      	cbz	r2, 78aa <z_fatal_error+0x9a>
    7872:	4673      	mov	r3, lr
    7874:	f1be 0f0c 	cmp.w	lr, #12
    7878:	dd01      	ble.n	787e <z_fatal_error+0x6e>
    787a:	f8cc 001c 	str.w	r0, [ip, #28]
    787e:	2b10      	cmp	r3, #16
    7880:	dd02      	ble.n	7888 <z_fatal_error+0x78>
    7882:	2300      	movs	r3, #0
    7884:	f8cc 3020 	str.w	r3, [ip, #32]
    7888:	f10c 0324 	add.w	r3, ip, #36	; 0x24
    788c:	2100      	movs	r1, #0
    788e:	e00a      	b.n	78a6 <z_fatal_error+0x96>
    7890:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
    7894:	e7dc      	b.n	7850 <z_fatal_error+0x40>
    7896:	f101 0020 	add.w	r0, r1, #32
    789a:	4438      	add	r0, r7
    789c:	f810 0c20 	ldrb.w	r0, [r0, #-32]
    78a0:	f803 0b01 	strb.w	r0, [r3], #1
    78a4:	3101      	adds	r1, #1
    78a6:	2901      	cmp	r1, #1
    78a8:	d9f5      	bls.n	7896 <z_fatal_error+0x86>
    78aa:	f1be 0f15 	cmp.w	lr, #21
    78ae:	dd50      	ble.n	7952 <z_fatal_error+0x142>
    78b0:	2316      	movs	r3, #22
    78b2:	b14a      	cbz	r2, 78c8 <z_fatal_error+0xb8>
    78b4:	2105      	movs	r1, #5
    78b6:	7139      	strb	r1, [r7, #4]
    78b8:	2100      	movs	r1, #0
    78ba:	7179      	strb	r1, [r7, #5]
    78bc:	71b9      	strb	r1, [r7, #6]
    78be:	2101      	movs	r1, #1
    78c0:	71f9      	strb	r1, [r7, #7]
    78c2:	6878      	ldr	r0, [r7, #4]
    78c4:	f8cc 0010 	str.w	r0, [ip, #16]
    78c8:	2100      	movs	r1, #0
    78ca:	f36f 0100 	bfc	r1, #0, #1
    78ce:	f36f 0141 	bfc	r1, #1, #1
    78d2:	f36f 0182 	bfc	r1, #2, #1
    78d6:	f36f 01c5 	bfc	r1, #3, #3
    78da:	2001      	movs	r0, #1
    78dc:	f360 1188 	bfi	r1, r0, #6, #3
    78e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
    78e4:	f363 2153 	bfi	r1, r3, #9, #11
    78e8:	f36f 511f 	bfc	r1, #20, #12
    78ec:	2300      	movs	r3, #0
    78ee:	484e      	ldr	r0, [pc, #312]	; (7a28 <z_fatal_error+0x218>)
    78f0:	f7fb f8b8 	bl	2a64 <z_impl_z_log_msg_static_create>
    78f4:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    78f6:	b11c      	cbz	r4, 7900 <z_fatal_error+0xf0>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    78f8:	69e3      	ldr	r3, [r4, #28]
    78fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
    78fe:	bb5b      	cbnz	r3, 7958 <z_fatal_error+0x148>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    7900:	4628      	mov	r0, r5
    7902:	f7ff ff75 	bl	77f0 <thread_name_get>
    7906:	46e9      	mov	r9, sp
    7908:	2301      	movs	r3, #1
    790a:	713b      	strb	r3, [r7, #4]
    790c:	2303      	movs	r3, #3
    790e:	717b      	strb	r3, [r7, #5]
    7910:	b08a      	sub	sp, #40	; 0x28
    7912:	46ec      	mov	ip, sp
    7914:	f11c 0210 	adds.w	r2, ip, #16
    7918:	d03f      	beq.n	799a <z_fatal_error+0x18a>
    791a:	f04f 0e12 	mov.w	lr, #18
    791e:	b152      	cbz	r2, 7936 <z_fatal_error+0x126>
    7920:	4673      	mov	r3, lr
    7922:	f1be 0f04 	cmp.w	lr, #4
    7926:	dd02      	ble.n	792e <z_fatal_error+0x11e>
    7928:	4940      	ldr	r1, [pc, #256]	; (7a2c <z_fatal_error+0x21c>)
    792a:	f8cc 1014 	str.w	r1, [ip, #20]
    792e:	2b08      	cmp	r3, #8
    7930:	dd01      	ble.n	7936 <z_fatal_error+0x126>
    7932:	f8cc 5018 	str.w	r5, [ip, #24]
    7936:	2301      	movs	r3, #1
    7938:	703b      	strb	r3, [r7, #0]
    793a:	2303      	movs	r3, #3
    793c:	707b      	strb	r3, [r7, #1]
    793e:	b3ca      	cbz	r2, 79b4 <z_fatal_error+0x1a4>
    7940:	f1be 0f0c 	cmp.w	lr, #12
    7944:	dd01      	ble.n	794a <z_fatal_error+0x13a>
    7946:	f8cc 001c 	str.w	r0, [ip, #28]
    794a:	f10c 0320 	add.w	r3, ip, #32
    794e:	2100      	movs	r1, #0
    7950:	e02e      	b.n	79b0 <z_fatal_error+0x1a0>
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    7952:	f06f 031b 	mvn.w	r3, #27
    7956:	e7ac      	b.n	78b2 <z_fatal_error+0xa2>
		LOG_ERR("Fault during interrupt handling\n");
    7958:	4b35      	ldr	r3, [pc, #212]	; (7a30 <z_fatal_error+0x220>)
    795a:	61fb      	str	r3, [r7, #28]
    795c:	2302      	movs	r3, #2
    795e:	713b      	strb	r3, [r7, #4]
    7960:	2300      	movs	r3, #0
    7962:	717b      	strb	r3, [r7, #5]
    7964:	71bb      	strb	r3, [r7, #6]
    7966:	71fb      	strb	r3, [r7, #7]
    7968:	687a      	ldr	r2, [r7, #4]
    796a:	61ba      	str	r2, [r7, #24]
    796c:	4619      	mov	r1, r3
    796e:	f363 0100 	bfi	r1, r3, #0, #1
    7972:	f363 0141 	bfi	r1, r3, #1, #1
    7976:	f363 0182 	bfi	r1, r3, #2, #1
    797a:	f363 01c5 	bfi	r1, r3, #3, #3
    797e:	2201      	movs	r2, #1
    7980:	f362 1188 	bfi	r1, r2, #6, #3
    7984:	2208      	movs	r2, #8
    7986:	f362 2153 	bfi	r1, r2, #9, #11
    798a:	f363 511f 	bfi	r1, r3, #20, #12
    798e:	f107 0218 	add.w	r2, r7, #24
    7992:	4825      	ldr	r0, [pc, #148]	; (7a28 <z_fatal_error+0x218>)
    7994:	f7fb f866 	bl	2a64 <z_impl_z_log_msg_static_create>
    7998:	e7b2      	b.n	7900 <z_fatal_error+0xf0>
	LOG_ERR("Current thread: %p (%s)", thread,
    799a:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
    799e:	e7be      	b.n	791e <z_fatal_error+0x10e>
    79a0:	f101 0020 	add.w	r0, r1, #32
    79a4:	4438      	add	r0, r7
    79a6:	f810 0c20 	ldrb.w	r0, [r0, #-32]
    79aa:	f803 0b01 	strb.w	r0, [r3], #1
    79ae:	3101      	adds	r1, #1
    79b0:	2901      	cmp	r1, #1
    79b2:	d9f5      	bls.n	79a0 <z_fatal_error+0x190>
    79b4:	f1be 0f11 	cmp.w	lr, #17
    79b8:	dd31      	ble.n	7a1e <z_fatal_error+0x20e>
    79ba:	2312      	movs	r3, #18
    79bc:	b14a      	cbz	r2, 79d2 <z_fatal_error+0x1c2>
    79be:	2104      	movs	r1, #4
    79c0:	7139      	strb	r1, [r7, #4]
    79c2:	2100      	movs	r1, #0
    79c4:	7179      	strb	r1, [r7, #5]
    79c6:	71b9      	strb	r1, [r7, #6]
    79c8:	2101      	movs	r1, #1
    79ca:	71f9      	strb	r1, [r7, #7]
    79cc:	6878      	ldr	r0, [r7, #4]
    79ce:	f8cc 0010 	str.w	r0, [ip, #16]
    79d2:	2100      	movs	r1, #0
    79d4:	f36f 0100 	bfc	r1, #0, #1
    79d8:	f36f 0141 	bfc	r1, #1, #1
    79dc:	f36f 0182 	bfc	r1, #2, #1
    79e0:	f36f 01c5 	bfc	r1, #3, #3
    79e4:	2001      	movs	r0, #1
    79e6:	f360 1188 	bfi	r1, r0, #6, #3
    79ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
    79ee:	f363 2153 	bfi	r1, r3, #9, #11
    79f2:	f36f 511f 	bfc	r1, #20, #12
    79f6:	2300      	movs	r3, #0
    79f8:	480b      	ldr	r0, [pc, #44]	; (7a28 <z_fatal_error+0x218>)
    79fa:	f7fb f833 	bl	2a64 <z_impl_z_log_msg_static_create>
    79fe:	46cd      	mov	sp, r9

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    7a00:	4621      	mov	r1, r4
    7a02:	4630      	mov	r0, r6
    7a04:	f7fe fde6 	bl	65d4 <k_sys_fatal_error_handler>
	__asm__ volatile(
    7a08:	f388 8811 	msr	BASEPRI, r8
    7a0c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    7a10:	4628      	mov	r0, r5
    7a12:	f7fc fea1 	bl	4758 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    7a16:	3724      	adds	r7, #36	; 0x24
    7a18:	46bd      	mov	sp, r7
    7a1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_ERR("Current thread: %p (%s)", thread,
    7a1e:	f06f 031b 	mvn.w	r3, #27
    7a22:	e7cb      	b.n	79bc <z_fatal_error+0x1ac>
    7a24:	0000d324 	.word	0x0000d324
    7a28:	0000c508 	.word	0x0000c508
    7a2c:	0000d370 	.word	0x0000d370
    7a30:	0000d34c 	.word	0x0000d34c

00007a34 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
    7a34:	b570      	push	{r4, r5, r6, lr}
    7a36:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7a38:	4b12      	ldr	r3, [pc, #72]	; (7a84 <z_sys_init_run_level+0x50>)
    7a3a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    7a3e:	e009      	b.n	7a54 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    7a40:	4243      	negs	r3, r0
    7a42:	e017      	b.n	7a74 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    7a44:	68ea      	ldr	r2, [r5, #12]
    7a46:	7013      	strb	r3, [r2, #0]
			}
			dev->state->initialized = true;
    7a48:	68ea      	ldr	r2, [r5, #12]
    7a4a:	7853      	ldrb	r3, [r2, #1]
    7a4c:	f043 0301 	orr.w	r3, r3, #1
    7a50:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7a52:	3408      	adds	r4, #8
    7a54:	1c73      	adds	r3, r6, #1
    7a56:	4a0b      	ldr	r2, [pc, #44]	; (7a84 <z_sys_init_run_level+0x50>)
    7a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a5c:	42a3      	cmp	r3, r4
    7a5e:	d910      	bls.n	7a82 <z_sys_init_run_level+0x4e>
		const struct device *dev = entry->dev;
    7a60:	6865      	ldr	r5, [r4, #4]
		if (dev != NULL) {
    7a62:	b15d      	cbz	r5, 7a7c <z_sys_init_run_level+0x48>
			int rc = entry->init_fn.dev(dev);
    7a64:	6823      	ldr	r3, [r4, #0]
    7a66:	4628      	mov	r0, r5
    7a68:	4798      	blx	r3
			if (rc != 0) {
    7a6a:	4603      	mov	r3, r0
    7a6c:	2800      	cmp	r0, #0
    7a6e:	d0eb      	beq.n	7a48 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    7a70:	2800      	cmp	r0, #0
    7a72:	dbe5      	blt.n	7a40 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    7a74:	2bff      	cmp	r3, #255	; 0xff
    7a76:	dde5      	ble.n	7a44 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    7a78:	23ff      	movs	r3, #255	; 0xff
    7a7a:	e7e3      	b.n	7a44 <z_sys_init_run_level+0x10>
			if (rc == 0) {
				/* Run automatic device runtime enablement */
				(void)pm_device_runtime_auto_enable(dev);
			}
		} else {
			(void)entry->init_fn.sys();
    7a7c:	6823      	ldr	r3, [r4, #0]
    7a7e:	4798      	blx	r3
    7a80:	e7e7      	b.n	7a52 <z_sys_init_run_level+0x1e>
		}
	}
}
    7a82:	bd70      	pop	{r4, r5, r6, pc}
    7a84:	0000d398 	.word	0x0000d398

00007a88 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    7a88:	b510      	push	{r4, lr}
    7a8a:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    7a8c:	23b0      	movs	r3, #176	; 0xb0
    7a8e:	4c11      	ldr	r4, [pc, #68]	; (7ad4 <init_idle_thread+0x4c>)
    7a90:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
    7a94:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    7a98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    7a9c:	4b0e      	ldr	r3, [pc, #56]	; (7ad8 <init_idle_thread+0x50>)
    7a9e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	z_setup_new_thread(thread, stack,
    7aa2:	4a0e      	ldr	r2, [pc, #56]	; (7adc <init_idle_thread+0x54>)
    7aa4:	9205      	str	r2, [sp, #20]
    7aa6:	2201      	movs	r2, #1
    7aa8:	9204      	str	r2, [sp, #16]
    7aaa:	220f      	movs	r2, #15
    7aac:	9203      	str	r2, [sp, #12]
    7aae:	2200      	movs	r2, #0
    7ab0:	9202      	str	r2, [sp, #8]
    7ab2:	9201      	str	r2, [sp, #4]
    7ab4:	9300      	str	r3, [sp, #0]
    7ab6:	4b0a      	ldr	r3, [pc, #40]	; (7ae0 <init_idle_thread+0x58>)
    7ab8:	f44f 72a0 	mov.w	r2, #320	; 0x140
    7abc:	4909      	ldr	r1, [pc, #36]	; (7ae4 <init_idle_thread+0x5c>)
    7abe:	eb01 11cc 	add.w	r1, r1, ip, lsl #7
    7ac2:	4620      	mov	r0, r4
    7ac4:	f000 f91a 	bl	7cfc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7ac8:	7b63      	ldrb	r3, [r4, #13]
    7aca:	f023 0304 	bic.w	r3, r3, #4
    7ace:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    7ad0:	b006      	add	sp, #24
    7ad2:	bd10      	pop	{r4, pc}
    7ad4:	20000660 	.word	0x20000660
    7ad8:	20000f88 	.word	0x20000f88
    7adc:	0000d388 	.word	0x0000d388
    7ae0:	00007e59 	.word	0x00007e59
    7ae4:	20001b80 	.word	0x20001b80

00007ae8 <bg_thread_main>:
{
    7ae8:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    7aea:	4b0a      	ldr	r3, [pc, #40]	; (7b14 <bg_thread_main+0x2c>)
    7aec:	2201      	movs	r2, #1
    7aee:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    7af0:	2003      	movs	r0, #3
    7af2:	f7ff ff9f 	bl	7a34 <z_sys_init_run_level>
	boot_banner();
    7af6:	f001 f9cf 	bl	8e98 <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    7afa:	2004      	movs	r0, #4
    7afc:	f7ff ff9a 	bl	7a34 <z_sys_init_run_level>
	z_init_static_threads();
    7b00:	f000 f960 	bl	7dc4 <z_init_static_threads>
	(void)main();
    7b04:	f7f9 f884 	bl	c10 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    7b08:	4a03      	ldr	r2, [pc, #12]	; (7b18 <bg_thread_main+0x30>)
    7b0a:	7b13      	ldrb	r3, [r2, #12]
    7b0c:	f023 0301 	bic.w	r3, r3, #1
    7b10:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    7b12:	bd08      	pop	{r3, pc}
    7b14:	20000fd5 	.word	0x20000fd5
    7b18:	20000710 	.word	0x20000710

00007b1c <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    7b1c:	b508      	push	{r3, lr}
    7b1e:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    7b20:	4a01      	ldr	r2, [pc, #4]	; (7b28 <switch_to_main_thread+0xc>)
    7b22:	4802      	ldr	r0, [pc, #8]	; (7b2c <switch_to_main_thread+0x10>)
    7b24:	f7fb fe96 	bl	3854 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    7b28:	00007ae9 	.word	0x00007ae9
    7b2c:	20000710 	.word	0x20000710

00007b30 <z_bss_zero>:
{
    7b30:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    7b32:	4803      	ldr	r0, [pc, #12]	; (7b40 <z_bss_zero+0x10>)
    7b34:	4a03      	ldr	r2, [pc, #12]	; (7b44 <z_bss_zero+0x14>)
    7b36:	1a12      	subs	r2, r2, r0
    7b38:	2100      	movs	r1, #0
    7b3a:	f004 f826 	bl	bb8a <z_early_memset>
}
    7b3e:	bd08      	pop	{r3, pc}
    7b40:	20000150 	.word	0x20000150
    7b44:	20000fd8 	.word	0x20000fd8

00007b48 <z_init_cpu>:
{
    7b48:	b510      	push	{r4, lr}
    7b4a:	4604      	mov	r4, r0
	init_idle_thread(id);
    7b4c:	f7ff ff9c 	bl	7a88 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    7b50:	23b0      	movs	r3, #176	; 0xb0
    7b52:	490b      	ldr	r1, [pc, #44]	; (7b80 <z_init_cpu+0x38>)
    7b54:	fb03 1104 	mla	r1, r3, r4, r1
    7b58:	4a0a      	ldr	r2, [pc, #40]	; (7b84 <z_init_cpu+0x3c>)
    7b5a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    7b5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7b62:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    7b64:	741c      	strb	r4, [r3, #16]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    7b66:	eb04 1144 	add.w	r1, r4, r4, lsl #5
    7b6a:	4b07      	ldr	r3, [pc, #28]	; (7b88 <z_init_cpu+0x40>)
    7b6c:	eb03 1381 	add.w	r3, r3, r1, lsl #6
    7b70:	f503 6304 	add.w	r3, r3, #2112	; 0x840
	_kernel.cpus[id].irq_stack =
    7b74:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    7b78:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    7b7c:	6053      	str	r3, [r2, #4]
}
    7b7e:	bd10      	pop	{r4, pc}
    7b80:	20000660 	.word	0x20000660
    7b84:	20000f88 	.word	0x20000f88
    7b88:	20001340 	.word	0x20001340

00007b8c <prepare_multithreading>:
{
    7b8c:	b570      	push	{r4, r5, r6, lr}
    7b8e:	b086      	sub	sp, #24
	z_sched_init();
    7b90:	f000 fe7c 	bl	888c <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    7b94:	4d10      	ldr	r5, [pc, #64]	; (7bd8 <prepare_multithreading+0x4c>)
    7b96:	4b11      	ldr	r3, [pc, #68]	; (7bdc <prepare_multithreading+0x50>)
    7b98:	619d      	str	r5, [r3, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7b9a:	4b11      	ldr	r3, [pc, #68]	; (7be0 <prepare_multithreading+0x54>)
    7b9c:	9305      	str	r3, [sp, #20]
    7b9e:	2301      	movs	r3, #1
    7ba0:	9304      	str	r3, [sp, #16]
    7ba2:	2400      	movs	r4, #0
    7ba4:	9403      	str	r4, [sp, #12]
    7ba6:	9402      	str	r4, [sp, #8]
    7ba8:	9401      	str	r4, [sp, #4]
    7baa:	9400      	str	r4, [sp, #0]
    7bac:	4b0d      	ldr	r3, [pc, #52]	; (7be4 <prepare_multithreading+0x58>)
    7bae:	f44f 6280 	mov.w	r2, #1024	; 0x400
    7bb2:	490d      	ldr	r1, [pc, #52]	; (7be8 <prepare_multithreading+0x5c>)
    7bb4:	4628      	mov	r0, r5
    7bb6:	f000 f8a1 	bl	7cfc <z_setup_new_thread>
    7bba:	4606      	mov	r6, r0
    7bbc:	7b6b      	ldrb	r3, [r5, #13]
    7bbe:	f023 0304 	bic.w	r3, r3, #4
    7bc2:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    7bc4:	4628      	mov	r0, r5
    7bc6:	f004 f93d 	bl	be44 <z_ready_thread>
	z_init_cpu(0);
    7bca:	4620      	mov	r0, r4
    7bcc:	f7ff ffbc 	bl	7b48 <z_init_cpu>
}
    7bd0:	4630      	mov	r0, r6
    7bd2:	b006      	add	sp, #24
    7bd4:	bd70      	pop	{r4, r5, r6, pc}
    7bd6:	bf00      	nop
    7bd8:	20000710 	.word	0x20000710
    7bdc:	20000f88 	.word	0x20000f88
    7be0:	0000d390 	.word	0x0000d390
    7be4:	00007ae9 	.word	0x00007ae9
    7be8:	20001d00 	.word	0x20001d00

00007bec <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    7bec:	b500      	push	{lr}
    7bee:	b0ad      	sub	sp, #180	; 0xb4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    7bf0:	2000      	movs	r0, #0
    7bf2:	f7ff ff1f 	bl	7a34 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    7bf6:	4b1e      	ldr	r3, [pc, #120]	; (7c70 <z_cstart+0x84>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    7bf8:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    7bfc:	4c1d      	ldr	r4, [pc, #116]	; (7c74 <z_cstart+0x88>)
    7bfe:	6963      	ldr	r3, [r4, #20]
    7c00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    7c04:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7c06:	23e0      	movs	r3, #224	; 0xe0
    7c08:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    7c0c:	2500      	movs	r5, #0
    7c0e:	77e5      	strb	r5, [r4, #31]
    7c10:	7625      	strb	r5, [r4, #24]
    7c12:	7665      	strb	r5, [r4, #25]
    7c14:	76a5      	strb	r5, [r4, #26]
    7c16:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    7c1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7c1c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    7c20:	6263      	str	r3, [r4, #36]	; 0x24
    7c22:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    7c26:	f7fc fcfd 	bl	4624 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    7c2a:	f7fb fbe7 	bl	33fc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    7c2e:	f04f 33ff 	mov.w	r3, #4294967295
    7c32:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    7c34:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    7c36:	f7fc fecd 	bl	49d4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    7c3a:	f7fc fda7 	bl	478c <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    7c3e:	f7fa fd81 	bl	2744 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    7c42:	2401      	movs	r4, #1
    7c44:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    7c48:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    7c4c:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    7c4e:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
    7c50:	9529      	str	r5, [sp, #164]	; 0xa4

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    7c52:	4b09      	ldr	r3, [pc, #36]	; (7c78 <z_cstart+0x8c>)
    7c54:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    7c58:	f7ff fd9e 	bl	7798 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    7c5c:	4620      	mov	r0, r4
    7c5e:	f7ff fee9 	bl	7a34 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    7c62:	2002      	movs	r0, #2
    7c64:	f7ff fee6 	bl	7a34 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    7c68:	f7ff ff90 	bl	7b8c <prepare_multithreading>
    7c6c:	f7ff ff56 	bl	7b1c <switch_to_main_thread>
    7c70:	20001b80 	.word	0x20001b80
    7c74:	e000ed00 	.word	0xe000ed00
    7c78:	20000f88 	.word	0x20000f88

00007c7c <z_thread_monitor_exit>:
	__asm__ volatile(
    7c7c:	f04f 0320 	mov.w	r3, #32
    7c80:	f3ef 8111 	mrs	r1, BASEPRI
    7c84:	f383 8812 	msr	BASEPRI_MAX, r3
    7c88:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    7c8c:	4b0a      	ldr	r3, [pc, #40]	; (7cb8 <z_thread_monitor_exit+0x3c>)
    7c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7c90:	4283      	cmp	r3, r0
    7c92:	d104      	bne.n	7c9e <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    7c94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    7c96:	4b08      	ldr	r3, [pc, #32]	; (7cb8 <z_thread_monitor_exit+0x3c>)
    7c98:	625a      	str	r2, [r3, #36]	; 0x24
    7c9a:	e007      	b.n	7cac <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    7c9c:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    7c9e:	b113      	cbz	r3, 7ca6 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    7ca0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    7ca2:	4282      	cmp	r2, r0
    7ca4:	d1fa      	bne.n	7c9c <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    7ca6:	b10b      	cbz	r3, 7cac <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    7ca8:	6f02      	ldr	r2, [r0, #112]	; 0x70
    7caa:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    7cac:	f381 8811 	msr	BASEPRI, r1
    7cb0:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    7cb4:	4770      	bx	lr
    7cb6:	bf00      	nop
    7cb8:	20000f88 	.word	0x20000f88

00007cbc <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    7cbc:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    7cbe:	4604      	mov	r4, r0
    7cc0:	b140      	cbz	r0, 7cd4 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
    7cc2:	221f      	movs	r2, #31
    7cc4:	f104 0074 	add.w	r0, r4, #116	; 0x74
    7cc8:	f002 fb9d 	bl	a406 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    7ccc:	2000      	movs	r0, #0
    7cce:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    7cd2:	bd10      	pop	{r4, pc}
		thread = _current;
    7cd4:	4b01      	ldr	r3, [pc, #4]	; (7cdc <z_impl_k_thread_name_set+0x20>)
    7cd6:	689c      	ldr	r4, [r3, #8]
    7cd8:	e7f3      	b.n	7cc2 <z_impl_k_thread_name_set+0x6>
    7cda:	bf00      	nop
    7cdc:	20000f88 	.word	0x20000f88

00007ce0 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    7ce0:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7ce2:	ea53 0102 	orrs.w	r1, r3, r2
    7ce6:	d102      	bne.n	7cee <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    7ce8:	f003 ff72 	bl	bbd0 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    7cec:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7cee:	4902      	ldr	r1, [pc, #8]	; (7cf8 <schedule_new_thread+0x18>)
    7cf0:	3018      	adds	r0, #24
    7cf2:	f000 ff1d 	bl	8b30 <z_add_timeout>
    7cf6:	e7f9      	b.n	7cec <schedule_new_thread+0xc>
    7cf8:	0000bed1 	.word	0x0000bed1

00007cfc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    7cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d00:	b085      	sub	sp, #20
    7d02:	4604      	mov	r4, r0
    7d04:	460f      	mov	r7, r1
    7d06:	4615      	mov	r5, r2
    7d08:	461e      	mov	r6, r3
    7d0a:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    7d0e:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    7d12:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    7d16:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    7d1a:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    7d1e:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    7d20:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    7d22:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7d24:	2204      	movs	r2, #4
    7d26:	9911      	ldr	r1, [sp, #68]	; 0x44
    7d28:	f003 ff56 	bl	bbd8 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    7d2c:	462a      	mov	r2, r5
    7d2e:	4639      	mov	r1, r7
    7d30:	4620      	mov	r0, r4
    7d32:	f003 ff32 	bl	bb9a <setup_thread_stack>
    7d36:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7d38:	f8cd 8008 	str.w	r8, [sp, #8]
    7d3c:	f8cd 9004 	str.w	r9, [sp, #4]
    7d40:	f8cd a000 	str.w	sl, [sp]
    7d44:	4633      	mov	r3, r6
    7d46:	4602      	mov	r2, r0
    7d48:	4639      	mov	r1, r7
    7d4a:	4620      	mov	r0, r4
    7d4c:	f7fb fd3c 	bl	37c8 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    7d50:	2300      	movs	r3, #0
    7d52:	6563      	str	r3, [r4, #84]	; 0x54
#endif
#ifdef CONFIG_EVENTS
	new_thread->no_wake_on_timeout = false;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    7d54:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    7d56:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    7d5a:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    7d5e:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    7d62:	f04f 0320 	mov.w	r3, #32
    7d66:	f3ef 8211 	mrs	r2, BASEPRI
    7d6a:	f383 8812 	msr	BASEPRI_MAX, r3
    7d6e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    7d72:	4b13      	ldr	r3, [pc, #76]	; (7dc0 <z_setup_new_thread+0xc4>)
    7d74:	6a59      	ldr	r1, [r3, #36]	; 0x24
    7d76:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    7d78:	625c      	str	r4, [r3, #36]	; 0x24
	__asm__ volatile(
    7d7a:	f382 8811 	msr	BASEPRI, r2
    7d7e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    7d82:	f1bb 0f00 	cmp.w	fp, #0
    7d86:	d013      	beq.n	7db0 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    7d88:	221f      	movs	r2, #31
    7d8a:	4659      	mov	r1, fp
    7d8c:	f104 0074 	add.w	r0, r4, #116	; 0x74
    7d90:	f002 fb39 	bl	a406 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    7d94:	2300      	movs	r3, #0
    7d96:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    7d9a:	4b09      	ldr	r3, [pc, #36]	; (7dc0 <z_setup_new_thread+0xc4>)
    7d9c:	689b      	ldr	r3, [r3, #8]
    7d9e:	b15b      	cbz	r3, 7db8 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    7da0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    7da4:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    7da8:	4628      	mov	r0, r5
    7daa:	b005      	add	sp, #20
    7dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    7db0:	2300      	movs	r3, #0
    7db2:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    7db6:	e7f0      	b.n	7d9a <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    7db8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    7dbc:	e7f4      	b.n	7da8 <z_setup_new_thread+0xac>
    7dbe:	bf00      	nop
    7dc0:	20000f88 	.word	0x20000f88

00007dc4 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    7dc4:	b530      	push	{r4, r5, lr}
    7dc6:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    7dc8:	4c21      	ldr	r4, [pc, #132]	; (7e50 <z_init_static_threads+0x8c>)
    7dca:	e014      	b.n	7df6 <z_init_static_threads+0x32>
		z_setup_new_thread(
    7dcc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7dce:	9305      	str	r3, [sp, #20]
    7dd0:	6a23      	ldr	r3, [r4, #32]
    7dd2:	9304      	str	r3, [sp, #16]
    7dd4:	69e3      	ldr	r3, [r4, #28]
    7dd6:	9303      	str	r3, [sp, #12]
    7dd8:	69a3      	ldr	r3, [r4, #24]
    7dda:	9302      	str	r3, [sp, #8]
    7ddc:	6963      	ldr	r3, [r4, #20]
    7dde:	9301      	str	r3, [sp, #4]
    7de0:	6923      	ldr	r3, [r4, #16]
    7de2:	9300      	str	r3, [sp, #0]
    7de4:	68e3      	ldr	r3, [r4, #12]
    7de6:	68a2      	ldr	r2, [r4, #8]
    7de8:	6861      	ldr	r1, [r4, #4]
    7dea:	6820      	ldr	r0, [r4, #0]
    7dec:	f7ff ff86 	bl	7cfc <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    7df0:	6823      	ldr	r3, [r4, #0]
    7df2:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    7df4:	342c      	adds	r4, #44	; 0x2c
    7df6:	4b17      	ldr	r3, [pc, #92]	; (7e54 <z_init_static_threads+0x90>)
    7df8:	429c      	cmp	r4, r3
    7dfa:	d3e7      	bcc.n	7dcc <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    7dfc:	f000 fb08 	bl	8410 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    7e00:	4c13      	ldr	r4, [pc, #76]	; (7e50 <z_init_static_threads+0x8c>)
    7e02:	e000      	b.n	7e06 <z_init_static_threads+0x42>
    7e04:	342c      	adds	r4, #44	; 0x2c
    7e06:	4b13      	ldr	r3, [pc, #76]	; (7e54 <z_init_static_threads+0x90>)
    7e08:	429c      	cmp	r4, r3
    7e0a:	d21c      	bcs.n	7e46 <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    7e0c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7e0e:	f1b0 3fff 	cmp.w	r0, #4294967295
    7e12:	d0f7      	beq.n	7e04 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
    7e14:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    7e16:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    7e1a:	17c1      	asrs	r1, r0, #31
			return ((t * to_hz + off) / from_hz);
    7e1c:	03c9      	lsls	r1, r1, #15
    7e1e:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    7e22:	03c0      	lsls	r0, r0, #15
    7e24:	f240 33e7 	movw	r3, #999	; 0x3e7
    7e28:	18c0      	adds	r0, r0, r3
    7e2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7e2e:	f04f 0300 	mov.w	r3, #0
    7e32:	f141 0100 	adc.w	r1, r1, #0
    7e36:	f7f8 fd81 	bl	93c <__aeabi_uldivmod>
    7e3a:	4602      	mov	r2, r0
    7e3c:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    7e3e:	4628      	mov	r0, r5
    7e40:	f7ff ff4e 	bl	7ce0 <schedule_new_thread>
    7e44:	e7de      	b.n	7e04 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
    7e46:	f000 fccf 	bl	87e8 <k_sched_unlock>
}
    7e4a:	b007      	add	sp, #28
    7e4c:	bd30      	pop	{r4, r5, pc}
    7e4e:	bf00      	nop
    7e50:	0000c458 	.word	0x0000c458
    7e54:	0000c458 	.word	0x0000c458

00007e58 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    7e58:	b508      	push	{r3, lr}
    7e5a:	e001      	b.n	7e60 <idle+0x8>
	arch_cpu_idle();
    7e5c:	f7fb fad4 	bl	3408 <arch_cpu_idle>
	__asm__ volatile(
    7e60:	f04f 0220 	mov.w	r2, #32
    7e64:	f3ef 8311 	mrs	r3, BASEPRI
    7e68:	f382 8812 	msr	BASEPRI_MAX, r2
    7e6c:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    7e70:	f004 f944 	bl	c0fc <z_get_next_timeout_expiry>
    7e74:	4b05      	ldr	r3, [pc, #20]	; (7e8c <idle+0x34>)
    7e76:	6158      	str	r0, [r3, #20]
	return !z_sys_post_kernel;
    7e78:	4b05      	ldr	r3, [pc, #20]	; (7e90 <idle+0x38>)
    7e7a:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    7e7c:	2b00      	cmp	r3, #0
    7e7e:	d0ed      	beq.n	7e5c <idle+0x4>
    7e80:	f7fb f9e6 	bl	3250 <pm_system_suspend>
    7e84:	2800      	cmp	r0, #0
    7e86:	d1eb      	bne.n	7e60 <idle+0x8>
    7e88:	e7e8      	b.n	7e5c <idle+0x4>
    7e8a:	bf00      	nop
    7e8c:	20000f88 	.word	0x20000f88
    7e90:	20000fd5 	.word	0x20000fd5

00007e94 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    7e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e98:	b082      	sub	sp, #8
    7e9a:	4604      	mov	r4, r0
    7e9c:	461e      	mov	r6, r3
    7e9e:	f04f 0320 	mov.w	r3, #32
    7ea2:	f3ef 8511 	mrs	r5, BASEPRI
    7ea6:	f383 8812 	msr	BASEPRI_MAX, r3
    7eaa:	f3bf 8f6f 	isb	sy
    7eae:	462b      	mov	r3, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    7eb0:	68c1      	ldr	r1, [r0, #12]
    7eb2:	b999      	cbnz	r1, 7edc <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    7eb4:	2900      	cmp	r1, #0
    7eb6:	d151      	bne.n	7f5c <z_impl_k_mutex_lock+0xc8>
    7eb8:	4a36      	ldr	r2, [pc, #216]	; (7f94 <z_impl_k_mutex_lock+0x100>)
    7eba:	6892      	ldr	r2, [r2, #8]
    7ebc:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    7ec0:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    7ec2:	3101      	adds	r1, #1
    7ec4:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    7ec6:	4a33      	ldr	r2, [pc, #204]	; (7f94 <z_impl_k_mutex_lock+0x100>)
    7ec8:	6892      	ldr	r2, [r2, #8]
    7eca:	60a2      	str	r2, [r4, #8]
	__asm__ volatile(
    7ecc:	f383 8811 	msr	BASEPRI, r3
    7ed0:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    7ed4:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    7ed6:	b002      	add	sp, #8
    7ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7edc:	4617      	mov	r7, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    7ede:	6880      	ldr	r0, [r0, #8]
    7ee0:	4a2c      	ldr	r2, [pc, #176]	; (7f94 <z_impl_k_mutex_lock+0x100>)
    7ee2:	6892      	ldr	r2, [r2, #8]
    7ee4:	4290      	cmp	r0, r2
    7ee6:	d0e5      	beq.n	7eb4 <z_impl_k_mutex_lock+0x20>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    7ee8:	ea56 0107 	orrs.w	r1, r6, r7
    7eec:	d038      	beq.n	7f60 <z_impl_k_mutex_lock+0xcc>
					    mutex->owner->base.prio);
    7eee:	f990 800e 	ldrsb.w	r8, [r0, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    7ef2:	4641      	mov	r1, r8
    7ef4:	f992 000e 	ldrsb.w	r0, [r2, #14]
    7ef8:	f003 fea1 	bl	bc3e <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    7efc:	4580      	cmp	r8, r0
    7efe:	dc36      	bgt.n	7f6e <z_impl_k_mutex_lock+0xda>
	bool resched = false;
    7f00:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    7f04:	9700      	str	r7, [sp, #0]
    7f06:	9601      	str	r6, [sp, #4]
    7f08:	4622      	mov	r2, r4
    7f0a:	4629      	mov	r1, r5
    7f0c:	4822      	ldr	r0, [pc, #136]	; (7f98 <z_impl_k_mutex_lock+0x104>)
    7f0e:	f000 fbb7 	bl	8680 <z_pend_curr>
	if (got_mutex == 0) {
    7f12:	2800      	cmp	r0, #0
    7f14:	d0df      	beq.n	7ed6 <z_impl_k_mutex_lock+0x42>
	__asm__ volatile(
    7f16:	f04f 0320 	mov.w	r3, #32
    7f1a:	f3ef 8511 	mrs	r5, BASEPRI
    7f1e:	f383 8812 	msr	BASEPRI_MAX, r3
    7f22:	f3bf 8f6f 	isb	sy
    7f26:	462e      	mov	r6, r5
	if (likely(mutex->owner != NULL)) {
    7f28:	68a3      	ldr	r3, [r4, #8]
    7f2a:	b343      	cbz	r3, 7f7e <z_impl_k_mutex_lock+0xea>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    7f2c:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7f2e:	429c      	cmp	r4, r3
    7f30:	d023      	beq.n	7f7a <z_impl_k_mutex_lock+0xe6>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    7f32:	b313      	cbz	r3, 7f7a <z_impl_k_mutex_lock+0xe6>
    7f34:	6921      	ldr	r1, [r4, #16]
    7f36:	f993 000e 	ldrsb.w	r0, [r3, #14]
    7f3a:	f003 fe80 	bl	bc3e <new_prio_for_inheritance>
    7f3e:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    7f40:	4620      	mov	r0, r4
    7f42:	f003 fe87 	bl	bc54 <adjust_owner_prio>
    7f46:	b9e8      	cbnz	r0, 7f84 <z_impl_k_mutex_lock+0xf0>
    7f48:	f1b8 0f00 	cmp.w	r8, #0
    7f4c:	d11a      	bne.n	7f84 <z_impl_k_mutex_lock+0xf0>
	__asm__ volatile(
    7f4e:	f386 8811 	msr	BASEPRI, r6
    7f52:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    7f56:	f06f 000a 	mvn.w	r0, #10
    7f5a:	e7bc      	b.n	7ed6 <z_impl_k_mutex_lock+0x42>
					_current->base.prio :
    7f5c:	6922      	ldr	r2, [r4, #16]
    7f5e:	e7af      	b.n	7ec0 <z_impl_k_mutex_lock+0x2c>
    7f60:	f385 8811 	msr	BASEPRI, r5
    7f64:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    7f68:	f06f 000f 	mvn.w	r0, #15
    7f6c:	e7b3      	b.n	7ed6 <z_impl_k_mutex_lock+0x42>
		resched = adjust_owner_prio(mutex, new_prio);
    7f6e:	4601      	mov	r1, r0
    7f70:	4620      	mov	r0, r4
    7f72:	f003 fe6f 	bl	bc54 <adjust_owner_prio>
    7f76:	4680      	mov	r8, r0
    7f78:	e7c4      	b.n	7f04 <z_impl_k_mutex_lock+0x70>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    7f7a:	6921      	ldr	r1, [r4, #16]
    7f7c:	e7e0      	b.n	7f40 <z_impl_k_mutex_lock+0xac>
	if (resched) {
    7f7e:	f1b8 0f00 	cmp.w	r8, #0
    7f82:	d0e4      	beq.n	7f4e <z_impl_k_mutex_lock+0xba>
		z_reschedule(&lock, key);
    7f84:	4629      	mov	r1, r5
    7f86:	4804      	ldr	r0, [pc, #16]	; (7f98 <z_impl_k_mutex_lock+0x104>)
    7f88:	f000 fa2c 	bl	83e4 <z_reschedule>
	return -EAGAIN;
    7f8c:	f06f 000a 	mvn.w	r0, #10
    7f90:	e7a1      	b.n	7ed6 <z_impl_k_mutex_lock+0x42>
    7f92:	bf00      	nop
    7f94:	20000f88 	.word	0x20000f88
    7f98:	20000fb0 	.word	0x20000fb0

00007f9c <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    7f9c:	6883      	ldr	r3, [r0, #8]
    7f9e:	b38b      	cbz	r3, 8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>
{
    7fa0:	b570      	push	{r4, r5, r6, lr}
    7fa2:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    7fa4:	4a1a      	ldr	r2, [pc, #104]	; (8010 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10>)
    7fa6:	6892      	ldr	r2, [r2, #8]
    7fa8:	4293      	cmp	r3, r2
    7faa:	d12e      	bne.n	800a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    7fac:	68c3      	ldr	r3, [r0, #12]
    7fae:	2b01      	cmp	r3, #1
    7fb0:	d903      	bls.n	7fba <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    7fb2:	3b01      	subs	r3, #1
    7fb4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    7fb6:	2000      	movs	r0, #0
}
    7fb8:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    7fba:	f04f 0320 	mov.w	r3, #32
    7fbe:	f3ef 8511 	mrs	r5, BASEPRI
    7fc2:	f383 8812 	msr	BASEPRI_MAX, r3
    7fc6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    7fca:	6901      	ldr	r1, [r0, #16]
    7fcc:	f003 fe42 	bl	bc54 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    7fd0:	4620      	mov	r0, r4
    7fd2:	f003 ffed 	bl	bfb0 <z_unpend_first_thread>
	mutex->owner = new_owner;
    7fd6:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    7fd8:	b168      	cbz	r0, 7ff6 <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
    7fda:	f990 300e 	ldrsb.w	r3, [r0, #14]
    7fde:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    7fe0:	2400      	movs	r4, #0
    7fe2:	f8c0 40ac 	str.w	r4, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    7fe6:	f003 ff2d 	bl	be44 <z_ready_thread>
		z_reschedule(&lock, key);
    7fea:	4629      	mov	r1, r5
    7fec:	4809      	ldr	r0, [pc, #36]	; (8014 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14>)
    7fee:	f000 f9f9 	bl	83e4 <z_reschedule>
	return 0;
    7ff2:	4620      	mov	r0, r4
    7ff4:	e7e0      	b.n	7fb8 <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
    7ff6:	2000      	movs	r0, #0
    7ff8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    7ffa:	f385 8811 	msr	BASEPRI, r5
    7ffe:	f3bf 8f6f 	isb	sy
    8002:	e7d9      	b.n	7fb8 <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
    8004:	f06f 0015 	mvn.w	r0, #21
}
    8008:	4770      	bx	lr
		return -EPERM;
    800a:	f04f 30ff 	mov.w	r0, #4294967295
    800e:	e7d3      	b.n	7fb8 <z_impl_k_mutex_unlock+0x1c>
    8010:	20000f88 	.word	0x20000f88
    8014:	20000fb0 	.word	0x20000fb0

00008018 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    8018:	b538      	push	{r3, r4, r5, lr}
    801a:	4604      	mov	r4, r0
	__asm__ volatile(
    801c:	f04f 0320 	mov.w	r3, #32
    8020:	f3ef 8511 	mrs	r5, BASEPRI
    8024:	f383 8812 	msr	BASEPRI_MAX, r3
    8028:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    802c:	f003 ffc0 	bl	bfb0 <z_unpend_first_thread>

	if (thread != NULL) {
    8030:	b148      	cbz	r0, 8046 <z_impl_k_sem_give+0x2e>
    8032:	2200      	movs	r2, #0
    8034:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    8038:	f003 ff04 	bl	be44 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    803c:	4629      	mov	r1, r5
    803e:	4807      	ldr	r0, [pc, #28]	; (805c <z_impl_k_sem_give+0x44>)
    8040:	f000 f9d0 	bl	83e4 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    8044:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    8046:	68a3      	ldr	r3, [r4, #8]
    8048:	68e2      	ldr	r2, [r4, #12]
    804a:	4293      	cmp	r3, r2
    804c:	d003      	beq.n	8056 <z_impl_k_sem_give+0x3e>
    804e:	2201      	movs	r2, #1
    8050:	4413      	add	r3, r2
    8052:	60a3      	str	r3, [r4, #8]
}
    8054:	e7f2      	b.n	803c <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    8056:	2200      	movs	r2, #0
    8058:	e7fa      	b.n	8050 <z_impl_k_sem_give+0x38>
    805a:	bf00      	nop
    805c:	20000fb0 	.word	0x20000fb0

00008060 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    8060:	b510      	push	{r4, lr}
    8062:	b082      	sub	sp, #8
    8064:	f04f 0420 	mov.w	r4, #32
    8068:	f3ef 8111 	mrs	r1, BASEPRI
    806c:	f384 8812 	msr	BASEPRI_MAX, r4
    8070:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    8074:	6884      	ldr	r4, [r0, #8]
    8076:	b144      	cbz	r4, 808a <z_impl_k_sem_take+0x2a>
		sem->count--;
    8078:	3c01      	subs	r4, #1
    807a:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    807c:	f381 8811 	msr	BASEPRI, r1
    8080:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    8084:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    8086:	b002      	add	sp, #8
    8088:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    808a:	ea53 0402 	orrs.w	r4, r3, r2
    808e:	d006      	beq.n	809e <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    8090:	9200      	str	r2, [sp, #0]
    8092:	9301      	str	r3, [sp, #4]
    8094:	4602      	mov	r2, r0
    8096:	4805      	ldr	r0, [pc, #20]	; (80ac <z_impl_k_sem_take+0x4c>)
    8098:	f000 faf2 	bl	8680 <z_pend_curr>
	return ret;
    809c:	e7f3      	b.n	8086 <z_impl_k_sem_take+0x26>
    809e:	f381 8811 	msr	BASEPRI, r1
    80a2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    80a6:	f06f 000f 	mvn.w	r0, #15
    80aa:	e7ec      	b.n	8086 <z_impl_k_sem_take+0x26>
    80ac:	20000fb0 	.word	0x20000fb0

000080b0 <queue_submit_locked>:
 * @retval -EBUSY if the submission was rejected (draining, plugged)
 */
static inline int queue_submit_locked(struct k_work_q *queue,
				      struct k_work *work)
{
	if (queue == NULL) {
    80b0:	b370      	cbz	r0, 8110 <queue_submit_locked+0x60>
{
    80b2:	b538      	push	{r3, r4, r5, lr}
    80b4:	460d      	mov	r5, r1
    80b6:	4604      	mov	r4, r0
		return -EINVAL;
	}

	int ret = -EBUSY;
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    80b8:	4b1b      	ldr	r3, [pc, #108]	; (8128 <queue_submit_locked+0x78>)
    80ba:	689b      	ldr	r3, [r3, #8]
    80bc:	4283      	cmp	r3, r0
    80be:	d01b      	beq.n	80f8 <queue_submit_locked+0x48>
    80c0:	2300      	movs	r3, #0
    80c2:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
    80c4:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    80c8:	f3c3 0180 	ubfx	r1, r3, #2, #1
    80cc:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	 * * -ENODEV if the queue isn't running.
	 * * -EBUSY if draining and not chained
	 * * -EBUSY if plugged and not draining
	 * * otherwise OK
	 */
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    80d0:	f013 0f01 	tst.w	r3, #1
    80d4:	d01f      	beq.n	8116 <queue_submit_locked+0x66>
		ret = -ENODEV;
	} else if (draining && !chained) {
    80d6:	b101      	cbz	r1, 80da <queue_submit_locked+0x2a>
    80d8:	b302      	cbz	r2, 811c <queue_submit_locked+0x6c>
		ret = -EBUSY;
	} else if (plugged && !draining) {
    80da:	b100      	cbz	r0, 80de <queue_submit_locked+0x2e>
    80dc:	b309      	cbz	r1, 8122 <queue_submit_locked+0x72>
	parent->next = child;
    80de:	2300      	movs	r3, #0
    80e0:	602b      	str	r3, [r5, #0]
	return list->tail;
    80e2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    80e6:	b173      	cbz	r3, 8106 <queue_submit_locked+0x56>
	parent->next = child;
    80e8:	601d      	str	r5, [r3, #0]
	list->tail = node;
    80ea:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
		ret = -EBUSY;
	} else {
		sys_slist_append(&queue->pending, &work->node);
		ret = 1;
		(void)notify_queue_locked(queue);
    80ee:	4620      	mov	r0, r4
    80f0:	f003 fde4 	bl	bcbc <notify_queue_locked>
		ret = 1;
    80f4:	2001      	movs	r0, #1
	}

	return ret;
}
    80f6:	bd38      	pop	{r3, r4, r5, pc}
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    80f8:	f003 fd62 	bl	bbc0 <k_is_in_isr>
    80fc:	b908      	cbnz	r0, 8102 <queue_submit_locked+0x52>
    80fe:	2301      	movs	r3, #1
    8100:	e7df      	b.n	80c2 <queue_submit_locked+0x12>
    8102:	2300      	movs	r3, #0
    8104:	e7dd      	b.n	80c2 <queue_submit_locked+0x12>
    8106:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
	list->head = node;
    810a:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
}
    810e:	e7ee      	b.n	80ee <queue_submit_locked+0x3e>
		return -EINVAL;
    8110:	f06f 0015 	mvn.w	r0, #21
}
    8114:	4770      	bx	lr
		ret = -ENODEV;
    8116:	f06f 0012 	mvn.w	r0, #18
    811a:	e7ec      	b.n	80f6 <queue_submit_locked+0x46>
		ret = -EBUSY;
    811c:	f06f 000f 	mvn.w	r0, #15
    8120:	e7e9      	b.n	80f6 <queue_submit_locked+0x46>
		ret = -EBUSY;
    8122:	f06f 000f 	mvn.w	r0, #15
    8126:	e7e6      	b.n	80f6 <queue_submit_locked+0x46>
    8128:	20000f88 	.word	0x20000f88

0000812c <finalize_cancel_locked>:
{
    812c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    812e:	4606      	mov	r6, r0
	*flagp &= ~BIT(bit);
    8130:	68c3      	ldr	r3, [r0, #12]
    8132:	f023 0302 	bic.w	r3, r3, #2
    8136:	60c3      	str	r3, [r0, #12]
	return list->head;
    8138:	4b13      	ldr	r3, [pc, #76]	; (8188 <finalize_cancel_locked+0x5c>)
    813a:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    813c:	b185      	cbz	r5, 8160 <finalize_cancel_locked+0x34>
	return node->next;
    813e:	682c      	ldr	r4, [r5, #0]
    8140:	b104      	cbz	r4, 8144 <finalize_cancel_locked+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
    8142:	b10d      	cbz	r5, 8148 <finalize_cancel_locked+0x1c>
    8144:	2700      	movs	r7, #0
    8146:	e010      	b.n	816a <finalize_cancel_locked+0x3e>
    8148:	462c      	mov	r4, r5
    814a:	e7fb      	b.n	8144 <finalize_cancel_locked+0x18>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    814c:	462a      	mov	r2, r5
    814e:	4639      	mov	r1, r7
    8150:	480d      	ldr	r0, [pc, #52]	; (8188 <finalize_cancel_locked+0x5c>)
    8152:	f003 fda0 	bl	bc96 <sys_slist_remove>
			k_sem_give(&wc->sem);
    8156:	f105 0008 	add.w	r0, r5, #8
	z_impl_k_sem_give(sem);
    815a:	f7ff ff5d 	bl	8018 <z_impl_k_sem_give>
}
    815e:	e009      	b.n	8174 <finalize_cancel_locked+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    8160:	462c      	mov	r4, r5
    8162:	e7ef      	b.n	8144 <finalize_cancel_locked+0x18>
    8164:	4623      	mov	r3, r4
    8166:	4625      	mov	r5, r4
    8168:	461c      	mov	r4, r3
    816a:	b165      	cbz	r5, 8186 <finalize_cancel_locked+0x5a>
		if (wc->work == work) {
    816c:	686b      	ldr	r3, [r5, #4]
    816e:	42b3      	cmp	r3, r6
    8170:	d0ec      	beq.n	814c <finalize_cancel_locked+0x20>
			prev = &wc->node;
    8172:	462f      	mov	r7, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    8174:	2c00      	cmp	r4, #0
    8176:	d0f5      	beq.n	8164 <finalize_cancel_locked+0x38>
	return node->next;
    8178:	6823      	ldr	r3, [r4, #0]
    817a:	2b00      	cmp	r3, #0
    817c:	d0f3      	beq.n	8166 <finalize_cancel_locked+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    817e:	2c00      	cmp	r4, #0
    8180:	d1f1      	bne.n	8166 <finalize_cancel_locked+0x3a>
    8182:	4623      	mov	r3, r4
    8184:	e7ef      	b.n	8166 <finalize_cancel_locked+0x3a>
}
    8186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8188:	20000fb0 	.word	0x20000fb0

0000818c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    818c:	b570      	push	{r4, r5, r6, lr}
    818e:	b084      	sub	sp, #16
    8190:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
    8192:	e016      	b.n	81c2 <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
    8194:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
	*flagp &= ~BIT(bit);
    8198:	f023 0204 	bic.w	r2, r3, #4
    819c:	f8c5 20c8 	str.w	r2, [r5, #200]	; 0xc8
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    81a0:	f013 0f04 	tst.w	r3, #4
    81a4:	d15a      	bne.n	825c <work_queue_main+0xd0>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    81a6:	2300      	movs	r3, #0
    81a8:	9302      	str	r3, [sp, #8]
    81aa:	f04f 32ff 	mov.w	r2, #4294967295
    81ae:	f04f 33ff 	mov.w	r3, #4294967295
    81b2:	e9cd 2300 	strd	r2, r3, [sp]
    81b6:	f105 02b8 	add.w	r2, r5, #184	; 0xb8
    81ba:	4631      	mov	r1, r6
    81bc:	482e      	ldr	r0, [pc, #184]	; (8278 <work_queue_main+0xec>)
    81be:	f000 fc67 	bl	8a90 <z_sched_wait>
	__asm__ volatile(
    81c2:	f04f 0320 	mov.w	r3, #32
    81c6:	f3ef 8611 	mrs	r6, BASEPRI
    81ca:	f383 8812 	msr	BASEPRI_MAX, r3
    81ce:	f3bf 8f6f 	isb	sy
    81d2:	4632      	mov	r2, r6
	return list->head;
    81d4:	f8d5 40b0 	ldr.w	r4, [r5, #176]	; 0xb0
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    81d8:	2c00      	cmp	r4, #0
    81da:	d0db      	beq.n	8194 <work_queue_main+0x8>
	return node->next;
    81dc:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    81de:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
	return list->tail;
    81e2:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    81e6:	428c      	cmp	r4, r1
    81e8:	d035      	beq.n	8256 <work_queue_main+0xca>
	*flagp |= BIT(bit);
    81ea:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    81ee:	f043 0302 	orr.w	r3, r3, #2
    81f2:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
    81f6:	68e3      	ldr	r3, [r4, #12]
    81f8:	f043 0101 	orr.w	r1, r3, #1
    81fc:	60e1      	str	r1, [r4, #12]
	*flagp &= ~BIT(bit);
    81fe:	f023 0304 	bic.w	r3, r3, #4
    8202:	f043 0301 	orr.w	r3, r3, #1
    8206:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
    8208:	6863      	ldr	r3, [r4, #4]
	__asm__ volatile(
    820a:	f382 8811 	msr	BASEPRI, r2
    820e:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    8212:	4620      	mov	r0, r4
    8214:	4798      	blx	r3
	__asm__ volatile(
    8216:	f04f 0320 	mov.w	r3, #32
    821a:	f3ef 8611 	mrs	r6, BASEPRI
    821e:	f383 8812 	msr	BASEPRI_MAX, r3
    8222:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    8226:	68e3      	ldr	r3, [r4, #12]
    8228:	f023 0301 	bic.w	r3, r3, #1
    822c:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    822e:	f013 0f02 	tst.w	r3, #2
    8232:	d11d      	bne.n	8270 <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
    8234:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    8238:	f023 0302 	bic.w	r3, r3, #2
    823c:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	return (*flagp & BIT(bit)) != 0U;
    8240:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
    8244:	f386 8811 	msr	BASEPRI, r6
    8248:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    824c:	2b00      	cmp	r3, #0
    824e:	d1b8      	bne.n	81c2 <work_queue_main+0x36>
	z_impl_k_yield();
    8250:	f000 fb24 	bl	889c <z_impl_k_yield>
}
    8254:	e7b5      	b.n	81c2 <work_queue_main+0x36>
	list->tail = node;
    8256:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
		if (node != NULL) {
    825a:	e7c6      	b.n	81ea <work_queue_main+0x5e>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    825c:	f105 04c0 	add.w	r4, r5, #192	; 0xc0
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    8260:	2200      	movs	r2, #0
    8262:	2101      	movs	r1, #1
    8264:	4620      	mov	r0, r4
    8266:	f003 fec9 	bl	bffc <z_sched_wake>
    826a:	2800      	cmp	r0, #0
    826c:	d1f8      	bne.n	8260 <work_queue_main+0xd4>
    826e:	e79a      	b.n	81a6 <work_queue_main+0x1a>
			finalize_cancel_locked(work);
    8270:	4620      	mov	r0, r4
    8272:	f7ff ff5b 	bl	812c <finalize_cancel_locked>
    8276:	e7dd      	b.n	8234 <work_queue_main+0xa8>
    8278:	20000fb8 	.word	0x20000fb8

0000827c <k_work_submit>:
{
    827c:	b508      	push	{r3, lr}
    827e:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
    8280:	4801      	ldr	r0, [pc, #4]	; (8288 <k_work_submit+0xc>)
    8282:	f003 fd76 	bl	bd72 <k_work_submit_to_queue>
}
    8286:	bd08      	pop	{r3, pc}
    8288:	200007e0 	.word	0x200007e0

0000828c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    828c:	b5f0      	push	{r4, r5, r6, r7, lr}
    828e:	b089      	sub	sp, #36	; 0x24
    8290:	4604      	mov	r4, r0
    8292:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
    8294:	2000      	movs	r0, #0
    8296:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
	list->tail = NULL;
    829a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    829e:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
	list->head = (sys_dnode_t *)list;
    82a2:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = (sys_dnode_t *)list;
    82a6:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    82aa:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
    82ae:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
    82b2:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    82b6:	b1fd      	cbz	r5, 82f8 <k_work_queue_start+0x6c>
    82b8:	7928      	ldrb	r0, [r5, #4]
    82ba:	b9f8      	cbnz	r0, 82fc <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    82bc:	2001      	movs	r0, #1
	*flagp = flags;
    82be:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    82c2:	f04f 36ff 	mov.w	r6, #4294967295
    82c6:	f04f 37ff 	mov.w	r7, #4294967295
    82ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
    82ce:	2000      	movs	r0, #0
    82d0:	9004      	str	r0, [sp, #16]
    82d2:	9303      	str	r3, [sp, #12]
    82d4:	9002      	str	r0, [sp, #8]
    82d6:	9001      	str	r0, [sp, #4]
    82d8:	9400      	str	r4, [sp, #0]
    82da:	4b0a      	ldr	r3, [pc, #40]	; (8304 <k_work_queue_start+0x78>)
    82dc:	4620      	mov	r0, r4
    82de:	f003 fc86 	bl	bbee <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    82e2:	b125      	cbz	r5, 82ee <k_work_queue_start+0x62>
    82e4:	6829      	ldr	r1, [r5, #0]
    82e6:	b111      	cbz	r1, 82ee <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
    82e8:	4620      	mov	r0, r4
    82ea:	f7ff fce7 	bl	7cbc <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    82ee:	4620      	mov	r0, r4
    82f0:	f003 fc6e 	bl	bbd0 <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    82f4:	b009      	add	sp, #36	; 0x24
    82f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
    82f8:	2001      	movs	r0, #1
    82fa:	e7e0      	b.n	82be <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
    82fc:	f240 1001 	movw	r0, #257	; 0x101
    8300:	e7dd      	b.n	82be <k_work_queue_start+0x32>
    8302:	bf00      	nop
    8304:	0000818d 	.word	0x0000818d

00008308 <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    8308:	89c3      	ldrh	r3, [r0, #14]
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    830a:	2b7f      	cmp	r3, #127	; 0x7f
    830c:	d811      	bhi.n	8332 <sliceable+0x2a>
	int ret = slice_ticks;
    830e:	4b0e      	ldr	r3, [pc, #56]	; (8348 <sliceable+0x40>)
    8310:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    8312:	b17b      	cbz	r3, 8334 <sliceable+0x2c>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    8314:	f990 200e 	ldrsb.w	r2, [r0, #14]
    8318:	4b0c      	ldr	r3, [pc, #48]	; (834c <sliceable+0x44>)
    831a:	681b      	ldr	r3, [r3, #0]
    831c:	429a      	cmp	r2, r3
    831e:	db0c      	blt.n	833a <sliceable+0x32>
	uint8_t state = thread->base.thread_state;
    8320:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
    8322:	f013 0f1f 	tst.w	r3, #31
    8326:	d10a      	bne.n	833e <sliceable+0x36>
		&& !z_is_idle_thread_object(thread);
    8328:	4b09      	ldr	r3, [pc, #36]	; (8350 <sliceable+0x48>)
    832a:	4298      	cmp	r0, r3
    832c:	d009      	beq.n	8342 <sliceable+0x3a>
    832e:	2301      	movs	r3, #1
    8330:	e000      	b.n	8334 <sliceable+0x2c>
    8332:	2300      	movs	r3, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    8334:	f003 0001 	and.w	r0, r3, #1
    8338:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    833a:	2300      	movs	r3, #0
    833c:	e7fa      	b.n	8334 <sliceable+0x2c>
    833e:	2300      	movs	r3, #0
    8340:	e7f8      	b.n	8334 <sliceable+0x2c>
    8342:	2300      	movs	r3, #0
    8344:	e7f6      	b.n	8334 <sliceable+0x2c>
    8346:	bf00      	nop
    8348:	20000fc4 	.word	0x20000fc4
    834c:	20000fc0 	.word	0x20000fc0
    8350:	20000660 	.word	0x20000660

00008354 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    8354:	4b04      	ldr	r3, [pc, #16]	; (8368 <slice_timeout+0x14>)
    8356:	1ac0      	subs	r0, r0, r3
    8358:	10c0      	asrs	r0, r0, #3
    835a:	4b04      	ldr	r3, [pc, #16]	; (836c <slice_timeout+0x18>)
    835c:	fb03 f000 	mul.w	r0, r3, r0

	slice_expired[cpu] = true;
    8360:	4b03      	ldr	r3, [pc, #12]	; (8370 <slice_timeout+0x1c>)
    8362:	2201      	movs	r2, #1
    8364:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    8366:	4770      	bx	lr
    8368:	200007c0 	.word	0x200007c0
    836c:	aaaaaaab 	.word	0xaaaaaaab
    8370:	20000fbc 	.word	0x20000fbc

00008374 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8374:	f1b3 3fff 	cmp.w	r3, #4294967295
    8378:	bf08      	it	eq
    837a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    837e:	d100      	bne.n	8382 <add_thread_timeout+0xe>
    8380:	4770      	bx	lr
{
    8382:	b508      	push	{r3, lr}
    8384:	4902      	ldr	r1, [pc, #8]	; (8390 <add_thread_timeout+0x1c>)
    8386:	3018      	adds	r0, #24
    8388:	f000 fbd2 	bl	8b30 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    838c:	bd08      	pop	{r3, pc}
    838e:	bf00      	nop
    8390:	0000bed1 	.word	0x0000bed1

00008394 <z_reset_time_slice>:
{
    8394:	b570      	push	{r4, r5, r6, lr}
    8396:	4605      	mov	r5, r0
	int cpu = _current_cpu->id;
    8398:	4b0d      	ldr	r3, [pc, #52]	; (83d0 <z_reset_time_slice+0x3c>)
    839a:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
    839c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    83a0:	4c0c      	ldr	r4, [pc, #48]	; (83d4 <z_reset_time_slice+0x40>)
    83a2:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    83a6:	4620      	mov	r0, r4
    83a8:	f003 fe8a 	bl	c0c0 <z_abort_timeout>
	slice_expired[cpu] = false;
    83ac:	4b0a      	ldr	r3, [pc, #40]	; (83d8 <z_reset_time_slice+0x44>)
    83ae:	2200      	movs	r2, #0
    83b0:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    83b2:	4628      	mov	r0, r5
    83b4:	f7ff ffa8 	bl	8308 <sliceable>
    83b8:	b900      	cbnz	r0, 83bc <z_reset_time_slice+0x28>
}
    83ba:	bd70      	pop	{r4, r5, r6, pc}
	int ret = slice_ticks;
    83bc:	4b07      	ldr	r3, [pc, #28]	; (83dc <z_reset_time_slice+0x48>)
    83be:	681a      	ldr	r2, [r3, #0]
			      K_TICKS(slice_time(curr) - 1));
    83c0:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    83c2:	17d3      	asrs	r3, r2, #31
    83c4:	4906      	ldr	r1, [pc, #24]	; (83e0 <z_reset_time_slice+0x4c>)
    83c6:	4620      	mov	r0, r4
    83c8:	f000 fbb2 	bl	8b30 <z_add_timeout>
}
    83cc:	e7f5      	b.n	83ba <z_reset_time_slice+0x26>
    83ce:	bf00      	nop
    83d0:	20000f88 	.word	0x20000f88
    83d4:	200007c0 	.word	0x200007c0
    83d8:	20000fbc 	.word	0x20000fbc
    83dc:	20000fc4 	.word	0x20000fc4
    83e0:	00008355 	.word	0x00008355

000083e4 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    83e4:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    83e6:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    83e8:	b959      	cbnz	r1, 8402 <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    83ea:	f3ef 8205 	mrs	r2, IPSR
    83ee:	b942      	cbnz	r2, 8402 <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
    83f0:	4a06      	ldr	r2, [pc, #24]	; (840c <z_reschedule+0x28>)
    83f2:	6990      	ldr	r0, [r2, #24]
	return new_thread != _current;
    83f4:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
    83f6:	4290      	cmp	r0, r2
    83f8:	d003      	beq.n	8402 <z_reschedule+0x1e>
	ret = arch_swap(key);
    83fa:	4608      	mov	r0, r1
    83fc:	f7fb f98c 	bl	3718 <arch_swap>
		z_swap(lock, key);
    8400:	e003      	b.n	840a <z_reschedule+0x26>
    8402:	f383 8811 	msr	BASEPRI, r3
    8406:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
    840a:	bd08      	pop	{r3, pc}
    840c:	20000f88 	.word	0x20000f88

00008410 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    8410:	2300      	movs	r3, #0
	__asm__ volatile(
    8412:	f04f 0220 	mov.w	r2, #32
    8416:	f3ef 8111 	mrs	r1, BASEPRI
    841a:	f382 8812 	msr	BASEPRI_MAX, r2
    841e:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
    8422:	e009      	b.n	8438 <k_sched_lock+0x28>
	--_current->base.sched_locked;
    8424:	4b06      	ldr	r3, [pc, #24]	; (8440 <k_sched_lock+0x30>)
    8426:	689a      	ldr	r2, [r3, #8]
    8428:	7bd3      	ldrb	r3, [r2, #15]
    842a:	3b01      	subs	r3, #1
    842c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    842e:	f381 8811 	msr	BASEPRI, r1
    8432:	f3bf 8f6f 	isb	sy
    8436:	2301      	movs	r3, #1
    8438:	2b00      	cmp	r3, #0
    843a:	d0f3      	beq.n	8424 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    843c:	4770      	bx	lr
    843e:	bf00      	nop
    8440:	20000f88 	.word	0x20000f88

00008444 <update_cache>:
{
    8444:	b538      	push	{r3, r4, r5, lr}
    8446:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    8448:	4810      	ldr	r0, [pc, #64]	; (848c <update_cache+0x48>)
    844a:	f003 fcf4 	bl	be36 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    844e:	4605      	mov	r5, r0
    8450:	b170      	cbz	r0, 8470 <update_cache+0x2c>
	if (preempt_ok != 0) {
    8452:	b984      	cbnz	r4, 8476 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    8454:	4b0e      	ldr	r3, [pc, #56]	; (8490 <update_cache+0x4c>)
    8456:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    8458:	7b5a      	ldrb	r2, [r3, #13]
    845a:	f012 0f1f 	tst.w	r2, #31
    845e:	d10a      	bne.n	8476 <update_cache+0x32>
	return node->next != NULL;
    8460:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    8462:	b942      	cbnz	r2, 8476 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    8464:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    8466:	2a7f      	cmp	r2, #127	; 0x7f
    8468:	d905      	bls.n	8476 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    846a:	4a09      	ldr	r2, [pc, #36]	; (8490 <update_cache+0x4c>)
    846c:	6193      	str	r3, [r2, #24]
    846e:	e00b      	b.n	8488 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    8470:	4b07      	ldr	r3, [pc, #28]	; (8490 <update_cache+0x4c>)
    8472:	68dd      	ldr	r5, [r3, #12]
    8474:	e7ed      	b.n	8452 <update_cache+0xe>
		if (thread != _current) {
    8476:	4b06      	ldr	r3, [pc, #24]	; (8490 <update_cache+0x4c>)
    8478:	689b      	ldr	r3, [r3, #8]
    847a:	42ab      	cmp	r3, r5
    847c:	d002      	beq.n	8484 <update_cache+0x40>
			z_reset_time_slice(thread);
    847e:	4628      	mov	r0, r5
    8480:	f7ff ff88 	bl	8394 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    8484:	4b02      	ldr	r3, [pc, #8]	; (8490 <update_cache+0x4c>)
    8486:	619d      	str	r5, [r3, #24]
}
    8488:	bd38      	pop	{r3, r4, r5, pc}
    848a:	bf00      	nop
    848c:	20000fa4 	.word	0x20000fa4
    8490:	20000f88 	.word	0x20000f88

00008494 <move_thread_to_end_of_prio_q>:
{
    8494:	b538      	push	{r3, r4, r5, lr}
    8496:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    8498:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    849a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    849e:	2b00      	cmp	r3, #0
    84a0:	db0a      	blt.n	84b8 <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
    84a2:	7b6b      	ldrb	r3, [r5, #13]
    84a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    84a8:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    84aa:	4b1b      	ldr	r3, [pc, #108]	; (8518 <move_thread_to_end_of_prio_q+0x84>)
    84ac:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    84b0:	429c      	cmp	r4, r3
    84b2:	d110      	bne.n	84d6 <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    84b4:	2400      	movs	r4, #0
    84b6:	e00e      	b.n	84d6 <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    84b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    84bc:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    84be:	4601      	mov	r1, r0
    84c0:	4816      	ldr	r0, [pc, #88]	; (851c <move_thread_to_end_of_prio_q+0x88>)
    84c2:	f003 fca2 	bl	be0a <z_priq_dumb_remove>
}
    84c6:	e7ec      	b.n	84a2 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    84c8:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    84ca:	606b      	str	r3, [r5, #4]
	node->next = successor;
    84cc:	602c      	str	r4, [r5, #0]
	prev->next = node;
    84ce:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    84d0:	6065      	str	r5, [r4, #4]
}
    84d2:	e017      	b.n	8504 <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    84d4:	2400      	movs	r4, #0
    84d6:	b16c      	cbz	r4, 84f4 <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
    84d8:	4621      	mov	r1, r4
    84da:	4628      	mov	r0, r5
    84dc:	f003 fc57 	bl	bd8e <z_sched_prio_cmp>
    84e0:	2800      	cmp	r0, #0
    84e2:	dcf1      	bgt.n	84c8 <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    84e4:	2c00      	cmp	r4, #0
    84e6:	d0f6      	beq.n	84d6 <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
    84e8:	4b0b      	ldr	r3, [pc, #44]	; (8518 <move_thread_to_end_of_prio_q+0x84>)
    84ea:	6a1b      	ldr	r3, [r3, #32]
    84ec:	429c      	cmp	r4, r3
    84ee:	d0f1      	beq.n	84d4 <move_thread_to_end_of_prio_q+0x40>
    84f0:	6824      	ldr	r4, [r4, #0]
    84f2:	e7f0      	b.n	84d6 <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
    84f4:	4b08      	ldr	r3, [pc, #32]	; (8518 <move_thread_to_end_of_prio_q+0x84>)
    84f6:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
    84f8:	f103 011c 	add.w	r1, r3, #28
    84fc:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    84fe:	606a      	str	r2, [r5, #4]
	tail->next = node;
    8500:	6015      	str	r5, [r2, #0]
	list->tail = node;
    8502:	621d      	str	r5, [r3, #32]
	update_cache(thread == _current);
    8504:	4b04      	ldr	r3, [pc, #16]	; (8518 <move_thread_to_end_of_prio_q+0x84>)
    8506:	6898      	ldr	r0, [r3, #8]
    8508:	42a8      	cmp	r0, r5
    850a:	bf14      	ite	ne
    850c:	2000      	movne	r0, #0
    850e:	2001      	moveq	r0, #1
    8510:	f7ff ff98 	bl	8444 <update_cache>
}
    8514:	bd38      	pop	{r3, r4, r5, pc}
    8516:	bf00      	nop
    8518:	20000f88 	.word	0x20000f88
    851c:	20000fa4 	.word	0x20000fa4

00008520 <z_time_slice>:
{
    8520:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    8522:	f04f 0220 	mov.w	r2, #32
    8526:	f3ef 8311 	mrs	r3, BASEPRI
    852a:	f382 8812 	msr	BASEPRI_MAX, r2
    852e:	f3bf 8f6f 	isb	sy
    8532:	461d      	mov	r5, r3
	struct k_thread *curr = _current;
    8534:	4b14      	ldr	r3, [pc, #80]	; (8588 <z_time_slice+0x68>)
    8536:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    8538:	4b14      	ldr	r3, [pc, #80]	; (858c <z_time_slice+0x6c>)
    853a:	681b      	ldr	r3, [r3, #0]
    853c:	42a3      	cmp	r3, r4
    853e:	d017      	beq.n	8570 <z_time_slice+0x50>
	pending_current = NULL;
    8540:	4b12      	ldr	r3, [pc, #72]	; (858c <z_time_slice+0x6c>)
    8542:	2200      	movs	r2, #0
    8544:	601a      	str	r2, [r3, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    8546:	4b10      	ldr	r3, [pc, #64]	; (8588 <z_time_slice+0x68>)
    8548:	7c1b      	ldrb	r3, [r3, #16]
    854a:	4a11      	ldr	r2, [pc, #68]	; (8590 <z_time_slice+0x70>)
    854c:	5cd3      	ldrb	r3, [r2, r3]
    854e:	b153      	cbz	r3, 8566 <z_time_slice+0x46>
    8550:	4620      	mov	r0, r4
    8552:	f7ff fed9 	bl	8308 <sliceable>
    8556:	b130      	cbz	r0, 8566 <z_time_slice+0x46>
	uint8_t state = thread->base.thread_state;
    8558:	7b63      	ldrb	r3, [r4, #13]
		if (!z_is_thread_prevented_from_running(curr)) {
    855a:	f013 0f1f 	tst.w	r3, #31
    855e:	d00f      	beq.n	8580 <z_time_slice+0x60>
		z_reset_time_slice(curr);
    8560:	4620      	mov	r0, r4
    8562:	f7ff ff17 	bl	8394 <z_reset_time_slice>
	__asm__ volatile(
    8566:	f385 8811 	msr	BASEPRI, r5
    856a:	f3bf 8f6f 	isb	sy
}
    856e:	bd38      	pop	{r3, r4, r5, pc}
		z_reset_time_slice(curr);
    8570:	4620      	mov	r0, r4
    8572:	f7ff ff0f 	bl	8394 <z_reset_time_slice>
    8576:	f385 8811 	msr	BASEPRI, r5
    857a:	f3bf 8f6f 	isb	sy
		return;
    857e:	e7f6      	b.n	856e <z_time_slice+0x4e>
			move_thread_to_end_of_prio_q(curr);
    8580:	4620      	mov	r0, r4
    8582:	f7ff ff87 	bl	8494 <move_thread_to_end_of_prio_q>
    8586:	e7eb      	b.n	8560 <z_time_slice+0x40>
    8588:	20000f88 	.word	0x20000f88
    858c:	20000fb8 	.word	0x20000fb8
    8590:	20000fbc 	.word	0x20000fbc

00008594 <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
    8594:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    8596:	f990 300d 	ldrsb.w	r3, [r0, #13]
    859a:	2b00      	cmp	r3, #0
    859c:	db33      	blt.n	8606 <ready_thread+0x72>
{
    859e:	b570      	push	{r4, r5, r6, lr}
    85a0:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    85a2:	f012 0f1f 	tst.w	r2, #31
    85a6:	d101      	bne.n	85ac <ready_thread+0x18>
	return node->next != NULL;
    85a8:	6986      	ldr	r6, [r0, #24]
    85aa:	b106      	cbz	r6, 85ae <ready_thread+0x1a>
}
    85ac:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
    85ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
    85b2:	7342      	strb	r2, [r0, #13]
	return list->head == list;
    85b4:	4b14      	ldr	r3, [pc, #80]	; (8608 <ready_thread+0x74>)
    85b6:	f853 5f1c 	ldr.w	r5, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    85ba:	429d      	cmp	r5, r3
    85bc:	d108      	bne.n	85d0 <ready_thread+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    85be:	4635      	mov	r5, r6
    85c0:	e006      	b.n	85d0 <ready_thread+0x3c>
	sys_dnode_t *const prev = successor->prev;
    85c2:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    85c4:	6063      	str	r3, [r4, #4]
	node->next = successor;
    85c6:	6025      	str	r5, [r4, #0]
	prev->next = node;
    85c8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    85ca:	606c      	str	r4, [r5, #4]
}
    85cc:	e017      	b.n	85fe <ready_thread+0x6a>
    85ce:	4635      	mov	r5, r6
    85d0:	b16d      	cbz	r5, 85ee <ready_thread+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    85d2:	4629      	mov	r1, r5
    85d4:	4620      	mov	r0, r4
    85d6:	f003 fbda 	bl	bd8e <z_sched_prio_cmp>
    85da:	2800      	cmp	r0, #0
    85dc:	dcf1      	bgt.n	85c2 <ready_thread+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    85de:	2d00      	cmp	r5, #0
    85e0:	d0f6      	beq.n	85d0 <ready_thread+0x3c>
	return (node == list->tail) ? NULL : node->next;
    85e2:	4b09      	ldr	r3, [pc, #36]	; (8608 <ready_thread+0x74>)
    85e4:	6a1b      	ldr	r3, [r3, #32]
    85e6:	429d      	cmp	r5, r3
    85e8:	d0f1      	beq.n	85ce <ready_thread+0x3a>
    85ea:	682d      	ldr	r5, [r5, #0]
    85ec:	e7f0      	b.n	85d0 <ready_thread+0x3c>
	sys_dnode_t *const tail = list->tail;
    85ee:	4b06      	ldr	r3, [pc, #24]	; (8608 <ready_thread+0x74>)
    85f0:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
    85f2:	f103 011c 	add.w	r1, r3, #28
    85f6:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    85f8:	6062      	str	r2, [r4, #4]
	tail->next = node;
    85fa:	6014      	str	r4, [r2, #0]
	list->tail = node;
    85fc:	621c      	str	r4, [r3, #32]
		update_cache(0);
    85fe:	2000      	movs	r0, #0
    8600:	f7ff ff20 	bl	8444 <update_cache>
}
    8604:	e7d2      	b.n	85ac <ready_thread+0x18>
    8606:	4770      	bx	lr
    8608:	20000f88 	.word	0x20000f88

0000860c <z_sched_start>:
{
    860c:	b510      	push	{r4, lr}
	__asm__ volatile(
    860e:	f04f 0320 	mov.w	r3, #32
    8612:	f3ef 8411 	mrs	r4, BASEPRI
    8616:	f383 8812 	msr	BASEPRI_MAX, r3
    861a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    861e:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    8620:	f013 0f04 	tst.w	r3, #4
    8624:	d104      	bne.n	8630 <z_sched_start+0x24>
	__asm__ volatile(
    8626:	f384 8811 	msr	BASEPRI, r4
    862a:	f3bf 8f6f 	isb	sy
}
    862e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8630:	f023 0304 	bic.w	r3, r3, #4
    8634:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    8636:	f7ff ffad 	bl	8594 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    863a:	4621      	mov	r1, r4
    863c:	4801      	ldr	r0, [pc, #4]	; (8644 <z_sched_start+0x38>)
    863e:	f7ff fed1 	bl	83e4 <z_reschedule>
    8642:	e7f4      	b.n	862e <z_sched_start+0x22>
    8644:	20000fc8 	.word	0x20000fc8

00008648 <unready_thread>:
{
    8648:	b510      	push	{r4, lr}
    864a:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    864c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    864e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    8652:	2b00      	cmp	r3, #0
    8654:	db08      	blt.n	8668 <unready_thread+0x20>
	update_cache(thread == _current);
    8656:	4b08      	ldr	r3, [pc, #32]	; (8678 <unready_thread+0x30>)
    8658:	6898      	ldr	r0, [r3, #8]
    865a:	42a0      	cmp	r0, r4
    865c:	bf14      	ite	ne
    865e:	2000      	movne	r0, #0
    8660:	2001      	moveq	r0, #1
    8662:	f7ff feef 	bl	8444 <update_cache>
}
    8666:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8668:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    866c:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    866e:	4601      	mov	r1, r0
    8670:	4802      	ldr	r0, [pc, #8]	; (867c <unready_thread+0x34>)
    8672:	f003 fbca 	bl	be0a <z_priq_dumb_remove>
}
    8676:	e7ee      	b.n	8656 <unready_thread+0xe>
    8678:	20000f88 	.word	0x20000f88
    867c:	20000fa4 	.word	0x20000fa4

00008680 <z_pend_curr>:
{
    8680:	b510      	push	{r4, lr}
    8682:	460c      	mov	r4, r1
    8684:	4611      	mov	r1, r2
	pending_current = _current;
    8686:	480a      	ldr	r0, [pc, #40]	; (86b0 <z_pend_curr+0x30>)
    8688:	6882      	ldr	r2, [r0, #8]
    868a:	4b0a      	ldr	r3, [pc, #40]	; (86b4 <z_pend_curr+0x34>)
    868c:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    868e:	f04f 0220 	mov.w	r2, #32
    8692:	f3ef 8311 	mrs	r3, BASEPRI
    8696:	f382 8812 	msr	BASEPRI_MAX, r2
    869a:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    869e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    86a2:	6880      	ldr	r0, [r0, #8]
    86a4:	f003 fc5a 	bl	bf5c <pend_locked>
    86a8:	4620      	mov	r0, r4
    86aa:	f7fb f835 	bl	3718 <arch_swap>
}
    86ae:	bd10      	pop	{r4, pc}
    86b0:	20000f88 	.word	0x20000f88
    86b4:	20000fb8 	.word	0x20000fb8

000086b8 <z_set_prio>:
{
    86b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    86bc:	4605      	mov	r5, r0
    86be:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    86c0:	2300      	movs	r3, #0
    86c2:	f04f 0220 	mov.w	r2, #32
    86c6:	f3ef 8611 	mrs	r6, BASEPRI
    86ca:	f382 8812 	msr	BASEPRI_MAX, r2
    86ce:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    86d2:	4618      	mov	r0, r3
    86d4:	e029      	b.n	872a <z_set_prio+0x72>
	sys_dnode_t *const prev = successor->prev;
    86d6:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    86d8:	606b      	str	r3, [r5, #4]
	node->next = successor;
    86da:	602c      	str	r4, [r5, #0]
	prev->next = node;
    86dc:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    86de:	6065      	str	r5, [r4, #4]
}
    86e0:	e017      	b.n	8712 <z_set_prio+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    86e2:	4644      	mov	r4, r8
    86e4:	b16c      	cbz	r4, 8702 <z_set_prio+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    86e6:	4621      	mov	r1, r4
    86e8:	4628      	mov	r0, r5
    86ea:	f003 fb50 	bl	bd8e <z_sched_prio_cmp>
    86ee:	2800      	cmp	r0, #0
    86f0:	dcf1      	bgt.n	86d6 <z_set_prio+0x1e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    86f2:	2c00      	cmp	r4, #0
    86f4:	d0f6      	beq.n	86e4 <z_set_prio+0x2c>
	return (node == list->tail) ? NULL : node->next;
    86f6:	4b1d      	ldr	r3, [pc, #116]	; (876c <z_set_prio+0xb4>)
    86f8:	6a1b      	ldr	r3, [r3, #32]
    86fa:	429c      	cmp	r4, r3
    86fc:	d0f1      	beq.n	86e2 <z_set_prio+0x2a>
    86fe:	6824      	ldr	r4, [r4, #0]
    8700:	e7f0      	b.n	86e4 <z_set_prio+0x2c>
	sys_dnode_t *const tail = list->tail;
    8702:	4b1a      	ldr	r3, [pc, #104]	; (876c <z_set_prio+0xb4>)
    8704:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
    8706:	f103 011c 	add.w	r1, r3, #28
    870a:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    870c:	606a      	str	r2, [r5, #4]
	tail->next = node;
    870e:	6015      	str	r5, [r2, #0]
	list->tail = node;
    8710:	621d      	str	r5, [r3, #32]
			update_cache(1);
    8712:	2001      	movs	r0, #1
    8714:	f7ff fe96 	bl	8444 <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8718:	2001      	movs	r0, #1
    871a:	e001      	b.n	8720 <z_set_prio+0x68>
			thread->base.prio = prio;
    871c:	73af      	strb	r7, [r5, #14]
    871e:	2000      	movs	r0, #0
	__asm__ volatile(
    8720:	f386 8811 	msr	BASEPRI, r6
    8724:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8728:	2301      	movs	r3, #1
    872a:	b9e3      	cbnz	r3, 8766 <z_set_prio+0xae>
	uint8_t state = thread->base.thread_state;
    872c:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    872e:	f013 0f1f 	tst.w	r3, #31
    8732:	d1f3      	bne.n	871c <z_set_prio+0x64>
	return node->next != NULL;
    8734:	f8d5 8018 	ldr.w	r8, [r5, #24]
    8738:	f1b8 0f00 	cmp.w	r8, #0
    873c:	d1ee      	bne.n	871c <z_set_prio+0x64>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    873e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8742:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8744:	f8df 9028 	ldr.w	r9, [pc, #40]	; 8770 <z_set_prio+0xb8>
    8748:	4629      	mov	r1, r5
    874a:	4648      	mov	r0, r9
    874c:	f003 fb5d 	bl	be0a <z_priq_dumb_remove>
				thread->base.prio = prio;
    8750:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    8752:	7b6b      	ldrb	r3, [r5, #13]
    8754:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8758:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    875a:	f8d9 4000 	ldr.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    875e:	454c      	cmp	r4, r9
    8760:	d1c0      	bne.n	86e4 <z_set_prio+0x2c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8762:	4644      	mov	r4, r8
    8764:	e7be      	b.n	86e4 <z_set_prio+0x2c>
}
    8766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    876a:	bf00      	nop
    876c:	20000f88 	.word	0x20000f88
    8770:	20000fa4 	.word	0x20000fa4

00008774 <z_impl_k_thread_suspend>:
{
    8774:	b538      	push	{r3, r4, r5, lr}
    8776:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    8778:	3018      	adds	r0, #24
    877a:	f003 fca1 	bl	c0c0 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    877e:	2300      	movs	r3, #0
	__asm__ volatile(
    8780:	f04f 0220 	mov.w	r2, #32
    8784:	f3ef 8511 	mrs	r5, BASEPRI
    8788:	f382 8812 	msr	BASEPRI_MAX, r2
    878c:	f3bf 8f6f 	isb	sy
    8790:	e010      	b.n	87b4 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    8792:	7b63      	ldrb	r3, [r4, #13]
    8794:	f043 0310 	orr.w	r3, r3, #16
    8798:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    879a:	4b11      	ldr	r3, [pc, #68]	; (87e0 <z_impl_k_thread_suspend+0x6c>)
    879c:	6898      	ldr	r0, [r3, #8]
    879e:	42a0      	cmp	r0, r4
    87a0:	bf14      	ite	ne
    87a2:	2000      	movne	r0, #0
    87a4:	2001      	moveq	r0, #1
    87a6:	f7ff fe4d 	bl	8444 <update_cache>
	__asm__ volatile(
    87aa:	f385 8811 	msr	BASEPRI, r5
    87ae:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    87b2:	2301      	movs	r3, #1
    87b4:	b963      	cbnz	r3, 87d0 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    87b6:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    87b8:	f994 300d 	ldrsb.w	r3, [r4, #13]
    87bc:	2b00      	cmp	r3, #0
    87be:	dae8      	bge.n	8792 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    87c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    87c4:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    87c6:	4621      	mov	r1, r4
    87c8:	4806      	ldr	r0, [pc, #24]	; (87e4 <z_impl_k_thread_suspend+0x70>)
    87ca:	f003 fb1e 	bl	be0a <z_priq_dumb_remove>
}
    87ce:	e7e0      	b.n	8792 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    87d0:	4b03      	ldr	r3, [pc, #12]	; (87e0 <z_impl_k_thread_suspend+0x6c>)
    87d2:	689b      	ldr	r3, [r3, #8]
    87d4:	42a3      	cmp	r3, r4
    87d6:	d000      	beq.n	87da <z_impl_k_thread_suspend+0x66>
}
    87d8:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
    87da:	f003 fb0a 	bl	bdf2 <z_reschedule_unlocked>
}
    87de:	e7fb      	b.n	87d8 <z_impl_k_thread_suspend+0x64>
    87e0:	20000f88 	.word	0x20000f88
    87e4:	20000fa4 	.word	0x20000fa4

000087e8 <k_sched_unlock>:

void k_sched_unlock(void)
{
    87e8:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    87ea:	2300      	movs	r3, #0
	__asm__ volatile(
    87ec:	f04f 0220 	mov.w	r2, #32
    87f0:	f3ef 8411 	mrs	r4, BASEPRI
    87f4:	f382 8812 	msr	BASEPRI_MAX, r2
    87f8:	f3bf 8f6f 	isb	sy
    87fc:	e00c      	b.n	8818 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    87fe:	4b09      	ldr	r3, [pc, #36]	; (8824 <k_sched_unlock+0x3c>)
    8800:	689a      	ldr	r2, [r3, #8]
    8802:	7bd3      	ldrb	r3, [r2, #15]
    8804:	3301      	adds	r3, #1
    8806:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    8808:	2000      	movs	r0, #0
    880a:	f7ff fe1b 	bl	8444 <update_cache>
	__asm__ volatile(
    880e:	f384 8811 	msr	BASEPRI, r4
    8812:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8816:	2301      	movs	r3, #1
    8818:	2b00      	cmp	r3, #0
    881a:	d0f0      	beq.n	87fe <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
    881c:	f003 fae9 	bl	bdf2 <z_reschedule_unlocked>
}
    8820:	bd10      	pop	{r4, pc}
    8822:	bf00      	nop
    8824:	20000f88 	.word	0x20000f88

00008828 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    8828:	7b43      	ldrb	r3, [r0, #13]
    882a:	f013 0f08 	tst.w	r3, #8
    882e:	d12a      	bne.n	8886 <end_thread+0x5e>
{
    8830:	b510      	push	{r4, lr}
    8832:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
    8834:	f043 0208 	orr.w	r2, r3, #8
    8838:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    883a:	f023 0220 	bic.w	r2, r3, #32
    883e:	f042 0208 	orr.w	r2, r2, #8
    8842:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
    8844:	f012 0f80 	tst.w	r2, #128	; 0x80
    8848:	d113      	bne.n	8872 <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    884a:	68a3      	ldr	r3, [r4, #8]
    884c:	b113      	cbz	r3, 8854 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
    884e:	4620      	mov	r0, r4
    8850:	f003 fae3 	bl	be1a <unpend_thread_no_timeout>
    8854:	f104 0018 	add.w	r0, r4, #24
    8858:	f003 fc32 	bl	c0c0 <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    885c:	f104 0058 	add.w	r0, r4, #88	; 0x58
    8860:	f003 fb3c 	bl	bedc <unpend_all>
		update_cache(1);
    8864:	2001      	movs	r0, #1
    8866:	f7ff fded 	bl	8444 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    886a:	4620      	mov	r0, r4
    886c:	f7ff fa06 	bl	7c7c <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    8870:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8872:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    8876:	f043 0308 	orr.w	r3, r3, #8
    887a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    887c:	4601      	mov	r1, r0
    887e:	4802      	ldr	r0, [pc, #8]	; (8888 <end_thread+0x60>)
    8880:	f003 fac3 	bl	be0a <z_priq_dumb_remove>
}
    8884:	e7e1      	b.n	884a <end_thread+0x22>
    8886:	4770      	bx	lr
    8888:	20000fa4 	.word	0x20000fa4

0000888c <z_sched_init>:
{
    888c:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    888e:	4802      	ldr	r0, [pc, #8]	; (8898 <z_sched_init+0xc>)
    8890:	f003 fbb0 	bl	bff4 <init_ready_q>
}
    8894:	bd08      	pop	{r3, pc}
    8896:	bf00      	nop
    8898:	20000fa0 	.word	0x20000fa0

0000889c <z_impl_k_yield>:
{
    889c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    889e:	f04f 0320 	mov.w	r3, #32
    88a2:	f3ef 8611 	mrs	r6, BASEPRI
    88a6:	f383 8812 	msr	BASEPRI_MAX, r3
    88aa:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    88ae:	4c1d      	ldr	r4, [pc, #116]	; (8924 <z_impl_k_yield+0x88>)
    88b0:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    88b2:	7b4b      	ldrb	r3, [r1, #13]
    88b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    88b8:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    88ba:	f104 071c 	add.w	r7, r4, #28
    88be:	4638      	mov	r0, r7
    88c0:	f003 faa3 	bl	be0a <z_priq_dumb_remove>
	queue_thread(_current);
    88c4:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    88c6:	7b6b      	ldrb	r3, [r5, #13]
    88c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    88cc:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    88ce:	69e4      	ldr	r4, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    88d0:	42bc      	cmp	r4, r7
    88d2:	d108      	bne.n	88e6 <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    88d4:	2400      	movs	r4, #0
    88d6:	e006      	b.n	88e6 <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
    88d8:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    88da:	606b      	str	r3, [r5, #4]
	node->next = successor;
    88dc:	602c      	str	r4, [r5, #0]
	prev->next = node;
    88de:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    88e0:	6065      	str	r5, [r4, #4]
}
    88e2:	e017      	b.n	8914 <z_impl_k_yield+0x78>
    88e4:	2400      	movs	r4, #0
    88e6:	b16c      	cbz	r4, 8904 <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
    88e8:	4621      	mov	r1, r4
    88ea:	4628      	mov	r0, r5
    88ec:	f003 fa4f 	bl	bd8e <z_sched_prio_cmp>
    88f0:	2800      	cmp	r0, #0
    88f2:	dcf1      	bgt.n	88d8 <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    88f4:	2c00      	cmp	r4, #0
    88f6:	d0f6      	beq.n	88e6 <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
    88f8:	4b0a      	ldr	r3, [pc, #40]	; (8924 <z_impl_k_yield+0x88>)
    88fa:	6a1b      	ldr	r3, [r3, #32]
    88fc:	429c      	cmp	r4, r3
    88fe:	d0f1      	beq.n	88e4 <z_impl_k_yield+0x48>
    8900:	6824      	ldr	r4, [r4, #0]
    8902:	e7f0      	b.n	88e6 <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
    8904:	4b07      	ldr	r3, [pc, #28]	; (8924 <z_impl_k_yield+0x88>)
    8906:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
    8908:	f103 011c 	add.w	r1, r3, #28
    890c:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    890e:	606a      	str	r2, [r5, #4]
	tail->next = node;
    8910:	6015      	str	r5, [r2, #0]
	list->tail = node;
    8912:	621d      	str	r5, [r3, #32]
	update_cache(1);
    8914:	2001      	movs	r0, #1
    8916:	f7ff fd95 	bl	8444 <update_cache>
    891a:	4630      	mov	r0, r6
    891c:	f7fa fefc 	bl	3718 <arch_swap>
}
    8920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8922:	bf00      	nop
    8924:	20000f88 	.word	0x20000f88

00008928 <z_tick_sleep>:
{
    8928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
    892c:	ea50 0301 	orrs.w	r3, r0, r1
    8930:	d038      	beq.n	89a4 <z_tick_sleep+0x7c>
    8932:	4604      	mov	r4, r0
    8934:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
    8936:	f06f 0301 	mvn.w	r3, #1
    893a:	1a1b      	subs	r3, r3, r0
    893c:	f04f 32ff 	mov.w	r2, #4294967295
    8940:	eb62 0201 	sbc.w	r2, r2, r1
    8944:	2b01      	cmp	r3, #1
    8946:	f172 0200 	sbcs.w	r2, r2, #0
    894a:	db2f      	blt.n	89ac <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    894c:	f06f 0501 	mvn.w	r5, #1
    8950:	1a2d      	subs	r5, r5, r0
    8952:	f04f 0320 	mov.w	r3, #32
    8956:	f3ef 8811 	mrs	r8, BASEPRI
    895a:	f383 8812 	msr	BASEPRI_MAX, r3
    895e:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    8962:	4f14      	ldr	r7, [pc, #80]	; (89b4 <z_tick_sleep+0x8c>)
    8964:	68b8      	ldr	r0, [r7, #8]
    8966:	4b14      	ldr	r3, [pc, #80]	; (89b8 <z_tick_sleep+0x90>)
    8968:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    896a:	f7ff fe6d 	bl	8648 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    896e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8970:	4622      	mov	r2, r4
    8972:	4633      	mov	r3, r6
    8974:	4911      	ldr	r1, [pc, #68]	; (89bc <z_tick_sleep+0x94>)
    8976:	3018      	adds	r0, #24
    8978:	f000 f8da 	bl	8b30 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    897c:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    897e:	7b53      	ldrb	r3, [r2, #13]
    8980:	f043 0310 	orr.w	r3, r3, #16
    8984:	7353      	strb	r3, [r2, #13]
    8986:	4640      	mov	r0, r8
    8988:	f7fa fec6 	bl	3718 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    898c:	f003 fbcd 	bl	c12a <sys_clock_tick_get_32>
    8990:	1a28      	subs	r0, r5, r0
    8992:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    8996:	2801      	cmp	r0, #1
    8998:	f173 0300 	sbcs.w	r3, r3, #0
    899c:	da00      	bge.n	89a0 <z_tick_sleep+0x78>
	return 0;
    899e:	2000      	movs	r0, #0
}
    89a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    89a4:	f7ff ff7a 	bl	889c <z_impl_k_yield>
		return 0;
    89a8:	2000      	movs	r0, #0
    89aa:	e7f9      	b.n	89a0 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    89ac:	f003 fbbd 	bl	c12a <sys_clock_tick_get_32>
    89b0:	1905      	adds	r5, r0, r4
    89b2:	e7ce      	b.n	8952 <z_tick_sleep+0x2a>
    89b4:	20000f88 	.word	0x20000f88
    89b8:	20000fb8 	.word	0x20000fb8
    89bc:	0000bed1 	.word	0x0000bed1

000089c0 <z_impl_k_sleep>:
{
    89c0:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    89c2:	f1b1 3fff 	cmp.w	r1, #4294967295
    89c6:	bf08      	it	eq
    89c8:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    89cc:	d018      	beq.n	8a00 <z_impl_k_sleep+0x40>
	ticks = z_tick_sleep(ticks);
    89ce:	f7ff ffab 	bl	8928 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    89d2:	17c2      	asrs	r2, r0, #31
    89d4:	0151      	lsls	r1, r2, #5
    89d6:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    89da:	0143      	lsls	r3, r0, #5
    89dc:	1a1b      	subs	r3, r3, r0
    89de:	eb61 0102 	sbc.w	r1, r1, r2
    89e2:	0089      	lsls	r1, r1, #2
    89e4:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
    89e8:	009b      	lsls	r3, r3, #2
    89ea:	181b      	adds	r3, r3, r0
    89ec:	eb42 0201 	adc.w	r2, r2, r1
    89f0:	00d2      	lsls	r2, r2, #3
    89f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    89f6:	f3c3 3310 	ubfx	r3, r3, #12, #17
    89fa:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
    89fe:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
    8a00:	4b03      	ldr	r3, [pc, #12]	; (8a10 <z_impl_k_sleep+0x50>)
    8a02:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    8a04:	f7ff feb6 	bl	8774 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    8a08:	f04f 30ff 	mov.w	r0, #4294967295
    8a0c:	e7f7      	b.n	89fe <z_impl_k_sleep+0x3e>
    8a0e:	bf00      	nop
    8a10:	20000f88 	.word	0x20000f88

00008a14 <z_impl_z_current_get>:
}
    8a14:	4b01      	ldr	r3, [pc, #4]	; (8a1c <z_impl_z_current_get+0x8>)
    8a16:	6898      	ldr	r0, [r3, #8]
    8a18:	4770      	bx	lr
    8a1a:	bf00      	nop
    8a1c:	20000f88 	.word	0x20000f88

00008a20 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    8a20:	b570      	push	{r4, r5, r6, lr}
    8a22:	f04f 0320 	mov.w	r3, #32
    8a26:	f3ef 8511 	mrs	r5, BASEPRI
    8a2a:	f383 8812 	msr	BASEPRI_MAX, r3
    8a2e:	f3bf 8f6f 	isb	sy
    8a32:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    8a34:	7b03      	ldrb	r3, [r0, #12]
    8a36:	f013 0f01 	tst.w	r3, #1
    8a3a:	d109      	bne.n	8a50 <z_thread_abort+0x30>
    8a3c:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    8a3e:	7b43      	ldrb	r3, [r0, #13]
    8a40:	f013 0f08 	tst.w	r3, #8
    8a44:	d00f      	beq.n	8a66 <z_thread_abort+0x46>
	__asm__ volatile(
    8a46:	f385 8811 	msr	BASEPRI, r5
    8a4a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
    8a4e:	e009      	b.n	8a64 <z_thread_abort+0x44>
    8a50:	f385 8811 	msr	BASEPRI, r5
    8a54:	f3bf 8f6f 	isb	sy
		k_panic();
    8a58:	4040      	eors	r0, r0
    8a5a:	f380 8811 	msr	BASEPRI, r0
    8a5e:	f04f 0004 	mov.w	r0, #4
    8a62:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    8a64:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
    8a66:	f7ff fedf 	bl	8828 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    8a6a:	4b08      	ldr	r3, [pc, #32]	; (8a8c <z_thread_abort+0x6c>)
    8a6c:	689b      	ldr	r3, [r3, #8]
    8a6e:	42a3      	cmp	r3, r4
    8a70:	d004      	beq.n	8a7c <z_thread_abort+0x5c>
    8a72:	f386 8811 	msr	BASEPRI, r6
    8a76:	f3bf 8f6f 	isb	sy
    8a7a:	e7f3      	b.n	8a64 <z_thread_abort+0x44>
    8a7c:	f3ef 8305 	mrs	r3, IPSR
    8a80:	2b00      	cmp	r3, #0
    8a82:	d1f6      	bne.n	8a72 <z_thread_abort+0x52>
    8a84:	4628      	mov	r0, r5
    8a86:	f7fa fe47 	bl	3718 <arch_swap>
	return ret;
    8a8a:	e7f2      	b.n	8a72 <z_thread_abort+0x52>
    8a8c:	20000f88 	.word	0x20000f88

00008a90 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    8a90:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
    8a94:	b083      	sub	sp, #12
    8a96:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    8a98:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
    8a9c:	e9cd bc00 	strd	fp, ip, [sp]
    8aa0:	f7ff fdee 	bl	8680 <z_pend_curr>

	if (data != NULL) {
    8aa4:	b11c      	cbz	r4, 8aae <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
    8aa6:	4b03      	ldr	r3, [pc, #12]	; (8ab4 <z_sched_wait+0x24>)
    8aa8:	689b      	ldr	r3, [r3, #8]
    8aaa:	695b      	ldr	r3, [r3, #20]
    8aac:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    8aae:	b003      	add	sp, #12
    8ab0:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
    8ab4:	20000f88 	.word	0x20000f88

00008ab8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    8ab8:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    8aba:	4806      	ldr	r0, [pc, #24]	; (8ad4 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    8abc:	4a06      	ldr	r2, [pc, #24]	; (8ad8 <z_data_copy+0x20>)
    8abe:	1a12      	subs	r2, r2, r0
    8ac0:	4906      	ldr	r1, [pc, #24]	; (8adc <z_data_copy+0x24>)
    8ac2:	f003 f866 	bl	bb92 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    8ac6:	4a06      	ldr	r2, [pc, #24]	; (8ae0 <z_data_copy+0x28>)
    8ac8:	4906      	ldr	r1, [pc, #24]	; (8ae4 <z_data_copy+0x2c>)
    8aca:	4807      	ldr	r0, [pc, #28]	; (8ae8 <z_data_copy+0x30>)
    8acc:	f003 f861 	bl	bb92 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    8ad0:	bd08      	pop	{r3, pc}
    8ad2:	bf00      	nop
    8ad4:	20000000 	.word	0x20000000
    8ad8:	20000150 	.word	0x20000150
    8adc:	0000d3f0 	.word	0x0000d3f0
    8ae0:	00000000 	.word	0x00000000
    8ae4:	0000d3f0 	.word	0x0000d3f0
    8ae8:	20000000 	.word	0x20000000

00008aec <first>:
	return list->head == list;
    8aec:	4b03      	ldr	r3, [pc, #12]	; (8afc <first+0x10>)
    8aee:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8af0:	4298      	cmp	r0, r3
    8af2:	d000      	beq.n	8af6 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    8af4:	4770      	bx	lr
    8af6:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    8af8:	e7fc      	b.n	8af4 <first+0x8>
    8afa:	bf00      	nop
    8afc:	200000d8 	.word	0x200000d8

00008b00 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8b00:	b130      	cbz	r0, 8b10 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    8b02:	4a04      	ldr	r2, [pc, #16]	; (8b14 <next+0x14>)
    8b04:	6852      	ldr	r2, [r2, #4]
    8b06:	4290      	cmp	r0, r2
    8b08:	d001      	beq.n	8b0e <next+0xe>
    8b0a:	6800      	ldr	r0, [r0, #0]
    8b0c:	4770      	bx	lr
    8b0e:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    8b10:	4770      	bx	lr
    8b12:	bf00      	nop
    8b14:	200000d8 	.word	0x200000d8

00008b18 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    8b18:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    8b1a:	4b04      	ldr	r3, [pc, #16]	; (8b2c <elapsed+0x14>)
    8b1c:	681b      	ldr	r3, [r3, #0]
    8b1e:	b10b      	cbz	r3, 8b24 <elapsed+0xc>
    8b20:	2000      	movs	r0, #0
}
    8b22:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    8b24:	f7fd fd4c 	bl	65c0 <sys_clock_elapsed>
    8b28:	e7fb      	b.n	8b22 <elapsed+0xa>
    8b2a:	bf00      	nop
    8b2c:	20000fc8 	.word	0x20000fc8

00008b30 <z_add_timeout>:
}

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8b30:	f1b3 3fff 	cmp.w	r3, #4294967295
    8b34:	bf08      	it	eq
    8b36:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    8b3a:	d074      	beq.n	8c26 <z_add_timeout+0xf6>
{
    8b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8b40:	4604      	mov	r4, r0
    8b42:	4692      	mov	sl, r2
    8b44:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    8b46:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    8b48:	2300      	movs	r3, #0
	__asm__ volatile(
    8b4a:	f04f 0220 	mov.w	r2, #32
    8b4e:	f3ef 8711 	mrs	r7, BASEPRI
    8b52:	f382 8812 	msr	BASEPRI_MAX, r2
    8b56:	f3bf 8f6f 	isb	sy
    8b5a:	e026      	b.n	8baa <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    8b5c:	f11a 0801 	adds.w	r8, sl, #1
    8b60:	f145 0900 	adc.w	r9, r5, #0
    8b64:	f7ff ffd8 	bl	8b18 <elapsed>
    8b68:	eb18 0300 	adds.w	r3, r8, r0
    8b6c:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    8b70:	6123      	str	r3, [r4, #16]
    8b72:	6160      	str	r0, [r4, #20]
    8b74:	e03b      	b.n	8bee <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    8b76:	1a52      	subs	r2, r2, r1
    8b78:	eb66 0303 	sbc.w	r3, r6, r3
    8b7c:	6102      	str	r2, [r0, #16]
    8b7e:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    8b80:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    8b82:	6063      	str	r3, [r4, #4]
	node->next = successor;
    8b84:	6020      	str	r0, [r4, #0]
	prev->next = node;
    8b86:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    8b88:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    8b8a:	e005      	b.n	8b98 <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
    8b8c:	4b26      	ldr	r3, [pc, #152]	; (8c28 <z_add_timeout+0xf8>)
    8b8e:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    8b90:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    8b92:	6062      	str	r2, [r4, #4]
	tail->next = node;
    8b94:	6014      	str	r4, [r2, #0]
	list->tail = node;
    8b96:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    8b98:	f7ff ffa8 	bl	8aec <first>
    8b9c:	4284      	cmp	r4, r0
    8b9e:	d03a      	beq.n	8c16 <z_add_timeout+0xe6>
	__asm__ volatile(
    8ba0:	f387 8811 	msr	BASEPRI, r7
    8ba4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    8ba8:	2301      	movs	r3, #1
    8baa:	2b00      	cmp	r3, #0
    8bac:	d139      	bne.n	8c22 <z_add_timeout+0xf2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    8bae:	4653      	mov	r3, sl
    8bb0:	f06f 0101 	mvn.w	r1, #1
    8bb4:	ebb1 010a 	subs.w	r1, r1, sl
    8bb8:	f04f 30ff 	mov.w	r0, #4294967295
    8bbc:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    8bc0:	2a00      	cmp	r2, #0
    8bc2:	dbcb      	blt.n	8b5c <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    8bc4:	4a19      	ldr	r2, [pc, #100]	; (8c2c <z_add_timeout+0xfc>)
    8bc6:	6811      	ldr	r1, [r2, #0]
    8bc8:	6852      	ldr	r2, [r2, #4]
    8bca:	185b      	adds	r3, r3, r1
    8bcc:	eb42 0205 	adc.w	r2, r2, r5
    8bd0:	f06f 0101 	mvn.w	r1, #1
    8bd4:	1ac9      	subs	r1, r1, r3
    8bd6:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
    8bda:	4608      	mov	r0, r1
    8bdc:	461a      	mov	r2, r3
    8bde:	2901      	cmp	r1, #1
    8be0:	f173 0300 	sbcs.w	r3, r3, #0
    8be4:	da01      	bge.n	8bea <z_add_timeout+0xba>
    8be6:	2001      	movs	r0, #1
    8be8:	2200      	movs	r2, #0
    8bea:	6120      	str	r0, [r4, #16]
    8bec:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    8bee:	f7ff ff7d 	bl	8aec <first>
    8bf2:	2800      	cmp	r0, #0
    8bf4:	d0ca      	beq.n	8b8c <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
    8bf6:	6902      	ldr	r2, [r0, #16]
    8bf8:	6946      	ldr	r6, [r0, #20]
    8bfa:	6921      	ldr	r1, [r4, #16]
    8bfc:	6963      	ldr	r3, [r4, #20]
    8bfe:	4291      	cmp	r1, r2
    8c00:	eb73 0e06 	sbcs.w	lr, r3, r6
    8c04:	dbb7      	blt.n	8b76 <z_add_timeout+0x46>
			to->dticks -= t->dticks;
    8c06:	1a89      	subs	r1, r1, r2
    8c08:	eb63 0306 	sbc.w	r3, r3, r6
    8c0c:	6121      	str	r1, [r4, #16]
    8c0e:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    8c10:	f7ff ff76 	bl	8b00 <next>
    8c14:	e7ed      	b.n	8bf2 <z_add_timeout+0xc2>
			sys_clock_set_timeout(next_timeout(), false);
    8c16:	f003 fa36 	bl	c086 <next_timeout>
    8c1a:	2100      	movs	r1, #0
    8c1c:	f7fd fc94 	bl	6548 <sys_clock_set_timeout>
    8c20:	e7be      	b.n	8ba0 <z_add_timeout+0x70>
		}
	}
}
    8c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8c26:	4770      	bx	lr
    8c28:	200000d8 	.word	0x200000d8
    8c2c:	200007d8 	.word	0x200007d8

00008c30 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    8c30:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    8c32:	f04f 0320 	mov.w	r3, #32
    8c36:	f3ef 8611 	mrs	r6, BASEPRI
    8c3a:	f383 8812 	msr	BASEPRI_MAX, r3
    8c3e:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    8c42:	4b2b      	ldr	r3, [pc, #172]	; (8cf0 <sys_clock_announce+0xc0>)
    8c44:	6018      	str	r0, [r3, #0]

	struct _timeout *t = first();
    8c46:	f7ff ff51 	bl	8aec <first>
    8c4a:	4604      	mov	r4, r0

	for (t = first();
    8c4c:	e024      	b.n	8c98 <sys_clock_announce+0x68>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
    8c4e:	4a29      	ldr	r2, [pc, #164]	; (8cf4 <sys_clock_announce+0xc4>)
    8c50:	6813      	ldr	r3, [r2, #0]
    8c52:	6851      	ldr	r1, [r2, #4]
    8c54:	195b      	adds	r3, r3, r5
    8c56:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
    8c5a:	6013      	str	r3, [r2, #0]
    8c5c:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
    8c5e:	2200      	movs	r2, #0
    8c60:	2300      	movs	r3, #0
    8c62:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    8c66:	4620      	mov	r0, r4
    8c68:	f003 f9f6 	bl	c058 <remove_timeout>
	__asm__ volatile(
    8c6c:	f386 8811 	msr	BASEPRI, r6
    8c70:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    8c74:	68a3      	ldr	r3, [r4, #8]
    8c76:	4620      	mov	r0, r4
    8c78:	4798      	blx	r3
	__asm__ volatile(
    8c7a:	f04f 0320 	mov.w	r3, #32
    8c7e:	f3ef 8611 	mrs	r6, BASEPRI
    8c82:	f383 8812 	msr	BASEPRI_MAX, r3
    8c86:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
    8c8a:	4a19      	ldr	r2, [pc, #100]	; (8cf0 <sys_clock_announce+0xc0>)
    8c8c:	6813      	ldr	r3, [r2, #0]
    8c8e:	1b5b      	subs	r3, r3, r5
    8c90:	6013      	str	r3, [r2, #0]
	     t = first()) {
    8c92:	f7ff ff2b 	bl	8aec <first>
    8c96:	4604      	mov	r4, r0
	     (t != NULL) && (t->dticks <= announce_remaining);
    8c98:	b13c      	cbz	r4, 8caa <sys_clock_announce+0x7a>
    8c9a:	6925      	ldr	r5, [r4, #16]
    8c9c:	6961      	ldr	r1, [r4, #20]
    8c9e:	4b14      	ldr	r3, [pc, #80]	; (8cf0 <sys_clock_announce+0xc0>)
    8ca0:	681a      	ldr	r2, [r3, #0]
    8ca2:	17d3      	asrs	r3, r2, #31
    8ca4:	42aa      	cmp	r2, r5
    8ca6:	418b      	sbcs	r3, r1
    8ca8:	dad1      	bge.n	8c4e <sys_clock_announce+0x1e>
	}

	if (t != NULL) {
    8caa:	b144      	cbz	r4, 8cbe <sys_clock_announce+0x8e>
		t->dticks -= announce_remaining;
    8cac:	6923      	ldr	r3, [r4, #16]
    8cae:	6962      	ldr	r2, [r4, #20]
    8cb0:	490f      	ldr	r1, [pc, #60]	; (8cf0 <sys_clock_announce+0xc0>)
    8cb2:	6809      	ldr	r1, [r1, #0]
    8cb4:	1a5b      	subs	r3, r3, r1
    8cb6:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    8cba:	6123      	str	r3, [r4, #16]
    8cbc:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    8cbe:	4a0d      	ldr	r2, [pc, #52]	; (8cf4 <sys_clock_announce+0xc4>)
    8cc0:	4d0b      	ldr	r5, [pc, #44]	; (8cf0 <sys_clock_announce+0xc0>)
    8cc2:	6828      	ldr	r0, [r5, #0]
    8cc4:	6813      	ldr	r3, [r2, #0]
    8cc6:	6851      	ldr	r1, [r2, #4]
    8cc8:	181b      	adds	r3, r3, r0
    8cca:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    8cce:	6013      	str	r3, [r2, #0]
    8cd0:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    8cd2:	2400      	movs	r4, #0
    8cd4:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    8cd6:	f003 f9d6 	bl	c086 <next_timeout>
    8cda:	4621      	mov	r1, r4
    8cdc:	f7fd fc34 	bl	6548 <sys_clock_set_timeout>
	__asm__ volatile(
    8ce0:	f386 8811 	msr	BASEPRI, r6
    8ce4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
    8ce8:	f7ff fc1a 	bl	8520 <z_time_slice>
#endif
}
    8cec:	bd70      	pop	{r4, r5, r6, pc}
    8cee:	bf00      	nop
    8cf0:	20000fc8 	.word	0x20000fc8
    8cf4:	200007d8 	.word	0x200007d8

00008cf8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    8cf8:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    8cfa:	2200      	movs	r2, #0
	__asm__ volatile(
    8cfc:	f04f 0320 	mov.w	r3, #32
    8d00:	f3ef 8411 	mrs	r4, BASEPRI
    8d04:	f383 8812 	msr	BASEPRI_MAX, r3
    8d08:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    8d0c:	4613      	mov	r3, r2
    8d0e:	4611      	mov	r1, r2
    8d10:	e00c      	b.n	8d2c <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
    8d12:	f7ff ff01 	bl	8b18 <elapsed>
    8d16:	4a07      	ldr	r2, [pc, #28]	; (8d34 <sys_clock_tick_get+0x3c>)
    8d18:	6813      	ldr	r3, [r2, #0]
    8d1a:	6851      	ldr	r1, [r2, #4]
    8d1c:	18c3      	adds	r3, r0, r3
    8d1e:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
    8d22:	f384 8811 	msr	BASEPRI, r4
    8d26:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    8d2a:	2201      	movs	r2, #1
    8d2c:	2a00      	cmp	r2, #0
    8d2e:	d0f0      	beq.n	8d12 <sys_clock_tick_get+0x1a>
	}
	return t;
}
    8d30:	4618      	mov	r0, r3
    8d32:	bd10      	pop	{r4, pc}
    8d34:	200007d8 	.word	0x200007d8

00008d38 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    8d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    8d3a:	f04f 0220 	mov.w	r2, #32
    8d3e:	f3ef 8311 	mrs	r3, BASEPRI
    8d42:	f382 8812 	msr	BASEPRI_MAX, r2
    8d46:	f3bf 8f6f 	isb	sy
    8d4a:	461a      	mov	r2, r3
    8d4c:	461d      	mov	r5, r3
	return node->next != NULL;
    8d4e:	6803      	ldr	r3, [r0, #0]
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
    8d50:	b123      	cbz	r3, 8d5c <z_timer_expiration_handler+0x24>
	__asm__ volatile(
    8d52:	f382 8811 	msr	BASEPRI, r2
    8d56:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    8d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8d5c:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    8d5e:	6a82      	ldr	r2, [r0, #40]	; 0x28
    8d60:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    8d62:	ea52 0103 	orrs.w	r1, r2, r3
    8d66:	d005      	beq.n	8d74 <z_timer_expiration_handler+0x3c>
    8d68:	f1b3 3fff 	cmp.w	r3, #4294967295
    8d6c:	bf08      	it	eq
    8d6e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    8d72:	d129      	bne.n	8dc8 <z_timer_expiration_handler+0x90>
	timer->status += 1U;
    8d74:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8d76:	3301      	adds	r3, #1
    8d78:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
    8d7a:	6a23      	ldr	r3, [r4, #32]
    8d7c:	b17b      	cbz	r3, 8d9e <z_timer_expiration_handler+0x66>
    8d7e:	f385 8811 	msr	BASEPRI, r5
    8d82:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
    8d86:	6a23      	ldr	r3, [r4, #32]
    8d88:	4620      	mov	r0, r4
    8d8a:	4798      	blx	r3
	__asm__ volatile(
    8d8c:	f04f 0220 	mov.w	r2, #32
    8d90:	f3ef 8311 	mrs	r3, BASEPRI
    8d94:	f382 8812 	msr	BASEPRI_MAX, r2
    8d98:	f3bf 8f6f 	isb	sy
    8d9c:	461d      	mov	r5, r3
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    8d9e:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    8da2:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8da4:	42a3      	cmp	r3, r4
    8da6:	d03f      	beq.n	8e28 <z_timer_expiration_handler+0xf0>
	if (thread == NULL) {
    8da8:	2c00      	cmp	r4, #0
    8daa:	d03d      	beq.n	8e28 <z_timer_expiration_handler+0xf0>
	z_unpend_thread_no_timeout(thread);
    8dac:	4620      	mov	r0, r4
    8dae:	f002 fff8 	bl	bda2 <z_unpend_thread_no_timeout>
    8db2:	2300      	movs	r3, #0
    8db4:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__asm__ volatile(
    8db8:	f385 8811 	msr	BASEPRI, r5
    8dbc:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    8dc0:	4620      	mov	r0, r4
    8dc2:	f003 f83f 	bl	be44 <z_ready_thread>
    8dc6:	e7c8      	b.n	8d5a <z_timer_expiration_handler+0x22>
		next.ticks = MAX(next.ticks - 1, 0);
    8dc8:	4616      	mov	r6, r2
    8dca:	461f      	mov	r7, r3
    8dcc:	2a01      	cmp	r2, #1
    8dce:	f173 0300 	sbcs.w	r3, r3, #0
    8dd2:	da01      	bge.n	8dd8 <z_timer_expiration_handler+0xa0>
    8dd4:	2601      	movs	r6, #1
    8dd6:	2700      	movs	r7, #0
    8dd8:	3e01      	subs	r6, #1
    8dda:	f147 37ff 	adc.w	r7, r7, #4294967295
	return z_impl_k_uptime_ticks();
    8dde:	f003 f9a8 	bl	c132 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    8de2:	3001      	adds	r0, #1
    8de4:	f141 0100 	adc.w	r1, r1, #0
    8de8:	1980      	adds	r0, r0, r6
    8dea:	eb47 0101 	adc.w	r1, r7, r1
    8dee:	2801      	cmp	r0, #1
    8df0:	f171 0100 	sbcs.w	r1, r1, #0
    8df4:	da08      	bge.n	8e08 <z_timer_expiration_handler+0xd0>
    8df6:	f06f 0201 	mvn.w	r2, #1
    8dfa:	f04f 33ff 	mov.w	r3, #4294967295
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    8dfe:	490d      	ldr	r1, [pc, #52]	; (8e34 <z_timer_expiration_handler+0xfc>)
    8e00:	4620      	mov	r0, r4
    8e02:	f7ff fe95 	bl	8b30 <z_add_timeout>
    8e06:	e7b5      	b.n	8d74 <z_timer_expiration_handler+0x3c>
    8e08:	f003 f993 	bl	c132 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    8e0c:	3001      	adds	r0, #1
    8e0e:	f141 0100 	adc.w	r1, r1, #0
    8e12:	1980      	adds	r0, r0, r6
    8e14:	eb47 0301 	adc.w	r3, r7, r1
    8e18:	f06f 0201 	mvn.w	r2, #1
    8e1c:	1a12      	subs	r2, r2, r0
    8e1e:	f04f 31ff 	mov.w	r1, #4294967295
    8e22:	eb61 0303 	sbc.w	r3, r1, r3
    8e26:	e7ea      	b.n	8dfe <z_timer_expiration_handler+0xc6>
    8e28:	f385 8811 	msr	BASEPRI, r5
    8e2c:	f3bf 8f6f 	isb	sy
		return;
    8e30:	e793      	b.n	8d5a <z_timer_expiration_handler+0x22>
    8e32:	bf00      	nop
    8e34:	00008d39 	.word	0x00008d39

00008e38 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    8e38:	b570      	push	{r4, r5, r6, lr}
    8e3a:	461d      	mov	r5, r3
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    8e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
    8e40:	bf08      	it	eq
    8e42:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    8e46:	d01a      	beq.n	8e7e <z_impl_k_timer_start+0x46>
    8e48:	4606      	mov	r6, r0
    8e4a:	4614      	mov	r4, r2
    8e4c:	4619      	mov	r1, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
    8e4e:	f06f 0201 	mvn.w	r2, #1
    8e52:	1b12      	subs	r2, r2, r4
    8e54:	f04f 32ff 	mov.w	r2, #4294967295
    8e58:	eb62 0203 	sbc.w	r2, r2, r3
    8e5c:	2a00      	cmp	r2, #0
    8e5e:	db0f      	blt.n	8e80 <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    8e60:	4630      	mov	r0, r6
    8e62:	f003 f92d 	bl	c0c0 <z_abort_timeout>
	timer->period = period;
    8e66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    8e6a:	e9c6 230a 	strd	r2, r3, [r6, #40]	; 0x28
	timer->status = 0U;
    8e6e:	2300      	movs	r3, #0
    8e70:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    8e72:	4622      	mov	r2, r4
    8e74:	462b      	mov	r3, r5
    8e76:	4907      	ldr	r1, [pc, #28]	; (8e94 <z_impl_k_timer_start+0x5c>)
    8e78:	4630      	mov	r0, r6
    8e7a:	f7ff fe59 	bl	8b30 <z_add_timeout>
		     duration);
}
    8e7e:	bd70      	pop	{r4, r5, r6, pc}
		duration.ticks = MAX(duration.ticks - 1, 0);
    8e80:	2c01      	cmp	r4, #1
    8e82:	f171 0100 	sbcs.w	r1, r1, #0
    8e86:	da01      	bge.n	8e8c <z_impl_k_timer_start+0x54>
    8e88:	2401      	movs	r4, #1
    8e8a:	2500      	movs	r5, #0
    8e8c:	3c01      	subs	r4, #1
    8e8e:	f145 35ff 	adc.w	r5, r5, #4294967295
    8e92:	e7e5      	b.n	8e60 <z_impl_k_timer_start+0x28>
    8e94:	00008d39 	.word	0x00008d39

00008e98 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
    8e98:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    8e9a:	4802      	ldr	r0, [pc, #8]	; (8ea4 <boot_banner+0xc>)
    8e9c:	f000 f926 	bl	90ec <printk>
#endif /* CONFIG_BOOT_BANNER */
}
    8ea0:	bd08      	pop	{r3, pc}
    8ea2:	bf00      	nop
    8ea4:	0000d3b4 	.word	0x0000d3b4

00008ea8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
    8ea8:	b510      	push	{r4, lr}
    8eaa:	b084      	sub	sp, #16
	struct k_work_queue_config cfg = {
    8eac:	4b08      	ldr	r3, [pc, #32]	; (8ed0 <k_sys_work_q_init+0x28>)
    8eae:	9302      	str	r3, [sp, #8]
    8eb0:	2400      	movs	r4, #0
    8eb2:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    8eb6:	ab02      	add	r3, sp, #8
    8eb8:	9300      	str	r3, [sp, #0]
    8eba:	f04f 33ff 	mov.w	r3, #4294967295
    8ebe:	f44f 6280 	mov.w	r2, #1024	; 0x400
    8ec2:	4904      	ldr	r1, [pc, #16]	; (8ed4 <k_sys_work_q_init+0x2c>)
    8ec4:	4804      	ldr	r0, [pc, #16]	; (8ed8 <k_sys_work_q_init+0x30>)
    8ec6:	f7ff f9e1 	bl	828c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    8eca:	4620      	mov	r0, r4
    8ecc:	b004      	add	sp, #16
    8ece:	bd10      	pop	{r4, pc}
    8ed0:	0000d3e4 	.word	0x0000d3e4
    8ed4:	20002140 	.word	0x20002140
    8ed8:	200007e0 	.word	0x200007e0

00008edc <z_impl_gpio_pin_configure>:
{
    8edc:	b538      	push	{r3, r4, r5, lr}
    8ede:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
    8ee0:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
    8ee2:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    8ee4:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    8ee8:	d007      	beq.n	8efa <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    8eea:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
    8eee:	d004      	beq.n	8efa <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    8ef0:	f012 0f01 	tst.w	r2, #1
    8ef4:	d001      	beq.n	8efa <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    8ef6:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    8efa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    8efe:	f013 0f01 	tst.w	r3, #1
    8f02:	d00a      	beq.n	8f1a <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    8f04:	6823      	ldr	r3, [r4, #0]
    8f06:	f04f 0c01 	mov.w	ip, #1
    8f0a:	fa0c fc01 	lsl.w	ip, ip, r1
    8f0e:	ea43 030c 	orr.w	r3, r3, ip
    8f12:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
    8f14:	682b      	ldr	r3, [r5, #0]
    8f16:	4798      	blx	r3
}
    8f18:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    8f1a:	6823      	ldr	r3, [r4, #0]
    8f1c:	f04f 0c01 	mov.w	ip, #1
    8f20:	fa0c fc01 	lsl.w	ip, ip, r1
    8f24:	ea23 030c 	bic.w	r3, r3, ip
    8f28:	6023      	str	r3, [r4, #0]
    8f2a:	e7f3      	b.n	8f14 <z_impl_gpio_pin_configure+0x38>

00008f2c <gpio_pin_configure_dt>:
{
    8f2c:	b508      	push	{r3, lr}
    8f2e:	4603      	mov	r3, r0
    8f30:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
    8f32:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    8f34:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
    8f36:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    8f38:	ea42 020c 	orr.w	r2, r2, ip
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    8f3c:	f7ff ffce 	bl	8edc <z_impl_gpio_pin_configure>
}
    8f40:	bd08      	pop	{r3, pc}

00008f42 <gpio_pin_toggle_dt>:
{
    8f42:	b508      	push	{r3, lr}
    8f44:	4603      	mov	r3, r0
	return gpio_pin_toggle(spec->port, spec->pin);
    8f46:	6800      	ldr	r0, [r0, #0]
    8f48:	791b      	ldrb	r3, [r3, #4]
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
    8f4a:	2101      	movs	r1, #1
    8f4c:	4099      	lsls	r1, r3
	const struct gpio_driver_api *api =
    8f4e:	6883      	ldr	r3, [r0, #8]
	return api->port_toggle_bits(port, pins);
    8f50:	695b      	ldr	r3, [r3, #20]
    8f52:	4798      	blx	r3
}
    8f54:	bd08      	pop	{r3, pc}

00008f56 <sensor_sample_fetch>:

extern int z_impl_sensor_sample_fetch(const struct device * dev);

__pinned_func
static inline int sensor_sample_fetch(const struct device * dev)
{
    8f56:	b508      	push	{r3, lr}
	const struct sensor_driver_api *api =
    8f58:	6883      	ldr	r3, [r0, #8]
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
    8f5a:	68db      	ldr	r3, [r3, #12]
    8f5c:	2139      	movs	r1, #57	; 0x39
    8f5e:	4798      	blx	r3
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_SENSOR_SAMPLE_FETCH);
	}
#endif
	compiler_barrier();
	return z_impl_sensor_sample_fetch(dev);
}
    8f60:	bd08      	pop	{r3, pc}

00008f62 <k_msleep>:
{
    8f62:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    8f64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    8f68:	17c1      	asrs	r1, r0, #31
    8f6a:	03c9      	lsls	r1, r1, #15
    8f6c:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    8f70:	03c0      	lsls	r0, r0, #15
    8f72:	f240 33e7 	movw	r3, #999	; 0x3e7
    8f76:	18c0      	adds	r0, r0, r3
    8f78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8f7c:	f04f 0300 	mov.w	r3, #0
    8f80:	f141 0100 	adc.w	r1, r1, #0
    8f84:	f7f7 fcda 	bl	93c <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    8f88:	f7ff fd1a 	bl	89c0 <z_impl_k_sleep>
}
    8f8c:	bd08      	pop	{r3, pc}

00008f8e <cbprintf_via_va_list>:
{
    8f8e:	b510      	push	{r4, lr}
    8f90:	460c      	mov	r4, r1
    8f92:	4611      	mov	r1, r2
    8f94:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
    8f96:	9b02      	ldr	r3, [sp, #8]
    8f98:	47a0      	blx	r4
}
    8f9a:	bd10      	pop	{r4, pc}

00008f9c <is_fmt_spec>:
	return (c >= 64) && (c <= 122);
    8f9c:	3840      	subs	r0, #64	; 0x40
    8f9e:	b2c0      	uxtb	r0, r0
}
    8fa0:	283a      	cmp	r0, #58	; 0x3a
    8fa2:	bf8c      	ite	hi
    8fa4:	2000      	movhi	r0, #0
    8fa6:	2001      	movls	r0, #1
    8fa8:	4770      	bx	lr

00008faa <get_package_len>:
{
    8faa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8fac:	4606      	mov	r6, r0
	args_size = buf[0] * sizeof(int);
    8fae:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    8fb0:	7845      	ldrb	r5, [r0, #1]
	ros_nbr   = buf[2];
    8fb2:	7884      	ldrb	r4, [r0, #2]
	buf += ros_nbr;
    8fb4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    8fb8:	4404      	add	r4, r0
	for (unsigned int i = 0; i < s_nbr; i++) {
    8fba:	2700      	movs	r7, #0
    8fbc:	e006      	b.n	8fcc <get_package_len+0x22>
		buf++;
    8fbe:	3401      	adds	r4, #1
		buf += strlen((const char *)buf) + 1;
    8fc0:	4620      	mov	r0, r4
    8fc2:	f001 fa3a 	bl	a43a <strlen>
    8fc6:	3001      	adds	r0, #1
    8fc8:	4404      	add	r4, r0
	for (unsigned int i = 0; i < s_nbr; i++) {
    8fca:	3701      	adds	r7, #1
    8fcc:	42af      	cmp	r7, r5
    8fce:	d3f6      	bcc.n	8fbe <get_package_len+0x14>
}
    8fd0:	1ba0      	subs	r0, r4, r6
    8fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008fd4 <append_string>:
{
    8fd4:	b570      	push	{r4, r5, r6, lr}
    8fd6:	4614      	mov	r4, r2
	if (cb == NULL) {
    8fd8:	b138      	cbz	r0, 8fea <append_string+0x16>
    8fda:	460d      	mov	r5, r1
    8fdc:	4619      	mov	r1, r3
    8fde:	4606      	mov	r6, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    8fe0:	b143      	cbz	r3, 8ff4 <append_string+0x20>
	return cb(str, strl, ctx);
    8fe2:	462a      	mov	r2, r5
    8fe4:	4620      	mov	r0, r4
    8fe6:	47b0      	blx	r6
}
    8fe8:	bd70      	pop	{r4, r5, r6, pc}
		return 1 + strlen(str);
    8fea:	4610      	mov	r0, r2
    8fec:	f001 fa25 	bl	a43a <strlen>
    8ff0:	3001      	adds	r0, #1
    8ff2:	e7f9      	b.n	8fe8 <append_string+0x14>
	strl = strl > 0 ? strl : strlen(str) + 1;
    8ff4:	4610      	mov	r0, r2
    8ff6:	f001 fa20 	bl	a43a <strlen>
    8ffa:	b283      	uxth	r3, r0
    8ffc:	3301      	adds	r3, #1
    8ffe:	b299      	uxth	r1, r3
    9000:	e7ef      	b.n	8fe2 <append_string+0xe>

00009002 <cbpprintf_external>:
	if (buf == NULL) {
    9002:	b35b      	cbz	r3, 905c <cbpprintf_external+0x5a>
{
    9004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9008:	b082      	sub	sp, #8
    900a:	4607      	mov	r7, r0
    900c:	4688      	mov	r8, r1
    900e:	4691      	mov	r9, r2
    9010:	461d      	mov	r5, r3
	args_size = hdr->hdr.desc.len * sizeof(int);
    9012:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = hdr->hdr.desc.str_cnt;
    9014:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
    9016:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
    9018:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    901a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    901e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
    9022:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
    9024:	f04f 0a00 	mov.w	sl, #0
    9028:	e00a      	b.n	9040 <cbpprintf_external+0x3e>
		s_idx = *(uint8_t *)s++;
    902a:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    902e:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    9032:	4620      	mov	r0, r4
    9034:	f001 fa01 	bl	a43a <strlen>
    9038:	3001      	adds	r0, #1
    903a:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    903c:	f10a 0a01 	add.w	sl, sl, #1
    9040:	45b2      	cmp	sl, r6
    9042:	d3f2      	bcc.n	902a <cbpprintf_external+0x28>
	buf += sizeof(*hdr);
    9044:	f105 0308 	add.w	r3, r5, #8
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
    9048:	9300      	str	r3, [sp, #0]
    904a:	686b      	ldr	r3, [r5, #4]
    904c:	464a      	mov	r2, r9
    904e:	4641      	mov	r1, r8
    9050:	4638      	mov	r0, r7
    9052:	f7ff ff9c 	bl	8f8e <cbprintf_via_va_list>
}
    9056:	b002      	add	sp, #8
    9058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
    905c:	f06f 0015 	mvn.w	r0, #21
}
    9060:	4770      	bx	lr

00009062 <is_ptr>:
{
    9062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9066:	4604      	mov	r4, r0
    9068:	4688      	mov	r8, r1
	int cnt = 0;
    906a:	2700      	movs	r7, #0
	bool mod = false;
    906c:	463e      	mov	r6, r7
	while ((c = *fmt++) != '\0') {
    906e:	e007      	b.n	9080 <is_ptr+0x1e>
				if (c == 'p') {
    9070:	2d70      	cmp	r5, #112	; 0x70
    9072:	d018      	beq.n	90a6 <is_ptr+0x44>
				} else if (is_fmt_spec(c)) {
    9074:	4628      	mov	r0, r5
    9076:	f7ff ff91 	bl	8f9c <is_fmt_spec>
    907a:	b9b8      	cbnz	r0, 90ac <is_ptr+0x4a>
		if (c == '%') {
    907c:	2d25      	cmp	r5, #37	; 0x25
    907e:	d00e      	beq.n	909e <is_ptr+0x3c>
	while ((c = *fmt++) != '\0') {
    9080:	f814 5b01 	ldrb.w	r5, [r4], #1
    9084:	b175      	cbz	r5, 90a4 <is_ptr+0x42>
		if (mod) {
    9086:	2e00      	cmp	r6, #0
    9088:	d0f8      	beq.n	907c <is_ptr+0x1a>
			if (cnt == n) {
    908a:	4547      	cmp	r7, r8
    908c:	d0f0      	beq.n	9070 <is_ptr+0xe>
			} else if (is_fmt_spec(c)) {
    908e:	4628      	mov	r0, r5
    9090:	f7ff ff84 	bl	8f9c <is_fmt_spec>
    9094:	2800      	cmp	r0, #0
    9096:	d0f1      	beq.n	907c <is_ptr+0x1a>
				cnt++;
    9098:	3701      	adds	r7, #1
				mod = false;
    909a:	2600      	movs	r6, #0
    909c:	e7ee      	b.n	907c <is_ptr+0x1a>
			mod = !mod;
    909e:	f086 0601 	eor.w	r6, r6, #1
    90a2:	e7ed      	b.n	9080 <is_ptr+0x1e>
	return false;
    90a4:	2600      	movs	r6, #0
}
    90a6:	4630      	mov	r0, r6
    90a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					return false;
    90ac:	2600      	movs	r6, #0
    90ae:	e7fa      	b.n	90a6 <is_ptr+0x44>

000090b0 <arch_printk_char_out>:
}
    90b0:	2000      	movs	r0, #0
    90b2:	4770      	bx	lr

000090b4 <str_out>:
{
    90b4:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    90b6:	680c      	ldr	r4, [r1, #0]
    90b8:	b154      	cbz	r4, 90d0 <str_out+0x1c>
    90ba:	688a      	ldr	r2, [r1, #8]
    90bc:	684b      	ldr	r3, [r1, #4]
    90be:	429a      	cmp	r2, r3
    90c0:	da06      	bge.n	90d0 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
    90c2:	3b01      	subs	r3, #1
    90c4:	429a      	cmp	r2, r3
    90c6:	d008      	beq.n	90da <str_out+0x26>
		ctx->str[ctx->count++] = c;
    90c8:	1c53      	adds	r3, r2, #1
    90ca:	608b      	str	r3, [r1, #8]
    90cc:	54a0      	strb	r0, [r4, r2]
    90ce:	e002      	b.n	90d6 <str_out+0x22>
		ctx->count++;
    90d0:	688b      	ldr	r3, [r1, #8]
    90d2:	3301      	adds	r3, #1
    90d4:	608b      	str	r3, [r1, #8]
}
    90d6:	bc10      	pop	{r4}
    90d8:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    90da:	1c53      	adds	r3, r2, #1
    90dc:	608b      	str	r3, [r1, #8]
    90de:	2300      	movs	r3, #0
    90e0:	54a3      	strb	r3, [r4, r2]
    90e2:	e7f8      	b.n	90d6 <str_out+0x22>

000090e4 <vprintk>:
{
    90e4:	b508      	push	{r3, lr}
		z_log_vprintk(fmt, ap);
    90e6:	f000 ffa1 	bl	a02c <z_log_vprintk>
}
    90ea:	bd08      	pop	{r3, pc}

000090ec <printk>:
{
    90ec:	b40f      	push	{r0, r1, r2, r3}
    90ee:	b500      	push	{lr}
    90f0:	b083      	sub	sp, #12
    90f2:	a904      	add	r1, sp, #16
    90f4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    90f8:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    90fa:	f7ff fff3 	bl	90e4 <vprintk>
}
    90fe:	b003      	add	sp, #12
    9100:	f85d eb04 	ldr.w	lr, [sp], #4
    9104:	b004      	add	sp, #16
    9106:	4770      	bx	lr

00009108 <snprintk>:
{
    9108:	b40c      	push	{r2, r3}
    910a:	b500      	push	{lr}
    910c:	b083      	sub	sp, #12
    910e:	ab04      	add	r3, sp, #16
    9110:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    9114:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    9116:	f7f8 fb0f 	bl	1738 <vsnprintk>
}
    911a:	b003      	add	sp, #12
    911c:	f85d eb04 	ldr.w	lr, [sp], #4
    9120:	b002      	add	sp, #8
    9122:	4770      	bx	lr

00009124 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    9124:	b508      	push	{r3, lr}
    9126:	4604      	mov	r4, r0
    9128:	4608      	mov	r0, r1
    912a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    912c:	461a      	mov	r2, r3
    912e:	47a0      	blx	r4
	return z_impl_z_current_get();
    9130:	f7ff fc70 	bl	8a14 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    9134:	f7fb fb10 	bl	4758 <z_impl_k_thread_abort>

00009138 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    9138:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    913c:	8b03      	ldrh	r3, [r0, #24]
    913e:	f023 0307 	bic.w	r3, r3, #7
    9142:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    9144:	8303      	strh	r3, [r0, #24]
}
    9146:	4770      	bx	lr

00009148 <notify_monitors>:
{
    9148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    914c:	4606      	mov	r6, r0
    914e:	460f      	mov	r7, r1
    9150:	4690      	mov	r8, r2
	return list->head;
    9152:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    9154:	b121      	cbz	r1, 9160 <notify_monitors+0x18>
	return node->next;
    9156:	680c      	ldr	r4, [r1, #0]
    9158:	b13c      	cbz	r4, 916a <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
    915a:	b931      	cbnz	r1, 916a <notify_monitors+0x22>
    915c:	460c      	mov	r4, r1
    915e:	e004      	b.n	916a <notify_monitors+0x22>
    9160:	460c      	mov	r4, r1
    9162:	e002      	b.n	916a <notify_monitors+0x22>
    9164:	4623      	mov	r3, r4
    9166:	4621      	mov	r1, r4
    9168:	461c      	mov	r4, r3
    916a:	b169      	cbz	r1, 9188 <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
    916c:	684d      	ldr	r5, [r1, #4]
    916e:	4643      	mov	r3, r8
    9170:	463a      	mov	r2, r7
    9172:	4630      	mov	r0, r6
    9174:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    9176:	2c00      	cmp	r4, #0
    9178:	d0f4      	beq.n	9164 <notify_monitors+0x1c>
	return node->next;
    917a:	6823      	ldr	r3, [r4, #0]
    917c:	2b00      	cmp	r3, #0
    917e:	d0f2      	beq.n	9166 <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    9180:	2c00      	cmp	r4, #0
    9182:	d1f0      	bne.n	9166 <notify_monitors+0x1e>
    9184:	4623      	mov	r3, r4
    9186:	e7ee      	b.n	9166 <notify_monitors+0x1e>
}
    9188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000918c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    918c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    918e:	f013 0307 	ands.w	r3, r3, #7
    9192:	d103      	bne.n	919c <process_recheck+0x10>
	return list->head;
    9194:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    9196:	b10a      	cbz	r2, 919c <process_recheck+0x10>
		evt = EVT_START;
    9198:	2003      	movs	r0, #3
    919a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    919c:	2b02      	cmp	r3, #2
    919e:	d003      	beq.n	91a8 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    91a0:	2b01      	cmp	r3, #1
    91a2:	d006      	beq.n	91b2 <process_recheck+0x26>
	int evt = EVT_NOP;
    91a4:	2000      	movs	r0, #0
    91a6:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    91a8:	8b42      	ldrh	r2, [r0, #26]
    91aa:	2a00      	cmp	r2, #0
    91ac:	d1f8      	bne.n	91a0 <process_recheck+0x14>
		evt = EVT_STOP;
    91ae:	2004      	movs	r0, #4
    91b0:	4770      	bx	lr
    91b2:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    91b4:	b10b      	cbz	r3, 91ba <process_recheck+0x2e>
		evt = EVT_RESET;
    91b6:	2005      	movs	r0, #5
}
    91b8:	4770      	bx	lr
	int evt = EVT_NOP;
    91ba:	2000      	movs	r0, #0
    91bc:	4770      	bx	lr

000091be <process_complete>:
{
    91be:	b510      	push	{r4, lr}
    91c0:	4604      	mov	r4, r0
    91c2:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    91c4:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    91c6:	2a00      	cmp	r2, #0
    91c8:	db07      	blt.n	91da <process_complete+0x1c>
    91ca:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    91ce:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    91d0:	2a01      	cmp	r2, #1
    91d2:	d90e      	bls.n	91f2 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    91d4:	2b04      	cmp	r3, #4
    91d6:	d036      	beq.n	9246 <process_complete+0x88>
}
    91d8:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
    91da:	e9d0 0100 	ldrd	r0, r1, [r0]
    91de:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    91e2:	2300      	movs	r3, #0
    91e4:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    91e6:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    91e8:	2101      	movs	r1, #1
    91ea:	4620      	mov	r0, r4
    91ec:	f7ff ffa4 	bl	9138 <set_state>
    91f0:	e7f2      	b.n	91d8 <process_complete+0x1a>
		*clients = mgr->clients;
    91f2:	e9d0 0100 	ldrd	r0, r1, [r0]
    91f6:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    91fa:	2200      	movs	r2, #0
    91fc:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    91fe:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    9200:	2b06      	cmp	r3, #6
    9202:	d11b      	bne.n	923c <process_complete+0x7e>
	return list->head;
    9204:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    9208:	b153      	cbz	r3, 9220 <process_complete+0x62>
				mgr->refs += 1U;
    920a:	8b62      	ldrh	r2, [r4, #26]
    920c:	3201      	adds	r2, #1
    920e:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    9210:	461a      	mov	r2, r3
	return node->next;
    9212:	681b      	ldr	r3, [r3, #0]
    9214:	2b00      	cmp	r3, #0
    9216:	d0f7      	beq.n	9208 <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    9218:	2a00      	cmp	r2, #0
    921a:	d1f5      	bne.n	9208 <process_complete+0x4a>
    921c:	4613      	mov	r3, r2
    921e:	e7f3      	b.n	9208 <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
    9220:	2102      	movs	r1, #2
    9222:	4620      	mov	r0, r4
    9224:	f7ff ff88 	bl	9138 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    9228:	4620      	mov	r0, r4
    922a:	f7ff ffaf 	bl	918c <process_recheck>
    922e:	2800      	cmp	r0, #0
    9230:	d0d2      	beq.n	91d8 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9232:	8b23      	ldrh	r3, [r4, #24]
    9234:	f043 0320 	orr.w	r3, r3, #32
    9238:	8323      	strh	r3, [r4, #24]
    923a:	e7cd      	b.n	91d8 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    923c:	2100      	movs	r1, #0
    923e:	4620      	mov	r0, r4
    9240:	f7ff ff7a 	bl	9138 <set_state>
    9244:	e7f0      	b.n	9228 <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
    9246:	2100      	movs	r1, #0
    9248:	f7ff ff76 	bl	9138 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    924c:	4620      	mov	r0, r4
    924e:	f7ff ff9d 	bl	918c <process_recheck>
    9252:	2800      	cmp	r0, #0
    9254:	d0c0      	beq.n	91d8 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9256:	8b23      	ldrh	r3, [r4, #24]
    9258:	f043 0320 	orr.w	r3, r3, #32
    925c:	8323      	strh	r3, [r4, #24]
}
    925e:	e7bb      	b.n	91d8 <process_complete+0x1a>

00009260 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    9260:	b150      	cbz	r0, 9278 <validate_args+0x18>
{
    9262:	b510      	push	{r4, lr}
    9264:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    9266:	b151      	cbz	r1, 927e <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
    9268:	1d08      	adds	r0, r1, #4
    926a:	f000 f8eb 	bl	9444 <sys_notify_validate>
	if ((rv == 0)
    926e:	b910      	cbnz	r0, 9276 <validate_args+0x16>
	    && ((cli->notify.flags
    9270:	68a3      	ldr	r3, [r4, #8]
    9272:	2b03      	cmp	r3, #3
    9274:	d806      	bhi.n	9284 <validate_args+0x24>
}
    9276:	bd10      	pop	{r4, pc}
		return -EINVAL;
    9278:	f06f 0015 	mvn.w	r0, #21
}
    927c:	4770      	bx	lr
		return -EINVAL;
    927e:	f06f 0015 	mvn.w	r0, #21
    9282:	e7f8      	b.n	9276 <validate_args+0x16>
		rv = -EINVAL;
    9284:	f06f 0015 	mvn.w	r0, #21
    9288:	e7f5      	b.n	9276 <validate_args+0x16>

0000928a <notify_one>:
{
    928a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    928e:	4607      	mov	r7, r0
    9290:	460c      	mov	r4, r1
    9292:	4616      	mov	r6, r2
    9294:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    9296:	4619      	mov	r1, r3
    9298:	1d20      	adds	r0, r4, #4
    929a:	f000 f8ea 	bl	9472 <sys_notify_finalize>
	if (cb) {
    929e:	b128      	cbz	r0, 92ac <notify_one+0x22>
    92a0:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    92a2:	462b      	mov	r3, r5
    92a4:	4632      	mov	r2, r6
    92a6:	4621      	mov	r1, r4
    92a8:	4638      	mov	r0, r7
    92aa:	47c0      	blx	r8
}
    92ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000092b0 <notify_all>:
{
    92b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    92b4:	4680      	mov	r8, r0
    92b6:	460c      	mov	r4, r1
    92b8:	4617      	mov	r7, r2
    92ba:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    92bc:	e004      	b.n	92c8 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    92be:	4633      	mov	r3, r6
    92c0:	463a      	mov	r2, r7
    92c2:	4640      	mov	r0, r8
    92c4:	f7ff ffe1 	bl	928a <notify_one>
	return list->head;
    92c8:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    92ca:	b131      	cbz	r1, 92da <notify_all+0x2a>
	return node->next;
    92cc:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    92ce:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    92d0:	6863      	ldr	r3, [r4, #4]
    92d2:	428b      	cmp	r3, r1
    92d4:	d1f3      	bne.n	92be <notify_all+0xe>
	list->tail = node;
    92d6:	6065      	str	r5, [r4, #4]
}
    92d8:	e7f1      	b.n	92be <notify_all+0xe>
}
    92da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000092de <transition_complete>:
{
    92de:	b508      	push	{r3, lr}
	__asm__ volatile(
    92e0:	f04f 0c20 	mov.w	ip, #32
    92e4:	f3ef 8211 	mrs	r2, BASEPRI
    92e8:	f38c 8812 	msr	BASEPRI_MAX, ip
    92ec:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    92f0:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    92f2:	2101      	movs	r1, #1
    92f4:	f7f8 fa38 	bl	1768 <process_event>
}
    92f8:	bd08      	pop	{r3, pc}

000092fa <onoff_manager_init>:
	if ((mgr == NULL)
    92fa:	4603      	mov	r3, r0
    92fc:	b170      	cbz	r0, 931c <onoff_manager_init+0x22>
	    || (transitions == NULL)
    92fe:	b181      	cbz	r1, 9322 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
    9300:	680a      	ldr	r2, [r1, #0]
    9302:	b18a      	cbz	r2, 9328 <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
    9304:	684a      	ldr	r2, [r1, #4]
    9306:	b192      	cbz	r2, 932e <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    9308:	2000      	movs	r0, #0
    930a:	6018      	str	r0, [r3, #0]
    930c:	6058      	str	r0, [r3, #4]
    930e:	6098      	str	r0, [r3, #8]
    9310:	60d8      	str	r0, [r3, #12]
    9312:	6118      	str	r0, [r3, #16]
    9314:	6158      	str	r0, [r3, #20]
    9316:	6198      	str	r0, [r3, #24]
    9318:	6119      	str	r1, [r3, #16]
	return 0;
    931a:	4770      	bx	lr
		return -EINVAL;
    931c:	f06f 0015 	mvn.w	r0, #21
    9320:	4770      	bx	lr
    9322:	f06f 0015 	mvn.w	r0, #21
    9326:	4770      	bx	lr
    9328:	f06f 0015 	mvn.w	r0, #21
    932c:	4770      	bx	lr
    932e:	f06f 0015 	mvn.w	r0, #21
}
    9332:	4770      	bx	lr

00009334 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    9334:	b570      	push	{r4, r5, r6, lr}
    9336:	4605      	mov	r5, r0
    9338:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    933a:	f7ff ff91 	bl	9260 <validate_args>

	if (rv < 0) {
    933e:	1e04      	subs	r4, r0, #0
    9340:	db30      	blt.n	93a4 <onoff_request+0x70>
    9342:	f04f 0320 	mov.w	r3, #32
    9346:	f3ef 8211 	mrs	r2, BASEPRI
    934a:	f383 8812 	msr	BASEPRI_MAX, r3
    934e:	f3bf 8f6f 	isb	sy
    9352:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9354:	f8b5 c018 	ldrh.w	ip, [r5, #24]
    9358:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    935c:	8b6b      	ldrh	r3, [r5, #26]
    935e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9362:	428b      	cmp	r3, r1
    9364:	d02c      	beq.n	93c0 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    9366:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
    9368:	f1bc 0f02 	cmp.w	ip, #2
    936c:	d008      	beq.n	9380 <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    936e:	f1bc 0f06 	cmp.w	ip, #6
    9372:	d819      	bhi.n	93a8 <onoff_request+0x74>
    9374:	e8df f00c 	tbb	[pc, ip]
    9378:	1818181e 	.word	0x1818181e
    937c:	2a1e      	.short	0x2a1e
    937e:	1e          	.byte	0x1e
    937f:	00          	.byte	0x00
		mgr->refs += 1U;
    9380:	3301      	adds	r3, #1
    9382:	836b      	strh	r3, [r5, #26]
		notify = true;
    9384:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
    9386:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
    9388:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
    938a:	b128      	cbz	r0, 9398 <onoff_request+0x64>
	parent->next = child;
    938c:	2000      	movs	r0, #0
    938e:	6030      	str	r0, [r6, #0]
	return list->tail;
    9390:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    9392:	b308      	cbz	r0, 93d8 <onoff_request+0xa4>
	parent->next = child;
    9394:	6006      	str	r6, [r0, #0]
	list->tail = node;
    9396:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    9398:	bb09      	cbnz	r1, 93de <onoff_request+0xaa>
	__asm__ volatile(
    939a:	f38e 8811 	msr	BASEPRI, lr
    939e:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    93a2:	bb0b      	cbnz	r3, 93e8 <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    93a4:	4620      	mov	r0, r4
    93a6:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    93a8:	f06f 0404 	mvn.w	r4, #4
    93ac:	2300      	movs	r3, #0
    93ae:	4619      	mov	r1, r3
    93b0:	4618      	mov	r0, r3
    93b2:	e7ea      	b.n	938a <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
    93b4:	fabc f18c 	clz	r1, ip
    93b8:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
    93ba:	2300      	movs	r3, #0
		add_client = true;
    93bc:	2001      	movs	r0, #1
    93be:	e7e4      	b.n	938a <onoff_request+0x56>
		rv = -EAGAIN;
    93c0:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
    93c4:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
    93c6:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
    93c8:	4618      	mov	r0, r3
    93ca:	e7de      	b.n	938a <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
    93cc:	f06f 0485 	mvn.w	r4, #133	; 0x85
    93d0:	2300      	movs	r3, #0
    93d2:	4619      	mov	r1, r3
    93d4:	4618      	mov	r0, r3
    93d6:	e7d8      	b.n	938a <onoff_request+0x56>
    93d8:	606e      	str	r6, [r5, #4]
	list->head = node;
    93da:	602e      	str	r6, [r5, #0]
}
    93dc:	e7dc      	b.n	9398 <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
    93de:	2102      	movs	r1, #2
    93e0:	4628      	mov	r0, r5
    93e2:	f7f8 f9c1 	bl	1768 <process_event>
    93e6:	e7dd      	b.n	93a4 <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
    93e8:	2300      	movs	r3, #0
    93ea:	4662      	mov	r2, ip
    93ec:	4631      	mov	r1, r6
    93ee:	4628      	mov	r0, r5
    93f0:	f7ff ff4b 	bl	928a <notify_one>
    93f4:	e7d6      	b.n	93a4 <onoff_request+0x70>

000093f6 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    93f6:	b510      	push	{r4, lr}
	__asm__ volatile(
    93f8:	f04f 0320 	mov.w	r3, #32
    93fc:	f3ef 8211 	mrs	r2, BASEPRI
    9400:	f383 8812 	msr	BASEPRI_MAX, r3
    9404:	f3bf 8f6f 	isb	sy
    9408:	4611      	mov	r1, r2
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    940a:	8b03      	ldrh	r3, [r0, #24]
    940c:	f003 0307 	and.w	r3, r3, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    9410:	2b02      	cmp	r3, #2
    9412:	d007      	beq.n	9424 <onoff_release+0x2e>
		if (state == ONOFF_STATE_ERROR) {
    9414:	2b01      	cmp	r3, #1
    9416:	d002      	beq.n	941e <onoff_release+0x28>
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    9418:	f06f 0485 	mvn.w	r4, #133	; 0x85
	__ASSERT_NO_MSG(mgr->refs > 0);
	mgr->refs -= 1U;
	stop = (mgr->refs == 0);

out:
	if (stop) {
    941c:	e008      	b.n	9430 <onoff_release+0x3a>
			rv = -EIO;
    941e:	f06f 0404 	mvn.w	r4, #4
    9422:	e005      	b.n	9430 <onoff_release+0x3a>
    9424:	461c      	mov	r4, r3
	mgr->refs -= 1U;
    9426:	8b43      	ldrh	r3, [r0, #26]
    9428:	3b01      	subs	r3, #1
    942a:	b29b      	uxth	r3, r3
    942c:	8343      	strh	r3, [r0, #26]
	if (stop) {
    942e:	b12b      	cbz	r3, 943c <onoff_release+0x46>
	__asm__ volatile(
    9430:	f381 8811 	msr	BASEPRI, r1
    9434:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
}
    9438:	4620      	mov	r0, r4
    943a:	bd10      	pop	{r4, pc}
		process_event(mgr, EVT_RECHECK, key);
    943c:	2102      	movs	r1, #2
    943e:	f7f8 f993 	bl	1768 <process_event>
    9442:	e7f9      	b.n	9438 <onoff_release+0x42>

00009444 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    9444:	4602      	mov	r2, r0
    9446:	b158      	cbz	r0, 9460 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    9448:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    944a:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    944e:	2b01      	cmp	r3, #1
    9450:	d003      	beq.n	945a <sys_notify_validate+0x16>
    9452:	2b03      	cmp	r3, #3
    9454:	d107      	bne.n	9466 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    9456:	6803      	ldr	r3, [r0, #0]
    9458:	b143      	cbz	r3, 946c <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    945a:	2000      	movs	r0, #0
    945c:	6090      	str	r0, [r2, #8]
    945e:	4770      	bx	lr
		return -EINVAL;
    9460:	f06f 0015 	mvn.w	r0, #21
    9464:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    9466:	f06f 0015 	mvn.w	r0, #21
    946a:	4770      	bx	lr
			rv = -EINVAL;
    946c:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    9470:	4770      	bx	lr

00009472 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    9472:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    9474:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    9476:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    947a:	6081      	str	r1, [r0, #8]
	switch (method) {
    947c:	2a03      	cmp	r2, #3
    947e:	d103      	bne.n	9488 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    9480:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    9482:	2200      	movs	r2, #0
    9484:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    9486:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    9488:	2000      	movs	r0, #0
    948a:	e7fa      	b.n	9482 <sys_notify_finalize+0x10>

0000948c <extract_decimal>:
{
    948c:	4684      	mov	ip, r0
	const char *sp = *str;
    948e:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    9490:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp) != 0) {
    9492:	e006      	b.n	94a2 <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
    9494:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    9498:	3201      	adds	r2, #1
    949a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    949e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    94a2:	7813      	ldrb	r3, [r2, #0]
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    94a4:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    94a8:	2909      	cmp	r1, #9
    94aa:	d9f3      	bls.n	9494 <extract_decimal+0x8>
	*str = sp;
    94ac:	f8cc 2000 	str.w	r2, [ip]
}
    94b0:	4770      	bx	lr

000094b2 <extract_width>:
{
    94b2:	b530      	push	{r4, r5, lr}
    94b4:	b083      	sub	sp, #12
    94b6:	4604      	mov	r4, r0
    94b8:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
    94ba:	7803      	ldrb	r3, [r0, #0]
    94bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    94c0:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
    94c2:	460d      	mov	r5, r1
    94c4:	780b      	ldrb	r3, [r1, #0]
    94c6:	2b2a      	cmp	r3, #42	; 0x2a
    94c8:	d018      	beq.n	94fc <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
    94ca:	a801      	add	r0, sp, #4
    94cc:	f7ff ffde 	bl	948c <extract_decimal>
	if (sp != wp) {
    94d0:	9b01      	ldr	r3, [sp, #4]
    94d2:	429d      	cmp	r5, r3
    94d4:	d00f      	beq.n	94f6 <extract_width+0x44>
		conv->width_present = true;
    94d6:	7823      	ldrb	r3, [r4, #0]
    94d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    94dc:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    94de:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    94e0:	b2db      	uxtb	r3, r3
    94e2:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    94e6:	2800      	cmp	r0, #0
    94e8:	db10      	blt.n	950c <extract_width+0x5a>
    94ea:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    94ec:	4313      	orrs	r3, r2
    94ee:	7822      	ldrb	r2, [r4, #0]
    94f0:	f363 0241 	bfi	r2, r3, #1, #1
    94f4:	7022      	strb	r2, [r4, #0]
	return sp;
    94f6:	9801      	ldr	r0, [sp, #4]
}
    94f8:	b003      	add	sp, #12
    94fa:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
    94fc:	7843      	ldrb	r3, [r0, #1]
    94fe:	f043 0301 	orr.w	r3, r3, #1
    9502:	7043      	strb	r3, [r0, #1]
		return ++sp;
    9504:	4608      	mov	r0, r1
    9506:	3001      	adds	r0, #1
    9508:	9001      	str	r0, [sp, #4]
    950a:	e7f5      	b.n	94f8 <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
    950c:	2201      	movs	r2, #1
    950e:	e7ed      	b.n	94ec <extract_width+0x3a>

00009510 <extract_prec>:
{
    9510:	b510      	push	{r4, lr}
    9512:	b082      	sub	sp, #8
    9514:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
    9516:	780b      	ldrb	r3, [r1, #0]
    9518:	2b2e      	cmp	r3, #46	; 0x2e
    951a:	bf14      	ite	ne
    951c:	2300      	movne	r3, #0
    951e:	2301      	moveq	r3, #1
    9520:	7842      	ldrb	r2, [r0, #1]
    9522:	f363 0241 	bfi	r2, r3, #1, #1
    9526:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
    9528:	b1c3      	cbz	r3, 955c <extract_prec+0x4c>
    952a:	4604      	mov	r4, r0
	++sp;
    952c:	9b01      	ldr	r3, [sp, #4]
    952e:	1c5a      	adds	r2, r3, #1
    9530:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    9532:	785b      	ldrb	r3, [r3, #1]
    9534:	2b2a      	cmp	r3, #42	; 0x2a
    9536:	d013      	beq.n	9560 <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
    9538:	a801      	add	r0, sp, #4
    953a:	f7ff ffa7 	bl	948c <extract_decimal>
	conv->prec_value = prec;
    953e:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    9540:	7823      	ldrb	r3, [r4, #0]
    9542:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    9546:	2800      	cmp	r0, #0
    9548:	db12      	blt.n	9570 <extract_prec+0x60>
    954a:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    954c:	4313      	orrs	r3, r2
    954e:	7822      	ldrb	r2, [r4, #0]
    9550:	f363 0241 	bfi	r2, r3, #1, #1
    9554:	7022      	strb	r2, [r4, #0]
	return sp;
    9556:	9801      	ldr	r0, [sp, #4]
}
    9558:	b002      	add	sp, #8
    955a:	bd10      	pop	{r4, pc}
		return sp;
    955c:	4608      	mov	r0, r1
    955e:	e7fb      	b.n	9558 <extract_prec+0x48>
		conv->prec_star = true;
    9560:	7843      	ldrb	r3, [r0, #1]
    9562:	f043 0304 	orr.w	r3, r3, #4
    9566:	7043      	strb	r3, [r0, #1]
		return ++sp;
    9568:	4610      	mov	r0, r2
    956a:	3001      	adds	r0, #1
    956c:	9001      	str	r0, [sp, #4]
    956e:	e7f3      	b.n	9558 <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
    9570:	2201      	movs	r2, #1
    9572:	e7eb      	b.n	954c <extract_prec+0x3c>

00009574 <extract_length>:
{
    9574:	4602      	mov	r2, r0
	switch (*sp) {
    9576:	780b      	ldrb	r3, [r1, #0]
    9578:	3b4c      	subs	r3, #76	; 0x4c
    957a:	2b2e      	cmp	r3, #46	; 0x2e
    957c:	d85b      	bhi.n	9636 <extract_length+0xc2>
    957e:	e8df f003 	tbb	[pc, r3]
    9582:	5a4f      	.short	0x5a4f
    9584:	5a5a5a5a 	.word	0x5a5a5a5a
    9588:	5a5a5a5a 	.word	0x5a5a5a5a
    958c:	5a5a5a5a 	.word	0x5a5a5a5a
    9590:	5a5a5a5a 	.word	0x5a5a5a5a
    9594:	5a5a5a5a 	.word	0x5a5a5a5a
    9598:	5a5a5a5a 	.word	0x5a5a5a5a
    959c:	5a185a5a 	.word	0x5a185a5a
    95a0:	5a295a3a 	.word	0x5a295a3a
    95a4:	5a5a5a5a 	.word	0x5a5a5a5a
    95a8:	5a485a5a 	.word	0x5a485a5a
    95ac:	5a5a5a5a 	.word	0x5a5a5a5a
    95b0:	41          	.byte	0x41
    95b1:	00          	.byte	0x00
		if (*++sp == 'h') {
    95b2:	1c48      	adds	r0, r1, #1
    95b4:	784b      	ldrb	r3, [r1, #1]
    95b6:	2b68      	cmp	r3, #104	; 0x68
    95b8:	d005      	beq.n	95c6 <extract_length+0x52>
			conv->length_mod = LENGTH_H;
    95ba:	7853      	ldrb	r3, [r2, #1]
    95bc:	2102      	movs	r1, #2
    95be:	f361 03c6 	bfi	r3, r1, #3, #4
    95c2:	7053      	strb	r3, [r2, #1]
    95c4:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
    95c6:	7853      	ldrb	r3, [r2, #1]
    95c8:	2001      	movs	r0, #1
    95ca:	f360 03c6 	bfi	r3, r0, #3, #4
    95ce:	7053      	strb	r3, [r2, #1]
			++sp;
    95d0:	1c88      	adds	r0, r1, #2
    95d2:	4770      	bx	lr
		if (*++sp == 'l') {
    95d4:	1c48      	adds	r0, r1, #1
    95d6:	784b      	ldrb	r3, [r1, #1]
    95d8:	2b6c      	cmp	r3, #108	; 0x6c
    95da:	d005      	beq.n	95e8 <extract_length+0x74>
			conv->length_mod = LENGTH_L;
    95dc:	7853      	ldrb	r3, [r2, #1]
    95de:	2103      	movs	r1, #3
    95e0:	f361 03c6 	bfi	r3, r1, #3, #4
    95e4:	7053      	strb	r3, [r2, #1]
    95e6:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
    95e8:	7853      	ldrb	r3, [r2, #1]
    95ea:	2004      	movs	r0, #4
    95ec:	f360 03c6 	bfi	r3, r0, #3, #4
    95f0:	7053      	strb	r3, [r2, #1]
			++sp;
    95f2:	1c88      	adds	r0, r1, #2
    95f4:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
    95f6:	7853      	ldrb	r3, [r2, #1]
    95f8:	2005      	movs	r0, #5
    95fa:	f360 03c6 	bfi	r3, r0, #3, #4
    95fe:	7053      	strb	r3, [r2, #1]
		++sp;
    9600:	1c48      	adds	r0, r1, #1
		break;
    9602:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
    9604:	7853      	ldrb	r3, [r2, #1]
    9606:	2006      	movs	r0, #6
    9608:	f360 03c6 	bfi	r3, r0, #3, #4
    960c:	7053      	strb	r3, [r2, #1]
		++sp;
    960e:	1c48      	adds	r0, r1, #1
		break;
    9610:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
    9612:	7853      	ldrb	r3, [r2, #1]
    9614:	2007      	movs	r0, #7
    9616:	f360 03c6 	bfi	r3, r0, #3, #4
    961a:	7053      	strb	r3, [r2, #1]
		++sp;
    961c:	1c48      	adds	r0, r1, #1
		break;
    961e:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
    9620:	7853      	ldrb	r3, [r2, #1]
    9622:	2008      	movs	r0, #8
    9624:	f360 03c6 	bfi	r3, r0, #3, #4
    9628:	7053      	strb	r3, [r2, #1]
		++sp;
    962a:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
    962c:	7813      	ldrb	r3, [r2, #0]
    962e:	f043 0302 	orr.w	r3, r3, #2
    9632:	7013      	strb	r3, [r2, #0]
		break;
    9634:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
    9636:	7853      	ldrb	r3, [r2, #1]
    9638:	f36f 03c6 	bfc	r3, #3, #4
    963c:	7053      	strb	r3, [r2, #1]
		break;
    963e:	4608      	mov	r0, r1
}
    9640:	4770      	bx	lr

00009642 <extract_specifier>:
{
    9642:	b500      	push	{lr}
    9644:	4602      	mov	r2, r0
	conv->specifier = *sp++;
    9646:	4608      	mov	r0, r1
    9648:	f810 3b01 	ldrb.w	r3, [r0], #1
    964c:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
    964e:	2b78      	cmp	r3, #120	; 0x78
    9650:	d817      	bhi.n	9682 <extract_specifier+0x40>
    9652:	2b6e      	cmp	r3, #110	; 0x6e
    9654:	d245      	bcs.n	96e2 <extract_specifier+0xa0>
    9656:	2b69      	cmp	r3, #105	; 0x69
    9658:	d813      	bhi.n	9682 <extract_specifier+0x40>
    965a:	2b58      	cmp	r3, #88	; 0x58
    965c:	d317      	bcc.n	968e <extract_specifier+0x4c>
    965e:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
    9662:	fa5f fc8c 	uxtb.w	ip, ip
    9666:	2101      	movs	r1, #1
    9668:	fa01 f10c 	lsl.w	r1, r1, ip
    966c:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    9670:	d115      	bne.n	969e <extract_specifier+0x5c>
    9672:	f640 0c01 	movw	ip, #2049	; 0x801
    9676:	ea11 0f0c 	tst.w	r1, ip
    967a:	d171      	bne.n	9760 <extract_specifier+0x11e>
    967c:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    9680:	d156      	bne.n	9730 <extract_specifier+0xee>
		conv->invalid = true;
    9682:	7813      	ldrb	r3, [r2, #0]
    9684:	f043 0301 	orr.w	r3, r3, #1
    9688:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
    968a:	2100      	movs	r1, #0
		break;
    968c:	e05e      	b.n	974c <extract_specifier+0x10a>
	switch (conv->specifier) {
    968e:	2b41      	cmp	r3, #65	; 0x41
    9690:	d005      	beq.n	969e <extract_specifier+0x5c>
    9692:	d3f6      	bcc.n	9682 <extract_specifier+0x40>
    9694:	f1a3 0145 	sub.w	r1, r3, #69	; 0x45
    9698:	b2c9      	uxtb	r1, r1
    969a:	2902      	cmp	r1, #2
    969c:	d8f1      	bhi.n	9682 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
    969e:	7891      	ldrb	r1, [r2, #2]
    96a0:	f04f 0c04 	mov.w	ip, #4
    96a4:	f36c 0102 	bfi	r1, ip, #0, #3
    96a8:	7091      	strb	r1, [r2, #2]
			|| (conv->specifier == 'A');
    96aa:	2b61      	cmp	r3, #97	; 0x61
    96ac:	d06c      	beq.n	9788 <extract_specifier+0x146>
    96ae:	2b41      	cmp	r3, #65	; 0x41
    96b0:	d068      	beq.n	9784 <extract_specifier+0x142>
    96b2:	2100      	movs	r1, #0
		conv->specifier_a = (conv->specifier == 'a')
    96b4:	7853      	ldrb	r3, [r2, #1]
    96b6:	f361 13c7 	bfi	r3, r1, #7, #1
    96ba:	7053      	strb	r3, [r2, #1]
		if (conv->specifier_a
    96bc:	b2db      	uxtb	r3, r3
    96be:	f992 1001 	ldrsb.w	r1, [r2, #1]
    96c2:	2900      	cmp	r1, #0
    96c4:	db74      	blt.n	97b0 <extract_specifier+0x16e>
		if (conv->length_mod == LENGTH_L) {
    96c6:	f003 0378 	and.w	r3, r3, #120	; 0x78
    96ca:	2b18      	cmp	r3, #24
    96cc:	d05e      	beq.n	978c <extract_specifier+0x14a>
		} else if ((conv->length_mod != LENGTH_NONE)
    96ce:	2b00      	cmp	r3, #0
    96d0:	d070      	beq.n	97b4 <extract_specifier+0x172>
			   && (conv->length_mod != LENGTH_UPPER_L)) {
    96d2:	2b40      	cmp	r3, #64	; 0x40
    96d4:	d070      	beq.n	97b8 <extract_specifier+0x176>
			conv->invalid = true;
    96d6:	7813      	ldrb	r3, [r2, #0]
    96d8:	f043 0301 	orr.w	r3, r3, #1
    96dc:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
    96de:	2100      	movs	r1, #0
    96e0:	e034      	b.n	974c <extract_specifier+0x10a>
	switch (conv->specifier) {
    96e2:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
    96e6:	b2c9      	uxtb	r1, r1
    96e8:	f04f 0c01 	mov.w	ip, #1
    96ec:	fa0c fc01 	lsl.w	ip, ip, r1
    96f0:	f240 4182 	movw	r1, #1154	; 0x482
    96f4:	ea1c 0f01 	tst.w	ip, r1
    96f8:	bf14      	ite	ne
    96fa:	f04f 0e01 	movne.w	lr, #1
    96fe:	f04f 0e00 	moveq.w	lr, #0
    9702:	d12d      	bne.n	9760 <extract_specifier+0x11e>
    9704:	f01c 0f24 	tst.w	ip, #36	; 0x24
    9708:	bf14      	ite	ne
    970a:	2101      	movne	r1, #1
    970c:	2100      	moveq	r1, #0
    970e:	d143      	bne.n	9798 <extract_specifier+0x156>
    9710:	f01c 0c01 	ands.w	ip, ip, #1
    9714:	d0b5      	beq.n	9682 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
    9716:	7893      	ldrb	r3, [r2, #2]
    9718:	f04f 0e03 	mov.w	lr, #3
    971c:	f36e 0302 	bfi	r3, lr, #0, #3
    9720:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    9722:	7853      	ldrb	r3, [r2, #1]
    9724:	f003 0378 	and.w	r3, r3, #120	; 0x78
    9728:	2b40      	cmp	r3, #64	; 0x40
    972a:	d10f      	bne.n	974c <extract_specifier+0x10a>
			unsupported = true;
    972c:	4661      	mov	r1, ip
    972e:	e00d      	b.n	974c <extract_specifier+0x10a>
		conv->specifier_cat = SPECIFIER_SINT;
    9730:	7891      	ldrb	r1, [r2, #2]
    9732:	f04f 0c01 	mov.w	ip, #1
    9736:	f36c 0102 	bfi	r1, ip, #0, #3
    973a:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    973c:	7851      	ldrb	r1, [r2, #1]
    973e:	f001 0178 	and.w	r1, r1, #120	; 0x78
    9742:	2940      	cmp	r1, #64	; 0x40
    9744:	d013      	beq.n	976e <extract_specifier+0x12c>
		if (conv->specifier == 'c') {
    9746:	2b63      	cmp	r3, #99	; 0x63
    9748:	d018      	beq.n	977c <extract_specifier+0x13a>
	bool unsupported = false;
    974a:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
    974c:	7813      	ldrb	r3, [r2, #0]
    974e:	f3c3 0c40 	ubfx	ip, r3, #1, #1
    9752:	ea41 010c 	orr.w	r1, r1, ip
    9756:	f361 0341 	bfi	r3, r1, #1, #1
    975a:	7013      	strb	r3, [r2, #0]
}
    975c:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
    9760:	7891      	ldrb	r1, [r2, #2]
    9762:	f04f 0c02 	mov.w	ip, #2
    9766:	f36c 0102 	bfi	r1, ip, #0, #3
    976a:	7091      	strb	r1, [r2, #2]
    976c:	e7e6      	b.n	973c <extract_specifier+0xfa>
			conv->invalid = true;
    976e:	f892 c000 	ldrb.w	ip, [r2]
    9772:	f04c 0c01 	orr.w	ip, ip, #1
    9776:	f882 c000 	strb.w	ip, [r2]
    977a:	e7e4      	b.n	9746 <extract_specifier+0x104>
			unsupported = (conv->length_mod != LENGTH_NONE);
    977c:	3900      	subs	r1, #0
    977e:	bf18      	it	ne
    9780:	2101      	movne	r1, #1
    9782:	e7e3      	b.n	974c <extract_specifier+0x10a>
			|| (conv->specifier == 'A');
    9784:	2101      	movs	r1, #1
    9786:	e795      	b.n	96b4 <extract_specifier+0x72>
    9788:	2101      	movs	r1, #1
    978a:	e793      	b.n	96b4 <extract_specifier+0x72>
			conv->length_mod = LENGTH_NONE;
    978c:	7853      	ldrb	r3, [r2, #1]
    978e:	f36f 03c6 	bfc	r3, #3, #4
    9792:	7053      	strb	r3, [r2, #1]
	bool unsupported = false;
    9794:	2100      	movs	r1, #0
    9796:	e7d9      	b.n	974c <extract_specifier+0x10a>
		conv->specifier_cat = SPECIFIER_PTR;
    9798:	7893      	ldrb	r3, [r2, #2]
    979a:	f04f 0c03 	mov.w	ip, #3
    979e:	f36c 0302 	bfi	r3, ip, #0, #3
    97a2:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
    97a4:	7853      	ldrb	r3, [r2, #1]
    97a6:	f013 0f78 	tst.w	r3, #120	; 0x78
    97aa:	d1cf      	bne.n	974c <extract_specifier+0x10a>
	bool unsupported = false;
    97ac:	4671      	mov	r1, lr
    97ae:	e7cd      	b.n	974c <extract_specifier+0x10a>
			unsupported = true;
    97b0:	2101      	movs	r1, #1
    97b2:	e7cb      	b.n	974c <extract_specifier+0x10a>
	bool unsupported = false;
    97b4:	2100      	movs	r1, #0
    97b6:	e7c9      	b.n	974c <extract_specifier+0x10a>
    97b8:	2100      	movs	r1, #0
    97ba:	e7c7      	b.n	974c <extract_specifier+0x10a>

000097bc <extract_conversion>:
{
    97bc:	b510      	push	{r4, lr}
    97be:	4604      	mov	r4, r0
    97c0:	4608      	mov	r0, r1
	*conv = (struct conversion) {
    97c2:	2300      	movs	r3, #0
    97c4:	6023      	str	r3, [r4, #0]
    97c6:	6063      	str	r3, [r4, #4]
    97c8:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
    97ca:	784b      	ldrb	r3, [r1, #1]
    97cc:	2b25      	cmp	r3, #37	; 0x25
    97ce:	d014      	beq.n	97fa <extract_conversion+0x3e>
    97d0:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
    97d2:	4620      	mov	r0, r4
    97d4:	f7f8 f87e 	bl	18d4 <extract_flags>
    97d8:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
    97da:	4620      	mov	r0, r4
    97dc:	f7ff fe69 	bl	94b2 <extract_width>
    97e0:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
    97e2:	4620      	mov	r0, r4
    97e4:	f7ff fe94 	bl	9510 <extract_prec>
    97e8:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
    97ea:	4620      	mov	r0, r4
    97ec:	f7ff fec2 	bl	9574 <extract_length>
    97f0:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
    97f2:	4620      	mov	r0, r4
    97f4:	f7ff ff25 	bl	9642 <extract_specifier>
}
    97f8:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
    97fa:	3002      	adds	r0, #2
    97fc:	70e3      	strb	r3, [r4, #3]
		return sp;
    97fe:	e7fb      	b.n	97f8 <extract_conversion+0x3c>

00009800 <_ldiv5>:
{
    9800:	b500      	push	{lr}
	uint32_t v_lo = *v;
    9802:	6802      	ldr	r2, [r0, #0]
    9804:	6841      	ldr	r1, [r0, #4]
	__asm__ ("" : "+r" (m));
    9806:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result = ((uint64_t)m << 32) | m;
    980a:	469e      	mov	lr, r3
	result += (uint64_t)v_lo * m;
    980c:	fba2 2c03 	umull	r2, ip, r2, r3
    9810:	eb12 0e0e 	adds.w	lr, r2, lr
    9814:	eb43 0e0c 	adc.w	lr, r3, ip
	result += (uint64_t)v_lo * m;
    9818:	eb12 020e 	adds.w	r2, r2, lr
    981c:	f14c 0c00 	adc.w	ip, ip, #0
	result += (uint64_t)v_hi * m;
    9820:	fba1 1303 	umull	r1, r3, r1, r3
    9824:	188a      	adds	r2, r1, r2
    9826:	eb43 020c 	adc.w	r2, r3, ip
	result += (uint64_t)v_hi * m;
    982a:	1889      	adds	r1, r1, r2
    982c:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
    9830:	6001      	str	r1, [r0, #0]
    9832:	6043      	str	r3, [r0, #4]
}
    9834:	f85d fb04 	ldr.w	pc, [sp], #4

00009838 <_ldiv10>:
{
    9838:	b508      	push	{r3, lr}
	*v >>= 1;
    983a:	6802      	ldr	r2, [r0, #0]
    983c:	6841      	ldr	r1, [r0, #4]
    983e:	0852      	lsrs	r2, r2, #1
    9840:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    9844:	0849      	lsrs	r1, r1, #1
    9846:	6002      	str	r2, [r0, #0]
    9848:	6041      	str	r1, [r0, #4]
	_ldiv5(v);
    984a:	f7ff ffd9 	bl	9800 <_ldiv5>
}
    984e:	bd08      	pop	{r3, pc}

00009850 <_get_digit>:
{
    9850:	4684      	mov	ip, r0
	if (*digit_count > 0) {
    9852:	680b      	ldr	r3, [r1, #0]
    9854:	2b00      	cmp	r3, #0
    9856:	dd17      	ble.n	9888 <_get_digit+0x38>
		--*digit_count;
    9858:	3b01      	subs	r3, #1
    985a:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
    985c:	6801      	ldr	r1, [r0, #0]
    985e:	6843      	ldr	r3, [r0, #4]
    9860:	0098      	lsls	r0, r3, #2
    9862:	ea40 7091 	orr.w	r0, r0, r1, lsr #30
    9866:	008a      	lsls	r2, r1, #2
    9868:	1852      	adds	r2, r2, r1
    986a:	eb43 0300 	adc.w	r3, r3, r0
    986e:	1892      	adds	r2, r2, r2
    9870:	415b      	adcs	r3, r3
    9872:	f8cc 2000 	str.w	r2, [ip]
    9876:	f8cc 3004 	str.w	r3, [ip, #4]
		rval = ((*fr >> 60) & 0xF) + '0';
    987a:	0f18      	lsrs	r0, r3, #28
    987c:	3030      	adds	r0, #48	; 0x30
		*fr &= (BIT64(60) - 1U);
    987e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    9882:	f8cc 3004 	str.w	r3, [ip, #4]
    9886:	4770      	bx	lr
		rval = '0';
    9888:	2030      	movs	r0, #48	; 0x30
}
    988a:	4770      	bx	lr

0000988c <conversion_radix>:
	switch (specifier) {
    988c:	286f      	cmp	r0, #111	; 0x6f
    988e:	d00c      	beq.n	98aa <conversion_radix+0x1e>
    9890:	d905      	bls.n	989e <conversion_radix+0x12>
    9892:	2870      	cmp	r0, #112	; 0x70
    9894:	d00b      	beq.n	98ae <conversion_radix+0x22>
    9896:	2878      	cmp	r0, #120	; 0x78
    9898:	d10b      	bne.n	98b2 <conversion_radix+0x26>
		return 16;
    989a:	2010      	movs	r0, #16
    989c:	4770      	bx	lr
	switch (specifier) {
    989e:	2858      	cmp	r0, #88	; 0x58
    98a0:	d001      	beq.n	98a6 <conversion_radix+0x1a>
    98a2:	200a      	movs	r0, #10
    98a4:	4770      	bx	lr
		return 16;
    98a6:	2010      	movs	r0, #16
    98a8:	4770      	bx	lr
		return 8;
    98aa:	2008      	movs	r0, #8
    98ac:	4770      	bx	lr
		return 16;
    98ae:	2010      	movs	r0, #16
    98b0:	4770      	bx	lr
	switch (specifier) {
    98b2:	200a      	movs	r0, #10
}
    98b4:	4770      	bx	lr

000098b6 <encode_uint>:
{
    98b6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    98ba:	4605      	mov	r5, r0
    98bc:	460c      	mov	r4, r1
    98be:	4693      	mov	fp, r2
    98c0:	4699      	mov	r9, r3
    98c2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier) != 0;
    98c4:	78d0      	ldrb	r0, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    98c6:	f1a0 0a41 	sub.w	sl, r0, #65	; 0x41
	const unsigned int radix = conversion_radix(conv->specifier);
    98ca:	f7ff ffdf 	bl	988c <conversion_radix>
    98ce:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
    98d0:	e015      	b.n	98fe <encode_uint+0x48>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    98d2:	f1ba 0f19 	cmp.w	sl, #25
    98d6:	d820      	bhi.n	991a <encode_uint+0x64>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    98d8:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    98da:	3237      	adds	r2, #55	; 0x37
    98dc:	b2d2      	uxtb	r2, r2
    98de:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
    98e2:	4632      	mov	r2, r6
    98e4:	4643      	mov	r3, r8
    98e6:	4628      	mov	r0, r5
    98e8:	4621      	mov	r1, r4
    98ea:	f7f7 f827 	bl	93c <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    98ee:	42b5      	cmp	r5, r6
    98f0:	f174 0400 	sbcs.w	r4, r4, #0
    98f4:	d315      	bcc.n	9922 <encode_uint+0x6c>
    98f6:	454f      	cmp	r7, r9
    98f8:	d913      	bls.n	9922 <encode_uint+0x6c>
		value /= radix;
    98fa:	4605      	mov	r5, r0
    98fc:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
    98fe:	f04f 0800 	mov.w	r8, #0
    9902:	4632      	mov	r2, r6
    9904:	4643      	mov	r3, r8
    9906:	4628      	mov	r0, r5
    9908:	4621      	mov	r1, r4
    990a:	f7f7 f817 	bl	93c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    990e:	2a09      	cmp	r2, #9
    9910:	d8df      	bhi.n	98d2 <encode_uint+0x1c>
    9912:	b2d2      	uxtb	r2, r2
    9914:	3230      	adds	r2, #48	; 0x30
    9916:	b2d2      	uxtb	r2, r2
    9918:	e7e1      	b.n	98de <encode_uint+0x28>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    991a:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    991c:	3257      	adds	r2, #87	; 0x57
    991e:	b2d2      	uxtb	r2, r2
    9920:	e7dd      	b.n	98de <encode_uint+0x28>
	if (conv->flag_hash) {
    9922:	f89b 3000 	ldrb.w	r3, [fp]
    9926:	f013 0f20 	tst.w	r3, #32
    992a:	d003      	beq.n	9934 <encode_uint+0x7e>
		if (radix == 8) {
    992c:	2e08      	cmp	r6, #8
    992e:	d004      	beq.n	993a <encode_uint+0x84>
		} else if (radix == 16) {
    9930:	2e10      	cmp	r6, #16
    9932:	d009      	beq.n	9948 <encode_uint+0x92>
}
    9934:	4638      	mov	r0, r7
    9936:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    993a:	f89b 3002 	ldrb.w	r3, [fp, #2]
    993e:	f043 0308 	orr.w	r3, r3, #8
    9942:	f88b 3002 	strb.w	r3, [fp, #2]
    9946:	e7f5      	b.n	9934 <encode_uint+0x7e>
			conv->altform_0c = true;
    9948:	f89b 3002 	ldrb.w	r3, [fp, #2]
    994c:	f043 0310 	orr.w	r3, r3, #16
    9950:	f88b 3002 	strb.w	r3, [fp, #2]
    9954:	e7ee      	b.n	9934 <encode_uint+0x7e>

00009956 <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
    9956:	7843      	ldrb	r3, [r0, #1]
    9958:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    995c:	2b07      	cmp	r3, #7
    995e:	d818      	bhi.n	9992 <store_count+0x3c>
    9960:	e8df f003 	tbb	[pc, r3]
    9964:	0a080604 	.word	0x0a080604
    9968:	1614100c 	.word	0x1614100c
		*(int *)dp = count;
    996c:	600a      	str	r2, [r1, #0]
		break;
    996e:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
    9970:	700a      	strb	r2, [r1, #0]
		break;
    9972:	4770      	bx	lr
		*(short *)dp = (short)count;
    9974:	800a      	strh	r2, [r1, #0]
		break;
    9976:	4770      	bx	lr
		*(long *)dp = (long)count;
    9978:	600a      	str	r2, [r1, #0]
		break;
    997a:	4770      	bx	lr
		*(long long *)dp = (long long)count;
    997c:	17d3      	asrs	r3, r2, #31
    997e:	600a      	str	r2, [r1, #0]
    9980:	604b      	str	r3, [r1, #4]
		break;
    9982:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
    9984:	17d3      	asrs	r3, r2, #31
    9986:	600a      	str	r2, [r1, #0]
    9988:	604b      	str	r3, [r1, #4]
		break;
    998a:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
    998c:	600a      	str	r2, [r1, #0]
		break;
    998e:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    9990:	600a      	str	r2, [r1, #0]
}
    9992:	4770      	bx	lr

00009994 <outs>:
{
    9994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9998:	4607      	mov	r7, r0
    999a:	460e      	mov	r6, r1
    999c:	4614      	mov	r4, r2
    999e:	4698      	mov	r8, r3
	size_t count = 0;
    99a0:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    99a2:	e006      	b.n	99b2 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    99a4:	4631      	mov	r1, r6
    99a6:	f814 0b01 	ldrb.w	r0, [r4], #1
    99aa:	47b8      	blx	r7
		if (rc < 0) {
    99ac:	2800      	cmp	r0, #0
    99ae:	db09      	blt.n	99c4 <outs+0x30>
		++count;
    99b0:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    99b2:	4544      	cmp	r4, r8
    99b4:	d3f6      	bcc.n	99a4 <outs+0x10>
    99b6:	f1b8 0f00 	cmp.w	r8, #0
    99ba:	d102      	bne.n	99c2 <outs+0x2e>
    99bc:	7823      	ldrb	r3, [r4, #0]
    99be:	2b00      	cmp	r3, #0
    99c0:	d1f0      	bne.n	99a4 <outs+0x10>
	return (int)count;
    99c2:	4628      	mov	r0, r5
}
    99c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000099c8 <free_space>:
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->flags & MPSC_PBUF_FULL) {
    99c8:	6903      	ldr	r3, [r0, #16]
    99ca:	f013 0f08 	tst.w	r3, #8
    99ce:	d108      	bne.n	99e2 <free_space+0x1a>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    99d0:	68c3      	ldr	r3, [r0, #12]
    99d2:	6802      	ldr	r2, [r0, #0]
    99d4:	4293      	cmp	r3, r2
    99d6:	d807      	bhi.n	99e8 <free_space+0x20>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
    99d8:	6a03      	ldr	r3, [r0, #32]
    99da:	1a9b      	subs	r3, r3, r2
    99dc:	600b      	str	r3, [r1, #0]

	return true;
    99de:	2001      	movs	r0, #1
}
    99e0:	4770      	bx	lr
		*res = 0;
    99e2:	2000      	movs	r0, #0
    99e4:	6008      	str	r0, [r1, #0]
		return false;
    99e6:	4770      	bx	lr
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
    99e8:	1a9b      	subs	r3, r3, r2
    99ea:	600b      	str	r3, [r1, #0]
		return false;
    99ec:	2000      	movs	r0, #0
    99ee:	4770      	bx	lr

000099f0 <available>:
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool available(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    99f0:	6903      	ldr	r3, [r0, #16]
    99f2:	f013 0f08 	tst.w	r3, #8
    99f6:	d107      	bne.n	9a08 <available+0x18>
    99f8:	6882      	ldr	r2, [r0, #8]
    99fa:	6843      	ldr	r3, [r0, #4]
    99fc:	429a      	cmp	r2, r3
    99fe:	d803      	bhi.n	9a08 <available+0x18>
		*res = buffer->size - buffer->tmp_rd_idx;
		return true;
	}

	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    9a00:	1a9b      	subs	r3, r3, r2
    9a02:	600b      	str	r3, [r1, #0]

	return false;
    9a04:	2000      	movs	r0, #0
}
    9a06:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_rd_idx;
    9a08:	6a03      	ldr	r3, [r0, #32]
    9a0a:	6882      	ldr	r2, [r0, #8]
    9a0c:	1a9b      	subs	r3, r3, r2
    9a0e:	600b      	str	r3, [r1, #0]
		return true;
    9a10:	2001      	movs	r0, #1
    9a12:	4770      	bx	lr

00009a14 <get_usage>:

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    9a14:	b510      	push	{r4, lr}
    9a16:	b082      	sub	sp, #8
    9a18:	4604      	mov	r4, r0
	uint32_t f;

	if (free_space(buffer, &f)) {
    9a1a:	a901      	add	r1, sp, #4
    9a1c:	f7ff ffd4 	bl	99c8 <free_space>
    9a20:	b120      	cbz	r0, 9a2c <get_usage+0x18>
		f += (buffer->rd_idx - 1);
    9a22:	68e3      	ldr	r3, [r4, #12]
    9a24:	9a01      	ldr	r2, [sp, #4]
    9a26:	4413      	add	r3, r2
    9a28:	3b01      	subs	r3, #1
    9a2a:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    9a2c:	6a20      	ldr	r0, [r4, #32]
    9a2e:	9b01      	ldr	r3, [sp, #4]
    9a30:	1ac0      	subs	r0, r0, r3
}
    9a32:	3801      	subs	r0, #1
    9a34:	b002      	add	sp, #8
    9a36:	bd10      	pop	{r4, pc}

00009a38 <max_utilization_update>:

static inline void max_utilization_update(struct mpsc_pbuf_buffer *buffer)
{
    9a38:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    9a3a:	6903      	ldr	r3, [r0, #16]
    9a3c:	f013 0f04 	tst.w	r3, #4
    9a40:	d100      	bne.n	9a44 <max_utilization_update+0xc>
		return;
	}

	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
}
    9a42:	bd38      	pop	{r3, r4, r5, pc}
    9a44:	4604      	mov	r4, r0
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    9a46:	6a45      	ldr	r5, [r0, #36]	; 0x24
    9a48:	f7ff ffe4 	bl	9a14 <get_usage>
    9a4c:	4285      	cmp	r5, r0
    9a4e:	d902      	bls.n	9a56 <max_utilization_update+0x1e>
    9a50:	6a60      	ldr	r0, [r4, #36]	; 0x24
    9a52:	6260      	str	r0, [r4, #36]	; 0x24
    9a54:	e7f5      	b.n	9a42 <max_utilization_update+0xa>
    9a56:	4620      	mov	r0, r4
    9a58:	f7ff ffdc 	bl	9a14 <get_usage>
    9a5c:	e7f9      	b.n	9a52 <max_utilization_update+0x1a>

00009a5e <rd_idx_inc>:
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    9a5e:	68c3      	ldr	r3, [r0, #12]
	uint32_t i = idx + val;
    9a60:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    9a62:	6903      	ldr	r3, [r0, #16]
    9a64:	f013 0f01 	tst.w	r3, #1
    9a68:	d104      	bne.n	9a74 <rd_idx_inc+0x16>
	return (i >= buffer->size) ? i - buffer->size : i;
    9a6a:	6a02      	ldr	r2, [r0, #32]
    9a6c:	4291      	cmp	r1, r2
    9a6e:	d304      	bcc.n	9a7a <rd_idx_inc+0x1c>
    9a70:	1a89      	subs	r1, r1, r2
    9a72:	e002      	b.n	9a7a <rd_idx_inc+0x1c>
		return i & (buffer->size - 1);
    9a74:	6a02      	ldr	r2, [r0, #32]
    9a76:	3a01      	subs	r2, #1
    9a78:	4011      	ands	r1, r2
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    9a7a:	60c1      	str	r1, [r0, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
    9a7c:	f023 0308 	bic.w	r3, r3, #8
    9a80:	6103      	str	r3, [r0, #16]
}
    9a82:	4770      	bx	lr

00009a84 <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    9a84:	b410      	push	{r4}
	union mpsc_pbuf_generic skip = {
    9a86:	2300      	movs	r3, #0
    9a88:	f36f 0300 	bfc	r3, #0, #1
    9a8c:	f043 0302 	orr.w	r3, r3, #2
    9a90:	f361 039f 	bfi	r3, r1, #2, #30
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    9a94:	69c2      	ldr	r2, [r0, #28]
    9a96:	6804      	ldr	r4, [r0, #0]
    9a98:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    9a9c:	6803      	ldr	r3, [r0, #0]
	uint32_t i = idx + val;
    9a9e:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    9aa0:	6902      	ldr	r2, [r0, #16]
    9aa2:	f012 0f01 	tst.w	r2, #1
    9aa6:	d104      	bne.n	9ab2 <add_skip_item+0x2e>
	return (i >= buffer->size) ? i - buffer->size : i;
    9aa8:	6a04      	ldr	r4, [r0, #32]
    9aaa:	42a3      	cmp	r3, r4
    9aac:	d304      	bcc.n	9ab8 <add_skip_item+0x34>
    9aae:	1b1b      	subs	r3, r3, r4
    9ab0:	e002      	b.n	9ab8 <add_skip_item+0x34>
		return i & (buffer->size - 1);
    9ab2:	6a04      	ldr	r4, [r0, #32]
    9ab4:	3c01      	subs	r4, #1
    9ab6:	4023      	ands	r3, r4
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    9ab8:	6003      	str	r3, [r0, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    9aba:	68c4      	ldr	r4, [r0, #12]
    9abc:	429c      	cmp	r4, r3
    9abe:	d00a      	beq.n	9ad6 <add_skip_item+0x52>
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    9ac0:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
    9ac2:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    9ac4:	6903      	ldr	r3, [r0, #16]
    9ac6:	f013 0f01 	tst.w	r3, #1
    9aca:	d108      	bne.n	9ade <add_skip_item+0x5a>
	return (i >= buffer->size) ? i - buffer->size : i;
    9acc:	6a03      	ldr	r3, [r0, #32]
    9ace:	4299      	cmp	r1, r3
    9ad0:	d308      	bcc.n	9ae4 <add_skip_item+0x60>
    9ad2:	1ac9      	subs	r1, r1, r3
    9ad4:	e006      	b.n	9ae4 <add_skip_item+0x60>
		buffer->flags |= MPSC_PBUF_FULL;
    9ad6:	f042 0208 	orr.w	r2, r2, #8
    9ada:	6102      	str	r2, [r0, #16]
    9adc:	e7f0      	b.n	9ac0 <add_skip_item+0x3c>
		return i & (buffer->size - 1);
    9ade:	6a03      	ldr	r3, [r0, #32]
    9ae0:	3b01      	subs	r3, #1
    9ae2:	4019      	ands	r1, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    9ae4:	6041      	str	r1, [r0, #4]
}
    9ae6:	bc10      	pop	{r4}
    9ae8:	4770      	bx	lr

00009aea <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
    9aea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9aee:	b083      	sub	sp, #12
    9af0:	4604      	mov	r4, r0
    9af2:	9101      	str	r1, [sp, #4]
    9af4:	4617      	mov	r7, r2
    9af6:	4698      	mov	r8, r3
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    9af8:	69c5      	ldr	r5, [r0, #28]
    9afa:	68c6      	ldr	r6, [r0, #12]
    9afc:	eb05 0b86 	add.w	fp, r5, r6, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    9b00:	f815 3026 	ldrb.w	r3, [r5, r6, lsl #2]
    9b04:	f003 0303 	and.w	r3, r3, #3
    9b08:	2b02      	cmp	r3, #2
    9b0a:	d024      	beq.n	9b56 <drop_item_locked+0x6c>
	return 0;
    9b0c:	2100      	movs	r1, #0
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
    9b0e:	2300      	movs	r3, #0
    9b10:	603b      	str	r3, [r7, #0]
	*tmp_wr_idx_shift = 0;
    9b12:	f8c8 3000 	str.w	r3, [r8]

	if (skip_wlen) {
    9b16:	bb19      	cbnz	r1, 9b60 <drop_item_locked+0x76>
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
    9b18:	6923      	ldr	r3, [r4, #16]
    9b1a:	f013 0f02 	tst.w	r3, #2
    9b1e:	d073      	beq.n	9c08 <drop_item_locked+0x11e>
		return false;
	}

	uint32_t rd_wlen = buffer->get_wlen(item);
    9b20:	69a3      	ldr	r3, [r4, #24]
    9b22:	4658      	mov	r0, fp
    9b24:	4798      	blx	r3
    9b26:	4682      	mov	sl, r0
	return item->hdr.valid;
    9b28:	f815 9026 	ldrb.w	r9, [r5, r6, lsl #2]

	/* If packet is busy need to be ommited. */
	if (!is_valid(item)) {
    9b2c:	f019 0901 	ands.w	r9, r9, #1
    9b30:	d06c      	beq.n	9c0c <drop_item_locked+0x122>
		return false;
	} else if (item->hdr.busy) {
    9b32:	f815 3026 	ldrb.w	r3, [r5, r6, lsl #2]
    9b36:	f013 0f02 	tst.w	r3, #2
    9b3a:	d039      	beq.n	9bb0 <drop_item_locked+0xc6>
		MPSC_PBUF_DBG(buffer, "no space: Found busy packet %p (len:%d)", item, rd_wlen);
		/* Add skip packet before claimed packet. */
		if (free_wlen) {
    9b3c:	9b01      	ldr	r3, [sp, #4]
    9b3e:	b9bb      	cbnz	r3, 9b70 <drop_item_locked+0x86>
			add_skip_item(buffer, free_wlen);
			MPSC_PBUF_DBG(buffer, "no space: Added skip packet (len:%d)", free_wlen);
		}
		/* Move all indexes forward, after claimed packet. */
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    9b40:	6862      	ldr	r2, [r4, #4]
	uint32_t i = idx + val;
    9b42:	4452      	add	r2, sl
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    9b44:	6923      	ldr	r3, [r4, #16]
    9b46:	f013 0001 	ands.w	r0, r3, #1
    9b4a:	d116      	bne.n	9b7a <drop_item_locked+0x90>
	return (i >= buffer->size) ? i - buffer->size : i;
    9b4c:	6a21      	ldr	r1, [r4, #32]
    9b4e:	428a      	cmp	r2, r1
    9b50:	d316      	bcc.n	9b80 <drop_item_locked+0x96>
    9b52:	1a52      	subs	r2, r2, r1
    9b54:	e014      	b.n	9b80 <drop_item_locked+0x96>
		return item->skip.len;
    9b56:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
    9b5a:	f3c1 019d 	ubfx	r1, r1, #2, #30
    9b5e:	e7d6      	b.n	9b0e <drop_item_locked+0x24>
		rd_idx_inc(buffer, skip_wlen);
    9b60:	4620      	mov	r0, r4
    9b62:	f7ff ff7c 	bl	9a5e <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    9b66:	68e3      	ldr	r3, [r4, #12]
    9b68:	60a3      	str	r3, [r4, #8]
		return true;
    9b6a:	f04f 0901 	mov.w	r9, #1
    9b6e:	e04d      	b.n	9c0c <drop_item_locked+0x122>
			add_skip_item(buffer, free_wlen);
    9b70:	4619      	mov	r1, r3
    9b72:	4620      	mov	r0, r4
    9b74:	f7ff ff86 	bl	9a84 <add_skip_item>
			MPSC_PBUF_DBG(buffer, "no space: Added skip packet (len:%d)", free_wlen);
    9b78:	e7e2      	b.n	9b40 <drop_item_locked+0x56>
		return i & (buffer->size - 1);
    9b7a:	6a21      	ldr	r1, [r4, #32]
    9b7c:	3901      	subs	r1, #1
    9b7e:	400a      	ands	r2, r1
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    9b80:	6062      	str	r2, [r4, #4]

		/* If allocation wrapped around the buffer and found busy packet
		 * that was already ommited, skip it again.
		 */
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    9b82:	68e1      	ldr	r1, [r4, #12]
    9b84:	68a2      	ldr	r2, [r4, #8]
    9b86:	4291      	cmp	r1, r2
    9b88:	d006      	beq.n	9b98 <drop_item_locked+0xae>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
		}

		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
    9b8a:	68a2      	ldr	r2, [r4, #8]
    9b8c:	6022      	str	r2, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
    9b8e:	60e2      	str	r2, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
    9b90:	f043 0308 	orr.w	r3, r3, #8
    9b94:	6123      	str	r3, [r4, #16]
    9b96:	e039      	b.n	9c0c <drop_item_locked+0x122>
	uint32_t i = idx + val;
    9b98:	4452      	add	r2, sl
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    9b9a:	b920      	cbnz	r0, 9ba6 <drop_item_locked+0xbc>
	return (i >= buffer->size) ? i - buffer->size : i;
    9b9c:	6a21      	ldr	r1, [r4, #32]
    9b9e:	428a      	cmp	r2, r1
    9ba0:	d304      	bcc.n	9bac <drop_item_locked+0xc2>
    9ba2:	1a52      	subs	r2, r2, r1
    9ba4:	e002      	b.n	9bac <drop_item_locked+0xc2>
		return i & (buffer->size - 1);
    9ba6:	6a21      	ldr	r1, [r4, #32]
    9ba8:	3901      	subs	r1, #1
    9baa:	400a      	ands	r2, r1
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
    9bac:	60a2      	str	r2, [r4, #8]
    9bae:	e7ec      	b.n	9b8a <drop_item_locked+0xa0>
	} else {
		/* Prepare packet dropping. */
		rd_idx_inc(buffer, rd_wlen);
    9bb0:	4601      	mov	r1, r0
    9bb2:	4620      	mov	r0, r4
    9bb4:	f7ff ff53 	bl	9a5e <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    9bb8:	68e3      	ldr	r3, [r4, #12]
    9bba:	60a3      	str	r3, [r4, #8]
		/* Temporary move tmp_wr idx forward to ensure that packet
		 * will not be dropped twice and content will not be
		 * overwritten.
		 */
		if (free_wlen) {
    9bbc:	9b01      	ldr	r3, [sp, #4]
    9bbe:	b123      	cbz	r3, 9bca <drop_item_locked+0xe0>
					.valid = 0,
					.busy = 0
				}
			};

			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
    9bc0:	69e3      	ldr	r3, [r4, #28]
    9bc2:	6822      	ldr	r2, [r4, #0]
    9bc4:	2100      	movs	r1, #0
    9bc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}

		*tmp_wr_idx_shift = rd_wlen + free_wlen;
    9bca:	9b01      	ldr	r3, [sp, #4]
    9bcc:	4453      	add	r3, sl
    9bce:	f8c8 3000 	str.w	r3, [r8]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    9bd2:	6822      	ldr	r2, [r4, #0]
	uint32_t i = idx + val;
    9bd4:	4413      	add	r3, r2
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    9bd6:	6922      	ldr	r2, [r4, #16]
    9bd8:	f012 0f01 	tst.w	r2, #1
    9bdc:	d104      	bne.n	9be8 <drop_item_locked+0xfe>
	return (i >= buffer->size) ? i - buffer->size : i;
    9bde:	6a21      	ldr	r1, [r4, #32]
    9be0:	428b      	cmp	r3, r1
    9be2:	d304      	bcc.n	9bee <drop_item_locked+0x104>
    9be4:	1a5b      	subs	r3, r3, r1
    9be6:	e002      	b.n	9bee <drop_item_locked+0x104>
		return i & (buffer->size - 1);
    9be8:	6a21      	ldr	r1, [r4, #32]
    9bea:	3901      	subs	r1, #1
    9bec:	400b      	ands	r3, r1
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    9bee:	6023      	str	r3, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
    9bf0:	f042 0208 	orr.w	r2, r2, #8
    9bf4:	6122      	str	r2, [r4, #16]
		item->hdr.valid = 0;
    9bf6:	f815 3026 	ldrb.w	r3, [r5, r6, lsl #2]
    9bfa:	f36f 0300 	bfc	r3, #0, #1
    9bfe:	f805 3026 	strb.w	r3, [r5, r6, lsl #2]
		*item_to_drop = item;
    9c02:	f8c7 b000 	str.w	fp, [r7]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
    9c06:	e001      	b.n	9c0c <drop_item_locked+0x122>
		return false;
    9c08:	f04f 0900 	mov.w	r9, #0
			       item, rd_wlen);
	}

	return true;
}
    9c0c:	4648      	mov	r0, r9
    9c0e:	b003      	add	sp, #12
    9c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00009c14 <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
    9c14:	b430      	push	{r4, r5}
	uint32_t i = idx + val;
    9c16:	1853      	adds	r3, r2, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    9c18:	6904      	ldr	r4, [r0, #16]
    9c1a:	f014 0f01 	tst.w	r4, #1
    9c1e:	d104      	bne.n	9c2a <post_drop_action+0x16>
	return (i >= buffer->size) ? i - buffer->size : i;
    9c20:	6a05      	ldr	r5, [r0, #32]
    9c22:	42ab      	cmp	r3, r5
    9c24:	d304      	bcc.n	9c30 <post_drop_action+0x1c>
    9c26:	1b5b      	subs	r3, r3, r5
    9c28:	e002      	b.n	9c30 <post_drop_action+0x1c>
		return i & (buffer->size - 1);
    9c2a:	6a05      	ldr	r5, [r0, #32]
    9c2c:	3d01      	subs	r5, #1
    9c2e:	402b      	ands	r3, r5
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
    9c30:	6805      	ldr	r5, [r0, #0]
    9c32:	429d      	cmp	r5, r3
    9c34:	d014      	beq.n	9c60 <post_drop_action+0x4c>
		buffer->flags &= ~MPSC_PBUF_FULL;
		return;
	}

	/* Operation interrupted, mark area as to be skipped. */
	union mpsc_pbuf_generic skip = {
    9c36:	2300      	movs	r3, #0
    9c38:	f36f 0300 	bfc	r3, #0, #1
    9c3c:	f043 0302 	orr.w	r3, r3, #2
    9c40:	f362 039f 	bfi	r3, r2, #2, #30
			.busy = 1,
			.len = tmp_wr_idx_shift
		}
	};

	buffer->buf[prev_tmp_wr_idx] = skip.raw;
    9c44:	69c4      	ldr	r4, [r0, #28]
    9c46:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
    9c4a:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
    9c4c:	4413      	add	r3, r2
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    9c4e:	6902      	ldr	r2, [r0, #16]
    9c50:	f012 0f01 	tst.w	r2, #1
    9c54:	d109      	bne.n	9c6a <post_drop_action+0x56>
	return (i >= buffer->size) ? i - buffer->size : i;
    9c56:	6a02      	ldr	r2, [r0, #32]
    9c58:	4293      	cmp	r3, r2
    9c5a:	d309      	bcc.n	9c70 <post_drop_action+0x5c>
    9c5c:	1a9b      	subs	r3, r3, r2
    9c5e:	e007      	b.n	9c70 <post_drop_action+0x5c>
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
    9c60:	6001      	str	r1, [r0, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
    9c62:	f024 0408 	bic.w	r4, r4, #8
    9c66:	6104      	str	r4, [r0, #16]
		return;
    9c68:	e003      	b.n	9c72 <post_drop_action+0x5e>
		return i & (buffer->size - 1);
    9c6a:	6a02      	ldr	r2, [r0, #32]
    9c6c:	3a01      	subs	r2, #1
    9c6e:	4013      	ands	r3, r2
	buffer->wr_idx = idx_inc(buffer,
    9c70:	6043      	str	r3, [r0, #4]
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
    9c72:	bc30      	pop	{r4, r5}
    9c74:	4770      	bx	lr

00009c76 <mpsc_pbuf_init>:
{
    9c76:	b538      	push	{r3, r4, r5, lr}
    9c78:	4604      	mov	r4, r0
    9c7a:	460d      	mov	r5, r1
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    9c7c:	221c      	movs	r2, #28
    9c7e:	2100      	movs	r1, #0
    9c80:	f000 fc28 	bl	a4d4 <memset>
	buffer->get_wlen = cfg->get_wlen;
    9c84:	68eb      	ldr	r3, [r5, #12]
    9c86:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    9c88:	68ab      	ldr	r3, [r5, #8]
    9c8a:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    9c8c:	682b      	ldr	r3, [r5, #0]
    9c8e:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
    9c90:	686b      	ldr	r3, [r5, #4]
    9c92:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
    9c94:	2200      	movs	r2, #0
    9c96:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    9c98:	692a      	ldr	r2, [r5, #16]
    9c9a:	6122      	str	r2, [r4, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
    9c9c:	b12b      	cbz	r3, 9caa <mpsc_pbuf_init+0x34>
    9c9e:	1e59      	subs	r1, r3, #1
    9ca0:	420b      	tst	r3, r1
    9ca2:	d102      	bne.n	9caa <mpsc_pbuf_init+0x34>
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    9ca4:	f042 0201 	orr.w	r2, r2, #1
    9ca8:	6122      	str	r2, [r4, #16]
	err = k_sem_init(&buffer->sem, 0, 1);
    9caa:	f104 0028 	add.w	r0, r4, #40	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
    9cae:	2201      	movs	r2, #1
    9cb0:	2100      	movs	r1, #0
    9cb2:	f001 ffe1 	bl	bc78 <z_impl_k_sem_init>
}
    9cb6:	bd38      	pop	{r3, r4, r5, pc}

00009cb8 <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    9cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9cbc:	b087      	sub	sp, #28
    9cbe:	469a      	mov	sl, r3
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
    9cc0:	2300      	movs	r3, #0
    9cc2:	9305      	str	r3, [sp, #20]
	bool cont = true;
	uint32_t free_wlen;
	uint32_t tmp_wr_idx_shift = 0;
    9cc4:	9303      	str	r3, [sp, #12]
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
    9cc6:	6a03      	ldr	r3, [r0, #32]
    9cc8:	428b      	cmp	r3, r1
    9cca:	f0c0 8089 	bcc.w	9de0 <mpsc_pbuf_alloc+0x128>
    9cce:	4604      	mov	r4, r0
    9cd0:	4688      	mov	r8, r1
    9cd2:	4691      	mov	r9, r2
	uint32_t tmp_wr_idx_val = 0;
    9cd4:	2300      	movs	r3, #0
    9cd6:	9301      	str	r3, [sp, #4]
	bool cont = true;
    9cd8:	2701      	movs	r7, #1
	union mpsc_pbuf_generic *item = NULL;
    9cda:	469b      	mov	fp, r3
    9cdc:	e040      	b.n	9d60 <mpsc_pbuf_alloc+0xa8>
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
    9cde:	9901      	ldr	r1, [sp, #4]
    9ce0:	4620      	mov	r0, r4
    9ce2:	f7ff ff97 	bl	9c14 <post_drop_action>
			tmp_wr_idx_shift = 0;
    9ce6:	2300      	movs	r3, #0
    9ce8:	9303      	str	r3, [sp, #12]
    9cea:	e045      	b.n	9d78 <mpsc_pbuf_alloc+0xc0>

		wrap = free_space(buffer, &free_wlen);

		if (free_wlen >= wlen) {
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    9cec:	69e3      	ldr	r3, [r4, #28]
    9cee:	6822      	ldr	r2, [r4, #0]
			item =
    9cf0:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
			item->hdr.valid = 0;
    9cf4:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    9cf8:	f36f 0100 	bfc	r1, #0, #1
    9cfc:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item->hdr.busy = 0;
    9d00:	b2c9      	uxtb	r1, r1
    9d02:	f36f 0141 	bfc	r1, #1, #1
    9d06:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    9d0a:	6823      	ldr	r3, [r4, #0]
	uint32_t i = idx + val;
    9d0c:	4443      	add	r3, r8
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    9d0e:	6922      	ldr	r2, [r4, #16]
    9d10:	f012 0f01 	tst.w	r2, #1
    9d14:	d104      	bne.n	9d20 <mpsc_pbuf_alloc+0x68>
	return (i >= buffer->size) ? i - buffer->size : i;
    9d16:	6a21      	ldr	r1, [r4, #32]
    9d18:	428b      	cmp	r3, r1
    9d1a:	d304      	bcc.n	9d26 <mpsc_pbuf_alloc+0x6e>
    9d1c:	1a5b      	subs	r3, r3, r1
    9d1e:	e002      	b.n	9d26 <mpsc_pbuf_alloc+0x6e>
		return i & (buffer->size - 1);
    9d20:	6a21      	ldr	r1, [r4, #32]
    9d22:	3901      	subs	r1, #1
    9d24:	400b      	ands	r3, r1
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    9d26:	6023      	str	r3, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    9d28:	68e1      	ldr	r1, [r4, #12]
    9d2a:	4299      	cmp	r1, r3
    9d2c:	d001      	beq.n	9d32 <mpsc_pbuf_alloc+0x7a>
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
    9d2e:	2700      	movs	r7, #0
    9d30:	e008      	b.n	9d44 <mpsc_pbuf_alloc+0x8c>
		buffer->flags |= MPSC_PBUF_FULL;
    9d32:	f042 0208 	orr.w	r2, r2, #8
    9d36:	6122      	str	r2, [r4, #16]
			cont = false;
    9d38:	2700      	movs	r7, #0
    9d3a:	e003      	b.n	9d44 <mpsc_pbuf_alloc+0x8c>
		} else if (wrap) {
			add_skip_item(buffer, free_wlen);
    9d3c:	4620      	mov	r0, r4
    9d3e:	f7ff fea1 	bl	9a84 <add_skip_item>
			cont = true;
    9d42:	4637      	mov	r7, r6
    9d44:	f385 8811 	msr	BASEPRI, r5
    9d48:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
    9d4c:	9905      	ldr	r1, [sp, #20]
    9d4e:	b129      	cbz	r1, 9d5c <mpsc_pbuf_alloc+0xa4>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    9d50:	6963      	ldr	r3, [r4, #20]
    9d52:	b10b      	cbz	r3, 9d58 <mpsc_pbuf_alloc+0xa0>
				buffer->notify_drop(buffer, dropped_item);
    9d54:	4620      	mov	r0, r4
    9d56:	4798      	blx	r3
			}
			dropped_item = NULL;
    9d58:	2300      	movs	r3, #0
    9d5a:	9305      	str	r3, [sp, #20]
		}
	} while (cont);
    9d5c:	2f00      	cmp	r7, #0
    9d5e:	d041      	beq.n	9de4 <mpsc_pbuf_alloc+0x12c>
	__asm__ volatile(
    9d60:	f04f 0320 	mov.w	r3, #32
    9d64:	f3ef 8511 	mrs	r5, BASEPRI
    9d68:	f383 8812 	msr	BASEPRI_MAX, r3
    9d6c:	f3bf 8f6f 	isb	sy
    9d70:	9500      	str	r5, [sp, #0]
		if (tmp_wr_idx_shift) {
    9d72:	9a03      	ldr	r2, [sp, #12]
    9d74:	2a00      	cmp	r2, #0
    9d76:	d1b2      	bne.n	9cde <mpsc_pbuf_alloc+0x26>
		wrap = free_space(buffer, &free_wlen);
    9d78:	a904      	add	r1, sp, #16
    9d7a:	4620      	mov	r0, r4
    9d7c:	f7ff fe24 	bl	99c8 <free_space>
    9d80:	4606      	mov	r6, r0
		if (free_wlen >= wlen) {
    9d82:	9904      	ldr	r1, [sp, #16]
    9d84:	4541      	cmp	r1, r8
    9d86:	d2b1      	bcs.n	9cec <mpsc_pbuf_alloc+0x34>
		} else if (wrap) {
    9d88:	2800      	cmp	r0, #0
    9d8a:	d1d7      	bne.n	9d3c <mpsc_pbuf_alloc+0x84>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    9d8c:	ea5a 0309 	orrs.w	r3, sl, r9
    9d90:	d10b      	bne.n	9daa <mpsc_pbuf_alloc+0xf2>
		} else if (cont) {
    9d92:	2f00      	cmp	r7, #0
    9d94:	d0d6      	beq.n	9d44 <mpsc_pbuf_alloc+0x8c>
			tmp_wr_idx_val = buffer->tmp_wr_idx;
    9d96:	6823      	ldr	r3, [r4, #0]
    9d98:	9301      	str	r3, [sp, #4]
			cont = drop_item_locked(buffer, free_wlen,
    9d9a:	ab03      	add	r3, sp, #12
    9d9c:	aa05      	add	r2, sp, #20
    9d9e:	9904      	ldr	r1, [sp, #16]
    9da0:	4620      	mov	r0, r4
    9da2:	f7ff fea2 	bl	9aea <drop_item_locked>
    9da6:	4607      	mov	r7, r0
    9da8:	e7cc      	b.n	9d44 <mpsc_pbuf_alloc+0x8c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    9daa:	f001 ff09 	bl	bbc0 <k_is_in_isr>
    9dae:	2800      	cmp	r0, #0
    9db0:	d1ef      	bne.n	9d92 <mpsc_pbuf_alloc+0xda>
	__asm__ volatile(
    9db2:	9b00      	ldr	r3, [sp, #0]
    9db4:	f383 8811 	msr	BASEPRI, r3
    9db8:	f3bf 8f6f 	isb	sy
			err = k_sem_take(&buffer->sem, timeout);
    9dbc:	f104 0028 	add.w	r0, r4, #40	; 0x28
	return z_impl_k_sem_take(sem, timeout);
    9dc0:	464a      	mov	r2, r9
    9dc2:	4653      	mov	r3, sl
    9dc4:	f7fe f94c 	bl	8060 <z_impl_k_sem_take>
	__asm__ volatile(
    9dc8:	f04f 0320 	mov.w	r3, #32
    9dcc:	f3ef 8511 	mrs	r5, BASEPRI
    9dd0:	f383 8812 	msr	BASEPRI_MAX, r3
    9dd4:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
    9dd8:	fab0 f780 	clz	r7, r0
    9ddc:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    9dde:	e7b1      	b.n	9d44 <mpsc_pbuf_alloc+0x8c>
		return NULL;
    9de0:	f04f 0b00 	mov.w	fp, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    9de4:	4658      	mov	r0, fp
    9de6:	b007      	add	sp, #28
    9de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00009dec <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    9dec:	b570      	push	{r4, r5, r6, lr}
    9dee:	4604      	mov	r4, r0
    9df0:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    9df2:	6983      	ldr	r3, [r0, #24]
    9df4:	4608      	mov	r0, r1
    9df6:	4798      	blx	r3
    9df8:	f04f 0320 	mov.w	r3, #32
    9dfc:	f3ef 8611 	mrs	r6, BASEPRI
    9e00:	f383 8812 	msr	BASEPRI_MAX, r3
    9e04:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    9e08:	782b      	ldrb	r3, [r5, #0]
    9e0a:	f043 0301 	orr.w	r3, r3, #1
    9e0e:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    9e10:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
    9e12:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    9e14:	6923      	ldr	r3, [r4, #16]
    9e16:	f013 0f01 	tst.w	r3, #1
    9e1a:	d104      	bne.n	9e26 <mpsc_pbuf_commit+0x3a>
	return (i >= buffer->size) ? i - buffer->size : i;
    9e1c:	6a23      	ldr	r3, [r4, #32]
    9e1e:	4298      	cmp	r0, r3
    9e20:	d304      	bcc.n	9e2c <mpsc_pbuf_commit+0x40>
    9e22:	1ac0      	subs	r0, r0, r3
    9e24:	e002      	b.n	9e2c <mpsc_pbuf_commit+0x40>
		return i & (buffer->size - 1);
    9e26:	6a23      	ldr	r3, [r4, #32]
    9e28:	3b01      	subs	r3, #1
    9e2a:	4018      	ands	r0, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    9e2c:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    9e2e:	4620      	mov	r0, r4
    9e30:	f7ff fe02 	bl	9a38 <max_utilization_update>
	__asm__ volatile(
    9e34:	f386 8811 	msr	BASEPRI, r6
    9e38:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
    9e3c:	bd70      	pop	{r4, r5, r6, pc}

00009e3e <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    9e3e:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e40:	b083      	sub	sp, #12
    9e42:	4604      	mov	r4, r0
    9e44:	e02e      	b.n	9ea4 <mpsc_pbuf_claim+0x66>
		return item->skip.len;
    9e46:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    9e4a:	0880      	lsrs	r0, r0, #2
    9e4c:	d14e      	bne.n	9eec <mpsc_pbuf_claim+0xae>
    9e4e:	e044      	b.n	9eda <mpsc_pbuf_claim+0x9c>
		return i & (buffer->size - 1);
    9e50:	6a22      	ldr	r2, [r4, #32]
    9e52:	3a01      	subs	r2, #1
    9e54:	4013      	ands	r3, r2
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);

				buffer->tmp_rd_idx =
    9e56:	60a3      	str	r3, [r4, #8]
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
				rd_idx_inc(buffer, inc);
    9e58:	4620      	mov	r0, r4
    9e5a:	f7ff fe00 	bl	9a5e <rd_idx_inc>
				cont = true;
    9e5e:	2301      	movs	r3, #1
			if (skip || !is_valid(item)) {
    9e60:	e01b      	b.n	9e9a <mpsc_pbuf_claim+0x5c>
			} else {
				item->hdr.busy = 1;
    9e62:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    9e66:	f041 0102 	orr.w	r1, r1, #2
    9e6a:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
    9e6e:	68a7      	ldr	r7, [r4, #8]
						buffer->get_wlen(item));
    9e70:	69a3      	ldr	r3, [r4, #24]
    9e72:	4630      	mov	r0, r6
    9e74:	4798      	blx	r3
	uint32_t i = idx + val;
    9e76:	4438      	add	r0, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    9e78:	6923      	ldr	r3, [r4, #16]
    9e7a:	f013 0f01 	tst.w	r3, #1
    9e7e:	d104      	bne.n	9e8a <mpsc_pbuf_claim+0x4c>
	return (i >= buffer->size) ? i - buffer->size : i;
    9e80:	6a23      	ldr	r3, [r4, #32]
    9e82:	4298      	cmp	r0, r3
    9e84:	d304      	bcc.n	9e90 <mpsc_pbuf_claim+0x52>
    9e86:	1ac0      	subs	r0, r0, r3
    9e88:	e002      	b.n	9e90 <mpsc_pbuf_claim+0x52>
		return i & (buffer->size - 1);
    9e8a:	6a23      	ldr	r3, [r4, #32]
    9e8c:	3b01      	subs	r3, #1
    9e8e:	4018      	ands	r0, r3
				buffer->tmp_rd_idx =
    9e90:	60a0      	str	r0, [r4, #8]
		cont = false;
    9e92:	2300      	movs	r3, #0
    9e94:	e001      	b.n	9e9a <mpsc_pbuf_claim+0x5c>
    9e96:	2300      	movs	r3, #0
			item = NULL;
    9e98:	461e      	mov	r6, r3
    9e9a:	f385 8811 	msr	BASEPRI, r5
    9e9e:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    9ea2:	b393      	cbz	r3, 9f0a <mpsc_pbuf_claim+0xcc>
	__asm__ volatile(
    9ea4:	f04f 0320 	mov.w	r3, #32
    9ea8:	f3ef 8511 	mrs	r5, BASEPRI
    9eac:	f383 8812 	msr	BASEPRI_MAX, r3
    9eb0:	f3bf 8f6f 	isb	sy
		(void)available(buffer, &a);
    9eb4:	a901      	add	r1, sp, #4
    9eb6:	4620      	mov	r0, r4
    9eb8:	f7ff fd9a 	bl	99f0 <available>
			&buffer->buf[buffer->tmp_rd_idx];
    9ebc:	69e3      	ldr	r3, [r4, #28]
    9ebe:	68a2      	ldr	r2, [r4, #8]
		item = (union mpsc_pbuf_generic *)
    9ec0:	eb03 0682 	add.w	r6, r3, r2, lsl #2
		if (!a || is_invalid(item)) {
    9ec4:	9901      	ldr	r1, [sp, #4]
    9ec6:	2900      	cmp	r1, #0
    9ec8:	d0e5      	beq.n	9e96 <mpsc_pbuf_claim+0x58>
	return !item->hdr.valid && !item->hdr.busy;
    9eca:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
		if (!a || is_invalid(item)) {
    9ece:	f011 0103 	ands.w	r1, r1, #3
    9ed2:	d017      	beq.n	9f04 <mpsc_pbuf_claim+0xc6>
	if (item->hdr.busy && !item->hdr.valid) {
    9ed4:	2902      	cmp	r1, #2
    9ed6:	d0b6      	beq.n	9e46 <mpsc_pbuf_claim+0x8>
	return 0;
    9ed8:	2000      	movs	r0, #0
	return item->hdr.valid;
    9eda:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			if (skip || !is_valid(item)) {
    9ede:	f011 0f01 	tst.w	r1, #1
    9ee2:	d1be      	bne.n	9e62 <mpsc_pbuf_claim+0x24>
					skip ? skip : buffer->get_wlen(item);
    9ee4:	b910      	cbnz	r0, 9eec <mpsc_pbuf_claim+0xae>
    9ee6:	69a3      	ldr	r3, [r4, #24]
    9ee8:	4630      	mov	r0, r6
    9eea:	4798      	blx	r3
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    9eec:	68a3      	ldr	r3, [r4, #8]
    9eee:	4601      	mov	r1, r0
	uint32_t i = idx + val;
    9ef0:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    9ef2:	6922      	ldr	r2, [r4, #16]
    9ef4:	f012 0f01 	tst.w	r2, #1
    9ef8:	d1aa      	bne.n	9e50 <mpsc_pbuf_claim+0x12>
	return (i >= buffer->size) ? i - buffer->size : i;
    9efa:	6a22      	ldr	r2, [r4, #32]
    9efc:	4293      	cmp	r3, r2
    9efe:	d3aa      	bcc.n	9e56 <mpsc_pbuf_claim+0x18>
    9f00:	1a9b      	subs	r3, r3, r2
    9f02:	e7a8      	b.n	9e56 <mpsc_pbuf_claim+0x18>
		cont = false;
    9f04:	2300      	movs	r3, #0
			item = NULL;
    9f06:	461e      	mov	r6, r3
    9f08:	e7c7      	b.n	9e9a <mpsc_pbuf_claim+0x5c>

	return item;
}
    9f0a:	4630      	mov	r0, r6
    9f0c:	b003      	add	sp, #12
    9f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009f10 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    9f10:	b570      	push	{r4, r5, r6, lr}
    9f12:	4604      	mov	r4, r0
    9f14:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    9f16:	6983      	ldr	r3, [r0, #24]
    9f18:	4608      	mov	r0, r1
    9f1a:	4798      	blx	r3
    9f1c:	4601      	mov	r1, r0
    9f1e:	f04f 0320 	mov.w	r3, #32
    9f22:	f3ef 8611 	mrs	r6, BASEPRI
    9f26:	f383 8812 	msr	BASEPRI_MAX, r3
    9f2a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    9f2e:	782b      	ldrb	r3, [r5, #0]
    9f30:	f36f 0300 	bfc	r3, #0, #1
    9f34:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    9f36:	6923      	ldr	r3, [r4, #16]
    9f38:	f013 0f02 	tst.w	r3, #2
    9f3c:	d00a      	beq.n	9f54 <mpsc_pbuf_free+0x44>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    9f3e:	69e3      	ldr	r3, [r4, #28]
    9f40:	68e2      	ldr	r2, [r4, #12]
    9f42:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    9f46:	42ab      	cmp	r3, r5
    9f48:	d004      	beq.n	9f54 <mpsc_pbuf_free+0x44>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
		}
		rd_idx_inc(buffer, wlen);
	} else {
		MPSC_PBUF_DBG(buffer, "Allocation occurred during claim");
		witem->skip.len = wlen;
    9f4a:	682b      	ldr	r3, [r5, #0]
    9f4c:	f360 039f 	bfi	r3, r0, #2, #30
    9f50:	602b      	str	r3, [r5, #0]
    9f52:	e00a      	b.n	9f6a <mpsc_pbuf_free+0x5a>
		witem->hdr.busy = 0;
    9f54:	782b      	ldrb	r3, [r5, #0]
    9f56:	f36f 0341 	bfc	r3, #1, #1
    9f5a:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    9f5c:	68e2      	ldr	r2, [r4, #12]
    9f5e:	68a3      	ldr	r3, [r4, #8]
    9f60:	429a      	cmp	r2, r3
    9f62:	d00b      	beq.n	9f7c <mpsc_pbuf_free+0x6c>
		rd_idx_inc(buffer, wlen);
    9f64:	4620      	mov	r0, r4
    9f66:	f7ff fd7a 	bl	9a5e <rd_idx_inc>
	__asm__ volatile(
    9f6a:	f386 8811 	msr	BASEPRI, r6
    9f6e:	f3bf 8f6f 	isb	sy
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
    9f72:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
    9f76:	f7fe f84f 	bl	8018 <z_impl_k_sem_give>
}
    9f7a:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t i = idx + val;
    9f7c:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    9f7e:	6922      	ldr	r2, [r4, #16]
    9f80:	f012 0f01 	tst.w	r2, #1
    9f84:	d104      	bne.n	9f90 <mpsc_pbuf_free+0x80>
	return (i >= buffer->size) ? i - buffer->size : i;
    9f86:	6a22      	ldr	r2, [r4, #32]
    9f88:	4293      	cmp	r3, r2
    9f8a:	d304      	bcc.n	9f96 <mpsc_pbuf_free+0x86>
    9f8c:	1a9b      	subs	r3, r3, r2
    9f8e:	e002      	b.n	9f96 <mpsc_pbuf_free+0x86>
		return i & (buffer->size - 1);
    9f90:	6a22      	ldr	r2, [r4, #32]
    9f92:	3a01      	subs	r2, #1
    9f94:	4013      	ands	r3, r2
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
    9f96:	60a3      	str	r3, [r4, #8]
    9f98:	e7e4      	b.n	9f64 <mpsc_pbuf_free+0x54>

00009f9a <mpsc_pbuf_is_pending>:

bool mpsc_pbuf_is_pending(struct mpsc_pbuf_buffer *buffer)
{
    9f9a:	b500      	push	{lr}
    9f9c:	b083      	sub	sp, #12
	uint32_t a;

	(void)available(buffer, &a);
    9f9e:	a901      	add	r1, sp, #4
    9fa0:	f7ff fd26 	bl	99f0 <available>

	return a ? true : false;
}
    9fa4:	9801      	ldr	r0, [sp, #4]
    9fa6:	3800      	subs	r0, #0
    9fa8:	bf18      	it	ne
    9faa:	2001      	movne	r0, #1
    9fac:	b003      	add	sp, #12
    9fae:	f85d fb04 	ldr.w	pc, [sp], #4

00009fb2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    9fb2:	4770      	bx	lr

00009fb4 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
    9fb4:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    9fb6:	f013 0f04 	tst.w	r3, #4
    9fba:	d001      	beq.n	9fc0 <log_msg_generic_get_wlen+0xc>
	return 0;
    9fbc:	2000      	movs	r0, #0
}
    9fbe:	4770      	bx	lr
		return log_msg_get_total_wlen(msg->hdr.desc);
    9fc0:	6803      	ldr	r3, [r0, #0]
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    9fc2:	f3c3 204a 	ubfx	r0, r3, #9, #11
    9fc6:	eb00 5013 	add.w	r0, r0, r3, lsr #20
    9fca:	3017      	adds	r0, #23
    9fcc:	f020 0007 	bic.w	r0, r0, #7
    9fd0:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
    9fd2:	4770      	bx	lr

00009fd4 <dummy_timestamp>:
}
    9fd4:	2000      	movs	r0, #0
    9fd6:	4770      	bx	lr

00009fd8 <msg_filter_check>:
}
    9fd8:	2001      	movs	r0, #1
    9fda:	4770      	bx	lr

00009fdc <default_get_timestamp>:
{
    9fdc:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    9fde:	f001 fada 	bl	b596 <sys_clock_cycle_get_32>
}
    9fe2:	bd08      	pop	{r3, pc}

00009fe4 <k_msleep>:
{
    9fe4:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    9fe6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    9fea:	17c1      	asrs	r1, r0, #31
    9fec:	03c9      	lsls	r1, r1, #15
    9fee:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    9ff2:	03c0      	lsls	r0, r0, #15
    9ff4:	f240 33e7 	movw	r3, #999	; 0x3e7
    9ff8:	18c0      	adds	r0, r0, r3
    9ffa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9ffe:	f04f 0300 	mov.w	r3, #0
    a002:	f141 0100 	adc.w	r1, r1, #0
    a006:	f7f6 fc99 	bl	93c <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    a00a:	f7fe fcd9 	bl	89c0 <z_impl_k_sleep>
}
    a00e:	bd08      	pop	{r3, pc}

0000a010 <msg_alloc>:
{
    a010:	b508      	push	{r3, lr}
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    a012:	2200      	movs	r2, #0
    a014:	2300      	movs	r3, #0
    a016:	f7ff fe4f 	bl	9cb8 <mpsc_pbuf_alloc>
}
    a01a:	bd08      	pop	{r3, pc}

0000a01c <msg_free>:
{
    a01c:	b508      	push	{r3, lr}
	mpsc_pbuf_free(buffer, &msg->buf);
    a01e:	f7ff ff77 	bl	9f10 <mpsc_pbuf_free>
}
    a022:	bd08      	pop	{r3, pc}

0000a024 <msg_pending>:
{
    a024:	b508      	push	{r3, lr}
	return mpsc_pbuf_is_pending(buffer);
    a026:	f7ff ffb8 	bl	9f9a <mpsc_pbuf_is_pending>
}
    a02a:	bd08      	pop	{r3, pc}

0000a02c <z_log_vprintk>:
{
    a02c:	b500      	push	{lr}
    a02e:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    a030:	9103      	str	r1, [sp, #12]
    a032:	9002      	str	r0, [sp, #8]
    a034:	2000      	movs	r0, #0
    a036:	9001      	str	r0, [sp, #4]
    a038:	9000      	str	r0, [sp, #0]
    a03a:	4603      	mov	r3, r0
    a03c:	4602      	mov	r2, r0
    a03e:	4601      	mov	r1, r0
    a040:	f000 f845 	bl	a0ce <z_impl_z_log_msg_runtime_vcreate>
}
    a044:	b005      	add	sp, #20
    a046:	f85d fb04 	ldr.w	pc, [sp], #4

0000a04a <z_log_notify_drop>:
 */
bool z_log_msg_pending(void);

static inline void z_log_notify_drop(const struct mpsc_pbuf_buffer *buffer,
				     const union mpsc_pbuf_generic *item)
{
    a04a:	b508      	push	{r3, lr}
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
    a04c:	2001      	movs	r0, #1
    a04e:	f7f8 fb13 	bl	2678 <z_log_dropped>
}
    a052:	bd08      	pop	{r3, pc}

0000a054 <z_log_msg_claim>:
{
    a054:	b508      	push	{r3, lr}
	return z_log_msg_local_claim();
    a056:	f7f8 fb95 	bl	2784 <z_log_msg_local_claim>
}
    a05a:	bd08      	pop	{r3, pc}

0000a05c <msg_commit>:
{
    a05c:	b508      	push	{r3, lr}
	mpsc_pbuf_commit(buffer, &m->buf);
    a05e:	f7ff fec5 	bl	9dec <mpsc_pbuf_commit>
	z_log_msg_post_finalize();
    a062:	f7f8 fc2d 	bl	28c0 <z_log_msg_post_finalize>
}
    a066:	bd08      	pop	{r3, pc}

0000a068 <z_log_get_tag>:
}
    a068:	2000      	movs	r0, #0
    a06a:	4770      	bx	lr

0000a06c <z_cbprintf_cpy>:
{
    a06c:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
    a06e:	6853      	ldr	r3, [r2, #4]
    a070:	6896      	ldr	r6, [r2, #8]
    a072:	1b9b      	subs	r3, r3, r6
    a074:	428b      	cmp	r3, r1
    a076:	d30c      	bcc.n	a092 <z_cbprintf_cpy+0x26>
    a078:	460c      	mov	r4, r1
    a07a:	4615      	mov	r5, r2
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
    a07c:	6813      	ldr	r3, [r2, #0]
    a07e:	460a      	mov	r2, r1
    a080:	4601      	mov	r1, r0
    a082:	1998      	adds	r0, r3, r6
    a084:	f000 f9f7 	bl	a476 <memcpy>
	desc->off += len;
    a088:	68ab      	ldr	r3, [r5, #8]
    a08a:	4423      	add	r3, r4
    a08c:	60ab      	str	r3, [r5, #8]
	return len;
    a08e:	4620      	mov	r0, r4
}
    a090:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
    a092:	f06f 001b 	mvn.w	r0, #27
    a096:	e7fb      	b.n	a090 <z_cbprintf_cpy+0x24>

0000a098 <z_log_msg_finalize>:
{
    a098:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
    a09a:	b188      	cbz	r0, a0c0 <z_log_msg_finalize+0x28>
    a09c:	460e      	mov	r6, r1
    a09e:	4614      	mov	r4, r2
    a0a0:	4619      	mov	r1, r3
    a0a2:	4605      	mov	r5, r0
	if (data) {
    a0a4:	b133      	cbz	r3, a0b4 <z_log_msg_finalize+0x1c>
		uint8_t *d = msg->data + desc.package_len;
    a0a6:	3010      	adds	r0, #16
    a0a8:	f3c2 234a 	ubfx	r3, r2, #9, #11
		memcpy(d, data, desc.data_len);
    a0ac:	0d12      	lsrs	r2, r2, #20
    a0ae:	4418      	add	r0, r3
    a0b0:	f000 f9e1 	bl	a476 <memcpy>
	msg->hdr.desc = desc;
    a0b4:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
    a0b6:	606e      	str	r6, [r5, #4]
	z_log_msg_commit(msg);
    a0b8:	4628      	mov	r0, r5
    a0ba:	f7f8 fc45 	bl	2948 <z_log_msg_commit>
}
    a0be:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
    a0c0:	f7f8 fada 	bl	2678 <z_log_dropped>
		return;
    a0c4:	e7fb      	b.n	a0be <z_log_msg_finalize+0x26>

0000a0c6 <z_log_msg_static_create>:
{
    a0c6:	b508      	push	{r3, lr}
	z_impl_z_log_msg_static_create(source, desc, package, data);
    a0c8:	f7f8 fccc 	bl	2a64 <z_impl_z_log_msg_static_create>
}
    a0cc:	bd08      	pop	{r3, pc}

0000a0ce <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    a0ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a0d2:	b085      	sub	sp, #20
    a0d4:	4681      	mov	r9, r0
    a0d6:	460d      	mov	r5, r1
    a0d8:	4690      	mov	r8, r2
    a0da:	461e      	mov	r6, r3
    a0dc:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    a0e0:	9f10      	ldr	r7, [sp, #64]	; 0x40
	int plen;

	if (fmt) {
    a0e2:	b3a7      	cbz	r7, a14e <z_impl_z_log_msg_runtime_vcreate+0x80>
		va_list ap2;

		va_copy(ap2, ap);
    a0e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a0e6:	9303      	str	r3, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    a0e8:	9300      	str	r3, [sp, #0]
    a0ea:	463b      	mov	r3, r7
    a0ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a0ee:	2110      	movs	r1, #16
    a0f0:	2000      	movs	r0, #0
    a0f2:	f7f6 fe61 	bl	db8 <cbvprintf_package>
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    a0f6:	4682      	mov	sl, r0
    a0f8:	eb00 030b 	add.w	r3, r0, fp
    a0fc:	3317      	adds	r3, #23
    a0fe:	f023 0307 	bic.w	r3, r3, #7
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    a102:	2400      	movs	r4, #0
    a104:	f36f 0400 	bfc	r4, #0, #1
    a108:	f36f 0441 	bfc	r4, #1, #1
    a10c:	f36f 0482 	bfc	r4, #2, #1
    a110:	f369 04c5 	bfi	r4, r9, #3, #3
    a114:	f368 1488 	bfi	r4, r8, #6, #3
    a118:	f360 2453 	bfi	r4, r0, #9, #11
    a11c:	f36b 541f 	bfi	r4, fp, #20, #12
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
    a120:	0898      	lsrs	r0, r3, #2
    a122:	f7f8 fb27 	bl	2774 <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    a126:	4680      	mov	r8, r0
    a128:	b140      	cbz	r0, a13c <z_impl_z_log_msg_runtime_vcreate+0x6e>
    a12a:	3010      	adds	r0, #16
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    a12c:	b137      	cbz	r7, a13c <z_impl_z_log_msg_runtime_vcreate+0x6e>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    a12e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a130:	9300      	str	r3, [sp, #0]
    a132:	463b      	mov	r3, r7
    a134:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a136:	4651      	mov	r1, sl
    a138:	f7f6 fe3e 	bl	db8 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    a13c:	4633      	mov	r3, r6
    a13e:	4622      	mov	r2, r4
    a140:	4629      	mov	r1, r5
    a142:	4640      	mov	r0, r8
    a144:	f7ff ffa8 	bl	a098 <z_log_msg_finalize>
	}
}
    a148:	b005      	add	sp, #20
    a14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
    a14e:	2000      	movs	r0, #0
    a150:	e7d1      	b.n	a0f6 <z_impl_z_log_msg_runtime_vcreate+0x28>

0000a152 <buffer_write>:
{
    a152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a154:	4607      	mov	r7, r0
    a156:	460d      	mov	r5, r1
    a158:	4614      	mov	r4, r2
    a15a:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    a15c:	4632      	mov	r2, r6
    a15e:	4621      	mov	r1, r4
    a160:	4628      	mov	r0, r5
    a162:	47b8      	blx	r7
		buf += processed;
    a164:	4405      	add	r5, r0
	} while (len != 0);
    a166:	1a24      	subs	r4, r4, r0
    a168:	d1f8      	bne.n	a15c <buffer_write+0xa>
}
    a16a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a16c <cbvprintf>:
{
    a16c:	b510      	push	{r4, lr}
    a16e:	b082      	sub	sp, #8
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    a170:	2400      	movs	r4, #0
    a172:	9400      	str	r4, [sp, #0]
    a174:	f7f7 fe00 	bl	1d78 <z_cbvprintf_impl>
}
    a178:	b002      	add	sp, #8
    a17a:	bd10      	pop	{r4, pc}

0000a17c <color_prefix>:
{
    a17c:	b508      	push	{r3, lr}
    a17e:	4613      	mov	r3, r2
	color_print(output, color, true, level);
    a180:	2201      	movs	r2, #1
    a182:	f7f8 fd75 	bl	2c70 <color_print>
}
    a186:	bd08      	pop	{r3, pc}

0000a188 <color_postfix>:
{
    a188:	b508      	push	{r3, lr}
    a18a:	4613      	mov	r3, r2
	color_print(output, color, false, level);
    a18c:	2200      	movs	r2, #0
    a18e:	f7f8 fd6f 	bl	2c70 <color_print>
}
    a192:	bd08      	pop	{r3, pc}

0000a194 <postfix_print>:
{
    a194:	b538      	push	{r3, r4, r5, lr}
    a196:	4605      	mov	r5, r0
    a198:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
    a19a:	f001 0101 	and.w	r1, r1, #1
    a19e:	f7ff fff3 	bl	a188 <color_postfix>
	newline_print(output, flags);
    a1a2:	4621      	mov	r1, r4
    a1a4:	4628      	mov	r0, r5
    a1a6:	f7f8 fde9 	bl	2d7c <newline_print>
}
    a1aa:	bd38      	pop	{r3, r4, r5, pc}

0000a1ac <log_msg_hexdump>:
{
    a1ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a1b0:	b083      	sub	sp, #12
    a1b2:	4680      	mov	r8, r0
    a1b4:	460e      	mov	r6, r1
    a1b6:	4615      	mov	r5, r2
    a1b8:	461f      	mov	r7, r3
    a1ba:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    a1be:	462c      	mov	r4, r5
    a1c0:	2d10      	cmp	r5, #16
    a1c2:	bf28      	it	cs
    a1c4:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    a1c6:	f8cd 9000 	str.w	r9, [sp]
    a1ca:	463b      	mov	r3, r7
    a1cc:	4622      	mov	r2, r4
    a1ce:	4631      	mov	r1, r6
    a1d0:	4640      	mov	r0, r8
    a1d2:	f7f8 fde7 	bl	2da4 <hexdump_line_print>
		data += length;
    a1d6:	4426      	add	r6, r4
	} while (len);
    a1d8:	1b2d      	subs	r5, r5, r4
    a1da:	d1f0      	bne.n	a1be <log_msg_hexdump+0x12>
}
    a1dc:	b003      	add	sp, #12
    a1de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000a1e2 <log_output_flush>:
{
    a1e2:	b510      	push	{r4, lr}
    a1e4:	4604      	mov	r4, r0
		     output->control_block->offset,
    a1e6:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    a1e8:	6853      	ldr	r3, [r2, #4]
    a1ea:	6812      	ldr	r2, [r2, #0]
    a1ec:	6881      	ldr	r1, [r0, #8]
    a1ee:	6800      	ldr	r0, [r0, #0]
    a1f0:	f7ff ffaf 	bl	a152 <buffer_write>
	output->control_block->offset = 0;
    a1f4:	6863      	ldr	r3, [r4, #4]
    a1f6:	2200      	movs	r2, #0
    a1f8:	601a      	str	r2, [r3, #0]
}
    a1fa:	bd10      	pop	{r4, pc}

0000a1fc <out_func>:
{
    a1fc:	b538      	push	{r3, r4, r5, lr}
    a1fe:	4605      	mov	r5, r0
    a200:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    a202:	684b      	ldr	r3, [r1, #4]
    a204:	681a      	ldr	r2, [r3, #0]
    a206:	68cb      	ldr	r3, [r1, #12]
    a208:	429a      	cmp	r2, r3
    a20a:	d00f      	beq.n	a22c <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
    a20c:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    a20e:	f3bf 8f5b 	dmb	ish
    a212:	e853 2f00 	ldrex	r2, [r3]
    a216:	1c51      	adds	r1, r2, #1
    a218:	e843 1000 	strex	r0, r1, [r3]
    a21c:	2800      	cmp	r0, #0
    a21e:	d1f8      	bne.n	a212 <out_func+0x16>
    a220:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    a224:	68a3      	ldr	r3, [r4, #8]
    a226:	549d      	strb	r5, [r3, r2]
}
    a228:	2000      	movs	r0, #0
    a22a:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
    a22c:	4608      	mov	r0, r1
    a22e:	f7ff ffd8 	bl	a1e2 <log_output_flush>
    a232:	e7eb      	b.n	a20c <out_func+0x10>

0000a234 <cr_out_func>:
{
    a234:	b538      	push	{r3, r4, r5, lr}
    a236:	4604      	mov	r4, r0
    a238:	460d      	mov	r5, r1
	if (c == '\n') {
    a23a:	280a      	cmp	r0, #10
    a23c:	d005      	beq.n	a24a <cr_out_func+0x16>
	out_func(c, ctx);
    a23e:	4629      	mov	r1, r5
    a240:	4620      	mov	r0, r4
    a242:	f7ff ffdb 	bl	a1fc <out_func>
}
    a246:	2000      	movs	r0, #0
    a248:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
    a24a:	200d      	movs	r0, #13
    a24c:	f7ff ffd6 	bl	a1fc <out_func>
    a250:	e7f5      	b.n	a23e <cr_out_func+0xa>

0000a252 <k_msleep>:
{
    a252:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    a254:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    a258:	17c1      	asrs	r1, r0, #31
    a25a:	03c9      	lsls	r1, r1, #15
    a25c:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    a260:	03c0      	lsls	r0, r0, #15
    a262:	f240 33e7 	movw	r3, #999	; 0x3e7
    a266:	18c0      	adds	r0, r0, r3
    a268:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a26c:	f04f 0300 	mov.w	r3, #0
    a270:	f141 0100 	adc.w	r1, r1, #0
    a274:	f7f6 fb62 	bl	93c <__aeabi_uldivmod>
    a278:	f7fe fba2 	bl	89c0 <z_impl_k_sleep>
}
    a27c:	bd08      	pop	{r3, pc}

0000a27e <log_backend_uart_init>:
}
    a27e:	4770      	bx	lr

0000a280 <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
    a280:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    a282:	f001 021f 	and.w	r2, r1, #31
    a286:	2301      	movs	r3, #1
    a288:	4093      	lsls	r3, r2
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a28a:	0949      	lsrs	r1, r1, #5
    a28c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    a290:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a292:	f3bf 8f5b 	dmb	ish
    a296:	e850 2f00 	ldrex	r2, [r0]
    a29a:	ea02 0c01 	and.w	ip, r2, r1
    a29e:	e840 ce00 	strex	lr, ip, [r0]
    a2a2:	f1be 0f00 	cmp.w	lr, #0
    a2a6:	d1f6      	bne.n	a296 <atomic_test_and_clear_bit+0x16>
    a2a8:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    a2ac:	4213      	tst	r3, r2
}
    a2ae:	bf14      	ite	ne
    a2b0:	2001      	movne	r0, #1
    a2b2:	2000      	moveq	r0, #0
    a2b4:	f85d fb04 	ldr.w	pc, [sp], #4

0000a2b8 <atomic_set_bit>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    a2b8:	f001 021f 	and.w	r2, r1, #31
    a2bc:	2301      	movs	r3, #1
    a2be:	4093      	lsls	r3, r2

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    a2c0:	0949      	lsrs	r1, r1, #5
    a2c2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a2c6:	f3bf 8f5b 	dmb	ish
    a2ca:	e850 2f00 	ldrex	r2, [r0]
    a2ce:	431a      	orrs	r2, r3
    a2d0:	e840 2100 	strex	r1, r2, [r0]
    a2d4:	2900      	cmp	r1, #0
    a2d6:	d1f8      	bne.n	a2ca <atomic_set_bit+0x12>
    a2d8:	f3bf 8f5b 	dmb	ish
}
    a2dc:	4770      	bx	lr

0000a2de <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
    a2de:	2000      	movs	r0, #0
    a2e0:	4770      	bx	lr

0000a2e2 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    a2e2:	b538      	push	{r3, r4, r5, lr}
    a2e4:	4604      	mov	r4, r0

	if (esf != NULL) {
    a2e6:	460d      	mov	r5, r1
    a2e8:	b111      	cbz	r1, a2f0 <z_arm_fatal_error+0xe>
		esf_dump(esf);
    a2ea:	4608      	mov	r0, r1
    a2ec:	f7f9 f8a6 	bl	343c <esf_dump>
	}
	z_fatal_error(reason, esf);
    a2f0:	4629      	mov	r1, r5
    a2f2:	4620      	mov	r0, r4
    a2f4:	f7fd fa8c 	bl	7810 <z_fatal_error>
}
    a2f8:	bd38      	pop	{r3, r4, r5, pc}

0000a2fa <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    a2fa:	b508      	push	{r3, lr}
    a2fc:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    a2fe:	6800      	ldr	r0, [r0, #0]
    a300:	f7ff ffef 	bl	a2e2 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    a304:	bd08      	pop	{r3, pc}

0000a306 <arch_irq_enable>:
{
    a306:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
    a308:	b240      	sxtb	r0, r0
    a30a:	f7f9 f9b5 	bl	3678 <__NVIC_EnableIRQ>
}
    a30e:	bd08      	pop	{r3, pc}

0000a310 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    a310:	b508      	push	{r3, lr}
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    a312:	3101      	adds	r1, #1
    a314:	b240      	sxtb	r0, r0
    a316:	f7f9 f9bd 	bl	3694 <__NVIC_SetPriority>
}
    a31a:	bd08      	pop	{r3, pc}

0000a31c <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    a31c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    a31e:	2100      	movs	r1, #0
    a320:	2001      	movs	r0, #1
    a322:	f7ff ffde 	bl	a2e2 <z_arm_fatal_error>
}
    a326:	bd08      	pop	{r3, pc}

0000a328 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    a328:	b508      	push	{r3, lr}
	handler();
    a32a:	f7f9 f9d5 	bl	36d8 <z_SysNmiOnReset>
	z_arm_int_exit();
    a32e:	f7f9 fac7 	bl	38c0 <z_arm_exc_exit>
}
    a332:	bd08      	pop	{r3, pc}

0000a334 <memory_fault_recoverable>:
}
    a334:	2000      	movs	r0, #0
    a336:	4770      	bx	lr

0000a338 <fault_handle>:
{
    a338:	b508      	push	{r3, lr}
	*recoverable = false;
    a33a:	2300      	movs	r3, #0
    a33c:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    a33e:	1ecb      	subs	r3, r1, #3
    a340:	2b09      	cmp	r3, #9
    a342:	d81a      	bhi.n	a37a <fault_handle+0x42>
    a344:	e8df f003 	tbb	[pc, r3]
    a348:	110d0905 	.word	0x110d0905
    a34c:	19191919 	.word	0x19191919
    a350:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    a352:	4611      	mov	r1, r2
    a354:	f7fa f818 	bl	4388 <hard_fault>
}
    a358:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    a35a:	2100      	movs	r1, #0
    a35c:	f7f9 fe88 	bl	4070 <mem_manage_fault>
		break;
    a360:	e7fa      	b.n	a358 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
    a362:	2100      	movs	r1, #0
    a364:	f7f9 fb1a 	bl	399c <bus_fault>
		break;
    a368:	e7f6      	b.n	a358 <fault_handle+0x20>
		reason = usage_fault(esf);
    a36a:	f7f9 fca5 	bl	3cb8 <usage_fault>
		break;
    a36e:	e7f3      	b.n	a358 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
    a370:	4611      	mov	r1, r2
    a372:	f7f9 fde3 	bl	3f3c <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    a376:	2000      	movs	r0, #0
		break;
    a378:	e7ee      	b.n	a358 <fault_handle+0x20>
		reserved_exception(esf, fault);
    a37a:	f7f9 fe0d 	bl	3f98 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    a37e:	2000      	movs	r0, #0
	return reason;
    a380:	e7ea      	b.n	a358 <fault_handle+0x20>

0000a382 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    a382:	6843      	ldr	r3, [r0, #4]
    a384:	1e5a      	subs	r2, r3, #1
		&&
    a386:	4213      	tst	r3, r2
    a388:	d106      	bne.n	a398 <mpu_partition_is_valid+0x16>
		&&
    a38a:	2b1f      	cmp	r3, #31
    a38c:	d906      	bls.n	a39c <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    a38e:	6803      	ldr	r3, [r0, #0]
		&&
    a390:	421a      	tst	r2, r3
    a392:	d005      	beq.n	a3a0 <mpu_partition_is_valid+0x1e>
    a394:	2000      	movs	r0, #0
    a396:	4770      	bx	lr
    a398:	2000      	movs	r0, #0
    a39a:	4770      	bx	lr
    a39c:	2000      	movs	r0, #0
    a39e:	4770      	bx	lr
    a3a0:	2001      	movs	r0, #1
}
    a3a2:	4770      	bx	lr

0000a3a4 <mpu_configure_region>:
{
    a3a4:	b500      	push	{lr}
    a3a6:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    a3a8:	680b      	ldr	r3, [r1, #0]
    a3aa:	9301      	str	r3, [sp, #4]
		&new_region->attr, new_region->start, new_region->size);
    a3ac:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    a3ae:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    a3b0:	2b20      	cmp	r3, #32
    a3b2:	d912      	bls.n	a3da <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    a3b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    a3b8:	d811      	bhi.n	a3de <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    a3ba:	3b01      	subs	r3, #1
    a3bc:	fab3 f383 	clz	r3, r3
    a3c0:	f1c3 031f 	rsb	r3, r3, #31
    a3c4:	005b      	lsls	r3, r3, #1
    a3c6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    a3ca:	4313      	orrs	r3, r2
    a3cc:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    a3ce:	a901      	add	r1, sp, #4
    a3d0:	f7fa fa10 	bl	47f4 <region_allocate_and_init>
}
    a3d4:	b005      	add	sp, #20
    a3d6:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    a3da:	2308      	movs	r3, #8
    a3dc:	e7f5      	b.n	a3ca <mpu_configure_region+0x26>
		return REGION_4G;
    a3de:	233e      	movs	r3, #62	; 0x3e
    a3e0:	e7f3      	b.n	a3ca <mpu_configure_region+0x26>

0000a3e2 <arm_core_mpu_configure_static_mpu_regions>:
{
    a3e2:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    a3e4:	f7fa fabc 	bl	4960 <mpu_configure_static_mpu_regions>
}
    a3e8:	bd08      	pop	{r3, pc}

0000a3ea <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    a3ea:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    a3ec:	f7fa fac2 	bl	4974 <mpu_configure_dynamic_mpu_regions>
}
    a3f0:	bd08      	pop	{r3, pc}

0000a3f2 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    a3f2:	4602      	mov	r2, r0
    a3f4:	e002      	b.n	a3fc <strcpy+0xa>
		*d = *s;
    a3f6:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    a3fa:	3101      	adds	r1, #1
	while (*s != '\0') {
    a3fc:	780b      	ldrb	r3, [r1, #0]
    a3fe:	2b00      	cmp	r3, #0
    a400:	d1f9      	bne.n	a3f6 <strcpy+0x4>
	}

	*d = '\0';
    a402:	7013      	strb	r3, [r2, #0]

	return dest;
}
    a404:	4770      	bx	lr

0000a406 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    a406:	4603      	mov	r3, r0
    a408:	b1a2      	cbz	r2, a434 <strncpy+0x2e>
{
    a40a:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    a40c:	780c      	ldrb	r4, [r1, #0]
    a40e:	b12c      	cbz	r4, a41c <strncpy+0x16>
		*d = *s;
    a410:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    a414:	3101      	adds	r1, #1
		d++;
		n--;
    a416:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    a418:	2a00      	cmp	r2, #0
    a41a:	d1f7      	bne.n	a40c <strncpy+0x6>
	}

	while (n > 0) {
    a41c:	b122      	cbz	r2, a428 <strncpy+0x22>
		*d = '\0';
    a41e:	2100      	movs	r1, #0
    a420:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    a424:	3a01      	subs	r2, #1
    a426:	e7f9      	b.n	a41c <strncpy+0x16>
	}

	return dest;
}
    a428:	bc10      	pop	{r4}
    a42a:	4770      	bx	lr
		*d = '\0';
    a42c:	2100      	movs	r1, #0
    a42e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    a432:	3a01      	subs	r2, #1
	while (n > 0) {
    a434:	2a00      	cmp	r2, #0
    a436:	d1f9      	bne.n	a42c <strncpy+0x26>
    a438:	4770      	bx	lr

0000a43a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    a43a:	4603      	mov	r3, r0
	size_t n = 0;
    a43c:	2000      	movs	r0, #0

	while (*s != '\0') {
    a43e:	e001      	b.n	a444 <strlen+0xa>
		s++;
    a440:	3301      	adds	r3, #1
		n++;
    a442:	3001      	adds	r0, #1
	while (*s != '\0') {
    a444:	781a      	ldrb	r2, [r3, #0]
    a446:	2a00      	cmp	r2, #0
    a448:	d1fa      	bne.n	a440 <strlen+0x6>
	}

	return n;
}
    a44a:	4770      	bx	lr

0000a44c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    a44c:	4603      	mov	r3, r0
	size_t n = 0;
    a44e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    a450:	e001      	b.n	a456 <strnlen+0xa>
		s++;
    a452:	3301      	adds	r3, #1
		n++;
    a454:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    a456:	781a      	ldrb	r2, [r3, #0]
    a458:	b10a      	cbz	r2, a45e <strnlen+0x12>
    a45a:	4288      	cmp	r0, r1
    a45c:	d3f9      	bcc.n	a452 <strnlen+0x6>
	}

	return n;
}
    a45e:	4770      	bx	lr

0000a460 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    a460:	e001      	b.n	a466 <strcmp+0x6>
		s1++;
    a462:	3001      	adds	r0, #1
		s2++;
    a464:	3101      	adds	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    a466:	7803      	ldrb	r3, [r0, #0]
    a468:	780a      	ldrb	r2, [r1, #0]
    a46a:	4293      	cmp	r3, r2
    a46c:	d101      	bne.n	a472 <strcmp+0x12>
    a46e:	2b00      	cmp	r3, #0
    a470:	d1f7      	bne.n	a462 <strcmp+0x2>
	}

	return *s1 - *s2;
}
    a472:	1a98      	subs	r0, r3, r2
    a474:	4770      	bx	lr

0000a476 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    a476:	ea80 0301 	eor.w	r3, r0, r1
    a47a:	f013 0f03 	tst.w	r3, #3
    a47e:	d001      	beq.n	a484 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    a480:	4603      	mov	r3, r0
    a482:	e023      	b.n	a4cc <memcpy+0x56>
    a484:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    a486:	f013 0f03 	tst.w	r3, #3
    a48a:	d00f      	beq.n	a4ac <memcpy+0x36>
			if (n == 0) {
    a48c:	b30a      	cbz	r2, a4d2 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    a48e:	f811 cb01 	ldrb.w	ip, [r1], #1
    a492:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    a496:	3a01      	subs	r2, #1
    a498:	e7f5      	b.n	a486 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    a49a:	f811 cb01 	ldrb.w	ip, [r1], #1
    a49e:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    a4a2:	3a01      	subs	r2, #1
	while (n > 0) {
    a4a4:	2a00      	cmp	r2, #0
    a4a6:	d1f8      	bne.n	a49a <memcpy+0x24>
	}

	return d;
}
    a4a8:	bc10      	pop	{r4}
    a4aa:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    a4ac:	2a03      	cmp	r2, #3
    a4ae:	d90d      	bls.n	a4cc <memcpy+0x56>
{
    a4b0:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    a4b2:	f851 4b04 	ldr.w	r4, [r1], #4
    a4b6:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    a4ba:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    a4bc:	2a03      	cmp	r2, #3
    a4be:	d8f8      	bhi.n	a4b2 <memcpy+0x3c>
    a4c0:	e7f0      	b.n	a4a4 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    a4c2:	f811 cb01 	ldrb.w	ip, [r1], #1
    a4c6:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    a4ca:	3a01      	subs	r2, #1
	while (n > 0) {
    a4cc:	2a00      	cmp	r2, #0
    a4ce:	d1f8      	bne.n	a4c2 <memcpy+0x4c>
    a4d0:	4770      	bx	lr
}
    a4d2:	4770      	bx	lr

0000a4d4 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    a4d4:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    a4d8:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    a4da:	e002      	b.n	a4e2 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    a4dc:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    a4e0:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    a4e2:	f013 0f03 	tst.w	r3, #3
    a4e6:	d002      	beq.n	a4ee <memset+0x1a>
		if (n == 0) {
    a4e8:	2a00      	cmp	r2, #0
    a4ea:	d1f7      	bne.n	a4dc <memset+0x8>
    a4ec:	e00f      	b.n	a50e <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    a4ee:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    a4f0:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    a4f4:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    a4f8:	2a03      	cmp	r2, #3
    a4fa:	d906      	bls.n	a50a <memset+0x36>
		*(d_word++) = c_word;
    a4fc:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    a500:	3a04      	subs	r2, #4
    a502:	e7f9      	b.n	a4f8 <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    a504:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    a508:	3a01      	subs	r2, #1
	while (n > 0) {
    a50a:	2a00      	cmp	r2, #0
    a50c:	d1fa      	bne.n	a504 <memset+0x30>
	}

	return buf;
}
    a50e:	4770      	bx	lr

0000a510 <_stdout_hook_default>:
}
    a510:	f04f 30ff 	mov.w	r0, #4294967295
    a514:	4770      	bx	lr

0000a516 <fputc>:
}
#include <syscalls/zephyr_fputc_mrsh.c>
#endif

int fputc(int c, FILE *stream)
{
    a516:	b508      	push	{r3, lr}
		union { uintptr_t x; FILE * val; } parm1 = { .val = stream };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    a518:	f7fa fa84 	bl	4a24 <z_impl_zephyr_fputc>
	return zephyr_fputc(c, stream);
}
    a51c:	bd08      	pop	{r3, pc}

0000a51e <sys_arch_reboot>:
{
    a51e:	b508      	push	{r3, lr}
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
    a520:	b2c0      	uxtb	r0, r0
    a522:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a526:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
	NVIC_SystemReset();
    a52a:	f7fa fa9d 	bl	4a68 <__NVIC_SystemReset>

0000a52e <nrf_power_system_off>:
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    a52e:	2301      	movs	r3, #1
    a530:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    a534:	f3bf 8f4f 	dsb	sy
        __WFE();
    a538:	bf20      	wfe
    while (true)
    a53a:	e7fd      	b.n	a538 <nrf_power_system_off+0xa>

0000a53c <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    a53c:	2806      	cmp	r0, #6
    a53e:	d000      	beq.n	a542 <pm_state_set+0x6>
    a540:	4770      	bx	lr
{
    a542:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_power_system_off(NRF_POWER);
    a544:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a548:	f7ff fff1 	bl	a52e <nrf_power_system_off>

0000a54c <pm_state_exit_post_ops>:
    a54c:	2300      	movs	r3, #0
    a54e:	f383 8811 	msr	BASEPRI, r3
    a552:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    a556:	4770      	bx	lr

0000a558 <nrf_clock_is_running>:
    switch (domain)
    a558:	b119      	cbz	r1, a562 <nrf_clock_is_running+0xa>
    a55a:	2901      	cmp	r1, #1
    a55c:	d00e      	beq.n	a57c <nrf_clock_is_running+0x24>
    a55e:	2000      	movs	r0, #0
    a560:	4770      	bx	lr
            if (p_clk_src != NULL)
    a562:	b122      	cbz	r2, a56e <nrf_clock_is_running+0x16>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    a564:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    a568:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    a56c:	6013      	str	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    a56e:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    a572:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    a576:	d10e      	bne.n	a596 <nrf_clock_is_running+0x3e>
    return false;
    a578:	2000      	movs	r0, #0
    a57a:	4770      	bx	lr
            if (p_clk_src != NULL)
    a57c:	b122      	cbz	r2, a588 <nrf_clock_is_running+0x30>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    a57e:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    a582:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    a586:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    a588:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    a58c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    a590:	d103      	bne.n	a59a <nrf_clock_is_running+0x42>
    return false;
    a592:	2000      	movs	r0, #0
    a594:	4770      	bx	lr
                return true;
    a596:	2001      	movs	r0, #1
    a598:	4770      	bx	lr
                return true;
    a59a:	2001      	movs	r0, #1
}
    a59c:	4770      	bx	lr

0000a59e <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    a59e:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    a5a0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    a5a4:	0089      	lsls	r1, r1, #2
    a5a6:	3138      	adds	r1, #56	; 0x38
}
    a5a8:	4408      	add	r0, r1
    a5aa:	4770      	bx	lr

0000a5ac <get_sub_config>:
	const struct nrf_clock_control_config *config =
    a5ac:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    a5ae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    a5b2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    a5b6:	4770      	bx	lr

0000a5b8 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    a5b8:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    a5ba:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    a5be:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    a5c2:	4770      	bx	lr

0000a5c4 <get_status>:
{
    a5c4:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    a5c6:	b2c9      	uxtb	r1, r1
    a5c8:	f7ff ffe9 	bl	a59e <get_sub_data>
    a5cc:	6880      	ldr	r0, [r0, #8]
}
    a5ce:	f000 0007 	and.w	r0, r0, #7
    a5d2:	bd08      	pop	{r3, pc}

0000a5d4 <set_off_state>:
	__asm__ volatile(
    a5d4:	f04f 0320 	mov.w	r3, #32
    a5d8:	f3ef 8211 	mrs	r2, BASEPRI
    a5dc:	f383 8812 	msr	BASEPRI_MAX, r3
    a5e0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    a5e4:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    a5e6:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    a5ea:	d001      	beq.n	a5f0 <set_off_state+0x1c>
    a5ec:	428b      	cmp	r3, r1
    a5ee:	d107      	bne.n	a600 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    a5f0:	2301      	movs	r3, #1
    a5f2:	6003      	str	r3, [r0, #0]
	int err = 0;
    a5f4:	2000      	movs	r0, #0
	__asm__ volatile(
    a5f6:	f382 8811 	msr	BASEPRI, r2
    a5fa:	f3bf 8f6f 	isb	sy
}
    a5fe:	4770      	bx	lr
		err = -EPERM;
    a600:	f04f 30ff 	mov.w	r0, #4294967295
    a604:	e7f7      	b.n	a5f6 <set_off_state+0x22>

0000a606 <set_starting_state>:
	__asm__ volatile(
    a606:	f04f 0320 	mov.w	r3, #32
    a60a:	f3ef 8211 	mrs	r2, BASEPRI
    a60e:	f383 8812 	msr	BASEPRI_MAX, r3
    a612:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    a616:	6803      	ldr	r3, [r0, #0]
    a618:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    a61c:	f003 0307 	and.w	r3, r3, #7
    a620:	2b01      	cmp	r3, #1
    a622:	d008      	beq.n	a636 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    a624:	458c      	cmp	ip, r1
    a626:	d009      	beq.n	a63c <set_starting_state+0x36>
		err = -EPERM;
    a628:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    a62c:	f382 8811 	msr	BASEPRI, r2
    a630:	f3bf 8f6f 	isb	sy
}
    a634:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    a636:	6001      	str	r1, [r0, #0]
	int err = 0;
    a638:	2000      	movs	r0, #0
    a63a:	e7f7      	b.n	a62c <set_starting_state+0x26>
		err = -EALREADY;
    a63c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    a640:	e7f4      	b.n	a62c <set_starting_state+0x26>

0000a642 <set_on_state>:
	__asm__ volatile(
    a642:	f04f 0320 	mov.w	r3, #32
    a646:	f3ef 8211 	mrs	r2, BASEPRI
    a64a:	f383 8812 	msr	BASEPRI_MAX, r3
    a64e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    a652:	6803      	ldr	r3, [r0, #0]
    a654:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a658:	f043 0302 	orr.w	r3, r3, #2
    a65c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    a65e:	f382 8811 	msr	BASEPRI, r2
    a662:	f3bf 8f6f 	isb	sy
}
    a666:	4770      	bx	lr

0000a668 <clkstarted_handle>:
{
    a668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a66a:	4606      	mov	r6, r0
    a66c:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    a66e:	f7ff ff96 	bl	a59e <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    a672:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    a674:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    a676:	2300      	movs	r3, #0
    a678:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    a67c:	f7ff ffe1 	bl	a642 <set_on_state>
	if (callback) {
    a680:	b11d      	cbz	r5, a68a <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    a682:	463a      	mov	r2, r7
    a684:	4621      	mov	r1, r4
    a686:	4630      	mov	r0, r6
    a688:	47a8      	blx	r5
}
    a68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a68c <stop>:
{
    a68c:	b570      	push	{r4, r5, r6, lr}
    a68e:	4606      	mov	r6, r0
    a690:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    a692:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    a694:	4621      	mov	r1, r4
    a696:	f7ff ff82 	bl	a59e <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    a69a:	4629      	mov	r1, r5
    a69c:	3008      	adds	r0, #8
    a69e:	f7ff ff99 	bl	a5d4 <set_off_state>
	if (err < 0) {
    a6a2:	2800      	cmp	r0, #0
    a6a4:	db06      	blt.n	a6b4 <stop+0x28>
	get_sub_config(dev, type)->stop();
    a6a6:	4621      	mov	r1, r4
    a6a8:	4630      	mov	r0, r6
    a6aa:	f7ff ff7f 	bl	a5ac <get_sub_config>
    a6ae:	6843      	ldr	r3, [r0, #4]
    a6b0:	4798      	blx	r3
	return 0;
    a6b2:	2000      	movs	r0, #0
}
    a6b4:	bd70      	pop	{r4, r5, r6, pc}

0000a6b6 <api_stop>:
{
    a6b6:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    a6b8:	2280      	movs	r2, #128	; 0x80
    a6ba:	f7ff ffe7 	bl	a68c <stop>
}
    a6be:	bd08      	pop	{r3, pc}

0000a6c0 <async_start>:
{
    a6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a6c4:	4606      	mov	r6, r0
    a6c6:	4690      	mov	r8, r2
    a6c8:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    a6ca:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    a6cc:	4629      	mov	r1, r5
    a6ce:	f7ff ff66 	bl	a59e <get_sub_data>
    a6d2:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    a6d4:	9906      	ldr	r1, [sp, #24]
    a6d6:	3008      	adds	r0, #8
    a6d8:	f7ff ff95 	bl	a606 <set_starting_state>
	if (err < 0) {
    a6dc:	2800      	cmp	r0, #0
    a6de:	db09      	blt.n	a6f4 <async_start+0x34>
	subdata->cb = cb;
    a6e0:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    a6e4:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    a6e6:	4629      	mov	r1, r5
    a6e8:	4630      	mov	r0, r6
    a6ea:	f7ff ff5f 	bl	a5ac <get_sub_config>
    a6ee:	6803      	ldr	r3, [r0, #0]
    a6f0:	4798      	blx	r3
	return 0;
    a6f2:	2000      	movs	r0, #0
}
    a6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a6f8 <api_start>:
{
    a6f8:	b510      	push	{r4, lr}
    a6fa:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    a6fc:	2480      	movs	r4, #128	; 0x80
    a6fe:	9400      	str	r4, [sp, #0]
    a700:	f7ff ffde 	bl	a6c0 <async_start>
}
    a704:	b002      	add	sp, #8
    a706:	bd10      	pop	{r4, pc}

0000a708 <onoff_started_callback>:
{
    a708:	b510      	push	{r4, lr}
    a70a:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    a70c:	b2c9      	uxtb	r1, r1
    a70e:	f7ff ff53 	bl	a5b8 <get_onoff_manager>
	notify(mgr, 0);
    a712:	2100      	movs	r1, #0
    a714:	47a0      	blx	r4
}
    a716:	bd10      	pop	{r4, pc}

0000a718 <hfclk_start>:
{
    a718:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    a71a:	2001      	movs	r0, #1
    a71c:	f001 f80e 	bl	b73c <nrfx_clock_start>
}
    a720:	bd08      	pop	{r3, pc}

0000a722 <lfclk_start>:
{
    a722:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    a724:	2000      	movs	r0, #0
    a726:	f001 f809 	bl	b73c <nrfx_clock_start>
}
    a72a:	bd08      	pop	{r3, pc}

0000a72c <hfclk_stop>:
{
    a72c:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    a72e:	2001      	movs	r0, #1
    a730:	f001 f854 	bl	b7dc <nrfx_clock_stop>
}
    a734:	bd08      	pop	{r3, pc}

0000a736 <lfclk_stop>:
{
    a736:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    a738:	2000      	movs	r0, #0
    a73a:	f001 f84f 	bl	b7dc <nrfx_clock_stop>
}
    a73e:	bd08      	pop	{r3, pc}

0000a740 <k_msleep>:
{
    a740:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    a742:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    a746:	17c1      	asrs	r1, r0, #31
    a748:	03c9      	lsls	r1, r1, #15
    a74a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    a74e:	03c0      	lsls	r0, r0, #15
    a750:	f240 33e7 	movw	r3, #999	; 0x3e7
    a754:	18c0      	adds	r0, r0, r3
    a756:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a75a:	f04f 0300 	mov.w	r3, #0
    a75e:	f141 0100 	adc.w	r1, r1, #0
    a762:	f7f6 f8eb 	bl	93c <__aeabi_uldivmod>
    a766:	f7fe f92b 	bl	89c0 <z_impl_k_sleep>
}
    a76a:	bd08      	pop	{r3, pc}

0000a76c <blocking_start_callback>:
{
    a76c:	b508      	push	{r3, lr}
    a76e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    a770:	f7fd fc52 	bl	8018 <z_impl_k_sem_give>
}
    a774:	bd08      	pop	{r3, pc}

0000a776 <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    a776:	460b      	mov	r3, r1
    a778:	b139      	cbz	r1, a78a <sys_slist_remove+0x14>
	return node->next;
    a77a:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
    a77c:	6019      	str	r1, [r3, #0]
	return list->tail;
    a77e:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    a780:	428a      	cmp	r2, r1
    a782:	d009      	beq.n	a798 <sys_slist_remove+0x22>
	parent->next = child;
    a784:	2300      	movs	r3, #0
    a786:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    a788:	4770      	bx	lr
	return node->next;
    a78a:	6813      	ldr	r3, [r2, #0]
	list->head = node;
    a78c:	6003      	str	r3, [r0, #0]
	return list->tail;
    a78e:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    a790:	428a      	cmp	r2, r1
    a792:	d1f7      	bne.n	a784 <sys_slist_remove+0xe>
	list->tail = node;
    a794:	6043      	str	r3, [r0, #4]
}
    a796:	e7f5      	b.n	a784 <sys_slist_remove+0xe>
	list->tail = node;
    a798:	6043      	str	r3, [r0, #4]
}
    a79a:	e7f3      	b.n	a784 <sys_slist_remove+0xe>

0000a79c <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a79c:	b508      	push	{r3, lr}
    a79e:	460a      	mov	r2, r1
	return list->head;
    a7a0:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a7a2:	2100      	movs	r1, #0
    a7a4:	e001      	b.n	a7aa <sys_slist_find_and_remove+0xe>
    a7a6:	4619      	mov	r1, r3
    a7a8:	681b      	ldr	r3, [r3, #0]
    a7aa:	b12b      	cbz	r3, a7b8 <sys_slist_find_and_remove+0x1c>
    a7ac:	4293      	cmp	r3, r2
    a7ae:	d1fa      	bne.n	a7a6 <sys_slist_find_and_remove+0xa>
    a7b0:	f7ff ffe1 	bl	a776 <sys_slist_remove>
    a7b4:	2001      	movs	r0, #1
    a7b6:	e000      	b.n	a7ba <sys_slist_find_and_remove+0x1e>
    a7b8:	2000      	movs	r0, #0
    a7ba:	bd08      	pop	{r3, pc}

0000a7bc <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
    a7bc:	b570      	push	{r4, r5, r6, lr}
    a7be:	4604      	mov	r4, r0
    a7c0:	460d      	mov	r5, r1
    a7c2:	4616      	mov	r6, r2
	return list->head;
    a7c4:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    a7c6:	b133      	cbz	r3, a7d6 <gpio_manage_callback+0x1a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    a7c8:	f7ff ffe8 	bl	a79c <sys_slist_find_and_remove>
    a7cc:	b970      	cbnz	r0, a7ec <gpio_manage_callback+0x30>
			if (!set) {
    a7ce:	b91e      	cbnz	r6, a7d8 <gpio_manage_callback+0x1c>
				return -EINVAL;
    a7d0:	f06f 0015 	mvn.w	r0, #21
    a7d4:	e006      	b.n	a7e4 <gpio_manage_callback+0x28>
			}
		}
	} else if (!set) {
    a7d6:	b132      	cbz	r2, a7e6 <gpio_manage_callback+0x2a>
    a7d8:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    a7da:	602b      	str	r3, [r5, #0]
	list->head = node;
    a7dc:	6025      	str	r5, [r4, #0]
	return list->tail;
    a7de:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
    a7e0:	b143      	cbz	r3, a7f4 <gpio_manage_callback+0x38>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    a7e2:	2000      	movs	r0, #0
}
    a7e4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    a7e6:	f06f 0015 	mvn.w	r0, #21
    a7ea:	e7fb      	b.n	a7e4 <gpio_manage_callback+0x28>
	if (set) {
    a7ec:	2e00      	cmp	r6, #0
    a7ee:	d1f3      	bne.n	a7d8 <gpio_manage_callback+0x1c>
	return 0;
    a7f0:	2000      	movs	r0, #0
    a7f2:	e7f7      	b.n	a7e4 <gpio_manage_callback+0x28>
	list->tail = node;
    a7f4:	6065      	str	r5, [r4, #4]
    a7f6:	2000      	movs	r0, #0
}
    a7f8:	e7f4      	b.n	a7e4 <gpio_manage_callback+0x28>

0000a7fa <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
    a7fa:	b570      	push	{r4, r5, r6, lr}
    a7fc:	460e      	mov	r6, r1
    a7fe:	4615      	mov	r5, r2
	return list->head;
    a800:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    a802:	b121      	cbz	r1, a80e <gpio_fire_callbacks+0x14>
	return node->next;
    a804:	680c      	ldr	r4, [r1, #0]
    a806:	b13c      	cbz	r4, a818 <gpio_fire_callbacks+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    a808:	b931      	cbnz	r1, a818 <gpio_fire_callbacks+0x1e>
    a80a:	460c      	mov	r4, r1
    a80c:	e004      	b.n	a818 <gpio_fire_callbacks+0x1e>
    a80e:	460c      	mov	r4, r1
    a810:	e002      	b.n	a818 <gpio_fire_callbacks+0x1e>
    a812:	4623      	mov	r3, r4
    a814:	4621      	mov	r1, r4
    a816:	461c      	mov	r4, r3
    a818:	b171      	cbz	r1, a838 <gpio_fire_callbacks+0x3e>
		if (cb->pin_mask & pins) {
    a81a:	688a      	ldr	r2, [r1, #8]
    a81c:	402a      	ands	r2, r5
    a81e:	d002      	beq.n	a826 <gpio_fire_callbacks+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    a820:	684b      	ldr	r3, [r1, #4]
    a822:	4630      	mov	r0, r6
    a824:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    a826:	2c00      	cmp	r4, #0
    a828:	d0f3      	beq.n	a812 <gpio_fire_callbacks+0x18>
	return node->next;
    a82a:	6823      	ldr	r3, [r4, #0]
    a82c:	2b00      	cmp	r3, #0
    a82e:	d0f1      	beq.n	a814 <gpio_fire_callbacks+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    a830:	2c00      	cmp	r4, #0
    a832:	d1ef      	bne.n	a814 <gpio_fire_callbacks+0x1a>
    a834:	4623      	mov	r3, r4
    a836:	e7ed      	b.n	a814 <gpio_fire_callbacks+0x1a>
		}
	}
}
    a838:	bd70      	pop	{r4, r5, r6, pc}

0000a83a <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    a83a:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
    a83e:	0580      	lsls	r0, r0, #22
    a840:	0d80      	lsrs	r0, r0, #22
    a842:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
    a846:	d033      	beq.n	a8b0 <get_drive+0x76>
    a848:	d816      	bhi.n	a878 <get_drive+0x3e>
    a84a:	2806      	cmp	r0, #6
    a84c:	d02c      	beq.n	a8a8 <get_drive+0x6e>
    a84e:	d906      	bls.n	a85e <get_drive+0x24>
    a850:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    a854:	d10d      	bne.n	a872 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
    a856:	2301      	movs	r3, #1
    a858:	700b      	strb	r3, [r1, #0]
	return 0;
    a85a:	2000      	movs	r0, #0
		break;
    a85c:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    a85e:	b300      	cbz	r0, a8a2 <get_drive+0x68>
    a860:	2802      	cmp	r0, #2
    a862:	d103      	bne.n	a86c <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
    a864:	2304      	movs	r3, #4
    a866:	700b      	strb	r3, [r1, #0]
	return 0;
    a868:	2000      	movs	r0, #0
		break;
    a86a:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    a86c:	f06f 0015 	mvn.w	r0, #21
    a870:	4770      	bx	lr
    a872:	f06f 0015 	mvn.w	r0, #21
    a876:	4770      	bx	lr
    a878:	f240 2302 	movw	r3, #514	; 0x202
    a87c:	4298      	cmp	r0, r3
    a87e:	d01b      	beq.n	a8b8 <get_drive+0x7e>
    a880:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
    a884:	d103      	bne.n	a88e <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
    a886:	2303      	movs	r3, #3
    a888:	700b      	strb	r3, [r1, #0]
	return 0;
    a88a:	2000      	movs	r0, #0
		break;
    a88c:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    a88e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    a892:	d103      	bne.n	a89c <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
    a894:	2302      	movs	r3, #2
    a896:	700b      	strb	r3, [r1, #0]
	return 0;
    a898:	2000      	movs	r0, #0
		break;
    a89a:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    a89c:	f06f 0015 	mvn.w	r0, #21
    a8a0:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    a8a2:	2000      	movs	r0, #0
    a8a4:	7008      	strb	r0, [r1, #0]
		break;
    a8a6:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    a8a8:	2306      	movs	r3, #6
    a8aa:	700b      	strb	r3, [r1, #0]
	return 0;
    a8ac:	2000      	movs	r0, #0
		break;
    a8ae:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    a8b0:	2307      	movs	r3, #7
    a8b2:	700b      	strb	r3, [r1, #0]
	return 0;
    a8b4:	2000      	movs	r0, #0
		break;
    a8b6:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    a8b8:	2305      	movs	r3, #5
    a8ba:	700b      	strb	r3, [r1, #0]
	return 0;
    a8bc:	2000      	movs	r0, #0
}
    a8be:	4770      	bx	lr

0000a8c0 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    a8c0:	f010 0f10 	tst.w	r0, #16
    a8c4:	d104      	bne.n	a8d0 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    a8c6:	f010 0f20 	tst.w	r0, #32
    a8ca:	d103      	bne.n	a8d4 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    a8cc:	2000      	movs	r0, #0
    a8ce:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    a8d0:	2003      	movs	r0, #3
    a8d2:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    a8d4:	2001      	movs	r0, #1
}
    a8d6:	4770      	bx	lr

0000a8d8 <gpio_nrfx_port_get_raw>:
	return port->config;
    a8d8:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a8da:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    a8dc:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    a8e0:	600b      	str	r3, [r1, #0]
}
    a8e2:	2000      	movs	r0, #0
    a8e4:	4770      	bx	lr

0000a8e6 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    a8e6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a8e8:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    a8ea:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    a8ee:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    a8f2:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    a8f6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    a8fa:	2000      	movs	r0, #0
    a8fc:	4770      	bx	lr

0000a8fe <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    a8fe:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a900:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    a902:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    a906:	2000      	movs	r0, #0
    a908:	4770      	bx	lr

0000a90a <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    a90a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a90c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    a90e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    a912:	2000      	movs	r0, #0
    a914:	4770      	bx	lr

0000a916 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    a916:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a918:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    a91a:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    a91e:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    a922:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    a924:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    a928:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    a92c:	2000      	movs	r0, #0
    a92e:	4770      	bx	lr

0000a930 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    a930:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    a934:	d007      	beq.n	a946 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    a936:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    a93a:	d00d      	beq.n	a958 <get_trigger+0x28>
    a93c:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    a940:	d008      	beq.n	a954 <get_trigger+0x24>
    a942:	2001      	movs	r0, #1
}
    a944:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    a946:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    a94a:	d001      	beq.n	a950 <get_trigger+0x20>
    a94c:	2005      	movs	r0, #5
    a94e:	4770      	bx	lr
    a950:	2004      	movs	r0, #4
    a952:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    a954:	2002      	movs	r0, #2
    a956:	4770      	bx	lr
    a958:	2003      	movs	r0, #3
    a95a:	4770      	bx	lr

0000a95c <gpio_nrfx_manage_callback>:
{
    a95c:	b508      	push	{r3, lr}
	return port->data;
    a95e:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    a960:	3004      	adds	r0, #4
    a962:	f7ff ff2b 	bl	a7bc <gpio_manage_callback>
}
    a966:	bd08      	pop	{r3, pc}

0000a968 <nrfx_gpio_handler>:
{
    a968:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
    a96a:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    a96e:	0940      	lsrs	r0, r0, #5
    a970:	f7fa fa66 	bl	4e40 <get_dev>
	if (port == NULL) {
    a974:	b130      	cbz	r0, a984 <nrfx_gpio_handler+0x1c>
    a976:	4601      	mov	r1, r0
	return port->data;
    a978:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    a97a:	2201      	movs	r2, #1
    a97c:	40a2      	lsls	r2, r4
    a97e:	3004      	adds	r0, #4
    a980:	f7ff ff3b 	bl	a7fa <gpio_fire_callbacks>
}
    a984:	bd10      	pop	{r4, pc}

0000a986 <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
    a986:	b510      	push	{r4, lr}
    a988:	b082      	sub	sp, #8
    a98a:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    a98c:	aa01      	add	r2, sp, #4
    a98e:	f000 f81c 	bl	a9ca <pinctrl_lookup_state>
	if (ret < 0) {
    a992:	2800      	cmp	r0, #0
    a994:	db05      	blt.n	a9a2 <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    a996:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    a998:	6822      	ldr	r2, [r4, #0]
    a99a:	7919      	ldrb	r1, [r3, #4]
    a99c:	6818      	ldr	r0, [r3, #0]
    a99e:	f7fa fd89 	bl	54b4 <pinctrl_configure_pins>
}
    a9a2:	b002      	add	sp, #8
    a9a4:	bd10      	pop	{r4, pc}

0000a9a6 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
    a9a6:	b510      	push	{r4, lr}
    a9a8:	4604      	mov	r4, r0
    a9aa:	2200      	movs	r2, #0
    a9ac:	2101      	movs	r1, #1
    a9ae:	2003      	movs	r0, #3
    a9b0:	f7ff fcae 	bl	a310 <z_arm_irq_priority_set>
    a9b4:	6863      	ldr	r3, [r4, #4]
    a9b6:	2100      	movs	r1, #0
    a9b8:	6998      	ldr	r0, [r3, #24]
    a9ba:	f7ff ffe4 	bl	a986 <pinctrl_apply_state>
    a9be:	2800      	cmp	r0, #0
    a9c0:	db02      	blt.n	a9c8 <twi_0_init+0x22>
    a9c2:	4620      	mov	r0, r4
    a9c4:	f7fa fce8 	bl	5398 <init_twi>
    a9c8:	bd10      	pop	{r4, pc}

0000a9ca <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    a9ca:	b500      	push	{lr}
	*state = &config->states[0];
    a9cc:	6843      	ldr	r3, [r0, #4]
    a9ce:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    a9d0:	e001      	b.n	a9d6 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    a9d2:	3308      	adds	r3, #8
    a9d4:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    a9d6:	6813      	ldr	r3, [r2, #0]
    a9d8:	f890 c008 	ldrb.w	ip, [r0, #8]
    a9dc:	f8d0 e004 	ldr.w	lr, [r0, #4]
    a9e0:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
    a9e4:	4563      	cmp	r3, ip
    a9e6:	d205      	bcs.n	a9f4 <pinctrl_lookup_state+0x2a>
		if (id == (*state)->id) {
    a9e8:	f893 c005 	ldrb.w	ip, [r3, #5]
    a9ec:	458c      	cmp	ip, r1
    a9ee:	d1f0      	bne.n	a9d2 <pinctrl_lookup_state+0x8>
			return 0;
    a9f0:	2000      	movs	r0, #0
    a9f2:	e001      	b.n	a9f8 <pinctrl_lookup_state+0x2e>
	}

	return -ENOENT;
    a9f4:	f06f 0001 	mvn.w	r0, #1
}
    a9f8:	f85d fb04 	ldr.w	pc, [sp], #4

0000a9fc <bme680_calc_temp>:
{
    a9fc:	b500      	push	{lr}
	var1 = ((int32_t)adc_temp >> 3) - ((int32_t)data->par_t1 << 1);
    a9fe:	89c3      	ldrh	r3, [r0, #14]
    aa00:	005b      	lsls	r3, r3, #1
    aa02:	ebc3 01e1 	rsb	r1, r3, r1, asr #3
    aa06:	17ca      	asrs	r2, r1, #31
	var2 = (var1 * (int32_t)data->par_t2) >> 11;
    aa08:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
    aa0c:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    aa10:	fb03 fc02 	mul.w	ip, r3, r2
    aa14:	fb01 cc0e 	mla	ip, r1, lr, ip
    aa18:	fba3 3e01 	umull	r3, lr, r3, r1
    aa1c:	44f4      	add	ip, lr
    aa1e:	0adb      	lsrs	r3, r3, #11
    aa20:	ea43 534c 	orr.w	r3, r3, ip, lsl #21
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
    aa24:	0849      	lsrs	r1, r1, #1
    aa26:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
    aa2a:	fb01 fc02 	mul.w	ip, r1, r2
    aa2e:	fba1 1201 	umull	r1, r2, r1, r1
    aa32:	eb02 024c 	add.w	r2, r2, ip, lsl #1
    aa36:	0b09      	lsrs	r1, r1, #12
    aa38:	ea41 5102 	orr.w	r1, r1, r2, lsl #20
    aa3c:	1312      	asrs	r2, r2, #12
	var3 = ((var3) * ((int32_t)data->par_t3 << 4)) >> 14;
    aa3e:	f990 e012 	ldrsb.w	lr, [r0, #18]
    aa42:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
    aa46:	ea4f 7eee 	mov.w	lr, lr, asr #31
    aa4a:	fb0c f202 	mul.w	r2, ip, r2
    aa4e:	fb01 220e 	mla	r2, r1, lr, r2
    aa52:	fbac c101 	umull	ip, r1, ip, r1
    aa56:	440a      	add	r2, r1
    aa58:	ea4f 319c 	mov.w	r1, ip, lsr #14
    aa5c:	ea41 4182 	orr.w	r1, r1, r2, lsl #18
	data->t_fine = var2 + var3;
    aa60:	440b      	add	r3, r1
    aa62:	63c3      	str	r3, [r0, #60]	; 0x3c
	data->calc_temp = ((data->t_fine * 5) + 128) >> 8;
    aa64:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    aa68:	3380      	adds	r3, #128	; 0x80
    aa6a:	121b      	asrs	r3, r3, #8
    aa6c:	6283      	str	r3, [r0, #40]	; 0x28
}
    aa6e:	f85d fb04 	ldr.w	pc, [sp], #4

0000aa72 <bme680_calc_press>:
{
    aa72:	b500      	push	{lr}
	var1 = (((int32_t)data->t_fine) >> 1) - 64000;
    aa74:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    aa76:	105b      	asrs	r3, r3, #1
    aa78:	f5a3 4e7a 	sub.w	lr, r3, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
    aa7c:	ea4f 03ae 	mov.w	r3, lr, asr #2
    aa80:	fb03 f303 	mul.w	r3, r3, r3
    aa84:	ea4f 2ce3 	mov.w	ip, r3, asr #11
		(int32_t)data->par_p6) >> 2;
    aa88:	f990 201e 	ldrsb.w	r2, [r0, #30]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
    aa8c:	fb02 fc0c 	mul.w	ip, r2, ip
	var2 = var2 + ((var1 * (int32_t)data->par_p5) << 1);
    aa90:	f9b0 201c 	ldrsh.w	r2, [r0, #28]
    aa94:	fb0e f202 	mul.w	r2, lr, r2
    aa98:	0052      	lsls	r2, r2, #1
    aa9a:	eb02 02ac 	add.w	r2, r2, ip, asr #2
	var2 = (var2 >> 2) + ((int32_t)data->par_p4 << 16);
    aa9e:	f9b0 c01a 	ldrsh.w	ip, [r0, #26]
    aaa2:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
    aaa6:	eb0c 0ca2 	add.w	ip, ip, r2, asr #2
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
    aaaa:	135b      	asrs	r3, r3, #13
		 ((int32_t)data->par_p3 << 5)) >> 3)
    aaac:	f990 2018 	ldrsb.w	r2, [r0, #24]
    aab0:	0152      	lsls	r2, r2, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
    aab2:	fb02 f303 	mul.w	r3, r2, r3
	       + (((int32_t)data->par_p2 * var1) >> 1);
    aab6:	f9b0 2016 	ldrsh.w	r2, [r0, #22]
    aaba:	fb0e f202 	mul.w	r2, lr, r2
    aabe:	1052      	asrs	r2, r2, #1
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
    aac0:	eb02 02e3 	add.w	r2, r2, r3, asr #3
	var1 = var1 >> 18;
    aac4:	1492      	asrs	r2, r2, #18
	var1 = ((32768 + var1) * (int32_t)data->par_p1) >> 15;
    aac6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    aaca:	8a83      	ldrh	r3, [r0, #20]
    aacc:	fb03 f202 	mul.w	r2, r3, r2
    aad0:	13d2      	asrs	r2, r2, #15
	calc_press = 1048576 - adc_press;
    aad2:	f5c1 1380 	rsb	r3, r1, #1048576	; 0x100000
	calc_press = (calc_press - (var2 >> 12)) * ((uint32_t)3125);
    aad6:	eba3 332c 	sub.w	r3, r3, ip, asr #12
    aada:	f640 4135 	movw	r1, #3125	; 0xc35
    aade:	fb01 f303 	mul.w	r3, r1, r3
	if (calc_press >= (int32_t)0x40000000) {
    aae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    aae6:	db26      	blt.n	ab36 <bme680_calc_press+0xc4>
		calc_press = ((calc_press / var1) << 1);
    aae8:	fb93 f3f2 	sdiv	r3, r3, r2
    aaec:	005b      	lsls	r3, r3, #1
	var1 = ((int32_t)data->par_p9 *
    aaee:	f9b0 c022 	ldrsh.w	ip, [r0, #34]	; 0x22
		(int32_t)(((calc_press >> 3)
    aaf2:	10da      	asrs	r2, r3, #3
			 * (calc_press >> 3)) >> 13)) >> 12;
    aaf4:	fb02 f202 	mul.w	r2, r2, r2
    aaf8:	1352      	asrs	r2, r2, #13
	var1 = ((int32_t)data->par_p9 *
    aafa:	fb02 fc0c 	mul.w	ip, r2, ip
	var2 = ((int32_t)(calc_press >> 2) * (int32_t)data->par_p8) >> 13;
    aafe:	109a      	asrs	r2, r3, #2
    ab00:	f9b0 1020 	ldrsh.w	r1, [r0, #32]
    ab04:	fb01 f202 	mul.w	r2, r1, r2
    ab08:	1352      	asrs	r2, r2, #13
	var3 = ((int32_t)(calc_press >> 8) * (int32_t)(calc_press >> 8)
    ab0a:	1219      	asrs	r1, r3, #8
    ab0c:	fb01 fe01 	mul.w	lr, r1, r1
		* (int32_t)(calc_press >> 8)
    ab10:	fb0e f101 	mul.w	r1, lr, r1
		* (int32_t)data->par_p10) >> 17;
    ab14:	f890 e024 	ldrb.w	lr, [r0, #36]	; 0x24
    ab18:	fb0e f101 	mul.w	r1, lr, r1
			   + ((var1 + var2 + var3
    ab1c:	eb02 322c 	add.w	r2, r2, ip, asr #12
    ab20:	eb02 4261 	add.w	r2, r2, r1, asr #17
			       + ((int32_t)data->par_p7 << 7)) >> 4);
    ab24:	f990 101f 	ldrsb.w	r1, [r0, #31]
    ab28:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
			   + ((var1 + var2 + var3
    ab2c:	eb03 1322 	add.w	r3, r3, r2, asr #4
	data->calc_press = calc_press
    ab30:	62c3      	str	r3, [r0, #44]	; 0x2c
}
    ab32:	f85d fb04 	ldr.w	pc, [sp], #4
		calc_press = ((calc_press << 1) / var1);
    ab36:	005b      	lsls	r3, r3, #1
    ab38:	fb93 f3f2 	sdiv	r3, r3, r2
    ab3c:	e7d7      	b.n	aaee <bme680_calc_press+0x7c>

0000ab3e <bme680_calc_gas_wait>:
	if (dur >= 0xfc0) {
    ab3e:	f5b0 6f7c 	cmp.w	r0, #4032	; 0xfc0
    ab42:	d20c      	bcs.n	ab5e <bme680_calc_gas_wait+0x20>
	uint8_t factor = 0, durval;
    ab44:	2300      	movs	r3, #0
    ab46:	e002      	b.n	ab4e <bme680_calc_gas_wait+0x10>
			dur = dur / 4;
    ab48:	0880      	lsrs	r0, r0, #2
			factor += 1;
    ab4a:	3301      	adds	r3, #1
    ab4c:	b2db      	uxtb	r3, r3
		while (dur > 0x3F) {
    ab4e:	283f      	cmp	r0, #63	; 0x3f
    ab50:	d8fa      	bhi.n	ab48 <bme680_calc_gas_wait+0xa>
		durval = dur + (factor * 64);
    ab52:	019b      	lsls	r3, r3, #6
    ab54:	b2db      	uxtb	r3, r3
    ab56:	fa53 f080 	uxtab	r0, r3, r0
    ab5a:	b2c0      	uxtb	r0, r0
    ab5c:	4770      	bx	lr
		durval = 0xff; /* Max duration*/
    ab5e:	20ff      	movs	r0, #255	; 0xff
}
    ab60:	4770      	bx	lr

0000ab62 <bme680_sample_fetch>:
{
    ab62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ab66:	b085      	sub	sp, #20
    ab68:	4604      	mov	r4, r0
	struct bme680_data *data = dev->data;
    ab6a:	6905      	ldr	r5, [r0, #16]
	uint8_t buff[BME680_LEN_FIELD] = { 0 };
    ab6c:	2300      	movs	r3, #0
    ab6e:	9300      	str	r3, [sp, #0]
    ab70:	9301      	str	r3, [sp, #4]
    ab72:	9302      	str	r3, [sp, #8]
    ab74:	f8cd 300b 	str.w	r3, [sp, #11]
	const struct bme680_config *config = dev->config;
    ab78:	6843      	ldr	r3, [r0, #4]
	return config->bus_io->read(dev, start, buf, size);
    ab7a:	689b      	ldr	r3, [r3, #8]
    ab7c:	685e      	ldr	r6, [r3, #4]
    ab7e:	230f      	movs	r3, #15
    ab80:	466a      	mov	r2, sp
    ab82:	211d      	movs	r1, #29
    ab84:	47b0      	blx	r6
	if (ret < 0) {
    ab86:	2800      	cmp	r0, #0
    ab88:	db3b      	blt.n	ac02 <bme680_sample_fetch+0xa0>
	data->new_data = buff[0] & BME680_MSK_NEW_DATA;
    ab8a:	f89d 2000 	ldrb.w	r2, [sp]
    ab8e:	f002 0380 	and.w	r3, r2, #128	; 0x80
    ab92:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	data->heatr_stab = buff[14] & BME680_MSK_HEATR_STAB;
    ab96:	f89d 000e 	ldrb.w	r0, [sp, #14]
    ab9a:	f000 0310 	and.w	r3, r0, #16
    ab9e:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
	adc_press = (uint32_t)(((uint32_t)buff[2] << 12) | ((uint32_t)buff[3] << 4)
    aba2:	f89d 1002 	ldrb.w	r1, [sp, #2]
    aba6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    abaa:	011b      	lsls	r3, r3, #4
    abac:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
			    | ((uint32_t)buff[4] >> 4));
    abb0:	f89d 1004 	ldrb.w	r1, [sp, #4]
	adc_press = (uint32_t)(((uint32_t)buff[2] << 12) | ((uint32_t)buff[3] << 4)
    abb4:	ea43 1611 	orr.w	r6, r3, r1, lsr #4
	adc_temp = (uint32_t)(((uint32_t)buff[5] << 12) | ((uint32_t)buff[6] << 4)
    abb8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    abbc:	f89d 1006 	ldrb.w	r1, [sp, #6]
    abc0:	0109      	lsls	r1, r1, #4
    abc2:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
			   | ((uint32_t)buff[7] >> 4));
    abc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	adc_temp = (uint32_t)(((uint32_t)buff[5] << 12) | ((uint32_t)buff[6] << 4)
    abca:	ea41 1113 	orr.w	r1, r1, r3, lsr #4
	adc_hum = (uint16_t)(((uint32_t)buff[8] << 8) | (uint32_t)buff[9]);
    abce:	f89d 3008 	ldrb.w	r3, [sp, #8]
    abd2:	f89d 8009 	ldrb.w	r8, [sp, #9]
    abd6:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
	adc_gas_res = (uint16_t)((uint32_t)buff[13] << 2 | (((uint32_t)buff[14]) >> 6));
    abda:	f89d 300d 	ldrb.w	r3, [sp, #13]
    abde:	0987      	lsrs	r7, r0, #6
    abe0:	ea47 0783 	orr.w	r7, r7, r3, lsl #2
	gas_range = buff[14] & BME680_MSK_GAS_RANGE;
    abe4:	f000 090f 	and.w	r9, r0, #15
	if (data->new_data) {
    abe8:	f012 0f80 	tst.w	r2, #128	; 0x80
    abec:	d10c      	bne.n	ac08 <bme680_sample_fetch+0xa6>
	const struct bme680_config *config = dev->config;
    abee:	6863      	ldr	r3, [r4, #4]
	return config->bus_io->write(dev, reg, val);
    abf0:	689b      	ldr	r3, [r3, #8]
    abf2:	689b      	ldr	r3, [r3, #8]
    abf4:	2255      	movs	r2, #85	; 0x55
    abf6:	2174      	movs	r1, #116	; 0x74
    abf8:	4620      	mov	r0, r4
    abfa:	4798      	blx	r3
	if (ret < 0) {
    abfc:	2800      	cmp	r0, #0
    abfe:	db00      	blt.n	ac02 <bme680_sample_fetch+0xa0>
	return 0;
    ac00:	2000      	movs	r0, #0
}
    ac02:	b005      	add	sp, #20
    ac04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bme680_calc_temp(data, adc_temp);
    ac08:	4628      	mov	r0, r5
    ac0a:	f7ff fef7 	bl	a9fc <bme680_calc_temp>
		bme680_calc_press(data, adc_press);
    ac0e:	4631      	mov	r1, r6
    ac10:	4628      	mov	r0, r5
    ac12:	f7ff ff2e 	bl	aa72 <bme680_calc_press>
		bme680_calc_humidity(data, adc_hum);
    ac16:	4641      	mov	r1, r8
    ac18:	4628      	mov	r0, r5
    ac1a:	f7fa fd01 	bl	5620 <bme680_calc_humidity>
		bme680_calc_gas_resistance(data, gas_range, adc_gas_res);
    ac1e:	463a      	mov	r2, r7
    ac20:	4649      	mov	r1, r9
    ac22:	4628      	mov	r0, r5
    ac24:	f7fa fd64 	bl	56f0 <bme680_calc_gas_resistance>
    ac28:	e7e1      	b.n	abee <bme680_sample_fetch+0x8c>

0000ac2a <bme680_read_compensation>:
{
    ac2a:	b570      	push	{r4, r5, r6, lr}
    ac2c:	b08c      	sub	sp, #48	; 0x30
    ac2e:	4605      	mov	r5, r0
	struct bme680_data *data = dev->data;
    ac30:	6904      	ldr	r4, [r0, #16]
	const struct bme680_config *config = dev->config;
    ac32:	6843      	ldr	r3, [r0, #4]
	return config->bus_io->read(dev, start, buf, size);
    ac34:	689b      	ldr	r3, [r3, #8]
    ac36:	685e      	ldr	r6, [r3, #4]
    ac38:	2317      	movs	r3, #23
    ac3a:	aa01      	add	r2, sp, #4
    ac3c:	218a      	movs	r1, #138	; 0x8a
    ac3e:	47b0      	blx	r6
	if (err < 0) {
    ac40:	2800      	cmp	r0, #0
    ac42:	f2c0 809d 	blt.w	ad80 <bme680_read_compensation+0x156>
	const struct bme680_config *config = dev->config;
    ac46:	686b      	ldr	r3, [r5, #4]
	return config->bus_io->read(dev, start, buf, size);
    ac48:	689b      	ldr	r3, [r3, #8]
    ac4a:	685e      	ldr	r6, [r3, #4]
    ac4c:	230e      	movs	r3, #14
    ac4e:	f10d 021b 	add.w	r2, sp, #27
    ac52:	21e1      	movs	r1, #225	; 0xe1
    ac54:	4628      	mov	r0, r5
    ac56:	47b0      	blx	r6
	if (err < 0) {
    ac58:	2800      	cmp	r0, #0
    ac5a:	f2c0 8091 	blt.w	ad80 <bme680_read_compensation+0x156>
	const struct bme680_config *config = dev->config;
    ac5e:	686b      	ldr	r3, [r5, #4]
	return config->bus_io->read(dev, start, buf, size);
    ac60:	689b      	ldr	r3, [r3, #8]
    ac62:	685e      	ldr	r6, [r3, #4]
    ac64:	2305      	movs	r3, #5
    ac66:	f10d 0229 	add.w	r2, sp, #41	; 0x29
    ac6a:	2100      	movs	r1, #0
    ac6c:	4628      	mov	r0, r5
    ac6e:	47b0      	blx	r6
	if (err < 0) {
    ac70:	2800      	cmp	r0, #0
    ac72:	f2c0 8085 	blt.w	ad80 <bme680_read_compensation+0x156>
	data->par_t1 = (uint16_t)(BME680_CONCAT_BYTES(buff[32], buff[31]));
    ac76:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    ac7a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    ac7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ac82:	81e3      	strh	r3, [r4, #14]
	data->par_t2 = (int16_t)(BME680_CONCAT_BYTES(buff[1], buff[0]));
    ac84:	f89d 2005 	ldrb.w	r2, [sp, #5]
    ac88:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ac8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ac90:	8223      	strh	r3, [r4, #16]
	data->par_t3 = (uint8_t)(buff[2]);
    ac92:	f99d 3006 	ldrsb.w	r3, [sp, #6]
    ac96:	74a3      	strb	r3, [r4, #18]
	data->par_p1 = (uint16_t)(BME680_CONCAT_BYTES(buff[5], buff[4]));
    ac98:	f89d 2009 	ldrb.w	r2, [sp, #9]
    ac9c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    aca0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    aca4:	82a3      	strh	r3, [r4, #20]
	data->par_p2 = (int16_t)(BME680_CONCAT_BYTES(buff[7], buff[6]));
    aca6:	f89d 200b 	ldrb.w	r2, [sp, #11]
    acaa:	f89d 300a 	ldrb.w	r3, [sp, #10]
    acae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    acb2:	82e3      	strh	r3, [r4, #22]
	data->par_p3 = (int8_t)buff[8];
    acb4:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    acb8:	7623      	strb	r3, [r4, #24]
	data->par_p4 = (int16_t)(BME680_CONCAT_BYTES(buff[11], buff[10]));
    acba:	f89d 200f 	ldrb.w	r2, [sp, #15]
    acbe:	f89d 300e 	ldrb.w	r3, [sp, #14]
    acc2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    acc6:	8363      	strh	r3, [r4, #26]
	data->par_p5 = (int16_t)(BME680_CONCAT_BYTES(buff[13], buff[12]));
    acc8:	f89d 2011 	ldrb.w	r2, [sp, #17]
    accc:	f89d 3010 	ldrb.w	r3, [sp, #16]
    acd0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    acd4:	83a3      	strh	r3, [r4, #28]
	data->par_p6 = (int8_t)(buff[15]);
    acd6:	f99d 3013 	ldrsb.w	r3, [sp, #19]
    acda:	77a3      	strb	r3, [r4, #30]
	data->par_p7 = (int8_t)(buff[14]);
    acdc:	f99d 3012 	ldrsb.w	r3, [sp, #18]
    ace0:	77e3      	strb	r3, [r4, #31]
	data->par_p8 = (int16_t)(BME680_CONCAT_BYTES(buff[19], buff[18]));
    ace2:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ace6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    acea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    acee:	8423      	strh	r3, [r4, #32]
	data->par_p9 = (int16_t)(BME680_CONCAT_BYTES(buff[21], buff[20]));
    acf0:	f89d 2019 	ldrb.w	r2, [sp, #25]
    acf4:	f89d 3018 	ldrb.w	r3, [sp, #24]
    acf8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    acfc:	8463      	strh	r3, [r4, #34]	; 0x22
	data->par_p10 = (uint8_t)(buff[22]);
    acfe:	f89d 301a 	ldrb.w	r3, [sp, #26]
    ad02:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	data->par_h1 = (uint16_t)(((uint16_t)buff[25] << 4) | (buff[24] & 0x0f));
    ad06:	f89d 201d 	ldrb.w	r2, [sp, #29]
    ad0a:	f89d 301c 	ldrb.w	r3, [sp, #28]
    ad0e:	f003 030f 	and.w	r3, r3, #15
    ad12:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    ad16:	8023      	strh	r3, [r4, #0]
	data->par_h2 = (uint16_t)(((uint16_t)buff[23] << 4) | ((buff[24]) >> 4));
    ad18:	f89d 201b 	ldrb.w	r2, [sp, #27]
    ad1c:	f89d 301c 	ldrb.w	r3, [sp, #28]
    ad20:	091b      	lsrs	r3, r3, #4
    ad22:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    ad26:	8063      	strh	r3, [r4, #2]
	data->par_h3 = (int8_t)buff[26];
    ad28:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    ad2c:	7123      	strb	r3, [r4, #4]
	data->par_h4 = (int8_t)buff[27];
    ad2e:	f99d 301f 	ldrsb.w	r3, [sp, #31]
    ad32:	7163      	strb	r3, [r4, #5]
	data->par_h5 = (int8_t)buff[28];
    ad34:	f99d 3020 	ldrsb.w	r3, [sp, #32]
    ad38:	71a3      	strb	r3, [r4, #6]
	data->par_h6 = (uint8_t)buff[29];
    ad3a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    ad3e:	71e3      	strb	r3, [r4, #7]
	data->par_h7 = (int8_t)buff[30];
    ad40:	f99d 3022 	ldrsb.w	r3, [sp, #34]	; 0x22
    ad44:	7223      	strb	r3, [r4, #8]
	data->par_gh1 = (int8_t)buff[35];
    ad46:	f99d 3027 	ldrsb.w	r3, [sp, #39]	; 0x27
    ad4a:	7263      	strb	r3, [r4, #9]
	data->par_gh2 = (int16_t)(BME680_CONCAT_BYTES(buff[34], buff[33]));
    ad4c:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    ad50:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    ad54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ad58:	8163      	strh	r3, [r4, #10]
	data->par_gh3 = (int8_t)buff[36];
    ad5a:	f99d 3028 	ldrsb.w	r3, [sp, #40]	; 0x28
    ad5e:	7323      	strb	r3, [r4, #12]
	data->res_heat_val = (int8_t)buff[37];
    ad60:	f99d 3029 	ldrsb.w	r3, [sp, #41]	; 0x29
    ad64:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	data->res_heat_range = ((buff[39] & BME680_MSK_RH_RANGE) >> 4);
    ad68:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    ad6c:	f3c3 1301 	ubfx	r3, r3, #4, #2
    ad70:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	data->range_sw_err = ((int8_t)(buff[41] & BME680_MSK_RANGE_SW_ERR)) / 16;
    ad74:	f99d 302d 	ldrsb.w	r3, [sp, #45]	; 0x2d
    ad78:	111b      	asrs	r3, r3, #4
    ad7a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	return 0;
    ad7e:	2000      	movs	r0, #0
}
    ad80:	b00c      	add	sp, #48	; 0x30
    ad82:	bd70      	pop	{r4, r5, r6, pc}

0000ad84 <i2c_write>:
{
    ad84:	b510      	push	{r4, lr}
    ad86:	b084      	sub	sp, #16
	msg.buf = (uint8_t *)buf;
    ad88:	9101      	str	r1, [sp, #4]
	msg.len = num_bytes;
    ad8a:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    ad8c:	2202      	movs	r2, #2
    ad8e:	f88d 200c 	strb.w	r2, [sp, #12]
	const struct i2c_driver_api *api =
    ad92:	6882      	ldr	r2, [r0, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    ad94:	6894      	ldr	r4, [r2, #8]
    ad96:	2201      	movs	r2, #1
    ad98:	a901      	add	r1, sp, #4
    ad9a:	47a0      	blx	r4
}
    ad9c:	b004      	add	sp, #16
    ad9e:	bd10      	pop	{r4, pc}

0000ada0 <i2c_write_read>:
 * @retval negative on error.
 */
static inline int i2c_write_read(const struct device *dev, uint16_t addr,
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
    ada0:	b510      	push	{r4, lr}
    ada2:	b086      	sub	sp, #24
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
    ada4:	9200      	str	r2, [sp, #0]
	msg[0].len = num_write;
    ada6:	9301      	str	r3, [sp, #4]
	msg[0].flags = I2C_MSG_WRITE;
    ada8:	2300      	movs	r3, #0
    adaa:	f88d 3008 	strb.w	r3, [sp, #8]

	msg[1].buf = (uint8_t *)read_buf;
    adae:	9b08      	ldr	r3, [sp, #32]
    adb0:	9303      	str	r3, [sp, #12]
	msg[1].len = num_read;
    adb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    adb4:	9304      	str	r3, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    adb6:	2307      	movs	r3, #7
    adb8:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct i2c_driver_api *api =
    adbc:	6883      	ldr	r3, [r0, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    adbe:	689c      	ldr	r4, [r3, #8]
    adc0:	460b      	mov	r3, r1
    adc2:	2202      	movs	r2, #2
    adc4:	4669      	mov	r1, sp
    adc6:	47a0      	blx	r4

	return i2c_transfer(dev, msg, 2, addr);
}
    adc8:	b006      	add	sp, #24
    adca:	bd10      	pop	{r4, pc}

0000adcc <i2c_burst_read_dt>:
 */
static inline int i2c_burst_read_dt(const struct i2c_dt_spec *spec,
				    uint8_t start_addr,
				    uint8_t *buf,
				    uint32_t num_bytes)
{
    adcc:	b500      	push	{lr}
    adce:	b085      	sub	sp, #20
	return i2c_burst_read(spec->bus, spec->addr,
    add0:	f88d 100f 	strb.w	r1, [sp, #15]
	return i2c_write_read(dev, dev_addr,
    add4:	9301      	str	r3, [sp, #4]
    add6:	9200      	str	r2, [sp, #0]
    add8:	2301      	movs	r3, #1
    adda:	f10d 020f 	add.w	r2, sp, #15
    adde:	8881      	ldrh	r1, [r0, #4]
    ade0:	6800      	ldr	r0, [r0, #0]
    ade2:	f7ff ffdd 	bl	ada0 <i2c_write_read>
			      start_addr, buf, num_bytes);
}
    ade6:	b005      	add	sp, #20
    ade8:	f85d fb04 	ldr.w	pc, [sp], #4

0000adec <i2c_reg_write_byte_dt>:
 *
 * @return a value from i2c_reg_write_byte()
 */
static inline int i2c_reg_write_byte_dt(const struct i2c_dt_spec *spec,
					uint8_t reg_addr, uint8_t value)
{
    adec:	b500      	push	{lr}
    adee:	b083      	sub	sp, #12
	uint8_t tx_buf[2] = {reg_addr, value};
    adf0:	f88d 1004 	strb.w	r1, [sp, #4]
    adf4:	f88d 2005 	strb.w	r2, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    adf8:	8883      	ldrh	r3, [r0, #4]
    adfa:	2202      	movs	r2, #2
    adfc:	a901      	add	r1, sp, #4
    adfe:	6800      	ldr	r0, [r0, #0]
    ae00:	f7ff ffc0 	bl	ad84 <i2c_write>
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
}
    ae04:	b003      	add	sp, #12
    ae06:	f85d fb04 	ldr.w	pc, [sp], #4

0000ae0a <bme680_reg_read_i2c>:
	return device_is_ready(bus->i2c.bus) ? 0 : -ENODEV;
}

static int bme680_reg_read_i2c(const struct device *dev,
			       uint8_t start, uint8_t *buf, int size)
{
    ae0a:	b508      	push	{r3, lr}
	const struct bme680_config *config = dev->config;

	return i2c_burst_read_dt(&config->bus.i2c, start, buf, size);
    ae0c:	6840      	ldr	r0, [r0, #4]
    ae0e:	f7ff ffdd 	bl	adcc <i2c_burst_read_dt>
}
    ae12:	bd08      	pop	{r3, pc}

0000ae14 <bme680_reg_write_i2c>:

static int bme680_reg_write_i2c(const struct device *dev,
				uint8_t reg, uint8_t val)
{
    ae14:	b508      	push	{r3, lr}
	const struct bme680_config *config = dev->config;

	return i2c_reg_write_byte_dt(&config->bus.i2c, reg, val);
    ae16:	6840      	ldr	r0, [r0, #4]
    ae18:	f7ff ffe8 	bl	adec <i2c_reg_write_byte_dt>
}
    ae1c:	bd08      	pop	{r3, pc}

0000ae1e <bme680_bus_check_i2c>:
{
    ae1e:	b508      	push	{r3, lr}
	return device_is_ready(bus->i2c.bus) ? 0 : -ENODEV;
    ae20:	6800      	ldr	r0, [r0, #0]
    ae22:	f000 fea2 	bl	bb6a <z_device_is_ready>
    ae26:	b108      	cbz	r0, ae2c <bme680_bus_check_i2c+0xe>
    ae28:	2000      	movs	r0, #0
}
    ae2a:	bd08      	pop	{r3, pc}
	return device_is_ready(bus->i2c.bus) ? 0 : -ENODEV;
    ae2c:	f06f 0012 	mvn.w	r0, #18
    ae30:	e7fb      	b.n	ae2a <bme680_bus_check_i2c+0xc>

0000ae32 <i2c_write>:
{
    ae32:	b510      	push	{r4, lr}
    ae34:	b084      	sub	sp, #16
	msg.buf = (uint8_t *)buf;
    ae36:	9101      	str	r1, [sp, #4]
	msg.len = num_bytes;
    ae38:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    ae3a:	2202      	movs	r2, #2
    ae3c:	f88d 200c 	strb.w	r2, [sp, #12]
	const struct i2c_driver_api *api =
    ae40:	6882      	ldr	r2, [r0, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    ae42:	6894      	ldr	r4, [r2, #8]
    ae44:	2201      	movs	r2, #1
    ae46:	a901      	add	r1, sp, #4
    ae48:	47a0      	blx	r4
}
    ae4a:	b004      	add	sp, #16
    ae4c:	bd10      	pop	{r4, pc}

0000ae4e <i2c_write_read>:
{
    ae4e:	b510      	push	{r4, lr}
    ae50:	b086      	sub	sp, #24
	msg[0].buf = (uint8_t *)write_buf;
    ae52:	9200      	str	r2, [sp, #0]
	msg[0].len = num_write;
    ae54:	9301      	str	r3, [sp, #4]
	msg[0].flags = I2C_MSG_WRITE;
    ae56:	2300      	movs	r3, #0
    ae58:	f88d 3008 	strb.w	r3, [sp, #8]
	msg[1].buf = (uint8_t *)read_buf;
    ae5c:	9b08      	ldr	r3, [sp, #32]
    ae5e:	9303      	str	r3, [sp, #12]
	msg[1].len = num_read;
    ae60:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ae62:	9304      	str	r3, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    ae64:	2307      	movs	r3, #7
    ae66:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct i2c_driver_api *api =
    ae6a:	6883      	ldr	r3, [r0, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    ae6c:	689c      	ldr	r4, [r3, #8]
    ae6e:	460b      	mov	r3, r1
    ae70:	2202      	movs	r2, #2
    ae72:	4669      	mov	r1, sp
    ae74:	47a0      	blx	r4
}
    ae76:	b006      	add	sp, #24
    ae78:	bd10      	pop	{r4, pc}

0000ae7a <i2c_burst_read_dt>:
{
    ae7a:	b500      	push	{lr}
    ae7c:	b085      	sub	sp, #20
	return i2c_burst_read(spec->bus, spec->addr,
    ae7e:	f88d 100f 	strb.w	r1, [sp, #15]
	return i2c_write_read(dev, dev_addr,
    ae82:	9301      	str	r3, [sp, #4]
    ae84:	9200      	str	r2, [sp, #0]
    ae86:	2301      	movs	r3, #1
    ae88:	f10d 020f 	add.w	r2, sp, #15
    ae8c:	8881      	ldrh	r1, [r0, #4]
    ae8e:	6800      	ldr	r0, [r0, #0]
    ae90:	f7ff ffdd 	bl	ae4e <i2c_write_read>
}
    ae94:	b005      	add	sp, #20
    ae96:	f85d fb04 	ldr.w	pc, [sp], #4

0000ae9a <i2c_reg_read_byte_dt>:
{
    ae9a:	b500      	push	{lr}
    ae9c:	b085      	sub	sp, #20
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
    ae9e:	f88d 100f 	strb.w	r1, [sp, #15]
	return i2c_write_read(dev, dev_addr,
    aea2:	2301      	movs	r3, #1
    aea4:	9301      	str	r3, [sp, #4]
    aea6:	9200      	str	r2, [sp, #0]
    aea8:	f10d 020f 	add.w	r2, sp, #15
    aeac:	8881      	ldrh	r1, [r0, #4]
    aeae:	6800      	ldr	r0, [r0, #0]
    aeb0:	f7ff ffcd 	bl	ae4e <i2c_write_read>
}
    aeb4:	b005      	add	sp, #20
    aeb6:	f85d fb04 	ldr.w	pc, [sp], #4

0000aeba <lis3mdl_convert>:
{
    aeba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aebc:	4604      	mov	r4, r0
    aebe:	4615      	mov	r5, r2
	val->val1 = raw_val / divider;
    aec0:	fb91 f3f2 	sdiv	r3, r1, r2
    aec4:	6003      	str	r3, [r0, #0]
	val->val2 = (((int64_t)raw_val % divider) * 1000000L) / divider;
    aec6:	2600      	movs	r6, #0
    aec8:	4633      	mov	r3, r6
    aeca:	4608      	mov	r0, r1
    aecc:	17c9      	asrs	r1, r1, #31
    aece:	f7f5 fce5 	bl	89c <__aeabi_ldivmod>
    aed2:	461f      	mov	r7, r3
    aed4:	4613      	mov	r3, r2
    aed6:	ea4f 1e47 	mov.w	lr, r7, lsl #5
    aeda:	ea4e 6ed2 	orr.w	lr, lr, r2, lsr #27
    aede:	ea4f 1c42 	mov.w	ip, r2, lsl #5
    aee2:	ebbc 0c02 	subs.w	ip, ip, r2
    aee6:	eb6e 0207 	sbc.w	r2, lr, r7
    aeea:	0252      	lsls	r2, r2, #9
    aeec:	ea42 52dc 	orr.w	r2, r2, ip, lsr #23
    aef0:	ea4f 2c4c 	mov.w	ip, ip, lsl #9
    aef4:	eb1c 0c03 	adds.w	ip, ip, r3
    aef8:	eb42 0207 	adc.w	r2, r2, r7
    aefc:	0191      	lsls	r1, r2, #6
    aefe:	ea41 619c 	orr.w	r1, r1, ip, lsr #26
    af02:	ea4f 108c 	mov.w	r0, ip, lsl #6
    af06:	ebb0 000c 	subs.w	r0, r0, ip
    af0a:	eb61 0102 	sbc.w	r1, r1, r2
    af0e:	18c0      	adds	r0, r0, r3
    af10:	462a      	mov	r2, r5
    af12:	4633      	mov	r3, r6
    af14:	eb41 0107 	adc.w	r1, r1, r7
    af18:	f7f5 fcc0 	bl	89c <__aeabi_ldivmod>
    af1c:	6060      	str	r0, [r4, #4]
}
    af1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000af20 <lis3mdl_channel_get>:
{
    af20:	b538      	push	{r3, r4, r5, lr}
    af22:	4614      	mov	r4, r2
	struct lis3mdl_data *drv_data = dev->data;
    af24:	6905      	ldr	r5, [r0, #16]
	if (chan == SENSOR_CHAN_MAGN_XYZ) {
    af26:	290b      	cmp	r1, #11
    af28:	d007      	beq.n	af3a <lis3mdl_channel_get+0x1a>
	} else if (chan == SENSOR_CHAN_MAGN_X) {
    af2a:	3908      	subs	r1, #8
    af2c:	2904      	cmp	r1, #4
    af2e:	d843      	bhi.n	afb8 <lis3mdl_channel_get+0x98>
    af30:	e8df f001 	tbb	[pc, r1]
    af34:	422e251c 	.word	0x422e251c
    af38:	37          	.byte	0x37
    af39:	00          	.byte	0x00
		lis3mdl_convert(val, drv_data->x_sample,
    af3a:	f641 22ba 	movw	r2, #6842	; 0x1aba
    af3e:	f9b5 1000 	ldrsh.w	r1, [r5]
    af42:	4620      	mov	r0, r4
    af44:	f7ff ffb9 	bl	aeba <lis3mdl_convert>
		lis3mdl_convert(val + 1, drv_data->y_sample,
    af48:	f641 22ba 	movw	r2, #6842	; 0x1aba
    af4c:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    af50:	f104 0008 	add.w	r0, r4, #8
    af54:	f7ff ffb1 	bl	aeba <lis3mdl_convert>
		lis3mdl_convert(val + 2, drv_data->z_sample,
    af58:	f641 22ba 	movw	r2, #6842	; 0x1aba
    af5c:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
    af60:	f104 0010 	add.w	r0, r4, #16
    af64:	f7ff ffa9 	bl	aeba <lis3mdl_convert>
	return 0;
    af68:	2000      	movs	r0, #0
}
    af6a:	bd38      	pop	{r3, r4, r5, pc}
		lis3mdl_convert(val, drv_data->x_sample,
    af6c:	f641 22ba 	movw	r2, #6842	; 0x1aba
    af70:	f9b5 1000 	ldrsh.w	r1, [r5]
    af74:	4620      	mov	r0, r4
    af76:	f7ff ffa0 	bl	aeba <lis3mdl_convert>
	return 0;
    af7a:	2000      	movs	r0, #0
    af7c:	e7f5      	b.n	af6a <lis3mdl_channel_get+0x4a>
		lis3mdl_convert(val, drv_data->y_sample,
    af7e:	f641 22ba 	movw	r2, #6842	; 0x1aba
    af82:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    af86:	4620      	mov	r0, r4
    af88:	f7ff ff97 	bl	aeba <lis3mdl_convert>
	return 0;
    af8c:	2000      	movs	r0, #0
    af8e:	e7ec      	b.n	af6a <lis3mdl_channel_get+0x4a>
		lis3mdl_convert(val, drv_data->z_sample,
    af90:	f641 22ba 	movw	r2, #6842	; 0x1aba
    af94:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
    af98:	4620      	mov	r0, r4
    af9a:	f7ff ff8e 	bl	aeba <lis3mdl_convert>
	return 0;
    af9e:	2000      	movs	r0, #0
    afa0:	e7e3      	b.n	af6a <lis3mdl_channel_get+0x4a>
		lis3mdl_convert(val, drv_data->temp_sample, 8);
    afa2:	2208      	movs	r2, #8
    afa4:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
    afa8:	4620      	mov	r0, r4
    afaa:	f7ff ff86 	bl	aeba <lis3mdl_convert>
		val->val1 += 25;
    afae:	6823      	ldr	r3, [r4, #0]
    afb0:	3319      	adds	r3, #25
    afb2:	6023      	str	r3, [r4, #0]
	return 0;
    afb4:	2000      	movs	r0, #0
    afb6:	e7d8      	b.n	af6a <lis3mdl_channel_get+0x4a>
	if (chan == SENSOR_CHAN_MAGN_XYZ) {
    afb8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    afbc:	e7d5      	b.n	af6a <lis3mdl_channel_get+0x4a>

0000afbe <lis3mdl_sample_fetch>:
{
    afbe:	b530      	push	{r4, r5, lr}
    afc0:	b083      	sub	sp, #12
	struct lis3mdl_data *drv_data = dev->data;
    afc2:	6904      	ldr	r4, [r0, #16]
	const struct lis3mdl_config *config = dev->config;
    afc4:	6845      	ldr	r5, [r0, #4]
	if (i2c_burst_read_dt(&config->i2c, LIS3MDL_REG_SAMPLE_START,
    afc6:	2308      	movs	r3, #8
    afc8:	466a      	mov	r2, sp
    afca:	2128      	movs	r1, #40	; 0x28
    afcc:	4628      	mov	r0, r5
    afce:	f7ff ff54 	bl	ae7a <i2c_burst_read_dt>
    afd2:	2800      	cmp	r0, #0
    afd4:	db17      	blt.n	b006 <lis3mdl_sample_fetch+0x48>
	if (i2c_burst_read_dt(&config->i2c, LIS3MDL_REG_SAMPLE_START + 6,
    afd6:	2302      	movs	r3, #2
    afd8:	f10d 0206 	add.w	r2, sp, #6
    afdc:	212e      	movs	r1, #46	; 0x2e
    afde:	4628      	mov	r0, r5
    afe0:	f7ff ff4b 	bl	ae7a <i2c_burst_read_dt>
    afe4:	2800      	cmp	r0, #0
    afe6:	db11      	blt.n	b00c <lis3mdl_sample_fetch+0x4e>
	drv_data->x_sample = sys_le16_to_cpu(buf[0]);
    afe8:	f9bd 3000 	ldrsh.w	r3, [sp]
    afec:	8023      	strh	r3, [r4, #0]
	drv_data->y_sample = sys_le16_to_cpu(buf[1]);
    afee:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
    aff2:	8063      	strh	r3, [r4, #2]
	drv_data->z_sample = sys_le16_to_cpu(buf[2]);
    aff4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
    aff8:	80a3      	strh	r3, [r4, #4]
	drv_data->temp_sample = sys_le16_to_cpu(buf[3]);
    affa:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
    affe:	80e3      	strh	r3, [r4, #6]
	return 0;
    b000:	2000      	movs	r0, #0
}
    b002:	b003      	add	sp, #12
    b004:	bd30      	pop	{r4, r5, pc}
		return -EIO;
    b006:	f06f 0004 	mvn.w	r0, #4
    b00a:	e7fa      	b.n	b002 <lis3mdl_sample_fetch+0x44>
		return -EIO;
    b00c:	f06f 0004 	mvn.w	r0, #4
    b010:	e7f7      	b.n	b002 <lis3mdl_sample_fetch+0x44>

0000b012 <i2c_write_read>:
{
    b012:	b510      	push	{r4, lr}
    b014:	b086      	sub	sp, #24
	msg[0].buf = (uint8_t *)write_buf;
    b016:	9200      	str	r2, [sp, #0]
	msg[0].len = num_write;
    b018:	9301      	str	r3, [sp, #4]
	msg[0].flags = I2C_MSG_WRITE;
    b01a:	2300      	movs	r3, #0
    b01c:	f88d 3008 	strb.w	r3, [sp, #8]
	msg[1].buf = (uint8_t *)read_buf;
    b020:	9b08      	ldr	r3, [sp, #32]
    b022:	9303      	str	r3, [sp, #12]
	msg[1].len = num_read;
    b024:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b026:	9304      	str	r3, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    b028:	2307      	movs	r3, #7
    b02a:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct i2c_driver_api *api =
    b02e:	6883      	ldr	r3, [r0, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    b030:	689c      	ldr	r4, [r3, #8]
    b032:	460b      	mov	r3, r1
    b034:	2202      	movs	r2, #2
    b036:	4669      	mov	r1, sp
    b038:	47a0      	blx	r4
}
    b03a:	b006      	add	sp, #24
    b03c:	bd10      	pop	{r4, pc}

0000b03e <i2c_burst_read_dt>:
{
    b03e:	b500      	push	{lr}
    b040:	b085      	sub	sp, #20
	return i2c_burst_read(spec->bus, spec->addr,
    b042:	f88d 100f 	strb.w	r1, [sp, #15]
	return i2c_write_read(dev, dev_addr,
    b046:	9301      	str	r3, [sp, #4]
    b048:	9200      	str	r2, [sp, #0]
    b04a:	2301      	movs	r3, #1
    b04c:	f10d 020f 	add.w	r2, sp, #15
    b050:	8881      	ldrh	r1, [r0, #4]
    b052:	6800      	ldr	r0, [r0, #0]
    b054:	f7ff ffdd 	bl	b012 <i2c_write_read>
}
    b058:	b005      	add	sp, #20
    b05a:	f85d fb04 	ldr.w	pc, [sp], #4

0000b05e <z_impl_gpio_pin_interrupt_configure>:
{
    b05e:	b538      	push	{r3, r4, r5, lr}
	const struct gpio_driver_api *api =
    b060:	6883      	ldr	r3, [r0, #8]
	const struct gpio_driver_data *const data =
    b062:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    b064:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
    b068:	d006      	beq.n	b078 <z_impl_gpio_pin_interrupt_configure+0x1a>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    b06a:	6825      	ldr	r5, [r4, #0]
    b06c:	2401      	movs	r4, #1
    b06e:	408c      	lsls	r4, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    b070:	4225      	tst	r5, r4
    b072:	d001      	beq.n	b078 <z_impl_gpio_pin_interrupt_configure+0x1a>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    b074:	f082 62c0 	eor.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
    b078:	699c      	ldr	r4, [r3, #24]
    b07a:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
    b07e:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
    b082:	47a0      	blx	r4
}
    b084:	bd38      	pop	{r3, r4, r5, pc}

0000b086 <gpio_pin_interrupt_configure_dt>:
{
    b086:	b508      	push	{r3, lr}
    b088:	4603      	mov	r3, r0
    b08a:	460a      	mov	r2, r1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
    b08c:	6800      	ldr	r0, [r0, #0]
    b08e:	7919      	ldrb	r1, [r3, #4]
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    b090:	f7ff ffe5 	bl	b05e <z_impl_gpio_pin_interrupt_configure>
}
    b094:	bd08      	pop	{r3, pc}

0000b096 <z_impl_gpio_pin_configure>:
{
    b096:	b538      	push	{r3, r4, r5, lr}
    b098:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
    b09a:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
    b09c:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    b09e:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    b0a2:	d007      	beq.n	b0b4 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    b0a4:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
    b0a8:	d004      	beq.n	b0b4 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    b0aa:	f012 0f01 	tst.w	r2, #1
    b0ae:	d001      	beq.n	b0b4 <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    b0b0:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    b0b4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    b0b8:	f013 0f01 	tst.w	r3, #1
    b0bc:	d00a      	beq.n	b0d4 <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    b0be:	6823      	ldr	r3, [r4, #0]
    b0c0:	f04f 0c01 	mov.w	ip, #1
    b0c4:	fa0c fc01 	lsl.w	ip, ip, r1
    b0c8:	ea43 030c 	orr.w	r3, r3, ip
    b0cc:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
    b0ce:	682b      	ldr	r3, [r5, #0]
    b0d0:	4798      	blx	r3
}
    b0d2:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    b0d4:	6823      	ldr	r3, [r4, #0]
    b0d6:	f04f 0c01 	mov.w	ip, #1
    b0da:	fa0c fc01 	lsl.w	ip, ip, r1
    b0de:	ea23 030c 	bic.w	r3, r3, ip
    b0e2:	6023      	str	r3, [r4, #0]
    b0e4:	e7f3      	b.n	b0ce <z_impl_gpio_pin_configure+0x38>

0000b0e6 <gpio_pin_configure_dt>:
{
    b0e6:	b508      	push	{r3, lr}
    b0e8:	4603      	mov	r3, r0
    b0ea:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
    b0ec:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    b0ee:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
    b0f0:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    b0f2:	ea42 020c 	orr.w	r2, r2, ip
	return z_impl_gpio_pin_configure(port, pin, flags);
    b0f6:	f7ff ffce 	bl	b096 <z_impl_gpio_pin_configure>
}
    b0fa:	bd08      	pop	{r3, pc}

0000b0fc <gpio_add_callback>:
 *
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
    b0fc:	b508      	push	{r3, lr}
	const struct gpio_driver_api *api =
    b0fe:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    b100:	69db      	ldr	r3, [r3, #28]
    b102:	b113      	cbz	r3, b10a <gpio_add_callback+0xe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    b104:	2201      	movs	r2, #1
    b106:	4798      	blx	r3
}
    b108:	bd08      	pop	{r3, pc}
		return -ENOTSUP;
    b10a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    b10e:	e7fb      	b.n	b108 <gpio_add_callback+0xc>

0000b110 <lis3mdl_thread_cb>:
{
    b110:	b510      	push	{r4, lr}
	struct lis3mdl_data *drv_data = dev->data;
    b112:	6902      	ldr	r2, [r0, #16]
	const struct lis3mdl_config *config = dev->config;
    b114:	6844      	ldr	r4, [r0, #4]
	if (drv_data->data_ready_handler != NULL) {
    b116:	69d3      	ldr	r3, [r2, #28]
    b118:	b10b      	cbz	r3, b11e <lis3mdl_thread_cb+0xe>
		drv_data->data_ready_handler(dev,
    b11a:	6991      	ldr	r1, [r2, #24]
    b11c:	4798      	blx	r3
	gpio_pin_interrupt_configure_dt(&config->irq_gpio,
    b11e:	f04f 61b8 	mov.w	r1, #96468992	; 0x5c00000
    b122:	f104 0008 	add.w	r0, r4, #8
    b126:	f7ff ffae 	bl	b086 <gpio_pin_interrupt_configure_dt>
}
    b12a:	bd10      	pop	{r4, pc}

0000b12c <lis3mdl_work_cb>:
{
    b12c:	b508      	push	{r3, lr}
	lis3mdl_thread_cb(drv_data->dev);
    b12e:	f850 0c18 	ldr.w	r0, [r0, #-24]
    b132:	f7ff ffed 	bl	b110 <lis3mdl_thread_cb>
}
    b136:	bd08      	pop	{r3, pc}

0000b138 <lis3mdl_gpio_callback>:
{
    b138:	b510      	push	{r4, lr}
    b13a:	460c      	mov	r4, r1
	const struct lis3mdl_config *config = drv_data->dev->config;
    b13c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    b140:	6858      	ldr	r0, [r3, #4]
	gpio_pin_interrupt_configure_dt(&config->irq_gpio, GPIO_INT_DISABLE);
    b142:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    b146:	3008      	adds	r0, #8
    b148:	f7ff ff9d 	bl	b086 <gpio_pin_interrupt_configure_dt>
	k_work_submit(&drv_data->work);
    b14c:	f104 0014 	add.w	r0, r4, #20
    b150:	f7fd f894 	bl	827c <k_work_submit>
}
    b154:	bd10      	pop	{r4, pc}

0000b156 <lis3mdl_trigger_set>:
{
    b156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b15a:	b082      	sub	sp, #8
	struct lis3mdl_data *drv_data = dev->data;
    b15c:	6907      	ldr	r7, [r0, #16]
	const struct lis3mdl_config *config = dev->config;
    b15e:	6844      	ldr	r4, [r0, #4]
	if (!config->irq_gpio.port) {
    b160:	68a3      	ldr	r3, [r4, #8]
    b162:	b1eb      	cbz	r3, b1a0 <lis3mdl_trigger_set+0x4a>
    b164:	460e      	mov	r6, r1
    b166:	4615      	mov	r5, r2
	ret = i2c_burst_read_dt(&config->i2c, LIS3MDL_REG_SAMPLE_START,
    b168:	2306      	movs	r3, #6
    b16a:	466a      	mov	r2, sp
    b16c:	2128      	movs	r1, #40	; 0x28
    b16e:	4620      	mov	r0, r4
    b170:	f7ff ff65 	bl	b03e <i2c_burst_read_dt>
	if (ret != 0) {
    b174:	4680      	mov	r8, r0
    b176:	b118      	cbz	r0, b180 <lis3mdl_trigger_set+0x2a>
}
    b178:	4640      	mov	r0, r8
    b17a:	b002      	add	sp, #8
    b17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	gpio_pin_interrupt_configure_dt(&config->irq_gpio, GPIO_INT_DISABLE);
    b180:	3408      	adds	r4, #8
    b182:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    b186:	4620      	mov	r0, r4
    b188:	f7ff ff7d 	bl	b086 <gpio_pin_interrupt_configure_dt>
	drv_data->data_ready_handler = handler;
    b18c:	61fd      	str	r5, [r7, #28]
	if (handler == NULL) {
    b18e:	2d00      	cmp	r5, #0
    b190:	d0f2      	beq.n	b178 <lis3mdl_trigger_set+0x22>
	drv_data->data_ready_trigger = trig;
    b192:	61be      	str	r6, [r7, #24]
	gpio_pin_interrupt_configure_dt(&config->irq_gpio,
    b194:	f04f 61b8 	mov.w	r1, #96468992	; 0x5c00000
    b198:	4620      	mov	r0, r4
    b19a:	f7ff ff74 	bl	b086 <gpio_pin_interrupt_configure_dt>
	return 0;
    b19e:	e7eb      	b.n	b178 <lis3mdl_trigger_set+0x22>
		return -ENOTSUP;
    b1a0:	f06f 0885 	mvn.w	r8, #133	; 0x85
    b1a4:	e7e8      	b.n	b178 <lis3mdl_trigger_set+0x22>

0000b1a6 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    b1a6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b1a8:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    b1aa:	f04f 0120 	mov.w	r1, #32
    b1ae:	f3ef 8311 	mrs	r3, BASEPRI
    b1b2:	f381 8812 	msr	BASEPRI_MAX, r1
    b1b6:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b1ba:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    b1be:	b131      	cbz	r1, b1ce <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b1c0:	2100      	movs	r1, #0
    b1c2:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
    b1c6:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b1ca:	2101      	movs	r1, #1
    b1cc:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
    b1ce:	f383 8811 	msr	BASEPRI, r3
    b1d2:	f3bf 8f6f 	isb	sy
}
    b1d6:	4770      	bx	lr

0000b1d8 <uarte_nrfx_isr_int>:
{
    b1d8:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    b1da:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
    b1dc:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
    b1de:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    b1e2:	f413 7f80 	tst.w	r3, #256	; 0x100
    b1e6:	d002      	beq.n	b1ee <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b1e8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    b1ec:	b9d3      	cbnz	r3, b224 <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b1ee:	686b      	ldr	r3, [r5, #4]
    b1f0:	f013 0f10 	tst.w	r3, #16
    b1f4:	d015      	beq.n	b222 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
    b1f6:	f04f 0220 	mov.w	r2, #32
    b1fa:	f3ef 8311 	mrs	r3, BASEPRI
    b1fe:	f382 8812 	msr	BASEPRI_MAX, r2
    b202:	f3bf 8f6f 	isb	sy
    b206:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    b20a:	b112      	cbz	r2, b212 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    b20c:	2200      	movs	r2, #0
    b20e:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    b212:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    b216:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
    b21a:	f383 8811 	msr	BASEPRI, r3
    b21e:	f3bf 8f6f 	isb	sy
}
    b222:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    b224:	f7ff ffbf 	bl	b1a6 <endtx_isr>
    b228:	e7e1      	b.n	b1ee <uarte_nrfx_isr_int+0x16>

0000b22a <uarte_nrfx_configure>:
{
    b22a:	b570      	push	{r4, r5, r6, lr}
    b22c:	b082      	sub	sp, #8
    b22e:	4605      	mov	r5, r0
    b230:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    b232:	6906      	ldr	r6, [r0, #16]
	switch (cfg->stop_bits) {
    b234:	794b      	ldrb	r3, [r1, #5]
    b236:	2b01      	cmp	r3, #1
    b238:	d006      	beq.n	b248 <uarte_nrfx_configure+0x1e>
    b23a:	2b03      	cmp	r3, #3
    b23c:	d011      	beq.n	b262 <uarte_nrfx_configure+0x38>
    b23e:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
    b242:	4610      	mov	r0, r2
    b244:	b002      	add	sp, #8
    b246:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    b248:	2300      	movs	r3, #0
    b24a:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    b24e:	79a3      	ldrb	r3, [r4, #6]
    b250:	2b03      	cmp	r3, #3
    b252:	d146      	bne.n	b2e2 <uarte_nrfx_configure+0xb8>
	switch (cfg->flow_ctrl) {
    b254:	79e3      	ldrb	r3, [r4, #7]
    b256:	b143      	cbz	r3, b26a <uarte_nrfx_configure+0x40>
    b258:	2b01      	cmp	r3, #1
    b25a:	d015      	beq.n	b288 <uarte_nrfx_configure+0x5e>
    b25c:	f06f 0285 	mvn.w	r2, #133	; 0x85
    b260:	e7ef      	b.n	b242 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    b262:	2310      	movs	r3, #16
    b264:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    b268:	e7f1      	b.n	b24e <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    b26a:	2300      	movs	r3, #0
    b26c:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    b270:	2300      	movs	r3, #0
    b272:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
    b276:	7923      	ldrb	r3, [r4, #4]
    b278:	2b01      	cmp	r3, #1
    b27a:	d02a      	beq.n	b2d2 <uarte_nrfx_configure+0xa8>
    b27c:	2b02      	cmp	r3, #2
    b27e:	d024      	beq.n	b2ca <uarte_nrfx_configure+0xa0>
    b280:	b133      	cbz	r3, b290 <uarte_nrfx_configure+0x66>
    b282:	f06f 0285 	mvn.w	r2, #133	; 0x85
    b286:	e7dc      	b.n	b242 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    b288:	2301      	movs	r3, #1
    b28a:	f88d 3000 	strb.w	r3, [sp]
		break;
    b28e:	e7ef      	b.n	b270 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    b290:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    b294:	6821      	ldr	r1, [r4, #0]
    b296:	4628      	mov	r0, r5
    b298:	f7fa fe0c 	bl	5eb4 <baudrate_set>
    b29c:	4602      	mov	r2, r0
    b29e:	bb18      	cbnz	r0, b2e8 <uarte_nrfx_configure+0xbe>
	const struct uarte_nrfx_config *config = dev->config;
    b2a0:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
    b2a2:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    b2a4:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
    b2a8:	f89d 0002 	ldrb.w	r0, [sp, #2]
    b2ac:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
    b2ae:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    b2b2:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
    b2b4:	f89d 0000 	ldrb.w	r0, [sp]
    b2b8:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    b2ba:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	data->uart_config = *cfg;
    b2be:	3604      	adds	r6, #4
    b2c0:	e894 0003 	ldmia.w	r4, {r0, r1}
    b2c4:	e886 0003 	stmia.w	r6, {r0, r1}
	return 0;
    b2c8:	e7bb      	b.n	b242 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    b2ca:	230e      	movs	r3, #14
    b2cc:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
    b2d0:	e7e0      	b.n	b294 <uarte_nrfx_configure+0x6a>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    b2d2:	230e      	movs	r3, #14
    b2d4:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    b2d8:	f44f 7380 	mov.w	r3, #256	; 0x100
    b2dc:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
    b2e0:	e7d8      	b.n	b294 <uarte_nrfx_configure+0x6a>
		return -ENOTSUP;
    b2e2:	f06f 0285 	mvn.w	r2, #133	; 0x85
    b2e6:	e7ac      	b.n	b242 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    b2e8:	f06f 0285 	mvn.w	r2, #133	; 0x85
    b2ec:	e7a9      	b.n	b242 <uarte_nrfx_configure+0x18>

0000b2ee <uarte_nrfx_config_get>:
{
    b2ee:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    b2f0:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    b2f2:	3304      	adds	r3, #4
    b2f4:	e893 0003 	ldmia.w	r3, {r0, r1}
    b2f8:	e882 0003 	stmia.w	r2, {r0, r1}
}
    b2fc:	2000      	movs	r0, #0
    b2fe:	4770      	bx	lr

0000b300 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    b300:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b302:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    b304:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    b308:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    b30c:	4770      	bx	lr

0000b30e <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    b30e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b310:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    b312:	685b      	ldr	r3, [r3, #4]
    b314:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b318:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    b31c:	b929      	cbnz	r1, b32a <is_tx_ready+0x1c>
    b31e:	b933      	cbnz	r3, b32e <is_tx_ready+0x20>
    b320:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    b324:	b92b      	cbnz	r3, b332 <is_tx_ready+0x24>
    b326:	2000      	movs	r0, #0
    b328:	4770      	bx	lr
    b32a:	2001      	movs	r0, #1
    b32c:	4770      	bx	lr
    b32e:	2000      	movs	r0, #0
    b330:	4770      	bx	lr
    b332:	2001      	movs	r0, #1
}
    b334:	4770      	bx	lr

0000b336 <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    b336:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b338:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    b33a:	2208      	movs	r2, #8
    b33c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    b340:	4770      	bx	lr

0000b342 <tx_start>:
{
    b342:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    b344:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b346:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    b348:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    b34c:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b350:	2200      	movs	r2, #0
    b352:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    b356:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    b35a:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    b35e:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b362:	685b      	ldr	r3, [r3, #4]
    b364:	f013 0f10 	tst.w	r3, #16
    b368:	d102      	bne.n	b370 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b36a:	2301      	movs	r3, #1
    b36c:	60a3      	str	r3, [r4, #8]
}
    b36e:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    b370:	2101      	movs	r1, #1
    b372:	f7ff ffe0 	bl	b336 <uarte_enable>
    p_reg->INTENSET = mask;
    b376:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    b37a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    b37e:	e7f4      	b.n	b36a <tx_start+0x28>

0000b380 <uarte_nrfx_poll_in>:
{
    b380:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    b382:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    b384:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b386:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b388:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    b38c:	b15a      	cbz	r2, b3a6 <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
    b38e:	6962      	ldr	r2, [r4, #20]
    b390:	7812      	ldrb	r2, [r2, #0]
    b392:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b394:	2000      	movs	r0, #0
    b396:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    b39a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b39e:	2201      	movs	r2, #1
    b3a0:	601a      	str	r2, [r3, #0]
}
    b3a2:	bc10      	pop	{r4}
    b3a4:	4770      	bx	lr
		return -1;
    b3a6:	f04f 30ff 	mov.w	r0, #4294967295
    b3aa:	e7fa      	b.n	b3a2 <uarte_nrfx_poll_in+0x22>

0000b3ac <k_msleep>:
{
    b3ac:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    b3ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    b3b2:	17c1      	asrs	r1, r0, #31
    b3b4:	03c9      	lsls	r1, r1, #15
    b3b6:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    b3ba:	03c0      	lsls	r0, r0, #15
    b3bc:	f240 33e7 	movw	r3, #999	; 0x3e7
    b3c0:	18c0      	adds	r0, r0, r3
    b3c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b3c6:	f04f 0300 	mov.w	r3, #0
    b3ca:	f141 0100 	adc.w	r1, r1, #0
    b3ce:	f7f5 fab5 	bl	93c <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    b3d2:	f7fd faf5 	bl	89c0 <z_impl_k_sleep>
}
    b3d6:	bd08      	pop	{r3, pc}

0000b3d8 <wait_tx_ready>:
{
    b3d8:	b570      	push	{r4, r5, r6, lr}
    b3da:	4606      	mov	r6, r0
    b3dc:	e013      	b.n	b406 <wait_tx_ready+0x2e>
		if (res) {
    b3de:	b17d      	cbz	r5, b400 <wait_tx_ready+0x28>
	__asm__ volatile(
    b3e0:	f04f 0320 	mov.w	r3, #32
    b3e4:	f3ef 8411 	mrs	r4, BASEPRI
    b3e8:	f383 8812 	msr	BASEPRI_MAX, r3
    b3ec:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    b3f0:	4630      	mov	r0, r6
    b3f2:	f7ff ff8c 	bl	b30e <is_tx_ready>
    b3f6:	b998      	cbnz	r0, b420 <wait_tx_ready+0x48>
	__asm__ volatile(
    b3f8:	f384 8811 	msr	BASEPRI, r4
    b3fc:	f3bf 8f6f 	isb	sy
			k_msleep(1);
    b400:	2001      	movs	r0, #1
    b402:	f7ff ffd3 	bl	b3ac <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    b406:	2464      	movs	r4, #100	; 0x64
    b408:	4630      	mov	r0, r6
    b40a:	f7ff ff80 	bl	b30e <is_tx_ready>
    b40e:	4605      	mov	r5, r0
    b410:	2800      	cmp	r0, #0
    b412:	d1e4      	bne.n	b3de <wait_tx_ready+0x6>
    b414:	2001      	movs	r0, #1
    b416:	f000 f8ff 	bl	b618 <nrfx_busy_wait>
    b41a:	3c01      	subs	r4, #1
    b41c:	d1f4      	bne.n	b408 <wait_tx_ready+0x30>
    b41e:	e7de      	b.n	b3de <wait_tx_ready+0x6>
}
    b420:	4620      	mov	r0, r4
    b422:	bd70      	pop	{r4, r5, r6, pc}

0000b424 <pinctrl_apply_state>:
{
    b424:	b510      	push	{r4, lr}
    b426:	b082      	sub	sp, #8
    b428:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
    b42a:	aa01      	add	r2, sp, #4
    b42c:	f7ff facd 	bl	a9ca <pinctrl_lookup_state>
	if (ret < 0) {
    b430:	2800      	cmp	r0, #0
    b432:	db05      	blt.n	b440 <pinctrl_apply_state+0x1c>
	return pinctrl_apply_state_direct(config, state);
    b434:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    b436:	6822      	ldr	r2, [r4, #0]
    b438:	7919      	ldrb	r1, [r3, #4]
    b43a:	6818      	ldr	r0, [r3, #0]
    b43c:	f7fa f83a 	bl	54b4 <pinctrl_configure_pins>
}
    b440:	b002      	add	sp, #8
    b442:	bd10      	pop	{r4, pc}

0000b444 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    b444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b448:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    b44a:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    b44c:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    b44e:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    b452:	2100      	movs	r1, #0
    b454:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    b458:	f8c8 0000 	str.w	r0, [r8]

	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    b45c:	68f8      	ldr	r0, [r7, #12]
    b45e:	f7ff ffe1 	bl	b424 <pinctrl_apply_state>
	if (err < 0) {
    b462:	1e05      	subs	r5, r0, #0
    b464:	db35      	blt.n	b4d2 <uarte_instance_init+0x8e>
		return err;
	}

	err = uarte_nrfx_configure(dev, &data->uart_config);
    b466:	f108 0104 	add.w	r1, r8, #4
    b46a:	4620      	mov	r0, r4
    b46c:	f7ff fedd 	bl	b22a <uarte_nrfx_configure>
	if (err) {
    b470:	4605      	mov	r5, r0
    b472:	bb70      	cbnz	r0, b4d2 <uarte_instance_init+0x8e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    b474:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    b476:	f013 0f02 	tst.w	r3, #2
    b47a:	d12d      	bne.n	b4d8 <uarte_instance_init+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    b47c:	2308      	movs	r3, #8
    b47e:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    b482:	7a3b      	ldrb	r3, [r7, #8]
    b484:	b95b      	cbnz	r3, b49e <uarte_instance_init+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b486:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    b48a:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
    b48e:	f8d8 3014 	ldr.w	r3, [r8, #20]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    b492:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    b496:	2301      	movs	r3, #1
    b498:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b49c:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    b49e:	687b      	ldr	r3, [r7, #4]
    b4a0:	f013 0f02 	tst.w	r3, #2
    b4a4:	d103      	bne.n	b4ae <uarte_instance_init+0x6a>
    p_reg->INTENSET = mask;
    b4a6:	f44f 7380 	mov.w	r3, #256	; 0x100
    b4aa:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b4ae:	687b      	ldr	r3, [r7, #4]
    b4b0:	f013 0f10 	tst.w	r3, #16
    b4b4:	d003      	beq.n	b4be <uarte_instance_init+0x7a>
    b4b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    b4ba:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
    b4be:	f8d8 3010 	ldr.w	r3, [r8, #16]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    b4c2:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    b4c6:	2300      	movs	r3, #0
    b4c8:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b4cc:	2301      	movs	r3, #1
    b4ce:	60b3      	str	r3, [r6, #8]
    b4d0:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    b4d2:	4628      	mov	r0, r5
    b4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    b4d8:	4641      	mov	r1, r8
    b4da:	4630      	mov	r0, r6
    b4dc:	f7fa fdc0 	bl	6060 <endtx_stoptx_ppi_init>
		if (err < 0) {
    b4e0:	2800      	cmp	r0, #0
    b4e2:	dacb      	bge.n	b47c <uarte_instance_init+0x38>
			return err;
    b4e4:	4605      	mov	r5, r0
    b4e6:	e7f4      	b.n	b4d2 <uarte_instance_init+0x8e>

0000b4e8 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    b4e8:	b510      	push	{r4, lr}
    b4ea:	4604      	mov	r4, r0
    b4ec:	2200      	movs	r2, #0
    b4ee:	2101      	movs	r1, #1
    b4f0:	2002      	movs	r0, #2
    b4f2:	f7fe ff0d 	bl	a310 <z_arm_irq_priority_set>
    b4f6:	2002      	movs	r0, #2
    b4f8:	f7fe ff05 	bl	a306 <arch_irq_enable>
    b4fc:	2100      	movs	r1, #0
    b4fe:	4620      	mov	r0, r4
    b500:	f7ff ffa0 	bl	b444 <uarte_instance_init>
    b504:	bd10      	pop	{r4, pc}

0000b506 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    b506:	4770      	bx	lr

0000b508 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    b508:	1a40      	subs	r0, r0, r1
}
    b50a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b50e:	4770      	bx	lr

0000b510 <event_check>:
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    b510:	f100 0350 	add.w	r3, r0, #80	; 0x50
    b514:	009b      	lsls	r3, r3, #2
    b516:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b518:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b51c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    b520:	6818      	ldr	r0, [r3, #0]
}
    b522:	3800      	subs	r0, #0
    b524:	bf18      	it	ne
    b526:	2001      	movne	r0, #1
    b528:	4770      	bx	lr

0000b52a <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    b52a:	f100 0350 	add.w	r3, r0, #80	; 0x50
    b52e:	009b      	lsls	r3, r3, #2
    b530:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    b532:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b536:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    b53a:	2200      	movs	r2, #0
    b53c:	601a      	str	r2, [r3, #0]
    b53e:	681b      	ldr	r3, [r3, #0]
}
    b540:	4770      	bx	lr

0000b542 <absolute_time_to_cc>:
}
    b542:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b546:	4770      	bx	lr

0000b548 <full_int_lock>:
	__asm__ volatile(
    b548:	f04f 0320 	mov.w	r3, #32
    b54c:	f3ef 8011 	mrs	r0, BASEPRI
    b550:	f383 8812 	msr	BASEPRI_MAX, r3
    b554:	f3bf 8f6f 	isb	sy
}
    b558:	4770      	bx	lr

0000b55a <full_int_unlock>:
	__asm__ volatile(
    b55a:	f380 8811 	msr	BASEPRI, r0
    b55e:	f3bf 8f6f 	isb	sy
}
    b562:	4770      	bx	lr

0000b564 <compare_set>:
{
    b564:	b5f0      	push	{r4, r5, r6, r7, lr}
    b566:	b083      	sub	sp, #12
    b568:	4604      	mov	r4, r0
    b56a:	4617      	mov	r7, r2
    b56c:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    b56e:	f7fa fe29 	bl	61c4 <compare_int_lock>
    b572:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    b574:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b576:	9301      	str	r3, [sp, #4]
    b578:	9b08      	ldr	r3, [sp, #32]
    b57a:	9300      	str	r3, [sp, #0]
    b57c:	463a      	mov	r2, r7
    b57e:	462b      	mov	r3, r5
    b580:	4620      	mov	r0, r4
    b582:	f7fa feed 	bl	6360 <compare_set_nolocks>
    b586:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    b588:	4631      	mov	r1, r6
    b58a:	4620      	mov	r0, r4
    b58c:	f7fa fe70 	bl	6270 <compare_int_unlock>
}
    b590:	4628      	mov	r0, r5
    b592:	b003      	add	sp, #12
    b594:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b596 <sys_clock_cycle_get_32>:
{
    b596:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    b598:	f7fa fec2 	bl	6320 <z_nrf_rtc_timer_read>
}
    b59c:	bd08      	pop	{r3, pc}

0000b59e <nrf52_errata_36>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    b59e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b5a2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
    b5a6:	2b0d      	cmp	r3, #13
    b5a8:	d001      	beq.n	b5ae <nrf52_errata_36+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    b5aa:	2000      	movs	r0, #0
    b5ac:	4770      	bx	lr
                        return true;
    b5ae:	2001      	movs	r0, #1
    #endif
}
    b5b0:	4770      	bx	lr

0000b5b2 <nrf52_errata_66>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    b5b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b5b6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
    b5ba:	2b0d      	cmp	r3, #13
    b5bc:	d001      	beq.n	b5c2 <nrf52_errata_66+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    b5be:	2000      	movs	r0, #0
    b5c0:	4770      	bx	lr
                        return true;
    b5c2:	2001      	movs	r0, #1
    #endif
}
    b5c4:	4770      	bx	lr

0000b5c6 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    b5c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b5ca:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
    b5ce:	2b0d      	cmp	r3, #13
    b5d0:	d001      	beq.n	b5d6 <nrf52_errata_136+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    b5d2:	2000      	movs	r0, #0
    b5d4:	4770      	bx	lr
                        return true;
    b5d6:	2001      	movs	r0, #1
    #endif
}
    b5d8:	4770      	bx	lr

0000b5da <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    b5da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b5de:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    b5e2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
    b5e6:	2a0d      	cmp	r2, #13
    b5e8:	d001      	beq.n	b5ee <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    b5ea:	2000      	movs	r0, #0
    b5ec:	4770      	bx	lr
                switch(var2)
    b5ee:	b10b      	cbz	r3, b5f4 <nrf52_configuration_249+0x1a>
                        return true;
    b5f0:	2001      	movs	r0, #1
    #endif
}
    b5f2:	4770      	bx	lr
                switch(var2)
    b5f4:	2000      	movs	r0, #0
    b5f6:	4770      	bx	lr

0000b5f8 <nrf52_handle_approtect>:
        Otherwise, the fw branch state is loaded from UICR, emulating the legacy APPROTECT behavior.

         The same mechanism is implemented for SECURE APPROTECT, with the macros
         ENABLE_SECURE_APPROTECT and ENABLE_SECURE_APPROTECT_USER_HANDLING. */
static inline void nrf52_handle_approtect(void)
{
    b5f8:	b508      	push	{r3, lr}
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    b5fa:	f7ff ffee 	bl	b5da <nrf52_configuration_249>
    b5fe:	b138      	cbz	r0, b610 <nrf52_handle_approtect+0x18>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    b600:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    b604:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    b608:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b60c:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            }
        #endif
    #endif
}
    b610:	bd08      	pop	{r3, pc}

0000b612 <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
    b612:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    b614:	4780      	blx	r0
}
    b616:	bd08      	pop	{r3, pc}

0000b618 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    b618:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    b61a:	f000 fd8e 	bl	c13a <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
    b61e:	bd08      	pop	{r3, pc}

0000b620 <nrf_clock_is_running>:
    switch (domain)
    b620:	b119      	cbz	r1, b62a <nrf_clock_is_running+0xa>
    b622:	2901      	cmp	r1, #1
    b624:	d00e      	beq.n	b644 <nrf_clock_is_running+0x24>
    b626:	2000      	movs	r0, #0
    b628:	4770      	bx	lr
            if (p_clk_src != NULL)
    b62a:	b122      	cbz	r2, b636 <nrf_clock_is_running+0x16>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    b62c:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    b630:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    b634:	6013      	str	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    b636:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    b63a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    b63e:	d10e      	bne.n	b65e <nrf_clock_is_running+0x3e>
    return false;
    b640:	2000      	movs	r0, #0
    b642:	4770      	bx	lr
            if (p_clk_src != NULL)
    b644:	b122      	cbz	r2, b650 <nrf_clock_is_running+0x30>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    b646:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    b64a:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    b64e:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    b650:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    b654:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    b658:	d103      	bne.n	b662 <nrf_clock_is_running+0x42>
    return false;
    b65a:	2000      	movs	r0, #0
    b65c:	4770      	bx	lr
                return true;
    b65e:	2001      	movs	r0, #1
    b660:	4770      	bx	lr
                return true;
    b662:	2001      	movs	r0, #1
}
    b664:	4770      	bx	lr

0000b666 <clock_initial_lfclksrc_get>:
}
    b666:	2000      	movs	r0, #0
    b668:	4770      	bx	lr

0000b66a <nrfx_power_clock_irq_init>:
extern "C" {
#endif


__STATIC_INLINE void nrfx_power_clock_irq_init(void)
{
    b66a:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    b66c:	2000      	movs	r0, #0
    b66e:	f7f8 f825 	bl	36bc <arch_irq_is_enabled>
    b672:	b100      	cbz	r0, b676 <nrfx_power_clock_irq_init+0xc>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    }
}
    b674:	bd08      	pop	{r3, pc}
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    b676:	f7fe fe46 	bl	a306 <arch_irq_enable>
}
    b67a:	e7fb      	b.n	b674 <nrfx_power_clock_irq_init+0xa>

0000b67c <clock_stop>:
{
    b67c:	b570      	push	{r4, r5, r6, lr}
    b67e:	b082      	sub	sp, #8
    switch (domain)
    b680:	4606      	mov	r6, r0
    b682:	b118      	cbz	r0, b68c <clock_stop+0x10>
    b684:	2801      	cmp	r0, #1
    b686:	d016      	beq.n	b6b6 <clock_stop+0x3a>
}
    b688:	b002      	add	sp, #8
    b68a:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
    b68c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b690:	2202      	movs	r2, #2
    b692:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b696:	2200      	movs	r2, #0
    b698:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    b69c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b6a0:	2201      	movs	r2, #1
    b6a2:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    b6a4:	2301      	movs	r3, #1
    b6a6:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    b6aa:	429e      	cmp	r6, r3
    b6ac:	d00f      	beq.n	b6ce <clock_stop+0x52>
    b6ae:	2500      	movs	r5, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    b6b0:	f242 7410 	movw	r4, #10000	; 0x2710
    b6b4:	e013      	b.n	b6de <clock_stop+0x62>
    p_reg->INTENCLR = mask;
    b6b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b6ba:	2201      	movs	r2, #1
    b6bc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b6c0:	2100      	movs	r1, #0
    b6c2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    b6c6:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b6ca:	605a      	str	r2, [r3, #4]
}
    b6cc:	e7ea      	b.n	b6a4 <clock_stop+0x28>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    b6ce:	f10d 0507 	add.w	r5, sp, #7
    b6d2:	e7ed      	b.n	b6b0 <clock_stop+0x34>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    b6d4:	2001      	movs	r0, #1
    b6d6:	f7ff ff9f 	bl	b618 <nrfx_busy_wait>
    b6da:	3c01      	subs	r4, #1
    b6dc:	d0d4      	beq.n	b688 <clock_stop+0xc>
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    b6de:	462a      	mov	r2, r5
    b6e0:	4631      	mov	r1, r6
    b6e2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b6e6:	f7ff ff9b 	bl	b620 <nrf_clock_is_running>
    b6ea:	2800      	cmp	r0, #0
    b6ec:	d0cc      	beq.n	b688 <clock_stop+0xc>
    b6ee:	2d00      	cmp	r5, #0
    b6f0:	d0f0      	beq.n	b6d4 <clock_stop+0x58>
    b6f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b6f6:	2b01      	cmp	r3, #1
    b6f8:	d0ec      	beq.n	b6d4 <clock_stop+0x58>
    b6fa:	e7c5      	b.n	b688 <clock_stop+0xc>

0000b6fc <clock_lfclksrc_tweak>:
{
    b6fc:	b538      	push	{r3, r4, r5, lr}
    b6fe:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    b700:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    b702:	2b01      	cmp	r3, #1
    b704:	d002      	beq.n	b70c <clock_lfclksrc_tweak+0x10>
    b706:	b933      	cbnz	r3, b716 <clock_lfclksrc_tweak+0x1a>
    b708:	2301      	movs	r3, #1
    b70a:	e000      	b.n	b70e <clock_lfclksrc_tweak+0x12>
    b70c:	2301      	movs	r3, #1
    if (!is_correct_clk)
    b70e:	461d      	mov	r5, r3
    b710:	b11b      	cbz	r3, b71a <clock_lfclksrc_tweak+0x1e>
}
    b712:	4628      	mov	r0, r5
    b714:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    b716:	2300      	movs	r3, #0
    b718:	e7f9      	b.n	b70e <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    b71a:	2000      	movs	r0, #0
    b71c:	f7ff ffae 	bl	b67c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    b720:	f7ff ffa1 	bl	b666 <clock_initial_lfclksrc_get>
    b724:	6020      	str	r0, [r4, #0]
    b726:	e7f4      	b.n	b712 <clock_lfclksrc_tweak+0x16>

0000b728 <nrfx_clock_enable>:
{
    b728:	b508      	push	{r3, lr}
    nrfx_power_clock_irq_init();
    b72a:	f7ff ff9e 	bl	b66a <nrfx_power_clock_irq_init>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    b72e:	f7ff ff9a 	bl	b666 <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    b732:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b736:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
}
    b73a:	bd08      	pop	{r3, pc}

0000b73c <nrfx_clock_start>:
    switch (domain)
    b73c:	b110      	cbz	r0, b744 <nrfx_clock_start+0x8>
    b73e:	2801      	cmp	r0, #1
    b740:	d040      	beq.n	b7c4 <nrfx_clock_start+0x88>
    b742:	4770      	bx	lr
{
    b744:	b500      	push	{lr}
    b746:	b083      	sub	sp, #12
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    b748:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    b74c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    b750:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    b754:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    b756:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    b75a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    b75e:	d11b      	bne.n	b798 <nrfx_clock_start+0x5c>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    b760:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b764:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    b768:	f013 0f01 	tst.w	r3, #1
    b76c:	d118      	bne.n	b7a0 <nrfx_clock_start+0x64>
                    lfclksrc = clock_initial_lfclksrc_get();
    b76e:	f7ff ff7a 	bl	b666 <clock_initial_lfclksrc_get>
    b772:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
    b774:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b778:	9a01      	ldr	r2, [sp, #4]
    b77a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b77e:	2200      	movs	r2, #0
    b780:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    b784:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    b788:	2202      	movs	r2, #2
    b78a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b78e:	2201      	movs	r2, #1
    b790:	609a      	str	r2, [r3, #8]
}
    b792:	b003      	add	sp, #12
    b794:	f85d fb04 	ldr.w	pc, [sp], #4
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    b798:	a801      	add	r0, sp, #4
    b79a:	f7ff ffaf 	bl	b6fc <clock_lfclksrc_tweak>
    b79e:	e7e9      	b.n	b774 <nrfx_clock_start+0x38>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    b7a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b7a4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    b7a8:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    b7ac:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    b7ae:	a801      	add	r0, sp, #4
    b7b0:	f7ff ffa4 	bl	b6fc <clock_lfclksrc_tweak>
    b7b4:	2800      	cmp	r0, #0
    b7b6:	d0dd      	beq.n	b774 <nrfx_clock_start+0x38>
    p_reg->INTENSET = mask;
    b7b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b7bc:	2202      	movs	r2, #2
    b7be:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    b7c2:	e7e6      	b.n	b792 <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b7c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b7c8:	2200      	movs	r2, #0
    b7ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    b7ce:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    b7d2:	2201      	movs	r2, #1
    b7d4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b7d8:	601a      	str	r2, [r3, #0]
    b7da:	4770      	bx	lr

0000b7dc <nrfx_clock_stop>:
{
    b7dc:	b508      	push	{r3, lr}
    clock_stop(domain);
    b7de:	f7ff ff4d 	bl	b67c <clock_stop>
}
    b7e2:	bd08      	pop	{r3, pc}

0000b7e4 <nrf_gpiote_event_configure>:
{
    b7e4:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    b7e6:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    b7ea:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    b7ee:	f424 344f 	bic.w	r4, r4, #211968	; 0x33c00
    b7f2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    b7f6:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b7fa:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    b7fe:	0212      	lsls	r2, r2, #8
    b800:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    b804:	041b      	lsls	r3, r3, #16
    b806:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b80a:	431a      	orrs	r2, r3
    b80c:	4314      	orrs	r4, r2
    b80e:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
    b812:	bc10      	pop	{r4}
    b814:	4770      	bx	lr

0000b816 <nrf_gpiote_task_configure>:
{
    b816:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    b818:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    b81c:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    b820:	f424 1499 	bic.w	r4, r4, #1253376	; 0x132000
    b824:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
    b828:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b82c:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    b830:	0212      	lsls	r2, r2, #8
    b832:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    b836:	041b      	lsls	r3, r3, #16
    b838:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b83c:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    b83e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    b842:	051b      	lsls	r3, r3, #20
    b844:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    b848:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b84a:	4314      	orrs	r4, r2
    b84c:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
    b850:	bc10      	pop	{r4}
    b852:	4770      	bx	lr

0000b854 <nrf_gpio_cfg_sense_set>:
{
    b854:	b500      	push	{lr}
    b856:	b085      	sub	sp, #20
    b858:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    b85c:	f10d 030f 	add.w	r3, sp, #15
    b860:	9301      	str	r3, [sp, #4]
    b862:	2100      	movs	r1, #0
    b864:	9100      	str	r1, [sp, #0]
    b866:	460b      	mov	r3, r1
    b868:	460a      	mov	r2, r1
    b86a:	f7fb f829 	bl	68c0 <nrf_gpio_reconfigure>
}
    b86e:	b005      	add	sp, #20
    b870:	f85d fb04 	ldr.w	pc, [sp], #4

0000b874 <pin_is_task_output>:
{
    b874:	b510      	push	{r4, lr}
    b876:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    b878:	f7fb f8c0 	bl	69fc <pin_is_output>
    b87c:	b128      	cbz	r0, b88a <pin_is_task_output+0x16>
    b87e:	4620      	mov	r0, r4
    b880:	f7fb f8a6 	bl	69d0 <pin_in_use_by_te>
    b884:	b118      	cbz	r0, b88e <pin_is_task_output+0x1a>
    b886:	2001      	movs	r0, #1
    b888:	e000      	b.n	b88c <pin_is_task_output+0x18>
    b88a:	2000      	movs	r0, #0
}
    b88c:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    b88e:	2000      	movs	r0, #0
    b890:	e7fc      	b.n	b88c <pin_is_task_output+0x18>

0000b892 <pin_is_input>:
{
    b892:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    b894:	f7fb f8b2 	bl	69fc <pin_is_output>
    b898:	f080 0001 	eor.w	r0, r0, #1
}
    b89c:	b2c0      	uxtb	r0, r0
    b89e:	bd08      	pop	{r3, pc}

0000b8a0 <gpiote_polarity_to_trigger>:
}
    b8a0:	4770      	bx	lr

0000b8a2 <gpiote_trigger_to_polarity>:
}
    b8a2:	4770      	bx	lr

0000b8a4 <is_level>:
}
    b8a4:	2803      	cmp	r0, #3
    b8a6:	bf94      	ite	ls
    b8a8:	2000      	movls	r0, #0
    b8aa:	2001      	movhi	r0, #1
    b8ac:	4770      	bx	lr

0000b8ae <latch_pending_read_and_check>:
{
    b8ae:	b510      	push	{r4, lr}
    b8b0:	4604      	mov	r4, r0
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
    b8b2:	4602      	mov	r2, r0
    b8b4:	2102      	movs	r1, #2
    b8b6:	2000      	movs	r0, #0
    b8b8:	f7fb f85e 	bl	6978 <nrf_gpio_latches_read_and_clear>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    b8bc:	2300      	movs	r3, #0
    b8be:	2b01      	cmp	r3, #1
    b8c0:	d804      	bhi.n	b8cc <latch_pending_read_and_check+0x1e>
        if (latch[port_idx])
    b8c2:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    b8c6:	b91a      	cbnz	r2, b8d0 <latch_pending_read_and_check+0x22>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    b8c8:	3301      	adds	r3, #1
    b8ca:	e7f8      	b.n	b8be <latch_pending_read_and_check+0x10>
    return false;
    b8cc:	2000      	movs	r0, #0
}
    b8ce:	bd10      	pop	{r4, pc}
            return true;
    b8d0:	2001      	movs	r0, #1
    b8d2:	e7fc      	b.n	b8ce <latch_pending_read_and_check+0x20>

0000b8d4 <xfer_completeness_check>:
    if (p_cb->bytes_transferred != p_cb->curr_length)
    b8d4:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    b8d6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    b8d8:	429a      	cmp	r2, r3
    b8da:	d007      	beq.n	b8ec <xfer_completeness_check+0x18>
    b8dc:	2300      	movs	r3, #0
    b8de:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    b8e2:	2205      	movs	r2, #5
    b8e4:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
        return false;
    b8e8:	4618      	mov	r0, r3
    b8ea:	4770      	bx	lr
        return true;
    b8ec:	2001      	movs	r0, #1
}
    b8ee:	4770      	bx	lr

0000b8f0 <twi_send_byte>:
{
    b8f0:	4603      	mov	r3, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
    b8f2:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    b8f4:	6a88      	ldr	r0, [r1, #40]	; 0x28
    b8f6:	4282      	cmp	r2, r0
    b8f8:	d205      	bcs.n	b906 <twi_send_byte+0x16>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    b8fa:	6a49      	ldr	r1, [r1, #36]	; 0x24
    b8fc:	5c8a      	ldrb	r2, [r1, r2]
    p_reg->TXD = data;
    b8fe:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    return true;
    b902:	2001      	movs	r0, #1
}
    b904:	4770      	bx	lr
        if (p_cb->curr_tx_no_stop)
    b906:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    b90a:	b930      	cbnz	r0, b91a <twi_send_byte+0x2a>
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    b90c:	6a0a      	ldr	r2, [r1, #32]
    b90e:	f012 0f40 	tst.w	r2, #64	; 0x40
    b912:	d106      	bne.n	b922 <twi_send_byte+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b914:	2001      	movs	r0, #1
    b916:	6158      	str	r0, [r3, #20]
}
    b918:	4770      	bx	lr
    b91a:	2201      	movs	r2, #1
    b91c:	61da      	str	r2, [r3, #28]
            return false;
    b91e:	2000      	movs	r0, #0
    b920:	4770      	bx	lr
    b922:	2201      	movs	r2, #1
    b924:	61da      	str	r2, [r3, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    b926:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
            return false;
    b92a:	4770      	bx	lr

0000b92c <twi_receive_byte>:
{
    b92c:	4684      	mov	ip, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
    b92e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    b930:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    b932:	4293      	cmp	r3, r2
    b934:	d229      	bcs.n	b98a <twi_receive_byte+0x5e>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
    b936:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
    b938:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
    b93c:	54d0      	strb	r0, [r2, r3]
        ++(p_cb->bytes_transferred);
    b93e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    b940:	3301      	adds	r3, #1
    b942:	634b      	str	r3, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    b944:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    b946:	1e50      	subs	r0, r2, #1
    b948:	4283      	cmp	r3, r0
    b94a:	d007      	beq.n	b95c <twi_receive_byte+0x30>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    b94c:	4293      	cmp	r3, r2
    b94e:	d00d      	beq.n	b96c <twi_receive_byte+0x40>
        else if (p_cb->bytes_transferred == p_cb->curr_length && TWI_FLAG_SUSPEND(p_cb->flags))
    b950:	4293      	cmp	r3, r2
    b952:	d011      	beq.n	b978 <twi_receive_byte+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b954:	2001      	movs	r0, #1
    b956:	f8cc 0020 	str.w	r0, [ip, #32]
}
    b95a:	4770      	bx	lr
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    b95c:	6a08      	ldr	r0, [r1, #32]
    b95e:	f010 0f40 	tst.w	r0, #64	; 0x40
    b962:	d1f3      	bne.n	b94c <twi_receive_byte+0x20>
    p_reg->SHORTS = mask;
    b964:	2302      	movs	r3, #2
    b966:	f8cc 3200 	str.w	r3, [ip, #512]	; 0x200
}
    b96a:	e7f3      	b.n	b954 <twi_receive_byte+0x28>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    b96c:	6a08      	ldr	r0, [r1, #32]
    b96e:	f010 0f40 	tst.w	r0, #64	; 0x40
    b972:	d1ed      	bne.n	b950 <twi_receive_byte+0x24>
            return true;
    b974:	2001      	movs	r0, #1
}
    b976:	4770      	bx	lr
        else if (p_cb->bytes_transferred == p_cb->curr_length && TWI_FLAG_SUSPEND(p_cb->flags))
    b978:	6a0b      	ldr	r3, [r1, #32]
    b97a:	f013 0f40 	tst.w	r3, #64	; 0x40
    b97e:	d0e9      	beq.n	b954 <twi_receive_byte+0x28>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
    b980:	2302      	movs	r3, #2
    b982:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
    b986:	2000      	movs	r0, #0
    b988:	4770      	bx	lr
    return true;
    b98a:	2001      	movs	r0, #1
    b98c:	4770      	bx	lr

0000b98e <twi_transfer>:
{
    b98e:	b570      	push	{r4, r5, r6, lr}
    b990:	4604      	mov	r4, r0
    b992:	460d      	mov	r5, r1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b994:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
    b998:	b1cb      	cbz	r3, b9ce <twi_transfer+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b99a:	2300      	movs	r3, #0
    b99c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    b9a0:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
    b9a4:	2601      	movs	r6, #1
    if (p_cb->error)
    b9a6:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    b9aa:	b193      	cbz	r3, b9d2 <twi_transfer+0x44>
    b9ac:	2300      	movs	r3, #0
    b9ae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    b9b2:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    b9b6:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    b9ba:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
    b9be:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    b9c2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    if (stopped)
    b9c6:	2e00      	cmp	r6, #0
    b9c8:	d14c      	bne.n	ba64 <twi_transfer+0xd6>
    return true;
    b9ca:	2001      	movs	r0, #1
}
    b9cc:	bd70      	pop	{r4, r5, r6, pc}
    bool stopped = false;
    b9ce:	2600      	movs	r6, #0
    b9d0:	e7e9      	b.n	b9a6 <twi_transfer+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b9d2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    b9d6:	b14b      	cbz	r3, b9ec <twi_transfer+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b9d8:	2300      	movs	r3, #0
    b9da:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    b9de:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b9e2:	2301      	movs	r3, #1
    b9e4:	6163      	str	r3, [r4, #20]
        p_cb->error = true;
    b9e6:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    b9ea:	e7ec      	b.n	b9c6 <twi_transfer+0x38>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b9ec:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
    b9f0:	b1db      	cbz	r3, ba2a <twi_transfer+0x9c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b9f2:	2300      	movs	r3, #0
    b9f4:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    b9f8:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
    b9fc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    b9fe:	3301      	adds	r3, #1
    ba00:	636b      	str	r3, [r5, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ba02:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    ba06:	b14b      	cbz	r3, ba1c <twi_transfer+0x8e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ba08:	2300      	movs	r3, #0
    ba0a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    ba0e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ba12:	2301      	movs	r3, #1
    ba14:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
    ba16:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    ba1a:	e7d4      	b.n	b9c6 <twi_transfer+0x38>
                if (!twi_send_byte(p_twi, p_cb))
    ba1c:	4629      	mov	r1, r5
    ba1e:	4620      	mov	r0, r4
    ba20:	f7ff ff66 	bl	b8f0 <twi_send_byte>
    ba24:	2800      	cmp	r0, #0
    ba26:	d1ce      	bne.n	b9c6 <twi_transfer+0x38>
    ba28:	e7d0      	b.n	b9cc <twi_transfer+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ba2a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
    ba2e:	2b00      	cmp	r3, #0
    ba30:	d0c9      	beq.n	b9c6 <twi_transfer+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ba32:	2300      	movs	r3, #0
    ba34:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    ba38:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ba3c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    ba40:	b14b      	cbz	r3, ba56 <twi_transfer+0xc8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ba42:	2300      	movs	r3, #0
    ba44:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    ba48:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ba4c:	2301      	movs	r3, #1
    ba4e:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
    ba50:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    ba54:	e7b7      	b.n	b9c6 <twi_transfer+0x38>
                if (!twi_receive_byte(p_twi, p_cb))
    ba56:	4629      	mov	r1, r5
    ba58:	4620      	mov	r0, r4
    ba5a:	f7ff ff67 	bl	b92c <twi_receive_byte>
    ba5e:	2800      	cmp	r0, #0
    ba60:	d1b1      	bne.n	b9c6 <twi_transfer+0x38>
    ba62:	e7b3      	b.n	b9cc <twi_transfer+0x3e>
        p_cb->prev_suspend = TWI_NO_SUSPEND;
    ba64:	2300      	movs	r3, #0
    ba66:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        if (!p_cb->error)
    ba6a:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    ba6e:	b10b      	cbz	r3, ba74 <twi_transfer+0xe6>
        return false;
    ba70:	2000      	movs	r0, #0
    ba72:	e7ab      	b.n	b9cc <twi_transfer+0x3e>
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
    ba74:	4629      	mov	r1, r5
    ba76:	4620      	mov	r0, r4
    ba78:	f7ff ff2c 	bl	b8d4 <xfer_completeness_check>
    ba7c:	f080 0001 	eor.w	r0, r0, #1
    ba80:	f885 002f 	strb.w	r0, [r5, #47]	; 0x2f
    ba84:	e7f4      	b.n	ba70 <twi_transfer+0xe2>

0000ba86 <twi_irq_handler>:
{
    ba86:	b570      	push	{r4, r5, r6, lr}
    ba88:	b086      	sub	sp, #24
    ba8a:	4605      	mov	r5, r0
    ba8c:	460c      	mov	r4, r1
    if (twi_transfer(p_twi, p_cb))
    ba8e:	f7ff ff7e 	bl	b98e <twi_transfer>
    ba92:	2800      	cmp	r0, #0
    ba94:	d15e      	bne.n	bb54 <twi_irq_handler+0xce>
    if (!p_cb->error &&
    ba96:	f894 602f 	ldrb.w	r6, [r4, #47]	; 0x2f
    ba9a:	b926      	cbnz	r6, baa6 <twi_irq_handler+0x20>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
    ba9c:	7b22      	ldrb	r2, [r4, #12]
    ba9e:	1e93      	subs	r3, r2, #2
    baa0:	b2db      	uxtb	r3, r3
    if (!p_cb->error &&
    baa2:	2b01      	cmp	r3, #1
    baa4:	d917      	bls.n	bad6 <twi_irq_handler+0x50>
        event.xfer_desc = p_cb->xfer_desc;
    baa6:	f10d 0c04 	add.w	ip, sp, #4
    baaa:	f104 0e0c 	add.w	lr, r4, #12
    baae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    bab2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    bab6:	f8de 3000 	ldr.w	r3, [lr]
    baba:	f8cc 3000 	str.w	r3, [ip]
        if (p_cb->error)
    babe:	b3c6      	cbz	r6, bb32 <twi_irq_handler+0xac>
    uint32_t error_source = p_reg->ERRORSRC;
    bac0:	f8d5 34c4 	ldr.w	r3, [r5, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    bac4:	f8c5 34c4 	str.w	r3, [r5, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
    bac8:	f013 0f02 	tst.w	r3, #2
    bacc:	d01f      	beq.n	bb0e <twi_irq_handler+0x88>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
    bace:	2301      	movs	r3, #1
    bad0:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_ADDRESS_NACK));
    bad4:	e030      	b.n	bb38 <twi_irq_handler+0xb2>
        p_cb->p_curr_buf == p_cb->xfer_desc.p_primary_buf)
    bad6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    bad8:	69a3      	ldr	r3, [r4, #24]
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
    bada:	4299      	cmp	r1, r3
    badc:	d1e3      	bne.n	baa6 <twi_irq_handler+0x20>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
    bade:	69e3      	ldr	r3, [r4, #28]
    bae0:	6263      	str	r3, [r4, #36]	; 0x24
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
    bae2:	6963      	ldr	r3, [r4, #20]
    bae4:	62a3      	str	r3, [r4, #40]	; 0x28
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    bae6:	6a23      	ldr	r3, [r4, #32]
    bae8:	f3c3 1340 	ubfx	r3, r3, #5, #1
    baec:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
    baf0:	2300      	movs	r3, #0
    baf2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    baf6:	2a03      	cmp	r2, #3
    baf8:	d004      	beq.n	bb04 <twi_irq_handler+0x7e>
            (void)twi_rx_start_transfer(p_twi, p_cb);
    bafa:	4621      	mov	r1, r4
    bafc:	4628      	mov	r0, r5
    bafe:	f7fb fbbf 	bl	7280 <twi_rx_start_transfer>
    bb02:	e027      	b.n	bb54 <twi_irq_handler+0xce>
            (void)twi_tx_start_transfer(p_twi, p_cb);
    bb04:	4621      	mov	r1, r4
    bb06:	4628      	mov	r0, r5
    bb08:	f7fb fb5c 	bl	71c4 <twi_tx_start_transfer>
    bb0c:	e022      	b.n	bb54 <twi_irq_handler+0xce>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
    bb0e:	f013 0f04 	tst.w	r3, #4
    bb12:	d003      	beq.n	bb1c <twi_irq_handler+0x96>
                event.type = NRFX_TWI_EVT_DATA_NACK;
    bb14:	2302      	movs	r3, #2
    bb16:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DATA_NACK));
    bb1a:	e00d      	b.n	bb38 <twi_irq_handler+0xb2>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
    bb1c:	f013 0f01 	tst.w	r3, #1
    bb20:	d003      	beq.n	bb2a <twi_irq_handler+0xa4>
                event.type = NRFX_TWI_EVT_OVERRUN;
    bb22:	2303      	movs	r3, #3
    bb24:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_OVERRUN));
    bb28:	e006      	b.n	bb38 <twi_irq_handler+0xb2>
                event.type = NRFX_TWI_EVT_BUS_ERROR;
    bb2a:	2304      	movs	r3, #4
    bb2c:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_BUS_ERROR));
    bb30:	e002      	b.n	bb38 <twi_irq_handler+0xb2>
            event.type = NRFX_TWI_EVT_DONE;
    bb32:	2300      	movs	r3, #0
    bb34:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    bb38:	2300      	movs	r3, #0
    bb3a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    bb3e:	6a23      	ldr	r3, [r4, #32]
    bb40:	f013 0f04 	tst.w	r3, #4
    bb44:	d002      	beq.n	bb4c <twi_irq_handler+0xc6>
    bb46:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    bb4a:	b11b      	cbz	r3, bb54 <twi_irq_handler+0xce>
            p_cb->handler(&event, p_cb->p_context);
    bb4c:	6823      	ldr	r3, [r4, #0]
    bb4e:	6861      	ldr	r1, [r4, #4]
    bb50:	4668      	mov	r0, sp
    bb52:	4798      	blx	r3
}
    bb54:	b006      	add	sp, #24
    bb56:	bd70      	pop	{r4, r5, r6, pc}

0000bb58 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    bb58:	b508      	push	{r3, lr}
  _DoInit();
    bb5a:	f7fb fd65 	bl	7628 <_DoInit>
}
    bb5e:	bd08      	pop	{r3, pc}

0000bb60 <rtt_init>:
{
    bb60:	b508      	push	{r3, lr}
	SEGGER_RTT_Init();
    bb62:	f7ff fff9 	bl	bb58 <SEGGER_RTT_Init>
}
    bb66:	2000      	movs	r0, #0
    bb68:	bd08      	pop	{r3, pc}

0000bb6a <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    bb6a:	b160      	cbz	r0, bb86 <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    bb6c:	68c3      	ldr	r3, [r0, #12]
    bb6e:	785a      	ldrb	r2, [r3, #1]
    bb70:	f012 0f01 	tst.w	r2, #1
    bb74:	d003      	beq.n	bb7e <z_device_is_ready+0x14>
    bb76:	781b      	ldrb	r3, [r3, #0]
    bb78:	b11b      	cbz	r3, bb82 <z_device_is_ready+0x18>
    bb7a:	2000      	movs	r0, #0
    bb7c:	4770      	bx	lr
    bb7e:	2000      	movs	r0, #0
    bb80:	4770      	bx	lr
    bb82:	2001      	movs	r0, #1
    bb84:	4770      	bx	lr
		return false;
    bb86:	2000      	movs	r0, #0
}
    bb88:	4770      	bx	lr

0000bb8a <z_early_memset>:
{
    bb8a:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    bb8c:	f7fe fca2 	bl	a4d4 <memset>
}
    bb90:	bd08      	pop	{r3, pc}

0000bb92 <z_early_memcpy>:
{
    bb92:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    bb94:	f7fe fc6f 	bl	a476 <memcpy>
}
    bb98:	bd08      	pop	{r3, pc}

0000bb9a <setup_thread_stack>:
{
    bb9a:	b410      	push	{r4}
    bb9c:	4603      	mov	r3, r0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    bb9e:	3207      	adds	r2, #7
    bba0:	f022 0207 	bic.w	r2, r2, #7
    bba4:	f102 0040 	add.w	r0, r2, #64	; 0x40

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    bba8:	f101 0440 	add.w	r4, r1, #64	; 0x40
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    bbac:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    bbb0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    bbb4:	2200      	movs	r2, #0
    bbb6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
    bbba:	4408      	add	r0, r1
    bbbc:	bc10      	pop	{r4}
    bbbe:	4770      	bx	lr

0000bbc0 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    bbc0:	f3ef 8005 	mrs	r0, IPSR
}
    bbc4:	3800      	subs	r0, #0
    bbc6:	bf18      	it	ne
    bbc8:	2001      	movne	r0, #1
    bbca:	4770      	bx	lr

0000bbcc <k_thread_name_get>:
}
    bbcc:	3074      	adds	r0, #116	; 0x74
    bbce:	4770      	bx	lr

0000bbd0 <z_impl_k_thread_start>:
{
    bbd0:	b508      	push	{r3, lr}
	z_sched_start(thread);
    bbd2:	f7fc fd1b 	bl	860c <z_sched_start>
}
    bbd6:	bd08      	pop	{r3, pc}

0000bbd8 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    bbd8:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    bbda:	2400      	movs	r4, #0
    bbdc:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    bbde:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    bbe0:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    bbe2:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    bbe4:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    bbe6:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    bbe8:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    bbea:	bc10      	pop	{r4}
    bbec:	4770      	bx	lr

0000bbee <z_impl_k_thread_create>:
{
    bbee:	b5f0      	push	{r4, r5, r6, r7, lr}
    bbf0:	b087      	sub	sp, #28
    bbf2:	4604      	mov	r4, r0
    bbf4:	9e12      	ldr	r6, [sp, #72]	; 0x48
    bbf6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    bbf8:	2700      	movs	r7, #0
    bbfa:	9705      	str	r7, [sp, #20]
    bbfc:	9f10      	ldr	r7, [sp, #64]	; 0x40
    bbfe:	9704      	str	r7, [sp, #16]
    bc00:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    bc02:	9703      	str	r7, [sp, #12]
    bc04:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    bc06:	9702      	str	r7, [sp, #8]
    bc08:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    bc0a:	9701      	str	r7, [sp, #4]
    bc0c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    bc0e:	9700      	str	r7, [sp, #0]
    bc10:	f7fc f874 	bl	7cfc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    bc14:	f1b5 3fff 	cmp.w	r5, #4294967295
    bc18:	bf08      	it	eq
    bc1a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    bc1e:	d102      	bne.n	bc26 <z_impl_k_thread_create+0x38>
}
    bc20:	4620      	mov	r0, r4
    bc22:	b007      	add	sp, #28
    bc24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
    bc26:	4632      	mov	r2, r6
    bc28:	462b      	mov	r3, r5
    bc2a:	4620      	mov	r0, r4
    bc2c:	f7fc f858 	bl	7ce0 <schedule_new_thread>
    bc30:	e7f6      	b.n	bc20 <z_impl_k_thread_create+0x32>

0000bc32 <z_pm_save_idle_exit>:
{
    bc32:	b508      	push	{r3, lr}
	pm_system_resume();
    bc34:	f7f7 fae8 	bl	3208 <pm_system_resume>
	sys_clock_idle_exit();
    bc38:	f7ff fc65 	bl	b506 <sys_clock_idle_exit>
}
    bc3c:	bd08      	pop	{r3, pc}

0000bc3e <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    bc3e:	4288      	cmp	r0, r1
    bc40:	da00      	bge.n	bc44 <new_prio_for_inheritance+0x6>
    bc42:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    bc44:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    bc48:	db01      	blt.n	bc4e <new_prio_for_inheritance+0x10>
    bc4a:	4608      	mov	r0, r1
    bc4c:	4770      	bx	lr
    bc4e:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    bc52:	4770      	bx	lr

0000bc54 <adjust_owner_prio>:
{
    bc54:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    bc56:	6880      	ldr	r0, [r0, #8]
    bc58:	f990 300e 	ldrsb.w	r3, [r0, #14]
    bc5c:	428b      	cmp	r3, r1
    bc5e:	d101      	bne.n	bc64 <adjust_owner_prio+0x10>
	return false;
    bc60:	2000      	movs	r0, #0
}
    bc62:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    bc64:	f7fc fd28 	bl	86b8 <z_set_prio>
    bc68:	e7fb      	b.n	bc62 <adjust_owner_prio+0xe>

0000bc6a <z_impl_k_mutex_init>:
{
    bc6a:	4603      	mov	r3, r0
	mutex->owner = NULL;
    bc6c:	2000      	movs	r0, #0
    bc6e:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    bc70:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    bc72:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    bc74:	605b      	str	r3, [r3, #4]
}
    bc76:	4770      	bx	lr

0000bc78 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    bc78:	b13a      	cbz	r2, bc8a <z_impl_k_sem_init+0x12>
    bc7a:	428a      	cmp	r2, r1
    bc7c:	d308      	bcc.n	bc90 <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
    bc7e:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    bc80:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    bc82:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    bc84:	6040      	str	r0, [r0, #4]
	return 0;
    bc86:	2000      	movs	r0, #0
    bc88:	4770      	bx	lr
		return -EINVAL;
    bc8a:	f06f 0015 	mvn.w	r0, #21
    bc8e:	4770      	bx	lr
    bc90:	f06f 0015 	mvn.w	r0, #21
}
    bc94:	4770      	bx	lr

0000bc96 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
    bc96:	460b      	mov	r3, r1
    bc98:	b139      	cbz	r1, bcaa <sys_slist_remove+0x14>
	return node->next;
    bc9a:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
    bc9c:	6019      	str	r1, [r3, #0]
	return list->tail;
    bc9e:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    bca0:	428a      	cmp	r2, r1
    bca2:	d009      	beq.n	bcb8 <sys_slist_remove+0x22>
	parent->next = child;
    bca4:	2300      	movs	r3, #0
    bca6:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    bca8:	4770      	bx	lr
	return node->next;
    bcaa:	6813      	ldr	r3, [r2, #0]
	list->head = node;
    bcac:	6003      	str	r3, [r0, #0]
	return list->tail;
    bcae:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    bcb0:	428a      	cmp	r2, r1
    bcb2:	d1f7      	bne.n	bca4 <sys_slist_remove+0xe>
	list->tail = node;
    bcb4:	6043      	str	r3, [r0, #4]
}
    bcb6:	e7f5      	b.n	bca4 <sys_slist_remove+0xe>
	list->tail = node;
    bcb8:	6043      	str	r3, [r0, #4]
}
    bcba:	e7f3      	b.n	bca4 <sys_slist_remove+0xe>

0000bcbc <notify_queue_locked>:
	if (queue != NULL) {
    bcbc:	b130      	cbz	r0, bccc <notify_queue_locked+0x10>
{
    bcbe:	b508      	push	{r3, lr}
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    bcc0:	2200      	movs	r2, #0
    bcc2:	4611      	mov	r1, r2
    bcc4:	30b8      	adds	r0, #184	; 0xb8
    bcc6:	f000 f999 	bl	bffc <z_sched_wake>
}
    bcca:	bd08      	pop	{r3, pc}
	bool rv = false;
    bccc:	2000      	movs	r0, #0
}
    bcce:	4770      	bx	lr

0000bcd0 <submit_to_queue_locked>:
{
    bcd0:	b570      	push	{r4, r5, r6, lr}
    bcd2:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
    bcd4:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    bcd6:	f013 0f02 	tst.w	r3, #2
    bcda:	d122      	bne.n	bd22 <submit_to_queue_locked+0x52>
    bcdc:	4604      	mov	r4, r0
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    bcde:	f013 0f04 	tst.w	r3, #4
    bce2:	d123      	bne.n	bd2c <submit_to_queue_locked+0x5c>
		if (*queuep == NULL) {
    bce4:	680b      	ldr	r3, [r1, #0]
    bce6:	b1ab      	cbz	r3, bd14 <submit_to_queue_locked+0x44>
	return (*flagp & BIT(bit)) != 0U;
    bce8:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    bcea:	f013 0f01 	tst.w	r3, #1
    bcee:	d014      	beq.n	bd1a <submit_to_queue_locked+0x4a>
			*queuep = work->queue;
    bcf0:	68a3      	ldr	r3, [r4, #8]
    bcf2:	602b      	str	r3, [r5, #0]
			ret = 2;
    bcf4:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
    bcf6:	4621      	mov	r1, r4
    bcf8:	6828      	ldr	r0, [r5, #0]
    bcfa:	f7fc f9d9 	bl	80b0 <queue_submit_locked>
		if (rc < 0) {
    bcfe:	2800      	cmp	r0, #0
    bd00:	db11      	blt.n	bd26 <submit_to_queue_locked+0x56>
	*flagp |= BIT(bit);
    bd02:	68e3      	ldr	r3, [r4, #12]
    bd04:	f043 0304 	orr.w	r3, r3, #4
    bd08:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    bd0a:	682b      	ldr	r3, [r5, #0]
    bd0c:	60a3      	str	r3, [r4, #8]
	if (ret <= 0) {
    bd0e:	b136      	cbz	r6, bd1e <submit_to_queue_locked+0x4e>
    bd10:	4630      	mov	r0, r6
	return ret;
    bd12:	e00a      	b.n	bd2a <submit_to_queue_locked+0x5a>
			*queuep = work->queue;
    bd14:	6883      	ldr	r3, [r0, #8]
    bd16:	600b      	str	r3, [r1, #0]
    bd18:	e7e6      	b.n	bce8 <submit_to_queue_locked+0x18>
		ret = 1;
    bd1a:	2601      	movs	r6, #1
    bd1c:	e7eb      	b.n	bcf6 <submit_to_queue_locked+0x26>
    bd1e:	4630      	mov	r0, r6
    bd20:	e001      	b.n	bd26 <submit_to_queue_locked+0x56>
		ret = -EBUSY;
    bd22:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
    bd26:	2300      	movs	r3, #0
    bd28:	602b      	str	r3, [r5, #0]
}
    bd2a:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
    bd2c:	2000      	movs	r0, #0
    bd2e:	e7fa      	b.n	bd26 <submit_to_queue_locked+0x56>

0000bd30 <z_reschedule_unlocked>:
{
    bd30:	b508      	push	{r3, lr}
	__asm__ volatile(
    bd32:	f04f 0320 	mov.w	r3, #32
    bd36:	f3ef 8011 	mrs	r0, BASEPRI
    bd3a:	f383 8812 	msr	BASEPRI_MAX, r3
    bd3e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    bd42:	f000 f848 	bl	bdd6 <z_reschedule_irqlock>
}
    bd46:	bd08      	pop	{r3, pc}

0000bd48 <z_work_submit_to_queue>:
{
    bd48:	b510      	push	{r4, lr}
    bd4a:	b082      	sub	sp, #8
    bd4c:	9001      	str	r0, [sp, #4]
    bd4e:	4608      	mov	r0, r1
    bd50:	f04f 0320 	mov.w	r3, #32
    bd54:	f3ef 8411 	mrs	r4, BASEPRI
    bd58:	f383 8812 	msr	BASEPRI_MAX, r3
    bd5c:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    bd60:	a901      	add	r1, sp, #4
    bd62:	f7ff ffb5 	bl	bcd0 <submit_to_queue_locked>
	__asm__ volatile(
    bd66:	f384 8811 	msr	BASEPRI, r4
    bd6a:	f3bf 8f6f 	isb	sy
}
    bd6e:	b002      	add	sp, #8
    bd70:	bd10      	pop	{r4, pc}

0000bd72 <k_work_submit_to_queue>:
{
    bd72:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
    bd74:	f7ff ffe8 	bl	bd48 <z_work_submit_to_queue>
	if (ret > 0) {
    bd78:	1e04      	subs	r4, r0, #0
    bd7a:	dc01      	bgt.n	bd80 <k_work_submit_to_queue+0xe>
}
    bd7c:	4620      	mov	r0, r4
    bd7e:	bd10      	pop	{r4, pc}
		z_reschedule_unlocked();
    bd80:	f7ff ffd6 	bl	bd30 <z_reschedule_unlocked>
	return ret;
    bd84:	e7fa      	b.n	bd7c <k_work_submit_to_queue+0xa>

0000bd86 <thread_active_elsewhere>:
}
    bd86:	2000      	movs	r0, #0
    bd88:	4770      	bx	lr

0000bd8a <pended_on_thread>:
}
    bd8a:	6880      	ldr	r0, [r0, #8]
    bd8c:	4770      	bx	lr

0000bd8e <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    bd8e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    bd92:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    bd96:	4283      	cmp	r3, r0
    bd98:	d001      	beq.n	bd9e <z_sched_prio_cmp+0x10>
		return b2 - b1;
    bd9a:	1ac0      	subs	r0, r0, r3
    bd9c:	4770      	bx	lr
	return 0;
    bd9e:	2000      	movs	r0, #0
}
    bda0:	4770      	bx	lr

0000bda2 <z_unpend_thread_no_timeout>:
{
    bda2:	b538      	push	{r3, r4, r5, lr}
    bda4:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    bda6:	2300      	movs	r3, #0
	__asm__ volatile(
    bda8:	f04f 0220 	mov.w	r2, #32
    bdac:	f3ef 8511 	mrs	r5, BASEPRI
    bdb0:	f382 8812 	msr	BASEPRI_MAX, r2
    bdb4:	f3bf 8f6f 	isb	sy
    bdb8:	e004      	b.n	bdc4 <z_unpend_thread_no_timeout+0x22>
	__asm__ volatile(
    bdba:	f385 8811 	msr	BASEPRI, r5
    bdbe:	f3bf 8f6f 	isb	sy
    bdc2:	2301      	movs	r3, #1
    bdc4:	b933      	cbnz	r3, bdd4 <z_unpend_thread_no_timeout+0x32>
		if (thread->base.pended_on != NULL) {
    bdc6:	68a3      	ldr	r3, [r4, #8]
    bdc8:	2b00      	cmp	r3, #0
    bdca:	d0f6      	beq.n	bdba <z_unpend_thread_no_timeout+0x18>
			unpend_thread_no_timeout(thread);
    bdcc:	4620      	mov	r0, r4
    bdce:	f000 f824 	bl	be1a <unpend_thread_no_timeout>
    bdd2:	e7f2      	b.n	bdba <z_unpend_thread_no_timeout+0x18>
}
    bdd4:	bd38      	pop	{r3, r4, r5, pc}

0000bdd6 <z_reschedule_irqlock>:
{
    bdd6:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    bdd8:	4603      	mov	r3, r0
    bdda:	b928      	cbnz	r0, bde8 <z_reschedule_irqlock+0x12>
    bddc:	f3ef 8205 	mrs	r2, IPSR
    bde0:	b912      	cbnz	r2, bde8 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    bde2:	f7f7 fc99 	bl	3718 <arch_swap>
	return ret;
    bde6:	e003      	b.n	bdf0 <z_reschedule_irqlock+0x1a>
    bde8:	f383 8811 	msr	BASEPRI, r3
    bdec:	f3bf 8f6f 	isb	sy
}
    bdf0:	bd08      	pop	{r3, pc}

0000bdf2 <z_reschedule_unlocked>:
{
    bdf2:	b508      	push	{r3, lr}
	__asm__ volatile(
    bdf4:	f04f 0320 	mov.w	r3, #32
    bdf8:	f3ef 8011 	mrs	r0, BASEPRI
    bdfc:	f383 8812 	msr	BASEPRI_MAX, r3
    be00:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    be04:	f7ff ffe7 	bl	bdd6 <z_reschedule_irqlock>
}
    be08:	bd08      	pop	{r3, pc}

0000be0a <z_priq_dumb_remove>:
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    be0a:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    be0c:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    be0e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    be10:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    be12:	2300      	movs	r3, #0
    be14:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    be16:	604b      	str	r3, [r1, #4]
}
    be18:	4770      	bx	lr

0000be1a <unpend_thread_no_timeout>:
{
    be1a:	b510      	push	{r4, lr}
    be1c:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    be1e:	f7ff ffb4 	bl	bd8a <pended_on_thread>
    be22:	4621      	mov	r1, r4
    be24:	f7ff fff1 	bl	be0a <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    be28:	7b63      	ldrb	r3, [r4, #13]
    be2a:	f023 0302 	bic.w	r3, r3, #2
    be2e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    be30:	2300      	movs	r3, #0
    be32:	60a3      	str	r3, [r4, #8]
}
    be34:	bd10      	pop	{r4, pc}

0000be36 <z_priq_dumb_best>:
{
    be36:	4603      	mov	r3, r0
	return list->head == list;
    be38:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    be3a:	4283      	cmp	r3, r0
    be3c:	d000      	beq.n	be40 <z_priq_dumb_best+0xa>
}
    be3e:	4770      	bx	lr
	struct k_thread *thread = NULL;
    be40:	2000      	movs	r0, #0
	return thread;
    be42:	e7fc      	b.n	be3e <z_priq_dumb_best+0x8>

0000be44 <z_ready_thread>:
{
    be44:	b538      	push	{r3, r4, r5, lr}
    be46:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    be48:	2300      	movs	r3, #0
    be4a:	f04f 0220 	mov.w	r2, #32
    be4e:	f3ef 8511 	mrs	r5, BASEPRI
    be52:	f382 8812 	msr	BASEPRI_MAX, r2
    be56:	f3bf 8f6f 	isb	sy
    be5a:	e004      	b.n	be66 <z_ready_thread+0x22>
	__asm__ volatile(
    be5c:	f385 8811 	msr	BASEPRI, r5
    be60:	f3bf 8f6f 	isb	sy
    be64:	2301      	movs	r3, #1
    be66:	b943      	cbnz	r3, be7a <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    be68:	4620      	mov	r0, r4
    be6a:	f7ff ff8c 	bl	bd86 <thread_active_elsewhere>
    be6e:	2800      	cmp	r0, #0
    be70:	d1f4      	bne.n	be5c <z_ready_thread+0x18>
			ready_thread(thread);
    be72:	4620      	mov	r0, r4
    be74:	f7fc fb8e 	bl	8594 <ready_thread>
    be78:	e7f0      	b.n	be5c <z_ready_thread+0x18>
}
    be7a:	bd38      	pop	{r3, r4, r5, pc}

0000be7c <z_sched_wake_thread>:
{
    be7c:	b570      	push	{r4, r5, r6, lr}
    be7e:	4604      	mov	r4, r0
    be80:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    be82:	2300      	movs	r3, #0
	__asm__ volatile(
    be84:	f04f 0220 	mov.w	r2, #32
    be88:	f3ef 8511 	mrs	r5, BASEPRI
    be8c:	f382 8812 	msr	BASEPRI_MAX, r2
    be90:	f3bf 8f6f 	isb	sy
    be94:	e007      	b.n	bea6 <z_sched_wake_thread+0x2a>
			ready_thread(thread);
    be96:	4620      	mov	r0, r4
    be98:	f7fc fb7c 	bl	8594 <ready_thread>
	__asm__ volatile(
    be9c:	f385 8811 	msr	BASEPRI, r5
    bea0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    bea4:	2301      	movs	r3, #1
    bea6:	b993      	cbnz	r3, bece <z_sched_wake_thread+0x52>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    bea8:	7b63      	ldrb	r3, [r4, #13]
		if (!killed) {
    beaa:	f013 0f28 	tst.w	r3, #40	; 0x28
    beae:	d1f5      	bne.n	be9c <z_sched_wake_thread+0x20>
			if (thread->base.pended_on != NULL) {
    beb0:	68a3      	ldr	r3, [r4, #8]
    beb2:	b113      	cbz	r3, beba <z_sched_wake_thread+0x3e>
				unpend_thread_no_timeout(thread);
    beb4:	4620      	mov	r0, r4
    beb6:	f7ff ffb0 	bl	be1a <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    beba:	7b63      	ldrb	r3, [r4, #13]
    bebc:	f023 0204 	bic.w	r2, r3, #4
    bec0:	7362      	strb	r2, [r4, #13]
			if (is_timeout) {
    bec2:	2e00      	cmp	r6, #0
    bec4:	d0e7      	beq.n	be96 <z_sched_wake_thread+0x1a>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    bec6:	f023 0314 	bic.w	r3, r3, #20
    beca:	7363      	strb	r3, [r4, #13]
}
    becc:	e7e3      	b.n	be96 <z_sched_wake_thread+0x1a>
}
    bece:	bd70      	pop	{r4, r5, r6, pc}

0000bed0 <z_thread_timeout>:
{
    bed0:	b508      	push	{r3, lr}
	z_sched_wake_thread(thread, true);
    bed2:	2101      	movs	r1, #1
    bed4:	3818      	subs	r0, #24
    bed6:	f7ff ffd1 	bl	be7c <z_sched_wake_thread>
}
    beda:	bd08      	pop	{r3, pc}

0000bedc <unpend_all>:
{
    bedc:	b538      	push	{r3, r4, r5, lr}
    bede:	4605      	mov	r5, r0
	return list->head == list;
    bee0:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bee2:	42a5      	cmp	r5, r4
    bee4:	d00e      	beq.n	bf04 <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    bee6:	b16c      	cbz	r4, bf04 <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
    bee8:	4620      	mov	r0, r4
    beea:	f7ff ff96 	bl	be1a <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    beee:	f104 0018 	add.w	r0, r4, #24
    bef2:	f000 f8e5 	bl	c0c0 <z_abort_timeout>
    bef6:	2300      	movs	r3, #0
    bef8:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
		ready_thread(thread);
    befc:	4620      	mov	r0, r4
    befe:	f7fc fb49 	bl	8594 <ready_thread>
    bf02:	e7ed      	b.n	bee0 <unpend_all+0x4>
}
    bf04:	bd38      	pop	{r3, r4, r5, pc}

0000bf06 <add_to_waitq_locked>:
{
    bf06:	b570      	push	{r4, r5, r6, lr}
    bf08:	4605      	mov	r5, r0
    bf0a:	460e      	mov	r6, r1
	unready_thread(thread);
    bf0c:	f7fc fb9c 	bl	8648 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    bf10:	7b6b      	ldrb	r3, [r5, #13]
    bf12:	f043 0302 	orr.w	r3, r3, #2
    bf16:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    bf18:	b1fe      	cbz	r6, bf5a <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
    bf1a:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    bf1c:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bf1e:	42a6      	cmp	r6, r4
    bf20:	d108      	bne.n	bf34 <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bf22:	2400      	movs	r4, #0
    bf24:	e006      	b.n	bf34 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
    bf26:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    bf28:	606b      	str	r3, [r5, #4]
	node->next = successor;
    bf2a:	602c      	str	r4, [r5, #0]
	prev->next = node;
    bf2c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    bf2e:	6065      	str	r5, [r4, #4]
}
    bf30:	e013      	b.n	bf5a <add_to_waitq_locked+0x54>
    bf32:	2400      	movs	r4, #0
    bf34:	b164      	cbz	r4, bf50 <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    bf36:	4621      	mov	r1, r4
    bf38:	4628      	mov	r0, r5
    bf3a:	f7ff ff28 	bl	bd8e <z_sched_prio_cmp>
    bf3e:	2800      	cmp	r0, #0
    bf40:	dcf1      	bgt.n	bf26 <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    bf42:	2c00      	cmp	r4, #0
    bf44:	d0f6      	beq.n	bf34 <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
    bf46:	6873      	ldr	r3, [r6, #4]
    bf48:	429c      	cmp	r4, r3
    bf4a:	d0f2      	beq.n	bf32 <add_to_waitq_locked+0x2c>
    bf4c:	6824      	ldr	r4, [r4, #0]
    bf4e:	e7f1      	b.n	bf34 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
    bf50:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    bf52:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    bf54:	606b      	str	r3, [r5, #4]
	tail->next = node;
    bf56:	601d      	str	r5, [r3, #0]
	list->tail = node;
    bf58:	6075      	str	r5, [r6, #4]
}
    bf5a:	bd70      	pop	{r4, r5, r6, pc}

0000bf5c <pend_locked>:
{
    bf5c:	b570      	push	{r4, r5, r6, lr}
    bf5e:	4604      	mov	r4, r0
    bf60:	4616      	mov	r6, r2
    bf62:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
    bf64:	f7ff ffcf 	bl	bf06 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
    bf68:	4632      	mov	r2, r6
    bf6a:	462b      	mov	r3, r5
    bf6c:	4620      	mov	r0, r4
    bf6e:	f7fc fa01 	bl	8374 <add_thread_timeout>
}
    bf72:	bd70      	pop	{r4, r5, r6, pc}

0000bf74 <z_unpend1_no_timeout>:
{
    bf74:	b570      	push	{r4, r5, r6, lr}
    bf76:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    bf78:	2300      	movs	r3, #0
	__asm__ volatile(
    bf7a:	f04f 0220 	mov.w	r2, #32
    bf7e:	f3ef 8511 	mrs	r5, BASEPRI
    bf82:	f382 8812 	msr	BASEPRI_MAX, r2
    bf86:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    bf8a:	461c      	mov	r4, r3
    bf8c:	e004      	b.n	bf98 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
    bf8e:	f385 8811 	msr	BASEPRI, r5
    bf92:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    bf96:	2301      	movs	r3, #1
    bf98:	b943      	cbnz	r3, bfac <z_unpend1_no_timeout+0x38>
		thread = _priq_wait_best(&wait_q->waitq);
    bf9a:	4630      	mov	r0, r6
    bf9c:	f7ff ff4b 	bl	be36 <z_priq_dumb_best>
		if (thread != NULL) {
    bfa0:	4604      	mov	r4, r0
    bfa2:	2800      	cmp	r0, #0
    bfa4:	d0f3      	beq.n	bf8e <z_unpend1_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
    bfa6:	f7ff ff38 	bl	be1a <unpend_thread_no_timeout>
    bfaa:	e7f0      	b.n	bf8e <z_unpend1_no_timeout+0x1a>
}
    bfac:	4620      	mov	r0, r4
    bfae:	bd70      	pop	{r4, r5, r6, pc}

0000bfb0 <z_unpend_first_thread>:
{
    bfb0:	b570      	push	{r4, r5, r6, lr}
    bfb2:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    bfb4:	2300      	movs	r3, #0
	__asm__ volatile(
    bfb6:	f04f 0220 	mov.w	r2, #32
    bfba:	f3ef 8511 	mrs	r5, BASEPRI
    bfbe:	f382 8812 	msr	BASEPRI_MAX, r2
    bfc2:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    bfc6:	461c      	mov	r4, r3
    bfc8:	e004      	b.n	bfd4 <z_unpend_first_thread+0x24>
	__asm__ volatile(
    bfca:	f385 8811 	msr	BASEPRI, r5
    bfce:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    bfd2:	2301      	movs	r3, #1
    bfd4:	b963      	cbnz	r3, bff0 <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
    bfd6:	4630      	mov	r0, r6
    bfd8:	f7ff ff2d 	bl	be36 <z_priq_dumb_best>
		if (thread != NULL) {
    bfdc:	4604      	mov	r4, r0
    bfde:	2800      	cmp	r0, #0
    bfe0:	d0f3      	beq.n	bfca <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
    bfe2:	f7ff ff1a 	bl	be1a <unpend_thread_no_timeout>
    bfe6:	f104 0018 	add.w	r0, r4, #24
    bfea:	f000 f869 	bl	c0c0 <z_abort_timeout>
    bfee:	e7ec      	b.n	bfca <z_unpend_first_thread+0x1a>
}
    bff0:	4620      	mov	r0, r4
    bff2:	bd70      	pop	{r4, r5, r6, pc}

0000bff4 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    bff4:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    bff6:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    bff8:	6083      	str	r3, [r0, #8]
}
    bffa:	4770      	bx	lr

0000bffc <z_sched_wake>:
{
    bffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c000:	4606      	mov	r6, r0
    c002:	4688      	mov	r8, r1
    c004:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
    c006:	2300      	movs	r3, #0
	__asm__ volatile(
    c008:	f04f 0220 	mov.w	r2, #32
    c00c:	f3ef 8511 	mrs	r5, BASEPRI
    c010:	f382 8812 	msr	BASEPRI_MAX, r2
    c014:	f3bf 8f6f 	isb	sy
	bool ret = false;
    c018:	4699      	mov	r9, r3
    c01a:	e004      	b.n	c026 <z_sched_wake+0x2a>
	__asm__ volatile(
    c01c:	f385 8811 	msr	BASEPRI, r5
    c020:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    c024:	2301      	movs	r3, #1
    c026:	b9a3      	cbnz	r3, c052 <z_sched_wake+0x56>
		thread = _priq_wait_best(&wait_q->waitq);
    c028:	4630      	mov	r0, r6
    c02a:	f7ff ff04 	bl	be36 <z_priq_dumb_best>
		if (thread != NULL) {
    c02e:	4604      	mov	r4, r0
    c030:	2800      	cmp	r0, #0
    c032:	d0f3      	beq.n	c01c <z_sched_wake+0x20>
    c034:	f8c0 80ac 	str.w	r8, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    c038:	6147      	str	r7, [r0, #20]
			unpend_thread_no_timeout(thread);
    c03a:	f7ff feee 	bl	be1a <unpend_thread_no_timeout>
    c03e:	f104 0018 	add.w	r0, r4, #24
    c042:	f000 f83d 	bl	c0c0 <z_abort_timeout>
			ready_thread(thread);
    c046:	4620      	mov	r0, r4
    c048:	f7fc faa4 	bl	8594 <ready_thread>
			ret = true;
    c04c:	f04f 0901 	mov.w	r9, #1
    c050:	e7e4      	b.n	c01c <z_sched_wake+0x20>
}
    c052:	4648      	mov	r0, r9
    c054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000c058 <remove_timeout>:
{
    c058:	b510      	push	{r4, lr}
    c05a:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    c05c:	f7fc fd50 	bl	8b00 <next>
    c060:	b148      	cbz	r0, c076 <remove_timeout+0x1e>
    c062:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    c064:	6903      	ldr	r3, [r0, #16]
    c066:	6941      	ldr	r1, [r0, #20]
    c068:	6920      	ldr	r0, [r4, #16]
    c06a:	181b      	adds	r3, r3, r0
    c06c:	6960      	ldr	r0, [r4, #20]
    c06e:	eb41 0100 	adc.w	r1, r1, r0
    c072:	6113      	str	r3, [r2, #16]
    c074:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    c076:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    c078:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    c07a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    c07c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    c07e:	2300      	movs	r3, #0
    c080:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    c082:	6063      	str	r3, [r4, #4]
}
    c084:	bd10      	pop	{r4, pc}

0000c086 <next_timeout>:
{
    c086:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    c088:	f7fc fd30 	bl	8aec <first>
    c08c:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    c08e:	f7fc fd43 	bl	8b18 <elapsed>
	if ((to == NULL) ||
    c092:	b17c      	cbz	r4, c0b4 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    c094:	6923      	ldr	r3, [r4, #16]
    c096:	6962      	ldr	r2, [r4, #20]
    c098:	1a1b      	subs	r3, r3, r0
    c09a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    c09e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    c0a2:	f172 0100 	sbcs.w	r1, r2, #0
    c0a6:	da08      	bge.n	c0ba <next_timeout+0x34>
		ret = MAX(0, to->dticks - ticks_elapsed);
    c0a8:	2a00      	cmp	r2, #0
    c0aa:	db01      	blt.n	c0b0 <next_timeout+0x2a>
    c0ac:	4618      	mov	r0, r3
}
    c0ae:	bd10      	pop	{r4, pc}
		ret = MAX(0, to->dticks - ticks_elapsed);
    c0b0:	2300      	movs	r3, #0
    c0b2:	e7fb      	b.n	c0ac <next_timeout+0x26>
		ret = MAX_WAIT;
    c0b4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    c0b8:	e7f9      	b.n	c0ae <next_timeout+0x28>
    c0ba:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return ret;
    c0be:	e7f6      	b.n	c0ae <next_timeout+0x28>

0000c0c0 <z_abort_timeout>:
{
    c0c0:	b570      	push	{r4, r5, r6, lr}
    c0c2:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    c0c4:	2300      	movs	r3, #0
	__asm__ volatile(
    c0c6:	f04f 0220 	mov.w	r2, #32
    c0ca:	f3ef 8611 	mrs	r6, BASEPRI
    c0ce:	f382 8812 	msr	BASEPRI_MAX, r2
    c0d2:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    c0d6:	f06f 0015 	mvn.w	r0, #21
    c0da:	e004      	b.n	c0e6 <z_abort_timeout+0x26>
	__asm__ volatile(
    c0dc:	f386 8811 	msr	BASEPRI, r6
    c0e0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    c0e4:	2301      	movs	r3, #1
    c0e6:	461d      	mov	r5, r3
    c0e8:	b93b      	cbnz	r3, c0fa <z_abort_timeout+0x3a>
	return node->next != NULL;
    c0ea:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    c0ec:	2b00      	cmp	r3, #0
    c0ee:	d0f5      	beq.n	c0dc <z_abort_timeout+0x1c>
			remove_timeout(to);
    c0f0:	4620      	mov	r0, r4
    c0f2:	f7ff ffb1 	bl	c058 <remove_timeout>
			ret = 0;
    c0f6:	4628      	mov	r0, r5
    c0f8:	e7f0      	b.n	c0dc <z_abort_timeout+0x1c>
}
    c0fa:	bd70      	pop	{r4, r5, r6, pc}

0000c0fc <z_get_next_timeout_expiry>:
{
    c0fc:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    c0fe:	2300      	movs	r3, #0
	__asm__ volatile(
    c100:	f04f 0220 	mov.w	r2, #32
    c104:	f3ef 8411 	mrs	r4, BASEPRI
    c108:	f382 8812 	msr	BASEPRI_MAX, r2
    c10c:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    c110:	f04f 30ff 	mov.w	r0, #4294967295
    c114:	e006      	b.n	c124 <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
    c116:	f7ff ffb6 	bl	c086 <next_timeout>
	__asm__ volatile(
    c11a:	f384 8811 	msr	BASEPRI, r4
    c11e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    c122:	2301      	movs	r3, #1
    c124:	2b00      	cmp	r3, #0
    c126:	d0f6      	beq.n	c116 <z_get_next_timeout_expiry+0x1a>
}
    c128:	bd10      	pop	{r4, pc}

0000c12a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    c12a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    c12c:	f7fc fde4 	bl	8cf8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    c130:	bd08      	pop	{r3, pc}

0000c132 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
    c132:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
    c134:	f7fc fde0 	bl	8cf8 <sys_clock_tick_get>
}
    c138:	bd08      	pop	{r3, pc}

0000c13a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    c13a:	b900      	cbnz	r0, c13e <z_impl_k_busy_wait+0x4>
    c13c:	4770      	bx	lr
{
    c13e:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    c140:	f7f8 fcb8 	bl	4ab4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    c144:	bd08      	pop	{r3, pc}

0000c146 <z_reschedule_unlocked>:
{
    c146:	b508      	push	{r3, lr}
	__asm__ volatile(
    c148:	f04f 0320 	mov.w	r3, #32
    c14c:	f3ef 8011 	mrs	r0, BASEPRI
    c150:	f383 8812 	msr	BASEPRI_MAX, r3
    c154:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    c158:	f7ff fe3d 	bl	bdd6 <z_reschedule_irqlock>
}
    c15c:	bd08      	pop	{r3, pc}

0000c15e <k_timer_init>:
	timer->expiry_fn = expiry_fn;
    c15e:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
    c160:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
    c162:	2300      	movs	r3, #0
    c164:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
    c166:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
    c16a:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
    c16c:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
    c16e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
    c170:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
    c172:	6343      	str	r3, [r0, #52]	; 0x34
}
    c174:	4770      	bx	lr

0000c176 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    c176:	b510      	push	{r4, lr}
    c178:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    c17a:	f7ff ffa1 	bl	c0c0 <z_abort_timeout>

	if (inactive) {
    c17e:	b960      	cbnz	r0, c19a <z_impl_k_timer_stop+0x24>
		return;
	}

	if (timer->stop_fn != NULL) {
    c180:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c182:	b10b      	cbz	r3, c188 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    c184:	4620      	mov	r0, r4
    c186:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    c188:	f104 0018 	add.w	r0, r4, #24
    c18c:	f7ff fef2 	bl	bf74 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    c190:	b118      	cbz	r0, c19a <z_impl_k_timer_stop+0x24>
			z_ready_thread(pending_thread);
    c192:	f7ff fe57 	bl	be44 <z_ready_thread>
			z_reschedule_unlocked();
    c196:	f7ff ffd6 	bl	c146 <z_reschedule_unlocked>
		}
	}
}
    c19a:	bd10      	pop	{r4, pc}

0000c19c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    c19c:	4770      	bx	lr
	...
